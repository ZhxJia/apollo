// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_template_meta_schema.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_template_meta_schema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace camera {

namespace {

const ::google::protobuf::Descriptor* Dim_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dim_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectTemplateMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectTemplateMeta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_object_5ftemplate_5fmeta_5fschema_2eproto() {
  protobuf_AddDesc_object_5ftemplate_5fmeta_5fschema_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "object_template_meta_schema.proto");
  GOOGLE_CHECK(file != NULL);
  Dim_descriptor_ = file->message_type(0);
  static const int Dim_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim, l_),
  };
  Dim_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dim_descriptor_,
      Dim::default_instance_,
      Dim_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dim, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dim));
  ObjectTemplate_descriptor_ = file->message_type(1);
  static const int ObjectTemplate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplate, speed_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplate, dim_),
  };
  ObjectTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectTemplate_descriptor_,
      ObjectTemplate::default_instance_,
      ObjectTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectTemplate));
  ObjectTemplateMeta_descriptor_ = file->message_type(2);
  static const int ObjectTemplateMeta_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, unknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, unknown_movable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, unknown_unmovable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, car_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, van_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, truck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, bus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, cyclist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, motorcyclist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, tricyclist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, pedestrian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, trafficcone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, max_dim_change_ratio_),
  };
  ObjectTemplateMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectTemplateMeta_descriptor_,
      ObjectTemplateMeta::default_instance_,
      ObjectTemplateMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectTemplateMeta));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_object_5ftemplate_5fmeta_5fschema_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dim_descriptor_, &Dim::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectTemplate_descriptor_, &ObjectTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectTemplateMeta_descriptor_, &ObjectTemplateMeta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_object_5ftemplate_5fmeta_5fschema_2eproto() {
  delete Dim::default_instance_;
  delete Dim_reflection_;
  delete ObjectTemplate::default_instance_;
  delete ObjectTemplate_reflection_;
  delete ObjectTemplateMeta::default_instance_;
  delete ObjectTemplateMeta_reflection_;
}

void protobuf_AddDesc_object_5ftemplate_5fmeta_5fschema_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!object_template_meta_schema.proto\022\030apo"
    "llo.perception.camera\"&\n\003Dim\022\t\n\001H\030\001 \001(\002\022"
    "\t\n\001W\030\002 \001(\002\022\t\n\001L\030\003 \001(\002\"Q\n\016ObjectTemplate\022"
    "\023\n\013speed_limit\030\001 \001(\002\022*\n\003dim\030\002 \003(\0132\035.apol"
    "lo.perception.camera.Dim\"\216\006\n\022ObjectTempl"
    "ateMeta\0229\n\007unknown\030\001 \001(\0132(.apollo.percep"
    "tion.camera.ObjectTemplate\022A\n\017unknown_mo"
    "vable\030\002 \001(\0132(.apollo.perception.camera.O"
    "bjectTemplate\022C\n\021unknown_unmovable\030\003 \001(\013"
    "2(.apollo.perception.camera.ObjectTempla"
    "te\0225\n\003car\030\004 \001(\0132(.apollo.perception.came"
    "ra.ObjectTemplate\0225\n\003van\030\005 \001(\0132(.apollo."
    "perception.camera.ObjectTemplate\0227\n\005truc"
    "k\030\006 \001(\0132(.apollo.perception.camera.Objec"
    "tTemplate\0225\n\003bus\030\007 \001(\0132(.apollo.percepti"
    "on.camera.ObjectTemplate\0229\n\007cyclist\030\010 \001("
    "\0132(.apollo.perception.camera.ObjectTempl"
    "ate\022>\n\014motorcyclist\030\t \001(\0132(.apollo.perce"
    "ption.camera.ObjectTemplate\022<\n\ntricyclis"
    "t\030\n \001(\0132(.apollo.perception.camera.Objec"
    "tTemplate\022<\n\npedestrian\030\013 \001(\0132(.apollo.p"
    "erception.camera.ObjectTemplate\022=\n\013traff"
    "iccone\030\014 \001(\0132(.apollo.perception.camera."
    "ObjectTemplate\022!\n\024max_dim_change_ratio\030\025"
    " \001(\002:\0030.1", 969);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_template_meta_schema.proto", &protobuf_RegisterTypes);
  Dim::default_instance_ = new Dim();
  ObjectTemplate::default_instance_ = new ObjectTemplate();
  ObjectTemplateMeta::default_instance_ = new ObjectTemplateMeta();
  Dim::default_instance_->InitAsDefaultInstance();
  ObjectTemplate::default_instance_->InitAsDefaultInstance();
  ObjectTemplateMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_object_5ftemplate_5fmeta_5fschema_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_object_5ftemplate_5fmeta_5fschema_2eproto {
  StaticDescriptorInitializer_object_5ftemplate_5fmeta_5fschema_2eproto() {
    protobuf_AddDesc_object_5ftemplate_5fmeta_5fschema_2eproto();
  }
} static_descriptor_initializer_object_5ftemplate_5fmeta_5fschema_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Dim::kHFieldNumber;
const int Dim::kWFieldNumber;
const int Dim::kLFieldNumber;
#endif  // !_MSC_VER

Dim::Dim()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.Dim)
}

void Dim::InitAsDefaultInstance() {
}

Dim::Dim(const Dim& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.Dim)
}

void Dim::SharedCtor() {
  _cached_size_ = 0;
  h_ = 0;
  w_ = 0;
  l_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dim::~Dim() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.Dim)
  SharedDtor();
}

void Dim::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dim::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dim_descriptor_;
}

const Dim& Dim::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_5ftemplate_5fmeta_5fschema_2eproto();
  return *default_instance_;
}

Dim* Dim::default_instance_ = NULL;

Dim* Dim::New() const {
  return new Dim;
}

void Dim::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Dim*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(h_, l_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.Dim)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float H = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_W;
        break;
      }

      // optional float W = 2;
      case 2: {
        if (tag == 21) {
         parse_W:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_L;
        break;
      }

      // optional float L = 3;
      case 3: {
        if (tag == 29) {
         parse_L:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l_)));
          set_has_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.Dim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.Dim)
  return false;
#undef DO_
}

void Dim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.Dim)
  // optional float H = 1;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->h(), output);
  }

  // optional float W = 2;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->w(), output);
  }

  // optional float L = 3;
  if (has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->l(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.Dim)
}

::google::protobuf::uint8* Dim::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.Dim)
  // optional float H = 1;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->h(), target);
  }

  // optional float W = 2;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->w(), target);
  }

  // optional float L = 3;
  if (has_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->l(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.Dim)
  return target;
}

int Dim::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float H = 1;
    if (has_h()) {
      total_size += 1 + 4;
    }

    // optional float W = 2;
    if (has_w()) {
      total_size += 1 + 4;
    }

    // optional float L = 3;
    if (has_l()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dim::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dim* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dim*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dim::MergeFrom(const Dim& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_l()) {
      set_l(from.l());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dim::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dim::CopyFrom(const Dim& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dim::IsInitialized() const {

  return true;
}

void Dim::Swap(Dim* other) {
  if (other != this) {
    std::swap(h_, other->h_);
    std::swap(w_, other->w_);
    std::swap(l_, other->l_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dim::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dim_descriptor_;
  metadata.reflection = Dim_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectTemplate::kSpeedLimitFieldNumber;
const int ObjectTemplate::kDimFieldNumber;
#endif  // !_MSC_VER

ObjectTemplate::ObjectTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.ObjectTemplate)
}

void ObjectTemplate::InitAsDefaultInstance() {
}

ObjectTemplate::ObjectTemplate(const ObjectTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.ObjectTemplate)
}

void ObjectTemplate::SharedCtor() {
  _cached_size_ = 0;
  speed_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectTemplate::~ObjectTemplate() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.ObjectTemplate)
  SharedDtor();
}

void ObjectTemplate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectTemplate_descriptor_;
}

const ObjectTemplate& ObjectTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_5ftemplate_5fmeta_5fschema_2eproto();
  return *default_instance_;
}

ObjectTemplate* ObjectTemplate::default_instance_ = NULL;

ObjectTemplate* ObjectTemplate::New() const {
  return new ObjectTemplate;
}

void ObjectTemplate::Clear() {
  speed_limit_ = 0;
  dim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.ObjectTemplate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float speed_limit = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_limit_)));
          set_has_speed_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dim;
        break;
      }

      // repeated .apollo.perception.camera.Dim dim = 2;
      case 2: {
        if (tag == 18) {
         parse_dim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dim()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dim;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.ObjectTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.ObjectTemplate)
  return false;
#undef DO_
}

void ObjectTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.ObjectTemplate)
  // optional float speed_limit = 1;
  if (has_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speed_limit(), output);
  }

  // repeated .apollo.perception.camera.Dim dim = 2;
  for (int i = 0; i < this->dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dim(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.ObjectTemplate)
}

::google::protobuf::uint8* ObjectTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.ObjectTemplate)
  // optional float speed_limit = 1;
  if (has_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speed_limit(), target);
  }

  // repeated .apollo.perception.camera.Dim dim = 2;
  for (int i = 0; i < this->dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dim(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.ObjectTemplate)
  return target;
}

int ObjectTemplate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float speed_limit = 1;
    if (has_speed_limit()) {
      total_size += 1 + 4;
    }

  }
  // repeated .apollo.perception.camera.Dim dim = 2;
  total_size += 1 * this->dim_size();
  for (int i = 0; i < this->dim_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dim(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectTemplate::MergeFrom(const ObjectTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  dim_.MergeFrom(from.dim_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speed_limit()) {
      set_speed_limit(from.speed_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectTemplate::CopyFrom(const ObjectTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTemplate::IsInitialized() const {

  return true;
}

void ObjectTemplate::Swap(ObjectTemplate* other) {
  if (other != this) {
    std::swap(speed_limit_, other->speed_limit_);
    dim_.Swap(&other->dim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectTemplate_descriptor_;
  metadata.reflection = ObjectTemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectTemplateMeta::kUnknownFieldNumber;
const int ObjectTemplateMeta::kUnknownMovableFieldNumber;
const int ObjectTemplateMeta::kUnknownUnmovableFieldNumber;
const int ObjectTemplateMeta::kCarFieldNumber;
const int ObjectTemplateMeta::kVanFieldNumber;
const int ObjectTemplateMeta::kTruckFieldNumber;
const int ObjectTemplateMeta::kBusFieldNumber;
const int ObjectTemplateMeta::kCyclistFieldNumber;
const int ObjectTemplateMeta::kMotorcyclistFieldNumber;
const int ObjectTemplateMeta::kTricyclistFieldNumber;
const int ObjectTemplateMeta::kPedestrianFieldNumber;
const int ObjectTemplateMeta::kTrafficconeFieldNumber;
const int ObjectTemplateMeta::kMaxDimChangeRatioFieldNumber;
#endif  // !_MSC_VER

ObjectTemplateMeta::ObjectTemplateMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.ObjectTemplateMeta)
}

void ObjectTemplateMeta::InitAsDefaultInstance() {
  unknown_ = const_cast< ::apollo::perception::camera::ObjectTemplate*>(&::apollo::perception::camera::ObjectTemplate::default_instance());
  unknown_movable_ = const_cast< ::apollo::perception::camera::ObjectTemplate*>(&::apollo::perception::camera::ObjectTemplate::default_instance());
  unknown_unmovable_ = const_cast< ::apollo::perception::camera::ObjectTemplate*>(&::apollo::perception::camera::ObjectTemplate::default_instance());
  car_ = const_cast< ::apollo::perception::camera::ObjectTemplate*>(&::apollo::perception::camera::ObjectTemplate::default_instance());
  van_ = const_cast< ::apollo::perception::camera::ObjectTemplate*>(&::apollo::perception::camera::ObjectTemplate::default_instance());
  truck_ = const_cast< ::apollo::perception::camera::ObjectTemplate*>(&::apollo::perception::camera::ObjectTemplate::default_instance());
  bus_ = const_cast< ::apollo::perception::camera::ObjectTemplate*>(&::apollo::perception::camera::ObjectTemplate::default_instance());
  cyclist_ = const_cast< ::apollo::perception::camera::ObjectTemplate*>(&::apollo::perception::camera::ObjectTemplate::default_instance());
  motorcyclist_ = const_cast< ::apollo::perception::camera::ObjectTemplate*>(&::apollo::perception::camera::ObjectTemplate::default_instance());
  tricyclist_ = const_cast< ::apollo::perception::camera::ObjectTemplate*>(&::apollo::perception::camera::ObjectTemplate::default_instance());
  pedestrian_ = const_cast< ::apollo::perception::camera::ObjectTemplate*>(&::apollo::perception::camera::ObjectTemplate::default_instance());
  trafficcone_ = const_cast< ::apollo::perception::camera::ObjectTemplate*>(&::apollo::perception::camera::ObjectTemplate::default_instance());
}

ObjectTemplateMeta::ObjectTemplateMeta(const ObjectTemplateMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.ObjectTemplateMeta)
}

void ObjectTemplateMeta::SharedCtor() {
  _cached_size_ = 0;
  unknown_ = NULL;
  unknown_movable_ = NULL;
  unknown_unmovable_ = NULL;
  car_ = NULL;
  van_ = NULL;
  truck_ = NULL;
  bus_ = NULL;
  cyclist_ = NULL;
  motorcyclist_ = NULL;
  tricyclist_ = NULL;
  pedestrian_ = NULL;
  trafficcone_ = NULL;
  max_dim_change_ratio_ = 0.1f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectTemplateMeta::~ObjectTemplateMeta() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.ObjectTemplateMeta)
  SharedDtor();
}

void ObjectTemplateMeta::SharedDtor() {
  if (this != default_instance_) {
    delete unknown_;
    delete unknown_movable_;
    delete unknown_unmovable_;
    delete car_;
    delete van_;
    delete truck_;
    delete bus_;
    delete cyclist_;
    delete motorcyclist_;
    delete tricyclist_;
    delete pedestrian_;
    delete trafficcone_;
  }
}

void ObjectTemplateMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectTemplateMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectTemplateMeta_descriptor_;
}

const ObjectTemplateMeta& ObjectTemplateMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_5ftemplate_5fmeta_5fschema_2eproto();
  return *default_instance_;
}

ObjectTemplateMeta* ObjectTemplateMeta::default_instance_ = NULL;

ObjectTemplateMeta* ObjectTemplateMeta::New() const {
  return new ObjectTemplateMeta;
}

void ObjectTemplateMeta::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_unknown()) {
      if (unknown_ != NULL) unknown_->::apollo::perception::camera::ObjectTemplate::Clear();
    }
    if (has_unknown_movable()) {
      if (unknown_movable_ != NULL) unknown_movable_->::apollo::perception::camera::ObjectTemplate::Clear();
    }
    if (has_unknown_unmovable()) {
      if (unknown_unmovable_ != NULL) unknown_unmovable_->::apollo::perception::camera::ObjectTemplate::Clear();
    }
    if (has_car()) {
      if (car_ != NULL) car_->::apollo::perception::camera::ObjectTemplate::Clear();
    }
    if (has_van()) {
      if (van_ != NULL) van_->::apollo::perception::camera::ObjectTemplate::Clear();
    }
    if (has_truck()) {
      if (truck_ != NULL) truck_->::apollo::perception::camera::ObjectTemplate::Clear();
    }
    if (has_bus()) {
      if (bus_ != NULL) bus_->::apollo::perception::camera::ObjectTemplate::Clear();
    }
    if (has_cyclist()) {
      if (cyclist_ != NULL) cyclist_->::apollo::perception::camera::ObjectTemplate::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_motorcyclist()) {
      if (motorcyclist_ != NULL) motorcyclist_->::apollo::perception::camera::ObjectTemplate::Clear();
    }
    if (has_tricyclist()) {
      if (tricyclist_ != NULL) tricyclist_->::apollo::perception::camera::ObjectTemplate::Clear();
    }
    if (has_pedestrian()) {
      if (pedestrian_ != NULL) pedestrian_->::apollo::perception::camera::ObjectTemplate::Clear();
    }
    if (has_trafficcone()) {
      if (trafficcone_ != NULL) trafficcone_->::apollo::perception::camera::ObjectTemplate::Clear();
    }
    max_dim_change_ratio_ = 0.1f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectTemplateMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.ObjectTemplateMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.camera.ObjectTemplate unknown = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unknown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_unknown_movable;
        break;
      }

      // optional .apollo.perception.camera.ObjectTemplate unknown_movable = 2;
      case 2: {
        if (tag == 18) {
         parse_unknown_movable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unknown_movable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unknown_unmovable;
        break;
      }

      // optional .apollo.perception.camera.ObjectTemplate unknown_unmovable = 3;
      case 3: {
        if (tag == 26) {
         parse_unknown_unmovable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unknown_unmovable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_car;
        break;
      }

      // optional .apollo.perception.camera.ObjectTemplate car = 4;
      case 4: {
        if (tag == 34) {
         parse_car:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_car()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_van;
        break;
      }

      // optional .apollo.perception.camera.ObjectTemplate van = 5;
      case 5: {
        if (tag == 42) {
         parse_van:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_van()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_truck;
        break;
      }

      // optional .apollo.perception.camera.ObjectTemplate truck = 6;
      case 6: {
        if (tag == 50) {
         parse_truck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truck()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bus;
        break;
      }

      // optional .apollo.perception.camera.ObjectTemplate bus = 7;
      case 7: {
        if (tag == 58) {
         parse_bus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_cyclist;
        break;
      }

      // optional .apollo.perception.camera.ObjectTemplate cyclist = 8;
      case 8: {
        if (tag == 66) {
         parse_cyclist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cyclist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_motorcyclist;
        break;
      }

      // optional .apollo.perception.camera.ObjectTemplate motorcyclist = 9;
      case 9: {
        if (tag == 74) {
         parse_motorcyclist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motorcyclist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_tricyclist;
        break;
      }

      // optional .apollo.perception.camera.ObjectTemplate tricyclist = 10;
      case 10: {
        if (tag == 82) {
         parse_tricyclist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tricyclist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_pedestrian;
        break;
      }

      // optional .apollo.perception.camera.ObjectTemplate pedestrian = 11;
      case 11: {
        if (tag == 90) {
         parse_pedestrian:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pedestrian()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_trafficcone;
        break;
      }

      // optional .apollo.perception.camera.ObjectTemplate trafficcone = 12;
      case 12: {
        if (tag == 98) {
         parse_trafficcone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trafficcone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_max_dim_change_ratio;
        break;
      }

      // optional float max_dim_change_ratio = 21 [default = 0.1];
      case 21: {
        if (tag == 173) {
         parse_max_dim_change_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_dim_change_ratio_)));
          set_has_max_dim_change_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.ObjectTemplateMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.ObjectTemplateMeta)
  return false;
#undef DO_
}

void ObjectTemplateMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.ObjectTemplateMeta)
  // optional .apollo.perception.camera.ObjectTemplate unknown = 1;
  if (has_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unknown(), output);
  }

  // optional .apollo.perception.camera.ObjectTemplate unknown_movable = 2;
  if (has_unknown_movable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unknown_movable(), output);
  }

  // optional .apollo.perception.camera.ObjectTemplate unknown_unmovable = 3;
  if (has_unknown_unmovable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unknown_unmovable(), output);
  }

  // optional .apollo.perception.camera.ObjectTemplate car = 4;
  if (has_car()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->car(), output);
  }

  // optional .apollo.perception.camera.ObjectTemplate van = 5;
  if (has_van()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->van(), output);
  }

  // optional .apollo.perception.camera.ObjectTemplate truck = 6;
  if (has_truck()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->truck(), output);
  }

  // optional .apollo.perception.camera.ObjectTemplate bus = 7;
  if (has_bus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->bus(), output);
  }

  // optional .apollo.perception.camera.ObjectTemplate cyclist = 8;
  if (has_cyclist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->cyclist(), output);
  }

  // optional .apollo.perception.camera.ObjectTemplate motorcyclist = 9;
  if (has_motorcyclist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->motorcyclist(), output);
  }

  // optional .apollo.perception.camera.ObjectTemplate tricyclist = 10;
  if (has_tricyclist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tricyclist(), output);
  }

  // optional .apollo.perception.camera.ObjectTemplate pedestrian = 11;
  if (has_pedestrian()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->pedestrian(), output);
  }

  // optional .apollo.perception.camera.ObjectTemplate trafficcone = 12;
  if (has_trafficcone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->trafficcone(), output);
  }

  // optional float max_dim_change_ratio = 21 [default = 0.1];
  if (has_max_dim_change_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->max_dim_change_ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.ObjectTemplateMeta)
}

::google::protobuf::uint8* ObjectTemplateMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.ObjectTemplateMeta)
  // optional .apollo.perception.camera.ObjectTemplate unknown = 1;
  if (has_unknown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unknown(), target);
  }

  // optional .apollo.perception.camera.ObjectTemplate unknown_movable = 2;
  if (has_unknown_movable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unknown_movable(), target);
  }

  // optional .apollo.perception.camera.ObjectTemplate unknown_unmovable = 3;
  if (has_unknown_unmovable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unknown_unmovable(), target);
  }

  // optional .apollo.perception.camera.ObjectTemplate car = 4;
  if (has_car()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->car(), target);
  }

  // optional .apollo.perception.camera.ObjectTemplate van = 5;
  if (has_van()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->van(), target);
  }

  // optional .apollo.perception.camera.ObjectTemplate truck = 6;
  if (has_truck()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->truck(), target);
  }

  // optional .apollo.perception.camera.ObjectTemplate bus = 7;
  if (has_bus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->bus(), target);
  }

  // optional .apollo.perception.camera.ObjectTemplate cyclist = 8;
  if (has_cyclist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->cyclist(), target);
  }

  // optional .apollo.perception.camera.ObjectTemplate motorcyclist = 9;
  if (has_motorcyclist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->motorcyclist(), target);
  }

  // optional .apollo.perception.camera.ObjectTemplate tricyclist = 10;
  if (has_tricyclist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tricyclist(), target);
  }

  // optional .apollo.perception.camera.ObjectTemplate pedestrian = 11;
  if (has_pedestrian()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->pedestrian(), target);
  }

  // optional .apollo.perception.camera.ObjectTemplate trafficcone = 12;
  if (has_trafficcone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->trafficcone(), target);
  }

  // optional float max_dim_change_ratio = 21 [default = 0.1];
  if (has_max_dim_change_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->max_dim_change_ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.ObjectTemplateMeta)
  return target;
}

int ObjectTemplateMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.perception.camera.ObjectTemplate unknown = 1;
    if (has_unknown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unknown());
    }

    // optional .apollo.perception.camera.ObjectTemplate unknown_movable = 2;
    if (has_unknown_movable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unknown_movable());
    }

    // optional .apollo.perception.camera.ObjectTemplate unknown_unmovable = 3;
    if (has_unknown_unmovable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unknown_unmovable());
    }

    // optional .apollo.perception.camera.ObjectTemplate car = 4;
    if (has_car()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->car());
    }

    // optional .apollo.perception.camera.ObjectTemplate van = 5;
    if (has_van()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->van());
    }

    // optional .apollo.perception.camera.ObjectTemplate truck = 6;
    if (has_truck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->truck());
    }

    // optional .apollo.perception.camera.ObjectTemplate bus = 7;
    if (has_bus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bus());
    }

    // optional .apollo.perception.camera.ObjectTemplate cyclist = 8;
    if (has_cyclist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cyclist());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .apollo.perception.camera.ObjectTemplate motorcyclist = 9;
    if (has_motorcyclist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motorcyclist());
    }

    // optional .apollo.perception.camera.ObjectTemplate tricyclist = 10;
    if (has_tricyclist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tricyclist());
    }

    // optional .apollo.perception.camera.ObjectTemplate pedestrian = 11;
    if (has_pedestrian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pedestrian());
    }

    // optional .apollo.perception.camera.ObjectTemplate trafficcone = 12;
    if (has_trafficcone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trafficcone());
    }

    // optional float max_dim_change_ratio = 21 [default = 0.1];
    if (has_max_dim_change_ratio()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectTemplateMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectTemplateMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectTemplateMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectTemplateMeta::MergeFrom(const ObjectTemplateMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown()) {
      mutable_unknown()->::apollo::perception::camera::ObjectTemplate::MergeFrom(from.unknown());
    }
    if (from.has_unknown_movable()) {
      mutable_unknown_movable()->::apollo::perception::camera::ObjectTemplate::MergeFrom(from.unknown_movable());
    }
    if (from.has_unknown_unmovable()) {
      mutable_unknown_unmovable()->::apollo::perception::camera::ObjectTemplate::MergeFrom(from.unknown_unmovable());
    }
    if (from.has_car()) {
      mutable_car()->::apollo::perception::camera::ObjectTemplate::MergeFrom(from.car());
    }
    if (from.has_van()) {
      mutable_van()->::apollo::perception::camera::ObjectTemplate::MergeFrom(from.van());
    }
    if (from.has_truck()) {
      mutable_truck()->::apollo::perception::camera::ObjectTemplate::MergeFrom(from.truck());
    }
    if (from.has_bus()) {
      mutable_bus()->::apollo::perception::camera::ObjectTemplate::MergeFrom(from.bus());
    }
    if (from.has_cyclist()) {
      mutable_cyclist()->::apollo::perception::camera::ObjectTemplate::MergeFrom(from.cyclist());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_motorcyclist()) {
      mutable_motorcyclist()->::apollo::perception::camera::ObjectTemplate::MergeFrom(from.motorcyclist());
    }
    if (from.has_tricyclist()) {
      mutable_tricyclist()->::apollo::perception::camera::ObjectTemplate::MergeFrom(from.tricyclist());
    }
    if (from.has_pedestrian()) {
      mutable_pedestrian()->::apollo::perception::camera::ObjectTemplate::MergeFrom(from.pedestrian());
    }
    if (from.has_trafficcone()) {
      mutable_trafficcone()->::apollo::perception::camera::ObjectTemplate::MergeFrom(from.trafficcone());
    }
    if (from.has_max_dim_change_ratio()) {
      set_max_dim_change_ratio(from.max_dim_change_ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectTemplateMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectTemplateMeta::CopyFrom(const ObjectTemplateMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTemplateMeta::IsInitialized() const {

  return true;
}

void ObjectTemplateMeta::Swap(ObjectTemplateMeta* other) {
  if (other != this) {
    std::swap(unknown_, other->unknown_);
    std::swap(unknown_movable_, other->unknown_movable_);
    std::swap(unknown_unmovable_, other->unknown_unmovable_);
    std::swap(car_, other->car_);
    std::swap(van_, other->van_);
    std::swap(truck_, other->truck_);
    std::swap(bus_, other->bus_);
    std::swap(cyclist_, other->cyclist_);
    std::swap(motorcyclist_, other->motorcyclist_);
    std::swap(tricyclist_, other->tricyclist_);
    std::swap(pedestrian_, other->pedestrian_);
    std::swap(trafficcone_, other->trafficcone_);
    std::swap(max_dim_change_ratio_, other->max_dim_change_ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectTemplateMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectTemplateMeta_descriptor_;
  metadata.reflection = ObjectTemplateMeta_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
