// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yolo.proto

#ifndef PROTOBUF_yolo_2eproto__INCLUDED
#define PROTOBUF_yolo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace camera {
namespace yolo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_yolo_2eproto();
void protobuf_AssignDesc_yolo_2eproto();
void protobuf_ShutdownFile_yolo_2eproto();

class YoloParam;
class ModelParam;
class NetworkParam;
class NMSParam;
class BBoxStatistics;
class DimensionStatistics;

// ===================================================================

class YoloParam : public ::google::protobuf::Message {
 public:
  YoloParam();
  virtual ~YoloParam();

  YoloParam(const YoloParam& from);

  inline YoloParam& operator=(const YoloParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YoloParam& default_instance();

  void Swap(YoloParam* other);

  // implements Message ----------------------------------------------

  YoloParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YoloParam& from);
  void MergeFrom(const YoloParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.camera.yolo.ModelParam model_param = 1;
  inline bool has_model_param() const;
  inline void clear_model_param();
  static const int kModelParamFieldNumber = 1;
  inline const ::apollo::perception::camera::yolo::ModelParam& model_param() const;
  inline ::apollo::perception::camera::yolo::ModelParam* mutable_model_param();
  inline ::apollo::perception::camera::yolo::ModelParam* release_model_param();
  inline void set_allocated_model_param(::apollo::perception::camera::yolo::ModelParam* model_param);

  // optional .apollo.perception.camera.yolo.NetworkParam net_param = 2;
  inline bool has_net_param() const;
  inline void clear_net_param();
  static const int kNetParamFieldNumber = 2;
  inline const ::apollo::perception::camera::yolo::NetworkParam& net_param() const;
  inline ::apollo::perception::camera::yolo::NetworkParam* mutable_net_param();
  inline ::apollo::perception::camera::yolo::NetworkParam* release_net_param();
  inline void set_allocated_net_param(::apollo::perception::camera::yolo::NetworkParam* net_param);

  // optional .apollo.perception.camera.yolo.NMSParam nms_param = 3;
  inline bool has_nms_param() const;
  inline void clear_nms_param();
  static const int kNmsParamFieldNumber = 3;
  inline const ::apollo::perception::camera::yolo::NMSParam& nms_param() const;
  inline ::apollo::perception::camera::yolo::NMSParam* mutable_nms_param();
  inline ::apollo::perception::camera::yolo::NMSParam* release_nms_param();
  inline void set_allocated_nms_param(::apollo::perception::camera::yolo::NMSParam* nms_param);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.yolo.YoloParam)
 private:
  inline void set_has_model_param();
  inline void clear_has_model_param();
  inline void set_has_net_param();
  inline void clear_has_net_param();
  inline void set_has_nms_param();
  inline void clear_has_nms_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::camera::yolo::ModelParam* model_param_;
  ::apollo::perception::camera::yolo::NetworkParam* net_param_;
  ::apollo::perception::camera::yolo::NMSParam* nms_param_;
  friend void  protobuf_AddDesc_yolo_2eproto();
  friend void protobuf_AssignDesc_yolo_2eproto();
  friend void protobuf_ShutdownFile_yolo_2eproto();

  void InitAsDefaultInstance();
  static YoloParam* default_instance_;
};
// -------------------------------------------------------------------

class ModelParam : public ::google::protobuf::Message {
 public:
  ModelParam();
  virtual ~ModelParam();

  ModelParam(const ModelParam& from);

  inline ModelParam& operator=(const ModelParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelParam& default_instance();

  void Swap(ModelParam* other);

  // implements Message ----------------------------------------------

  ModelParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelParam& from);
  void MergeFrom(const ModelParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 1 [default = "yolo-2d"];
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional string proto_file = 2 [default = "caffe.pt"];
  inline bool has_proto_file() const;
  inline void clear_proto_file();
  static const int kProtoFileFieldNumber = 2;
  inline const ::std::string& proto_file() const;
  inline void set_proto_file(const ::std::string& value);
  inline void set_proto_file(const char* value);
  inline void set_proto_file(const char* value, size_t size);
  inline ::std::string* mutable_proto_file();
  inline ::std::string* release_proto_file();
  inline void set_allocated_proto_file(::std::string* proto_file);

  // optional string weight_file = 3 [default = "caffe.model"];
  inline bool has_weight_file() const;
  inline void clear_weight_file();
  static const int kWeightFileFieldNumber = 3;
  inline const ::std::string& weight_file() const;
  inline void set_weight_file(const ::std::string& value);
  inline void set_weight_file(const char* value);
  inline void set_weight_file(const char* value, size_t size);
  inline ::std::string* mutable_weight_file();
  inline ::std::string* release_weight_file();
  inline void set_allocated_weight_file(::std::string* weight_file);

  // optional string stage1_pt = 21 [default = "caffe.pt"];
  inline bool has_stage1_pt() const;
  inline void clear_stage1_pt();
  static const int kStage1PtFieldNumber = 21;
  inline const ::std::string& stage1_pt() const;
  inline void set_stage1_pt(const ::std::string& value);
  inline void set_stage1_pt(const char* value);
  inline void set_stage1_pt(const char* value, size_t size);
  inline ::std::string* mutable_stage1_pt();
  inline ::std::string* release_stage1_pt();
  inline void set_allocated_stage1_pt(::std::string* stage1_pt);

  // optional string stage1_md = 22 [default = "caffe.model"];
  inline bool has_stage1_md() const;
  inline void clear_stage1_md();
  static const int kStage1MdFieldNumber = 22;
  inline const ::std::string& stage1_md() const;
  inline void set_stage1_md(const ::std::string& value);
  inline void set_stage1_md(const char* value);
  inline void set_stage1_md(const char* value, size_t size);
  inline ::std::string* mutable_stage1_md();
  inline ::std::string* release_stage1_md();
  inline void set_allocated_stage1_md(::std::string* stage1_md);

  // optional string stage2_pt = 23 [default = "caffe.pt"];
  inline bool has_stage2_pt() const;
  inline void clear_stage2_pt();
  static const int kStage2PtFieldNumber = 23;
  inline const ::std::string& stage2_pt() const;
  inline void set_stage2_pt(const ::std::string& value);
  inline void set_stage2_pt(const char* value);
  inline void set_stage2_pt(const char* value, size_t size);
  inline ::std::string* mutable_stage2_pt();
  inline ::std::string* release_stage2_pt();
  inline void set_allocated_stage2_pt(::std::string* stage2_pt);

  // optional string stage2_md = 24 [default = "caffe.model"];
  inline bool has_stage2_md() const;
  inline void clear_stage2_md();
  static const int kStage2MdFieldNumber = 24;
  inline const ::std::string& stage2_md() const;
  inline void set_stage2_md(const ::std::string& value);
  inline void set_stage2_md(const char* value);
  inline void set_stage2_md(const char* value, size_t size);
  inline ::std::string* mutable_stage2_md();
  inline ::std::string* release_stage2_md();
  inline void set_allocated_stage2_md(::std::string* stage2_md);

  // optional string anchors_file = 4 [default = "anchors.txt"];
  inline bool has_anchors_file() const;
  inline void clear_anchors_file();
  static const int kAnchorsFileFieldNumber = 4;
  inline const ::std::string& anchors_file() const;
  inline void set_anchors_file(const ::std::string& value);
  inline void set_anchors_file(const char* value);
  inline void set_anchors_file(const char* value, size_t size);
  inline ::std::string* mutable_anchors_file();
  inline ::std::string* release_anchors_file();
  inline void set_allocated_anchors_file(::std::string* anchors_file);

  // optional string types_file = 5 [default = "types.txt"];
  inline bool has_types_file() const;
  inline void clear_types_file();
  static const int kTypesFileFieldNumber = 5;
  inline const ::std::string& types_file() const;
  inline void set_types_file(const ::std::string& value);
  inline void set_types_file(const char* value);
  inline void set_types_file(const char* value, size_t size);
  inline ::std::string* mutable_types_file();
  inline ::std::string* release_types_file();
  inline void set_allocated_types_file(::std::string* types_file);

  // optional string feature_file = 6 [default = "feature.pt"];
  inline bool has_feature_file() const;
  inline void clear_feature_file();
  static const int kFeatureFileFieldNumber = 6;
  inline const ::std::string& feature_file() const;
  inline void set_feature_file(const ::std::string& value);
  inline void set_feature_file(const char* value);
  inline void set_feature_file(const char* value, size_t size);
  inline ::std::string* mutable_feature_file();
  inline ::std::string* release_feature_file();
  inline void set_allocated_feature_file(::std::string* feature_file);

  // optional float offset_ratio = 7 [default = 0.288889];
  inline bool has_offset_ratio() const;
  inline void clear_offset_ratio();
  static const int kOffsetRatioFieldNumber = 7;
  inline float offset_ratio() const;
  inline void set_offset_ratio(float value);

  // optional float cropped_ratio = 13 [default = 0.711111];
  inline bool has_cropped_ratio() const;
  inline void clear_cropped_ratio();
  static const int kCroppedRatioFieldNumber = 13;
  inline float cropped_ratio() const;
  inline void set_cropped_ratio(float value);

  // optional int32 resized_width = 14 [default = 1440];
  inline bool has_resized_width() const;
  inline void clear_resized_width();
  static const int kResizedWidthFieldNumber = 14;
  inline ::google::protobuf::int32 resized_width() const;
  inline void set_resized_width(::google::protobuf::int32 value);

  // optional int32 aligned_pixel = 15 [default = 32];
  inline bool has_aligned_pixel() const;
  inline void clear_aligned_pixel();
  static const int kAlignedPixelFieldNumber = 15;
  inline ::google::protobuf::int32 aligned_pixel() const;
  inline void set_aligned_pixel(::google::protobuf::int32 value);

  // optional float confidence_threshold = 8 [default = 0.1];
  inline bool has_confidence_threshold() const;
  inline void clear_confidence_threshold();
  static const int kConfidenceThresholdFieldNumber = 8;
  inline float confidence_threshold() const;
  inline void set_confidence_threshold(float value);

  // optional float light_vis_conf_threshold = 33 [default = 0.5];
  inline bool has_light_vis_conf_threshold() const;
  inline void clear_light_vis_conf_threshold();
  static const int kLightVisConfThresholdFieldNumber = 33;
  inline float light_vis_conf_threshold() const;
  inline void set_light_vis_conf_threshold(float value);

  // optional float light_swt_conf_threshold = 34 [default = 0.5];
  inline bool has_light_swt_conf_threshold() const;
  inline void clear_light_swt_conf_threshold();
  static const int kLightSwtConfThresholdFieldNumber = 34;
  inline float light_swt_conf_threshold() const;
  inline void set_light_swt_conf_threshold(float value);

  // optional float roi_conf_threshold = 25 [default = 0.1];
  inline bool has_roi_conf_threshold() const;
  inline void clear_roi_conf_threshold();
  static const int kRoiConfThresholdFieldNumber = 25;
  inline float roi_conf_threshold() const;
  inline void set_roi_conf_threshold(float value);

  // optional float box_conf_threshold = 26 [default = 0.5];
  inline bool has_box_conf_threshold() const;
  inline void clear_box_conf_threshold();
  static const int kBoxConfThresholdFieldNumber = 26;
  inline float box_conf_threshold() const;
  inline void set_box_conf_threshold(float value);

  // optional float stage2_nms_threshold = 27 [default = 0.4];
  inline bool has_stage2_nms_threshold() const;
  inline void clear_stage2_nms_threshold();
  static const int kStage2NmsThresholdFieldNumber = 27;
  inline float stage2_nms_threshold() const;
  inline void set_stage2_nms_threshold(float value);

  // optional float min_2d_height = 9 [default = 0];
  inline bool has_min_2d_height() const;
  inline void clear_min_2d_height();
  static const int kMin2DHeightFieldNumber = 9;
  inline float min_2d_height() const;
  inline void set_min_2d_height(float value);

  // optional float min_3d_height = 30 [default = 0];
  inline bool has_min_3d_height() const;
  inline void clear_min_3d_height();
  static const int kMin3DHeightFieldNumber = 30;
  inline float min_3d_height() const;
  inline void set_min_3d_height(float value);

  // optional float min_3d_width = 31 [default = 0];
  inline bool has_min_3d_width() const;
  inline void clear_min_3d_width();
  static const int kMin3DWidthFieldNumber = 31;
  inline float min_3d_width() const;
  inline void set_min_3d_width(float value);

  // optional float min_3d_length = 32 [default = 0];
  inline bool has_min_3d_length() const;
  inline void clear_min_3d_length();
  static const int kMin3DLengthFieldNumber = 32;
  inline float min_3d_length() const;
  inline void set_min_3d_length(float value);

  // optional string calibratetable_root = 11 [default = "./"];
  inline bool has_calibratetable_root() const;
  inline void clear_calibratetable_root();
  static const int kCalibratetableRootFieldNumber = 11;
  inline const ::std::string& calibratetable_root() const;
  inline void set_calibratetable_root(const ::std::string& value);
  inline void set_calibratetable_root(const char* value);
  inline void set_calibratetable_root(const char* value, size_t size);
  inline ::std::string* mutable_calibratetable_root();
  inline ::std::string* release_calibratetable_root();
  inline void set_allocated_calibratetable_root(::std::string* calibratetable_root);

  // optional string model_type = 12 [default = "CaffeNet"];
  inline bool has_model_type() const;
  inline void clear_model_type();
  static const int kModelTypeFieldNumber = 12;
  inline const ::std::string& model_type() const;
  inline void set_model_type(const ::std::string& value);
  inline void set_model_type(const char* value);
  inline void set_model_type(const char* value, size_t size);
  inline ::std::string* mutable_model_type();
  inline ::std::string* release_model_type();
  inline void set_allocated_model_type(::std::string* model_type);

  // optional int32 ori_cycle = 16 [default = 1];
  inline bool has_ori_cycle() const;
  inline void clear_ori_cycle();
  static const int kOriCycleFieldNumber = 16;
  inline ::google::protobuf::int32 ori_cycle() const;
  inline void set_ori_cycle(::google::protobuf::int32 value);

  // optional bool per_cls_reg = 17 [default = false];
  inline bool has_per_cls_reg() const;
  inline void clear_per_cls_reg();
  static const int kPerClsRegFieldNumber = 17;
  inline bool per_cls_reg() const;
  inline void set_per_cls_reg(bool value);

  // repeated .apollo.perception.camera.yolo.DimensionStatistics dimension_statistics = 18;
  inline int dimension_statistics_size() const;
  inline void clear_dimension_statistics();
  static const int kDimensionStatisticsFieldNumber = 18;
  inline const ::apollo::perception::camera::yolo::DimensionStatistics& dimension_statistics(int index) const;
  inline ::apollo::perception::camera::yolo::DimensionStatistics* mutable_dimension_statistics(int index);
  inline ::apollo::perception::camera::yolo::DimensionStatistics* add_dimension_statistics();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::yolo::DimensionStatistics >&
      dimension_statistics() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::yolo::DimensionStatistics >*
      mutable_dimension_statistics();

  // repeated .apollo.perception.camera.yolo.BBoxStatistics bbox_statistics = 19;
  inline int bbox_statistics_size() const;
  inline void clear_bbox_statistics();
  static const int kBboxStatisticsFieldNumber = 19;
  inline const ::apollo::perception::camera::yolo::BBoxStatistics& bbox_statistics(int index) const;
  inline ::apollo::perception::camera::yolo::BBoxStatistics* mutable_bbox_statistics(int index);
  inline ::apollo::perception::camera::yolo::BBoxStatistics* add_bbox_statistics();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::yolo::BBoxStatistics >&
      bbox_statistics() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::yolo::BBoxStatistics >*
      mutable_bbox_statistics();

  // optional string expand_file = 20 [default = "expand.txt"];
  inline bool has_expand_file() const;
  inline void clear_expand_file();
  static const int kExpandFileFieldNumber = 20;
  inline const ::std::string& expand_file() const;
  inline void set_expand_file(const ::std::string& value);
  inline void set_expand_file(const char* value);
  inline void set_expand_file(const char* value, size_t size);
  inline ::std::string* mutable_expand_file();
  inline ::std::string* release_expand_file();
  inline void set_allocated_expand_file(::std::string* expand_file);

  // optional bool with_box3d = 41 [default = false];
  inline bool has_with_box3d() const;
  inline void clear_with_box3d();
  static const int kWithBox3DFieldNumber = 41;
  inline bool with_box3d() const;
  inline void set_with_box3d(bool value);

  // optional bool with_frbox = 42 [default = false];
  inline bool has_with_frbox() const;
  inline void clear_with_frbox();
  static const int kWithFrboxFieldNumber = 42;
  inline bool with_frbox() const;
  inline void set_with_frbox(bool value);

  // optional bool with_lights = 43 [default = false];
  inline bool has_with_lights() const;
  inline void clear_with_lights();
  static const int kWithLightsFieldNumber = 43;
  inline bool with_lights() const;
  inline void set_with_lights(bool value);

  // optional bool with_ratios = 44 [default = false];
  inline bool has_with_ratios() const;
  inline void clear_with_ratios();
  static const int kWithRatiosFieldNumber = 44;
  inline bool with_ratios() const;
  inline void set_with_ratios(bool value);

  // optional int32 num_areas = 46 [default = 0];
  inline bool has_num_areas() const;
  inline void clear_num_areas();
  static const int kNumAreasFieldNumber = 46;
  inline ::google::protobuf::int32 num_areas() const;
  inline void set_num_areas(::google::protobuf::int32 value);

  // optional float border_ratio = 45 [default = 0.01];
  inline bool has_border_ratio() const;
  inline void clear_border_ratio();
  static const int kBorderRatioFieldNumber = 45;
  inline float border_ratio() const;
  inline void set_border_ratio(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.yolo.ModelParam)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_proto_file();
  inline void clear_has_proto_file();
  inline void set_has_weight_file();
  inline void clear_has_weight_file();
  inline void set_has_stage1_pt();
  inline void clear_has_stage1_pt();
  inline void set_has_stage1_md();
  inline void clear_has_stage1_md();
  inline void set_has_stage2_pt();
  inline void clear_has_stage2_pt();
  inline void set_has_stage2_md();
  inline void clear_has_stage2_md();
  inline void set_has_anchors_file();
  inline void clear_has_anchors_file();
  inline void set_has_types_file();
  inline void clear_has_types_file();
  inline void set_has_feature_file();
  inline void clear_has_feature_file();
  inline void set_has_offset_ratio();
  inline void clear_has_offset_ratio();
  inline void set_has_cropped_ratio();
  inline void clear_has_cropped_ratio();
  inline void set_has_resized_width();
  inline void clear_has_resized_width();
  inline void set_has_aligned_pixel();
  inline void clear_has_aligned_pixel();
  inline void set_has_confidence_threshold();
  inline void clear_has_confidence_threshold();
  inline void set_has_light_vis_conf_threshold();
  inline void clear_has_light_vis_conf_threshold();
  inline void set_has_light_swt_conf_threshold();
  inline void clear_has_light_swt_conf_threshold();
  inline void set_has_roi_conf_threshold();
  inline void clear_has_roi_conf_threshold();
  inline void set_has_box_conf_threshold();
  inline void clear_has_box_conf_threshold();
  inline void set_has_stage2_nms_threshold();
  inline void clear_has_stage2_nms_threshold();
  inline void set_has_min_2d_height();
  inline void clear_has_min_2d_height();
  inline void set_has_min_3d_height();
  inline void clear_has_min_3d_height();
  inline void set_has_min_3d_width();
  inline void clear_has_min_3d_width();
  inline void set_has_min_3d_length();
  inline void clear_has_min_3d_length();
  inline void set_has_calibratetable_root();
  inline void clear_has_calibratetable_root();
  inline void set_has_model_type();
  inline void clear_has_model_type();
  inline void set_has_ori_cycle();
  inline void clear_has_ori_cycle();
  inline void set_has_per_cls_reg();
  inline void clear_has_per_cls_reg();
  inline void set_has_expand_file();
  inline void clear_has_expand_file();
  inline void set_has_with_box3d();
  inline void clear_has_with_box3d();
  inline void set_has_with_frbox();
  inline void clear_has_with_frbox();
  inline void set_has_with_lights();
  inline void clear_has_with_lights();
  inline void set_has_with_ratios();
  inline void clear_has_with_ratios();
  inline void set_has_num_areas();
  inline void clear_has_num_areas();
  inline void set_has_border_ratio();
  inline void clear_has_border_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  static ::std::string* _default_model_name_;
  ::std::string* model_name_;
  static ::std::string* _default_proto_file_;
  ::std::string* proto_file_;
  static ::std::string* _default_weight_file_;
  ::std::string* weight_file_;
  static ::std::string* _default_stage1_pt_;
  ::std::string* stage1_pt_;
  static ::std::string* _default_stage1_md_;
  ::std::string* stage1_md_;
  static ::std::string* _default_stage2_pt_;
  ::std::string* stage2_pt_;
  static ::std::string* _default_stage2_md_;
  ::std::string* stage2_md_;
  static ::std::string* _default_anchors_file_;
  ::std::string* anchors_file_;
  static ::std::string* _default_types_file_;
  ::std::string* types_file_;
  static ::std::string* _default_feature_file_;
  ::std::string* feature_file_;
  float offset_ratio_;
  float cropped_ratio_;
  ::google::protobuf::int32 resized_width_;
  ::google::protobuf::int32 aligned_pixel_;
  float confidence_threshold_;
  float light_vis_conf_threshold_;
  float light_swt_conf_threshold_;
  float roi_conf_threshold_;
  float box_conf_threshold_;
  float stage2_nms_threshold_;
  float min_2d_height_;
  float min_3d_height_;
  float min_3d_width_;
  float min_3d_length_;
  static ::std::string* _default_calibratetable_root_;
  ::std::string* calibratetable_root_;
  static ::std::string* _default_model_type_;
  ::std::string* model_type_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::yolo::DimensionStatistics > dimension_statistics_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::yolo::BBoxStatistics > bbox_statistics_;
  ::google::protobuf::int32 ori_cycle_;
  bool per_cls_reg_;
  bool with_box3d_;
  bool with_frbox_;
  bool with_lights_;
  static ::std::string* _default_expand_file_;
  ::std::string* expand_file_;
  bool with_ratios_;
  ::google::protobuf::int32 num_areas_;
  float border_ratio_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_yolo_2eproto();
  friend void protobuf_AssignDesc_yolo_2eproto();
  friend void protobuf_ShutdownFile_yolo_2eproto();

  void InitAsDefaultInstance();
  static ModelParam* default_instance_;
};
// -------------------------------------------------------------------

class NetworkParam : public ::google::protobuf::Message {
 public:
  NetworkParam();
  virtual ~NetworkParam();

  NetworkParam(const NetworkParam& from);

  inline NetworkParam& operator=(const NetworkParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkParam& default_instance();

  void Swap(NetworkParam* other);

  // implements Message ----------------------------------------------

  NetworkParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkParam& from);
  void MergeFrom(const NetworkParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
  inline bool has_det1_loc_blob() const;
  inline void clear_det1_loc_blob();
  static const int kDet1LocBlobFieldNumber = 1;
  inline const ::std::string& det1_loc_blob() const;
  inline void set_det1_loc_blob(const ::std::string& value);
  inline void set_det1_loc_blob(const char* value);
  inline void set_det1_loc_blob(const char* value, size_t size);
  inline ::std::string* mutable_det1_loc_blob();
  inline ::std::string* release_det1_loc_blob();
  inline void set_allocated_det1_loc_blob(::std::string* det1_loc_blob);

  // optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
  inline bool has_det1_obj_blob() const;
  inline void clear_det1_obj_blob();
  static const int kDet1ObjBlobFieldNumber = 2;
  inline const ::std::string& det1_obj_blob() const;
  inline void set_det1_obj_blob(const ::std::string& value);
  inline void set_det1_obj_blob(const char* value);
  inline void set_det1_obj_blob(const char* value, size_t size);
  inline ::std::string* mutable_det1_obj_blob();
  inline ::std::string* release_det1_obj_blob();
  inline void set_allocated_det1_obj_blob(::std::string* det1_obj_blob);

  // optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
  inline bool has_det1_cls_blob() const;
  inline void clear_det1_cls_blob();
  static const int kDet1ClsBlobFieldNumber = 3;
  inline const ::std::string& det1_cls_blob() const;
  inline void set_det1_cls_blob(const ::std::string& value);
  inline void set_det1_cls_blob(const char* value);
  inline void set_det1_cls_blob(const char* value, size_t size);
  inline ::std::string* mutable_det1_cls_blob();
  inline ::std::string* release_det1_cls_blob();
  inline void set_allocated_det1_cls_blob(::std::string* det1_cls_blob);

  // optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
  inline bool has_det1_ori_blob() const;
  inline void clear_det1_ori_blob();
  static const int kDet1OriBlobFieldNumber = 4;
  inline const ::std::string& det1_ori_blob() const;
  inline void set_det1_ori_blob(const ::std::string& value);
  inline void set_det1_ori_blob(const char* value);
  inline void set_det1_ori_blob(const char* value, size_t size);
  inline ::std::string* mutable_det1_ori_blob();
  inline ::std::string* release_det1_ori_blob();
  inline void set_allocated_det1_ori_blob(::std::string* det1_ori_blob);

  // optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
  inline bool has_det1_ori_conf_blob() const;
  inline void clear_det1_ori_conf_blob();
  static const int kDet1OriConfBlobFieldNumber = 5;
  inline const ::std::string& det1_ori_conf_blob() const;
  inline void set_det1_ori_conf_blob(const ::std::string& value);
  inline void set_det1_ori_conf_blob(const char* value);
  inline void set_det1_ori_conf_blob(const char* value, size_t size);
  inline ::std::string* mutable_det1_ori_conf_blob();
  inline ::std::string* release_det1_ori_conf_blob();
  inline void set_allocated_det1_ori_conf_blob(::std::string* det1_ori_conf_blob);

  // optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
  inline bool has_det1_dim_blob() const;
  inline void clear_det1_dim_blob();
  static const int kDet1DimBlobFieldNumber = 6;
  inline const ::std::string& det1_dim_blob() const;
  inline void set_det1_dim_blob(const ::std::string& value);
  inline void set_det1_dim_blob(const char* value);
  inline void set_det1_dim_blob(const char* value, size_t size);
  inline ::std::string* mutable_det1_dim_blob();
  inline ::std::string* release_det1_dim_blob();
  inline void set_allocated_det1_dim_blob(::std::string* det1_dim_blob);

  // optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
  inline bool has_det2_loc_blob() const;
  inline void clear_det2_loc_blob();
  static const int kDet2LocBlobFieldNumber = 7;
  inline const ::std::string& det2_loc_blob() const;
  inline void set_det2_loc_blob(const ::std::string& value);
  inline void set_det2_loc_blob(const char* value);
  inline void set_det2_loc_blob(const char* value, size_t size);
  inline ::std::string* mutable_det2_loc_blob();
  inline ::std::string* release_det2_loc_blob();
  inline void set_allocated_det2_loc_blob(::std::string* det2_loc_blob);

  // optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
  inline bool has_det2_obj_blob() const;
  inline void clear_det2_obj_blob();
  static const int kDet2ObjBlobFieldNumber = 8;
  inline const ::std::string& det2_obj_blob() const;
  inline void set_det2_obj_blob(const ::std::string& value);
  inline void set_det2_obj_blob(const char* value);
  inline void set_det2_obj_blob(const char* value, size_t size);
  inline ::std::string* mutable_det2_obj_blob();
  inline ::std::string* release_det2_obj_blob();
  inline void set_allocated_det2_obj_blob(::std::string* det2_obj_blob);

  // optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
  inline bool has_det2_cls_blob() const;
  inline void clear_det2_cls_blob();
  static const int kDet2ClsBlobFieldNumber = 9;
  inline const ::std::string& det2_cls_blob() const;
  inline void set_det2_cls_blob(const ::std::string& value);
  inline void set_det2_cls_blob(const char* value);
  inline void set_det2_cls_blob(const char* value, size_t size);
  inline ::std::string* mutable_det2_cls_blob();
  inline ::std::string* release_det2_cls_blob();
  inline void set_allocated_det2_cls_blob(::std::string* det2_cls_blob);

  // optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
  inline bool has_det2_ori_blob() const;
  inline void clear_det2_ori_blob();
  static const int kDet2OriBlobFieldNumber = 10;
  inline const ::std::string& det2_ori_blob() const;
  inline void set_det2_ori_blob(const ::std::string& value);
  inline void set_det2_ori_blob(const char* value);
  inline void set_det2_ori_blob(const char* value, size_t size);
  inline ::std::string* mutable_det2_ori_blob();
  inline ::std::string* release_det2_ori_blob();
  inline void set_allocated_det2_ori_blob(::std::string* det2_ori_blob);

  // optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
  inline bool has_det2_ori_conf_blob() const;
  inline void clear_det2_ori_conf_blob();
  static const int kDet2OriConfBlobFieldNumber = 11;
  inline const ::std::string& det2_ori_conf_blob() const;
  inline void set_det2_ori_conf_blob(const ::std::string& value);
  inline void set_det2_ori_conf_blob(const char* value);
  inline void set_det2_ori_conf_blob(const char* value, size_t size);
  inline ::std::string* mutable_det2_ori_conf_blob();
  inline ::std::string* release_det2_ori_conf_blob();
  inline void set_allocated_det2_ori_conf_blob(::std::string* det2_ori_conf_blob);

  // optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
  inline bool has_det2_dim_blob() const;
  inline void clear_det2_dim_blob();
  static const int kDet2DimBlobFieldNumber = 12;
  inline const ::std::string& det2_dim_blob() const;
  inline void set_det2_dim_blob(const ::std::string& value);
  inline void set_det2_dim_blob(const char* value);
  inline void set_det2_dim_blob(const char* value, size_t size);
  inline ::std::string* mutable_det2_dim_blob();
  inline ::std::string* release_det2_dim_blob();
  inline void set_allocated_det2_dim_blob(::std::string* det2_dim_blob);

  // optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
  inline bool has_det3_loc_blob() const;
  inline void clear_det3_loc_blob();
  static const int kDet3LocBlobFieldNumber = 13;
  inline const ::std::string& det3_loc_blob() const;
  inline void set_det3_loc_blob(const ::std::string& value);
  inline void set_det3_loc_blob(const char* value);
  inline void set_det3_loc_blob(const char* value, size_t size);
  inline ::std::string* mutable_det3_loc_blob();
  inline ::std::string* release_det3_loc_blob();
  inline void set_allocated_det3_loc_blob(::std::string* det3_loc_blob);

  // optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
  inline bool has_det3_obj_blob() const;
  inline void clear_det3_obj_blob();
  static const int kDet3ObjBlobFieldNumber = 14;
  inline const ::std::string& det3_obj_blob() const;
  inline void set_det3_obj_blob(const ::std::string& value);
  inline void set_det3_obj_blob(const char* value);
  inline void set_det3_obj_blob(const char* value, size_t size);
  inline ::std::string* mutable_det3_obj_blob();
  inline ::std::string* release_det3_obj_blob();
  inline void set_allocated_det3_obj_blob(::std::string* det3_obj_blob);

  // optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
  inline bool has_det3_cls_blob() const;
  inline void clear_det3_cls_blob();
  static const int kDet3ClsBlobFieldNumber = 15;
  inline const ::std::string& det3_cls_blob() const;
  inline void set_det3_cls_blob(const ::std::string& value);
  inline void set_det3_cls_blob(const char* value);
  inline void set_det3_cls_blob(const char* value, size_t size);
  inline ::std::string* mutable_det3_cls_blob();
  inline ::std::string* release_det3_cls_blob();
  inline void set_allocated_det3_cls_blob(::std::string* det3_cls_blob);

  // optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
  inline bool has_det3_ori_blob() const;
  inline void clear_det3_ori_blob();
  static const int kDet3OriBlobFieldNumber = 16;
  inline const ::std::string& det3_ori_blob() const;
  inline void set_det3_ori_blob(const ::std::string& value);
  inline void set_det3_ori_blob(const char* value);
  inline void set_det3_ori_blob(const char* value, size_t size);
  inline ::std::string* mutable_det3_ori_blob();
  inline ::std::string* release_det3_ori_blob();
  inline void set_allocated_det3_ori_blob(::std::string* det3_ori_blob);

  // optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
  inline bool has_det3_ori_conf_blob() const;
  inline void clear_det3_ori_conf_blob();
  static const int kDet3OriConfBlobFieldNumber = 17;
  inline const ::std::string& det3_ori_conf_blob() const;
  inline void set_det3_ori_conf_blob(const ::std::string& value);
  inline void set_det3_ori_conf_blob(const char* value);
  inline void set_det3_ori_conf_blob(const char* value, size_t size);
  inline ::std::string* mutable_det3_ori_conf_blob();
  inline ::std::string* release_det3_ori_conf_blob();
  inline void set_allocated_det3_ori_conf_blob(::std::string* det3_ori_conf_blob);

  // optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
  inline bool has_det3_dim_blob() const;
  inline void clear_det3_dim_blob();
  static const int kDet3DimBlobFieldNumber = 18;
  inline const ::std::string& det3_dim_blob() const;
  inline void set_det3_dim_blob(const ::std::string& value);
  inline void set_det3_dim_blob(const char* value);
  inline void set_det3_dim_blob(const char* value, size_t size);
  inline ::std::string* mutable_det3_dim_blob();
  inline ::std::string* release_det3_dim_blob();
  inline void set_allocated_det3_dim_blob(::std::string* det3_dim_blob);

  // optional string lof_blob = 19 [default = "lof_pred"];
  inline bool has_lof_blob() const;
  inline void clear_lof_blob();
  static const int kLofBlobFieldNumber = 19;
  inline const ::std::string& lof_blob() const;
  inline void set_lof_blob(const ::std::string& value);
  inline void set_lof_blob(const char* value);
  inline void set_lof_blob(const char* value, size_t size);
  inline ::std::string* mutable_lof_blob();
  inline ::std::string* release_lof_blob();
  inline void set_allocated_lof_blob(::std::string* lof_blob);

  // optional string lor_blob = 20 [default = "lor_pred"];
  inline bool has_lor_blob() const;
  inline void clear_lor_blob();
  static const int kLorBlobFieldNumber = 20;
  inline const ::std::string& lor_blob() const;
  inline void set_lor_blob(const ::std::string& value);
  inline void set_lor_blob(const char* value);
  inline void set_lor_blob(const char* value, size_t size);
  inline ::std::string* mutable_lor_blob();
  inline ::std::string* release_lor_blob();
  inline void set_allocated_lor_blob(::std::string* lor_blob);

  // optional string input_blob = 21 [default = "data"];
  inline bool has_input_blob() const;
  inline void clear_input_blob();
  static const int kInputBlobFieldNumber = 21;
  inline const ::std::string& input_blob() const;
  inline void set_input_blob(const ::std::string& value);
  inline void set_input_blob(const char* value);
  inline void set_input_blob(const char* value, size_t size);
  inline ::std::string* mutable_input_blob();
  inline ::std::string* release_input_blob();
  inline void set_allocated_input_blob(::std::string* input_blob);

  // optional string rois_blob = 22 [default = "rois_pred"];
  inline bool has_rois_blob() const;
  inline void clear_rois_blob();
  static const int kRoisBlobFieldNumber = 22;
  inline const ::std::string& rois_blob() const;
  inline void set_rois_blob(const ::std::string& value);
  inline void set_rois_blob(const char* value);
  inline void set_rois_blob(const char* value, size_t size);
  inline ::std::string* mutable_rois_blob();
  inline ::std::string* release_rois_blob();
  inline void set_allocated_rois_blob(::std::string* rois_blob);

  // optional string feat_blob = 23 [default = "conv_feat"];
  inline bool has_feat_blob() const;
  inline void clear_feat_blob();
  static const int kFeatBlobFieldNumber = 23;
  inline const ::std::string& feat_blob() const;
  inline void set_feat_blob(const ::std::string& value);
  inline void set_feat_blob(const char* value);
  inline void set_feat_blob(const char* value, size_t size);
  inline ::std::string* mutable_feat_blob();
  inline ::std::string* release_feat_blob();
  inline void set_allocated_feat_blob(::std::string* feat_blob);

  // optional string box_blob = 24 [default = "box_pred"];
  inline bool has_box_blob() const;
  inline void clear_box_blob();
  static const int kBoxBlobFieldNumber = 24;
  inline const ::std::string& box_blob() const;
  inline void set_box_blob(const ::std::string& value);
  inline void set_box_blob(const char* value);
  inline void set_box_blob(const char* value, size_t size);
  inline ::std::string* mutable_box_blob();
  inline ::std::string* release_box_blob();
  inline void set_allocated_box_blob(::std::string* box_blob);

  // optional string iou_blob = 25 [default = "iou_pred"];
  inline bool has_iou_blob() const;
  inline void clear_iou_blob();
  static const int kIouBlobFieldNumber = 25;
  inline const ::std::string& iou_blob() const;
  inline void set_iou_blob(const ::std::string& value);
  inline void set_iou_blob(const char* value);
  inline void set_iou_blob(const char* value, size_t size);
  inline ::std::string* mutable_iou_blob();
  inline ::std::string* release_iou_blob();
  inline void set_allocated_iou_blob(::std::string* iou_blob);

  // optional string brvis_blob = 26 [default = "brvis_pred"];
  inline bool has_brvis_blob() const;
  inline void clear_brvis_blob();
  static const int kBrvisBlobFieldNumber = 26;
  inline const ::std::string& brvis_blob() const;
  inline void set_brvis_blob(const ::std::string& value);
  inline void set_brvis_blob(const char* value);
  inline void set_brvis_blob(const char* value, size_t size);
  inline ::std::string* mutable_brvis_blob();
  inline ::std::string* release_brvis_blob();
  inline void set_allocated_brvis_blob(::std::string* brvis_blob);

  // optional string brswt_blob = 27 [default = "brswt_pred"];
  inline bool has_brswt_blob() const;
  inline void clear_brswt_blob();
  static const int kBrswtBlobFieldNumber = 27;
  inline const ::std::string& brswt_blob() const;
  inline void set_brswt_blob(const ::std::string& value);
  inline void set_brswt_blob(const char* value);
  inline void set_brswt_blob(const char* value, size_t size);
  inline ::std::string* mutable_brswt_blob();
  inline ::std::string* release_brswt_blob();
  inline void set_allocated_brswt_blob(::std::string* brswt_blob);

  // optional string ltvis_blob = 28 [default = "ltvis_pred"];
  inline bool has_ltvis_blob() const;
  inline void clear_ltvis_blob();
  static const int kLtvisBlobFieldNumber = 28;
  inline const ::std::string& ltvis_blob() const;
  inline void set_ltvis_blob(const ::std::string& value);
  inline void set_ltvis_blob(const char* value);
  inline void set_ltvis_blob(const char* value, size_t size);
  inline ::std::string* mutable_ltvis_blob();
  inline ::std::string* release_ltvis_blob();
  inline void set_allocated_ltvis_blob(::std::string* ltvis_blob);

  // optional string ltswt_blob = 29 [default = "ltswt_pred"];
  inline bool has_ltswt_blob() const;
  inline void clear_ltswt_blob();
  static const int kLtswtBlobFieldNumber = 29;
  inline const ::std::string& ltswt_blob() const;
  inline void set_ltswt_blob(const ::std::string& value);
  inline void set_ltswt_blob(const char* value);
  inline void set_ltswt_blob(const char* value, size_t size);
  inline ::std::string* mutable_ltswt_blob();
  inline ::std::string* release_ltswt_blob();
  inline void set_allocated_ltswt_blob(::std::string* ltswt_blob);

  // optional string rtvis_blob = 30 [default = "rtvis_pred"];
  inline bool has_rtvis_blob() const;
  inline void clear_rtvis_blob();
  static const int kRtvisBlobFieldNumber = 30;
  inline const ::std::string& rtvis_blob() const;
  inline void set_rtvis_blob(const ::std::string& value);
  inline void set_rtvis_blob(const char* value);
  inline void set_rtvis_blob(const char* value, size_t size);
  inline ::std::string* mutable_rtvis_blob();
  inline ::std::string* release_rtvis_blob();
  inline void set_allocated_rtvis_blob(::std::string* rtvis_blob);

  // optional string rtswt_blob = 31 [default = "rtswt_pred"];
  inline bool has_rtswt_blob() const;
  inline void clear_rtswt_blob();
  static const int kRtswtBlobFieldNumber = 31;
  inline const ::std::string& rtswt_blob() const;
  inline void set_rtswt_blob(const ::std::string& value);
  inline void set_rtswt_blob(const char* value);
  inline void set_rtswt_blob(const char* value, size_t size);
  inline ::std::string* mutable_rtswt_blob();
  inline ::std::string* release_rtswt_blob();
  inline void set_allocated_rtswt_blob(::std::string* rtswt_blob);

  // optional string area_id_blob = 32 [default = "area_id_pred"];
  inline bool has_area_id_blob() const;
  inline void clear_area_id_blob();
  static const int kAreaIdBlobFieldNumber = 32;
  inline const ::std::string& area_id_blob() const;
  inline void set_area_id_blob(const ::std::string& value);
  inline void set_area_id_blob(const char* value);
  inline void set_area_id_blob(const char* value, size_t size);
  inline ::std::string* mutable_area_id_blob();
  inline ::std::string* release_area_id_blob();
  inline void set_allocated_area_id_blob(::std::string* area_id_blob);

  // optional string visible_ratio_blob = 33 [default = "vis_pred"];
  inline bool has_visible_ratio_blob() const;
  inline void clear_visible_ratio_blob();
  static const int kVisibleRatioBlobFieldNumber = 33;
  inline const ::std::string& visible_ratio_blob() const;
  inline void set_visible_ratio_blob(const ::std::string& value);
  inline void set_visible_ratio_blob(const char* value);
  inline void set_visible_ratio_blob(const char* value, size_t size);
  inline ::std::string* mutable_visible_ratio_blob();
  inline ::std::string* release_visible_ratio_blob();
  inline void set_allocated_visible_ratio_blob(::std::string* visible_ratio_blob);

  // optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
  inline bool has_cut_off_ratio_blob() const;
  inline void clear_cut_off_ratio_blob();
  static const int kCutOffRatioBlobFieldNumber = 34;
  inline const ::std::string& cut_off_ratio_blob() const;
  inline void set_cut_off_ratio_blob(const ::std::string& value);
  inline void set_cut_off_ratio_blob(const char* value);
  inline void set_cut_off_ratio_blob(const char* value, size_t size);
  inline ::std::string* mutable_cut_off_ratio_blob();
  inline ::std::string* release_cut_off_ratio_blob();
  inline void set_allocated_cut_off_ratio_blob(::std::string* cut_off_ratio_blob);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.yolo.NetworkParam)
 private:
  inline void set_has_det1_loc_blob();
  inline void clear_has_det1_loc_blob();
  inline void set_has_det1_obj_blob();
  inline void clear_has_det1_obj_blob();
  inline void set_has_det1_cls_blob();
  inline void clear_has_det1_cls_blob();
  inline void set_has_det1_ori_blob();
  inline void clear_has_det1_ori_blob();
  inline void set_has_det1_ori_conf_blob();
  inline void clear_has_det1_ori_conf_blob();
  inline void set_has_det1_dim_blob();
  inline void clear_has_det1_dim_blob();
  inline void set_has_det2_loc_blob();
  inline void clear_has_det2_loc_blob();
  inline void set_has_det2_obj_blob();
  inline void clear_has_det2_obj_blob();
  inline void set_has_det2_cls_blob();
  inline void clear_has_det2_cls_blob();
  inline void set_has_det2_ori_blob();
  inline void clear_has_det2_ori_blob();
  inline void set_has_det2_ori_conf_blob();
  inline void clear_has_det2_ori_conf_blob();
  inline void set_has_det2_dim_blob();
  inline void clear_has_det2_dim_blob();
  inline void set_has_det3_loc_blob();
  inline void clear_has_det3_loc_blob();
  inline void set_has_det3_obj_blob();
  inline void clear_has_det3_obj_blob();
  inline void set_has_det3_cls_blob();
  inline void clear_has_det3_cls_blob();
  inline void set_has_det3_ori_blob();
  inline void clear_has_det3_ori_blob();
  inline void set_has_det3_ori_conf_blob();
  inline void clear_has_det3_ori_conf_blob();
  inline void set_has_det3_dim_blob();
  inline void clear_has_det3_dim_blob();
  inline void set_has_lof_blob();
  inline void clear_has_lof_blob();
  inline void set_has_lor_blob();
  inline void clear_has_lor_blob();
  inline void set_has_input_blob();
  inline void clear_has_input_blob();
  inline void set_has_rois_blob();
  inline void clear_has_rois_blob();
  inline void set_has_feat_blob();
  inline void clear_has_feat_blob();
  inline void set_has_box_blob();
  inline void clear_has_box_blob();
  inline void set_has_iou_blob();
  inline void clear_has_iou_blob();
  inline void set_has_brvis_blob();
  inline void clear_has_brvis_blob();
  inline void set_has_brswt_blob();
  inline void clear_has_brswt_blob();
  inline void set_has_ltvis_blob();
  inline void clear_has_ltvis_blob();
  inline void set_has_ltswt_blob();
  inline void clear_has_ltswt_blob();
  inline void set_has_rtvis_blob();
  inline void clear_has_rtvis_blob();
  inline void set_has_rtswt_blob();
  inline void clear_has_rtswt_blob();
  inline void set_has_area_id_blob();
  inline void clear_has_area_id_blob();
  inline void set_has_visible_ratio_blob();
  inline void clear_has_visible_ratio_blob();
  inline void set_has_cut_off_ratio_blob();
  inline void clear_has_cut_off_ratio_blob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  static ::std::string* _default_det1_loc_blob_;
  ::std::string* det1_loc_blob_;
  static ::std::string* _default_det1_obj_blob_;
  ::std::string* det1_obj_blob_;
  static ::std::string* _default_det1_cls_blob_;
  ::std::string* det1_cls_blob_;
  static ::std::string* _default_det1_ori_blob_;
  ::std::string* det1_ori_blob_;
  static ::std::string* _default_det1_ori_conf_blob_;
  ::std::string* det1_ori_conf_blob_;
  static ::std::string* _default_det1_dim_blob_;
  ::std::string* det1_dim_blob_;
  static ::std::string* _default_det2_loc_blob_;
  ::std::string* det2_loc_blob_;
  static ::std::string* _default_det2_obj_blob_;
  ::std::string* det2_obj_blob_;
  static ::std::string* _default_det2_cls_blob_;
  ::std::string* det2_cls_blob_;
  static ::std::string* _default_det2_ori_blob_;
  ::std::string* det2_ori_blob_;
  static ::std::string* _default_det2_ori_conf_blob_;
  ::std::string* det2_ori_conf_blob_;
  static ::std::string* _default_det2_dim_blob_;
  ::std::string* det2_dim_blob_;
  static ::std::string* _default_det3_loc_blob_;
  ::std::string* det3_loc_blob_;
  static ::std::string* _default_det3_obj_blob_;
  ::std::string* det3_obj_blob_;
  static ::std::string* _default_det3_cls_blob_;
  ::std::string* det3_cls_blob_;
  static ::std::string* _default_det3_ori_blob_;
  ::std::string* det3_ori_blob_;
  static ::std::string* _default_det3_ori_conf_blob_;
  ::std::string* det3_ori_conf_blob_;
  static ::std::string* _default_det3_dim_blob_;
  ::std::string* det3_dim_blob_;
  static ::std::string* _default_lof_blob_;
  ::std::string* lof_blob_;
  static ::std::string* _default_lor_blob_;
  ::std::string* lor_blob_;
  static ::std::string* _default_input_blob_;
  ::std::string* input_blob_;
  static ::std::string* _default_rois_blob_;
  ::std::string* rois_blob_;
  static ::std::string* _default_feat_blob_;
  ::std::string* feat_blob_;
  static ::std::string* _default_box_blob_;
  ::std::string* box_blob_;
  static ::std::string* _default_iou_blob_;
  ::std::string* iou_blob_;
  static ::std::string* _default_brvis_blob_;
  ::std::string* brvis_blob_;
  static ::std::string* _default_brswt_blob_;
  ::std::string* brswt_blob_;
  static ::std::string* _default_ltvis_blob_;
  ::std::string* ltvis_blob_;
  static ::std::string* _default_ltswt_blob_;
  ::std::string* ltswt_blob_;
  static ::std::string* _default_rtvis_blob_;
  ::std::string* rtvis_blob_;
  static ::std::string* _default_rtswt_blob_;
  ::std::string* rtswt_blob_;
  static ::std::string* _default_area_id_blob_;
  ::std::string* area_id_blob_;
  static ::std::string* _default_visible_ratio_blob_;
  ::std::string* visible_ratio_blob_;
  static ::std::string* _default_cut_off_ratio_blob_;
  ::std::string* cut_off_ratio_blob_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_yolo_2eproto();
  friend void protobuf_AssignDesc_yolo_2eproto();
  friend void protobuf_ShutdownFile_yolo_2eproto();

  void InitAsDefaultInstance();
  static NetworkParam* default_instance_;
};
// -------------------------------------------------------------------

class NMSParam : public ::google::protobuf::Message {
 public:
  NMSParam();
  virtual ~NMSParam();

  NMSParam(const NMSParam& from);

  inline NMSParam& operator=(const NMSParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NMSParam& default_instance();

  void Swap(NMSParam* other);

  // implements Message ----------------------------------------------

  NMSParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NMSParam& from);
  void MergeFrom(const NMSParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "NormalNMS"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float threshold = 2 [default = 0.4];
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 2;
  inline float threshold() const;
  inline void set_threshold(float value);

  // optional float sigma = 3 [default = 0.4];
  inline bool has_sigma() const;
  inline void clear_sigma();
  static const int kSigmaFieldNumber = 3;
  inline float sigma() const;
  inline void set_sigma(float value);

  // optional float inter_cls_conf_thresh = 4 [default = 0.1];
  inline bool has_inter_cls_conf_thresh() const;
  inline void clear_inter_cls_conf_thresh();
  static const int kInterClsConfThreshFieldNumber = 4;
  inline float inter_cls_conf_thresh() const;
  inline void set_inter_cls_conf_thresh(float value);

  // optional float inter_cls_nms_thresh = 5 [default = 1];
  inline bool has_inter_cls_nms_thresh() const;
  inline void clear_inter_cls_nms_thresh();
  static const int kInterClsNmsThreshFieldNumber = 5;
  inline float inter_cls_nms_thresh() const;
  inline void set_inter_cls_nms_thresh(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.yolo.NMSParam)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_threshold();
  inline void clear_has_threshold();
  inline void set_has_sigma();
  inline void clear_has_sigma();
  inline void set_has_inter_cls_conf_thresh();
  inline void clear_has_inter_cls_conf_thresh();
  inline void set_has_inter_cls_nms_thresh();
  inline void clear_has_inter_cls_nms_thresh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_type_;
  ::std::string* type_;
  float threshold_;
  float sigma_;
  float inter_cls_conf_thresh_;
  float inter_cls_nms_thresh_;
  friend void  protobuf_AddDesc_yolo_2eproto();
  friend void protobuf_AssignDesc_yolo_2eproto();
  friend void protobuf_ShutdownFile_yolo_2eproto();

  void InitAsDefaultInstance();
  static NMSParam* default_instance_;
};
// -------------------------------------------------------------------

class BBoxStatistics : public ::google::protobuf::Message {
 public:
  BBoxStatistics();
  virtual ~BBoxStatistics();

  BBoxStatistics(const BBoxStatistics& from);

  inline BBoxStatistics& operator=(const BBoxStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BBoxStatistics& default_instance();

  void Swap(BBoxStatistics* other);

  // implements Message ----------------------------------------------

  BBoxStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BBoxStatistics& from);
  void MergeFrom(const BBoxStatistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float mean = 1;
  inline int mean_size() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 1;
  inline float mean(int index) const;
  inline void set_mean(int index, float value);
  inline void add_mean(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mean() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mean();

  // repeated float std = 2;
  inline int std_size() const;
  inline void clear_std();
  static const int kStdFieldNumber = 2;
  inline float std(int index) const;
  inline void set_std(int index, float value);
  inline void add_std(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      std() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_std();

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.yolo.BBoxStatistics)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > mean_;
  ::google::protobuf::RepeatedField< float > std_;
  friend void  protobuf_AddDesc_yolo_2eproto();
  friend void protobuf_AssignDesc_yolo_2eproto();
  friend void protobuf_ShutdownFile_yolo_2eproto();

  void InitAsDefaultInstance();
  static BBoxStatistics* default_instance_;
};
// -------------------------------------------------------------------

class DimensionStatistics : public ::google::protobuf::Message {
 public:
  DimensionStatistics();
  virtual ~DimensionStatistics();

  DimensionStatistics(const DimensionStatistics& from);

  inline DimensionStatistics& operator=(const DimensionStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DimensionStatistics& default_instance();

  void Swap(DimensionStatistics* other);

  // implements Message ----------------------------------------------

  DimensionStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DimensionStatistics& from);
  void MergeFrom(const DimensionStatistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float mean_h = 1 [default = 0];
  inline bool has_mean_h() const;
  inline void clear_mean_h();
  static const int kMeanHFieldNumber = 1;
  inline float mean_h() const;
  inline void set_mean_h(float value);

  // optional float mean_w = 2 [default = 0];
  inline bool has_mean_w() const;
  inline void clear_mean_w();
  static const int kMeanWFieldNumber = 2;
  inline float mean_w() const;
  inline void set_mean_w(float value);

  // optional float mean_l = 3 [default = 0];
  inline bool has_mean_l() const;
  inline void clear_mean_l();
  static const int kMeanLFieldNumber = 3;
  inline float mean_l() const;
  inline void set_mean_l(float value);

  // optional float std_h = 4 [default = 1];
  inline bool has_std_h() const;
  inline void clear_std_h();
  static const int kStdHFieldNumber = 4;
  inline float std_h() const;
  inline void set_std_h(float value);

  // optional float std_w = 5 [default = 1];
  inline bool has_std_w() const;
  inline void clear_std_w();
  static const int kStdWFieldNumber = 5;
  inline float std_w() const;
  inline void set_std_w(float value);

  // optional float std_l = 6 [default = 1];
  inline bool has_std_l() const;
  inline void clear_std_l();
  static const int kStdLFieldNumber = 6;
  inline float std_l() const;
  inline void set_std_l(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.yolo.DimensionStatistics)
 private:
  inline void set_has_mean_h();
  inline void clear_has_mean_h();
  inline void set_has_mean_w();
  inline void clear_has_mean_w();
  inline void set_has_mean_l();
  inline void clear_has_mean_l();
  inline void set_has_std_h();
  inline void clear_has_std_h();
  inline void set_has_std_w();
  inline void clear_has_std_w();
  inline void set_has_std_l();
  inline void clear_has_std_l();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float mean_h_;
  float mean_w_;
  float mean_l_;
  float std_h_;
  float std_w_;
  float std_l_;
  friend void  protobuf_AddDesc_yolo_2eproto();
  friend void protobuf_AssignDesc_yolo_2eproto();
  friend void protobuf_ShutdownFile_yolo_2eproto();

  void InitAsDefaultInstance();
  static DimensionStatistics* default_instance_;
};
// ===================================================================


// ===================================================================

// YoloParam

// optional .apollo.perception.camera.yolo.ModelParam model_param = 1;
inline bool YoloParam::has_model_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YoloParam::set_has_model_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YoloParam::clear_has_model_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YoloParam::clear_model_param() {
  if (model_param_ != NULL) model_param_->::apollo::perception::camera::yolo::ModelParam::Clear();
  clear_has_model_param();
}
inline const ::apollo::perception::camera::yolo::ModelParam& YoloParam::model_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.YoloParam.model_param)
  return model_param_ != NULL ? *model_param_ : *default_instance_->model_param_;
}
inline ::apollo::perception::camera::yolo::ModelParam* YoloParam::mutable_model_param() {
  set_has_model_param();
  if (model_param_ == NULL) model_param_ = new ::apollo::perception::camera::yolo::ModelParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.YoloParam.model_param)
  return model_param_;
}
inline ::apollo::perception::camera::yolo::ModelParam* YoloParam::release_model_param() {
  clear_has_model_param();
  ::apollo::perception::camera::yolo::ModelParam* temp = model_param_;
  model_param_ = NULL;
  return temp;
}
inline void YoloParam::set_allocated_model_param(::apollo::perception::camera::yolo::ModelParam* model_param) {
  delete model_param_;
  model_param_ = model_param;
  if (model_param) {
    set_has_model_param();
  } else {
    clear_has_model_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.YoloParam.model_param)
}

// optional .apollo.perception.camera.yolo.NetworkParam net_param = 2;
inline bool YoloParam::has_net_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YoloParam::set_has_net_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YoloParam::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YoloParam::clear_net_param() {
  if (net_param_ != NULL) net_param_->::apollo::perception::camera::yolo::NetworkParam::Clear();
  clear_has_net_param();
}
inline const ::apollo::perception::camera::yolo::NetworkParam& YoloParam::net_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.YoloParam.net_param)
  return net_param_ != NULL ? *net_param_ : *default_instance_->net_param_;
}
inline ::apollo::perception::camera::yolo::NetworkParam* YoloParam::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) net_param_ = new ::apollo::perception::camera::yolo::NetworkParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.YoloParam.net_param)
  return net_param_;
}
inline ::apollo::perception::camera::yolo::NetworkParam* YoloParam::release_net_param() {
  clear_has_net_param();
  ::apollo::perception::camera::yolo::NetworkParam* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
inline void YoloParam::set_allocated_net_param(::apollo::perception::camera::yolo::NetworkParam* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.YoloParam.net_param)
}

// optional .apollo.perception.camera.yolo.NMSParam nms_param = 3;
inline bool YoloParam::has_nms_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YoloParam::set_has_nms_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YoloParam::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YoloParam::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::apollo::perception::camera::yolo::NMSParam::Clear();
  clear_has_nms_param();
}
inline const ::apollo::perception::camera::yolo::NMSParam& YoloParam::nms_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.YoloParam.nms_param)
  return nms_param_ != NULL ? *nms_param_ : *default_instance_->nms_param_;
}
inline ::apollo::perception::camera::yolo::NMSParam* YoloParam::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) nms_param_ = new ::apollo::perception::camera::yolo::NMSParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.YoloParam.nms_param)
  return nms_param_;
}
inline ::apollo::perception::camera::yolo::NMSParam* YoloParam::release_nms_param() {
  clear_has_nms_param();
  ::apollo::perception::camera::yolo::NMSParam* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
inline void YoloParam::set_allocated_nms_param(::apollo::perception::camera::yolo::NMSParam* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.YoloParam.nms_param)
}

// -------------------------------------------------------------------

// ModelParam

// optional string model_name = 1 [default = "yolo-2d"];
inline bool ModelParam::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelParam::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelParam::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelParam::clear_model_name() {
  if (model_name_ != _default_model_name_) {
    model_name_->assign(*_default_model_name_);
  }
  clear_has_model_name();
}
inline const ::std::string& ModelParam::model_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.model_name)
  return *model_name_;
}
inline void ModelParam::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == _default_model_name_) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.model_name)
}
inline void ModelParam::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == _default_model_name_) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.model_name)
}
inline void ModelParam::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == _default_model_name_) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.model_name)
}
inline ::std::string* ModelParam::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == _default_model_name_) {
    model_name_ = new ::std::string(*_default_model_name_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.model_name)
  return model_name_;
}
inline ::std::string* ModelParam::release_model_name() {
  clear_has_model_name();
  if (model_name_ == _default_model_name_) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(_default_model_name_);
    return temp;
  }
}
inline void ModelParam::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != _default_model_name_) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(_default_model_name_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.model_name)
}

// optional string proto_file = 2 [default = "caffe.pt"];
inline bool ModelParam::has_proto_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelParam::set_has_proto_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelParam::clear_has_proto_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelParam::clear_proto_file() {
  if (proto_file_ != _default_proto_file_) {
    proto_file_->assign(*_default_proto_file_);
  }
  clear_has_proto_file();
}
inline const ::std::string& ModelParam::proto_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.proto_file)
  return *proto_file_;
}
inline void ModelParam::set_proto_file(const ::std::string& value) {
  set_has_proto_file();
  if (proto_file_ == _default_proto_file_) {
    proto_file_ = new ::std::string;
  }
  proto_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.proto_file)
}
inline void ModelParam::set_proto_file(const char* value) {
  set_has_proto_file();
  if (proto_file_ == _default_proto_file_) {
    proto_file_ = new ::std::string;
  }
  proto_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.proto_file)
}
inline void ModelParam::set_proto_file(const char* value, size_t size) {
  set_has_proto_file();
  if (proto_file_ == _default_proto_file_) {
    proto_file_ = new ::std::string;
  }
  proto_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.proto_file)
}
inline ::std::string* ModelParam::mutable_proto_file() {
  set_has_proto_file();
  if (proto_file_ == _default_proto_file_) {
    proto_file_ = new ::std::string(*_default_proto_file_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.proto_file)
  return proto_file_;
}
inline ::std::string* ModelParam::release_proto_file() {
  clear_has_proto_file();
  if (proto_file_ == _default_proto_file_) {
    return NULL;
  } else {
    ::std::string* temp = proto_file_;
    proto_file_ = const_cast< ::std::string*>(_default_proto_file_);
    return temp;
  }
}
inline void ModelParam::set_allocated_proto_file(::std::string* proto_file) {
  if (proto_file_ != _default_proto_file_) {
    delete proto_file_;
  }
  if (proto_file) {
    set_has_proto_file();
    proto_file_ = proto_file;
  } else {
    clear_has_proto_file();
    proto_file_ = const_cast< ::std::string*>(_default_proto_file_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.proto_file)
}

// optional string weight_file = 3 [default = "caffe.model"];
inline bool ModelParam::has_weight_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelParam::set_has_weight_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelParam::clear_has_weight_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelParam::clear_weight_file() {
  if (weight_file_ != _default_weight_file_) {
    weight_file_->assign(*_default_weight_file_);
  }
  clear_has_weight_file();
}
inline const ::std::string& ModelParam::weight_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.weight_file)
  return *weight_file_;
}
inline void ModelParam::set_weight_file(const ::std::string& value) {
  set_has_weight_file();
  if (weight_file_ == _default_weight_file_) {
    weight_file_ = new ::std::string;
  }
  weight_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.weight_file)
}
inline void ModelParam::set_weight_file(const char* value) {
  set_has_weight_file();
  if (weight_file_ == _default_weight_file_) {
    weight_file_ = new ::std::string;
  }
  weight_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.weight_file)
}
inline void ModelParam::set_weight_file(const char* value, size_t size) {
  set_has_weight_file();
  if (weight_file_ == _default_weight_file_) {
    weight_file_ = new ::std::string;
  }
  weight_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.weight_file)
}
inline ::std::string* ModelParam::mutable_weight_file() {
  set_has_weight_file();
  if (weight_file_ == _default_weight_file_) {
    weight_file_ = new ::std::string(*_default_weight_file_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.weight_file)
  return weight_file_;
}
inline ::std::string* ModelParam::release_weight_file() {
  clear_has_weight_file();
  if (weight_file_ == _default_weight_file_) {
    return NULL;
  } else {
    ::std::string* temp = weight_file_;
    weight_file_ = const_cast< ::std::string*>(_default_weight_file_);
    return temp;
  }
}
inline void ModelParam::set_allocated_weight_file(::std::string* weight_file) {
  if (weight_file_ != _default_weight_file_) {
    delete weight_file_;
  }
  if (weight_file) {
    set_has_weight_file();
    weight_file_ = weight_file;
  } else {
    clear_has_weight_file();
    weight_file_ = const_cast< ::std::string*>(_default_weight_file_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.weight_file)
}

// optional string stage1_pt = 21 [default = "caffe.pt"];
inline bool ModelParam::has_stage1_pt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelParam::set_has_stage1_pt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelParam::clear_has_stage1_pt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelParam::clear_stage1_pt() {
  if (stage1_pt_ != _default_stage1_pt_) {
    stage1_pt_->assign(*_default_stage1_pt_);
  }
  clear_has_stage1_pt();
}
inline const ::std::string& ModelParam::stage1_pt() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.stage1_pt)
  return *stage1_pt_;
}
inline void ModelParam::set_stage1_pt(const ::std::string& value) {
  set_has_stage1_pt();
  if (stage1_pt_ == _default_stage1_pt_) {
    stage1_pt_ = new ::std::string;
  }
  stage1_pt_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.stage1_pt)
}
inline void ModelParam::set_stage1_pt(const char* value) {
  set_has_stage1_pt();
  if (stage1_pt_ == _default_stage1_pt_) {
    stage1_pt_ = new ::std::string;
  }
  stage1_pt_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.stage1_pt)
}
inline void ModelParam::set_stage1_pt(const char* value, size_t size) {
  set_has_stage1_pt();
  if (stage1_pt_ == _default_stage1_pt_) {
    stage1_pt_ = new ::std::string;
  }
  stage1_pt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.stage1_pt)
}
inline ::std::string* ModelParam::mutable_stage1_pt() {
  set_has_stage1_pt();
  if (stage1_pt_ == _default_stage1_pt_) {
    stage1_pt_ = new ::std::string(*_default_stage1_pt_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.stage1_pt)
  return stage1_pt_;
}
inline ::std::string* ModelParam::release_stage1_pt() {
  clear_has_stage1_pt();
  if (stage1_pt_ == _default_stage1_pt_) {
    return NULL;
  } else {
    ::std::string* temp = stage1_pt_;
    stage1_pt_ = const_cast< ::std::string*>(_default_stage1_pt_);
    return temp;
  }
}
inline void ModelParam::set_allocated_stage1_pt(::std::string* stage1_pt) {
  if (stage1_pt_ != _default_stage1_pt_) {
    delete stage1_pt_;
  }
  if (stage1_pt) {
    set_has_stage1_pt();
    stage1_pt_ = stage1_pt;
  } else {
    clear_has_stage1_pt();
    stage1_pt_ = const_cast< ::std::string*>(_default_stage1_pt_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.stage1_pt)
}

// optional string stage1_md = 22 [default = "caffe.model"];
inline bool ModelParam::has_stage1_md() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModelParam::set_has_stage1_md() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModelParam::clear_has_stage1_md() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModelParam::clear_stage1_md() {
  if (stage1_md_ != _default_stage1_md_) {
    stage1_md_->assign(*_default_stage1_md_);
  }
  clear_has_stage1_md();
}
inline const ::std::string& ModelParam::stage1_md() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.stage1_md)
  return *stage1_md_;
}
inline void ModelParam::set_stage1_md(const ::std::string& value) {
  set_has_stage1_md();
  if (stage1_md_ == _default_stage1_md_) {
    stage1_md_ = new ::std::string;
  }
  stage1_md_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.stage1_md)
}
inline void ModelParam::set_stage1_md(const char* value) {
  set_has_stage1_md();
  if (stage1_md_ == _default_stage1_md_) {
    stage1_md_ = new ::std::string;
  }
  stage1_md_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.stage1_md)
}
inline void ModelParam::set_stage1_md(const char* value, size_t size) {
  set_has_stage1_md();
  if (stage1_md_ == _default_stage1_md_) {
    stage1_md_ = new ::std::string;
  }
  stage1_md_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.stage1_md)
}
inline ::std::string* ModelParam::mutable_stage1_md() {
  set_has_stage1_md();
  if (stage1_md_ == _default_stage1_md_) {
    stage1_md_ = new ::std::string(*_default_stage1_md_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.stage1_md)
  return stage1_md_;
}
inline ::std::string* ModelParam::release_stage1_md() {
  clear_has_stage1_md();
  if (stage1_md_ == _default_stage1_md_) {
    return NULL;
  } else {
    ::std::string* temp = stage1_md_;
    stage1_md_ = const_cast< ::std::string*>(_default_stage1_md_);
    return temp;
  }
}
inline void ModelParam::set_allocated_stage1_md(::std::string* stage1_md) {
  if (stage1_md_ != _default_stage1_md_) {
    delete stage1_md_;
  }
  if (stage1_md) {
    set_has_stage1_md();
    stage1_md_ = stage1_md;
  } else {
    clear_has_stage1_md();
    stage1_md_ = const_cast< ::std::string*>(_default_stage1_md_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.stage1_md)
}

// optional string stage2_pt = 23 [default = "caffe.pt"];
inline bool ModelParam::has_stage2_pt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModelParam::set_has_stage2_pt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModelParam::clear_has_stage2_pt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModelParam::clear_stage2_pt() {
  if (stage2_pt_ != _default_stage2_pt_) {
    stage2_pt_->assign(*_default_stage2_pt_);
  }
  clear_has_stage2_pt();
}
inline const ::std::string& ModelParam::stage2_pt() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.stage2_pt)
  return *stage2_pt_;
}
inline void ModelParam::set_stage2_pt(const ::std::string& value) {
  set_has_stage2_pt();
  if (stage2_pt_ == _default_stage2_pt_) {
    stage2_pt_ = new ::std::string;
  }
  stage2_pt_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.stage2_pt)
}
inline void ModelParam::set_stage2_pt(const char* value) {
  set_has_stage2_pt();
  if (stage2_pt_ == _default_stage2_pt_) {
    stage2_pt_ = new ::std::string;
  }
  stage2_pt_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.stage2_pt)
}
inline void ModelParam::set_stage2_pt(const char* value, size_t size) {
  set_has_stage2_pt();
  if (stage2_pt_ == _default_stage2_pt_) {
    stage2_pt_ = new ::std::string;
  }
  stage2_pt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.stage2_pt)
}
inline ::std::string* ModelParam::mutable_stage2_pt() {
  set_has_stage2_pt();
  if (stage2_pt_ == _default_stage2_pt_) {
    stage2_pt_ = new ::std::string(*_default_stage2_pt_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.stage2_pt)
  return stage2_pt_;
}
inline ::std::string* ModelParam::release_stage2_pt() {
  clear_has_stage2_pt();
  if (stage2_pt_ == _default_stage2_pt_) {
    return NULL;
  } else {
    ::std::string* temp = stage2_pt_;
    stage2_pt_ = const_cast< ::std::string*>(_default_stage2_pt_);
    return temp;
  }
}
inline void ModelParam::set_allocated_stage2_pt(::std::string* stage2_pt) {
  if (stage2_pt_ != _default_stage2_pt_) {
    delete stage2_pt_;
  }
  if (stage2_pt) {
    set_has_stage2_pt();
    stage2_pt_ = stage2_pt;
  } else {
    clear_has_stage2_pt();
    stage2_pt_ = const_cast< ::std::string*>(_default_stage2_pt_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.stage2_pt)
}

// optional string stage2_md = 24 [default = "caffe.model"];
inline bool ModelParam::has_stage2_md() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModelParam::set_has_stage2_md() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModelParam::clear_has_stage2_md() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModelParam::clear_stage2_md() {
  if (stage2_md_ != _default_stage2_md_) {
    stage2_md_->assign(*_default_stage2_md_);
  }
  clear_has_stage2_md();
}
inline const ::std::string& ModelParam::stage2_md() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.stage2_md)
  return *stage2_md_;
}
inline void ModelParam::set_stage2_md(const ::std::string& value) {
  set_has_stage2_md();
  if (stage2_md_ == _default_stage2_md_) {
    stage2_md_ = new ::std::string;
  }
  stage2_md_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.stage2_md)
}
inline void ModelParam::set_stage2_md(const char* value) {
  set_has_stage2_md();
  if (stage2_md_ == _default_stage2_md_) {
    stage2_md_ = new ::std::string;
  }
  stage2_md_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.stage2_md)
}
inline void ModelParam::set_stage2_md(const char* value, size_t size) {
  set_has_stage2_md();
  if (stage2_md_ == _default_stage2_md_) {
    stage2_md_ = new ::std::string;
  }
  stage2_md_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.stage2_md)
}
inline ::std::string* ModelParam::mutable_stage2_md() {
  set_has_stage2_md();
  if (stage2_md_ == _default_stage2_md_) {
    stage2_md_ = new ::std::string(*_default_stage2_md_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.stage2_md)
  return stage2_md_;
}
inline ::std::string* ModelParam::release_stage2_md() {
  clear_has_stage2_md();
  if (stage2_md_ == _default_stage2_md_) {
    return NULL;
  } else {
    ::std::string* temp = stage2_md_;
    stage2_md_ = const_cast< ::std::string*>(_default_stage2_md_);
    return temp;
  }
}
inline void ModelParam::set_allocated_stage2_md(::std::string* stage2_md) {
  if (stage2_md_ != _default_stage2_md_) {
    delete stage2_md_;
  }
  if (stage2_md) {
    set_has_stage2_md();
    stage2_md_ = stage2_md;
  } else {
    clear_has_stage2_md();
    stage2_md_ = const_cast< ::std::string*>(_default_stage2_md_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.stage2_md)
}

// optional string anchors_file = 4 [default = "anchors.txt"];
inline bool ModelParam::has_anchors_file() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ModelParam::set_has_anchors_file() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ModelParam::clear_has_anchors_file() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ModelParam::clear_anchors_file() {
  if (anchors_file_ != _default_anchors_file_) {
    anchors_file_->assign(*_default_anchors_file_);
  }
  clear_has_anchors_file();
}
inline const ::std::string& ModelParam::anchors_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.anchors_file)
  return *anchors_file_;
}
inline void ModelParam::set_anchors_file(const ::std::string& value) {
  set_has_anchors_file();
  if (anchors_file_ == _default_anchors_file_) {
    anchors_file_ = new ::std::string;
  }
  anchors_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.anchors_file)
}
inline void ModelParam::set_anchors_file(const char* value) {
  set_has_anchors_file();
  if (anchors_file_ == _default_anchors_file_) {
    anchors_file_ = new ::std::string;
  }
  anchors_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.anchors_file)
}
inline void ModelParam::set_anchors_file(const char* value, size_t size) {
  set_has_anchors_file();
  if (anchors_file_ == _default_anchors_file_) {
    anchors_file_ = new ::std::string;
  }
  anchors_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.anchors_file)
}
inline ::std::string* ModelParam::mutable_anchors_file() {
  set_has_anchors_file();
  if (anchors_file_ == _default_anchors_file_) {
    anchors_file_ = new ::std::string(*_default_anchors_file_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.anchors_file)
  return anchors_file_;
}
inline ::std::string* ModelParam::release_anchors_file() {
  clear_has_anchors_file();
  if (anchors_file_ == _default_anchors_file_) {
    return NULL;
  } else {
    ::std::string* temp = anchors_file_;
    anchors_file_ = const_cast< ::std::string*>(_default_anchors_file_);
    return temp;
  }
}
inline void ModelParam::set_allocated_anchors_file(::std::string* anchors_file) {
  if (anchors_file_ != _default_anchors_file_) {
    delete anchors_file_;
  }
  if (anchors_file) {
    set_has_anchors_file();
    anchors_file_ = anchors_file;
  } else {
    clear_has_anchors_file();
    anchors_file_ = const_cast< ::std::string*>(_default_anchors_file_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.anchors_file)
}

// optional string types_file = 5 [default = "types.txt"];
inline bool ModelParam::has_types_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ModelParam::set_has_types_file() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ModelParam::clear_has_types_file() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ModelParam::clear_types_file() {
  if (types_file_ != _default_types_file_) {
    types_file_->assign(*_default_types_file_);
  }
  clear_has_types_file();
}
inline const ::std::string& ModelParam::types_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.types_file)
  return *types_file_;
}
inline void ModelParam::set_types_file(const ::std::string& value) {
  set_has_types_file();
  if (types_file_ == _default_types_file_) {
    types_file_ = new ::std::string;
  }
  types_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.types_file)
}
inline void ModelParam::set_types_file(const char* value) {
  set_has_types_file();
  if (types_file_ == _default_types_file_) {
    types_file_ = new ::std::string;
  }
  types_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.types_file)
}
inline void ModelParam::set_types_file(const char* value, size_t size) {
  set_has_types_file();
  if (types_file_ == _default_types_file_) {
    types_file_ = new ::std::string;
  }
  types_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.types_file)
}
inline ::std::string* ModelParam::mutable_types_file() {
  set_has_types_file();
  if (types_file_ == _default_types_file_) {
    types_file_ = new ::std::string(*_default_types_file_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.types_file)
  return types_file_;
}
inline ::std::string* ModelParam::release_types_file() {
  clear_has_types_file();
  if (types_file_ == _default_types_file_) {
    return NULL;
  } else {
    ::std::string* temp = types_file_;
    types_file_ = const_cast< ::std::string*>(_default_types_file_);
    return temp;
  }
}
inline void ModelParam::set_allocated_types_file(::std::string* types_file) {
  if (types_file_ != _default_types_file_) {
    delete types_file_;
  }
  if (types_file) {
    set_has_types_file();
    types_file_ = types_file;
  } else {
    clear_has_types_file();
    types_file_ = const_cast< ::std::string*>(_default_types_file_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.types_file)
}

// optional string feature_file = 6 [default = "feature.pt"];
inline bool ModelParam::has_feature_file() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ModelParam::set_has_feature_file() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ModelParam::clear_has_feature_file() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ModelParam::clear_feature_file() {
  if (feature_file_ != _default_feature_file_) {
    feature_file_->assign(*_default_feature_file_);
  }
  clear_has_feature_file();
}
inline const ::std::string& ModelParam::feature_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.feature_file)
  return *feature_file_;
}
inline void ModelParam::set_feature_file(const ::std::string& value) {
  set_has_feature_file();
  if (feature_file_ == _default_feature_file_) {
    feature_file_ = new ::std::string;
  }
  feature_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.feature_file)
}
inline void ModelParam::set_feature_file(const char* value) {
  set_has_feature_file();
  if (feature_file_ == _default_feature_file_) {
    feature_file_ = new ::std::string;
  }
  feature_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.feature_file)
}
inline void ModelParam::set_feature_file(const char* value, size_t size) {
  set_has_feature_file();
  if (feature_file_ == _default_feature_file_) {
    feature_file_ = new ::std::string;
  }
  feature_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.feature_file)
}
inline ::std::string* ModelParam::mutable_feature_file() {
  set_has_feature_file();
  if (feature_file_ == _default_feature_file_) {
    feature_file_ = new ::std::string(*_default_feature_file_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.feature_file)
  return feature_file_;
}
inline ::std::string* ModelParam::release_feature_file() {
  clear_has_feature_file();
  if (feature_file_ == _default_feature_file_) {
    return NULL;
  } else {
    ::std::string* temp = feature_file_;
    feature_file_ = const_cast< ::std::string*>(_default_feature_file_);
    return temp;
  }
}
inline void ModelParam::set_allocated_feature_file(::std::string* feature_file) {
  if (feature_file_ != _default_feature_file_) {
    delete feature_file_;
  }
  if (feature_file) {
    set_has_feature_file();
    feature_file_ = feature_file;
  } else {
    clear_has_feature_file();
    feature_file_ = const_cast< ::std::string*>(_default_feature_file_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.feature_file)
}

// optional float offset_ratio = 7 [default = 0.288889];
inline bool ModelParam::has_offset_ratio() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ModelParam::set_has_offset_ratio() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ModelParam::clear_has_offset_ratio() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ModelParam::clear_offset_ratio() {
  offset_ratio_ = 0.288889f;
  clear_has_offset_ratio();
}
inline float ModelParam::offset_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.offset_ratio)
  return offset_ratio_;
}
inline void ModelParam::set_offset_ratio(float value) {
  set_has_offset_ratio();
  offset_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.offset_ratio)
}

// optional float cropped_ratio = 13 [default = 0.711111];
inline bool ModelParam::has_cropped_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ModelParam::set_has_cropped_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ModelParam::clear_has_cropped_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ModelParam::clear_cropped_ratio() {
  cropped_ratio_ = 0.711111f;
  clear_has_cropped_ratio();
}
inline float ModelParam::cropped_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.cropped_ratio)
  return cropped_ratio_;
}
inline void ModelParam::set_cropped_ratio(float value) {
  set_has_cropped_ratio();
  cropped_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.cropped_ratio)
}

// optional int32 resized_width = 14 [default = 1440];
inline bool ModelParam::has_resized_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ModelParam::set_has_resized_width() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ModelParam::clear_has_resized_width() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ModelParam::clear_resized_width() {
  resized_width_ = 1440;
  clear_has_resized_width();
}
inline ::google::protobuf::int32 ModelParam::resized_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.resized_width)
  return resized_width_;
}
inline void ModelParam::set_resized_width(::google::protobuf::int32 value) {
  set_has_resized_width();
  resized_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.resized_width)
}

// optional int32 aligned_pixel = 15 [default = 32];
inline bool ModelParam::has_aligned_pixel() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ModelParam::set_has_aligned_pixel() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ModelParam::clear_has_aligned_pixel() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ModelParam::clear_aligned_pixel() {
  aligned_pixel_ = 32;
  clear_has_aligned_pixel();
}
inline ::google::protobuf::int32 ModelParam::aligned_pixel() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.aligned_pixel)
  return aligned_pixel_;
}
inline void ModelParam::set_aligned_pixel(::google::protobuf::int32 value) {
  set_has_aligned_pixel();
  aligned_pixel_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.aligned_pixel)
}

// optional float confidence_threshold = 8 [default = 0.1];
inline bool ModelParam::has_confidence_threshold() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ModelParam::set_has_confidence_threshold() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ModelParam::clear_has_confidence_threshold() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ModelParam::clear_confidence_threshold() {
  confidence_threshold_ = 0.1f;
  clear_has_confidence_threshold();
}
inline float ModelParam::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.confidence_threshold)
  return confidence_threshold_;
}
inline void ModelParam::set_confidence_threshold(float value) {
  set_has_confidence_threshold();
  confidence_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.confidence_threshold)
}

// optional float light_vis_conf_threshold = 33 [default = 0.5];
inline bool ModelParam::has_light_vis_conf_threshold() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ModelParam::set_has_light_vis_conf_threshold() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ModelParam::clear_has_light_vis_conf_threshold() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ModelParam::clear_light_vis_conf_threshold() {
  light_vis_conf_threshold_ = 0.5f;
  clear_has_light_vis_conf_threshold();
}
inline float ModelParam::light_vis_conf_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.light_vis_conf_threshold)
  return light_vis_conf_threshold_;
}
inline void ModelParam::set_light_vis_conf_threshold(float value) {
  set_has_light_vis_conf_threshold();
  light_vis_conf_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.light_vis_conf_threshold)
}

// optional float light_swt_conf_threshold = 34 [default = 0.5];
inline bool ModelParam::has_light_swt_conf_threshold() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ModelParam::set_has_light_swt_conf_threshold() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ModelParam::clear_has_light_swt_conf_threshold() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ModelParam::clear_light_swt_conf_threshold() {
  light_swt_conf_threshold_ = 0.5f;
  clear_has_light_swt_conf_threshold();
}
inline float ModelParam::light_swt_conf_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.light_swt_conf_threshold)
  return light_swt_conf_threshold_;
}
inline void ModelParam::set_light_swt_conf_threshold(float value) {
  set_has_light_swt_conf_threshold();
  light_swt_conf_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.light_swt_conf_threshold)
}

// optional float roi_conf_threshold = 25 [default = 0.1];
inline bool ModelParam::has_roi_conf_threshold() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ModelParam::set_has_roi_conf_threshold() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ModelParam::clear_has_roi_conf_threshold() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ModelParam::clear_roi_conf_threshold() {
  roi_conf_threshold_ = 0.1f;
  clear_has_roi_conf_threshold();
}
inline float ModelParam::roi_conf_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.roi_conf_threshold)
  return roi_conf_threshold_;
}
inline void ModelParam::set_roi_conf_threshold(float value) {
  set_has_roi_conf_threshold();
  roi_conf_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.roi_conf_threshold)
}

// optional float box_conf_threshold = 26 [default = 0.5];
inline bool ModelParam::has_box_conf_threshold() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ModelParam::set_has_box_conf_threshold() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ModelParam::clear_has_box_conf_threshold() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ModelParam::clear_box_conf_threshold() {
  box_conf_threshold_ = 0.5f;
  clear_has_box_conf_threshold();
}
inline float ModelParam::box_conf_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.box_conf_threshold)
  return box_conf_threshold_;
}
inline void ModelParam::set_box_conf_threshold(float value) {
  set_has_box_conf_threshold();
  box_conf_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.box_conf_threshold)
}

// optional float stage2_nms_threshold = 27 [default = 0.4];
inline bool ModelParam::has_stage2_nms_threshold() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ModelParam::set_has_stage2_nms_threshold() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ModelParam::clear_has_stage2_nms_threshold() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ModelParam::clear_stage2_nms_threshold() {
  stage2_nms_threshold_ = 0.4f;
  clear_has_stage2_nms_threshold();
}
inline float ModelParam::stage2_nms_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.stage2_nms_threshold)
  return stage2_nms_threshold_;
}
inline void ModelParam::set_stage2_nms_threshold(float value) {
  set_has_stage2_nms_threshold();
  stage2_nms_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.stage2_nms_threshold)
}

// optional float min_2d_height = 9 [default = 0];
inline bool ModelParam::has_min_2d_height() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ModelParam::set_has_min_2d_height() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ModelParam::clear_has_min_2d_height() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ModelParam::clear_min_2d_height() {
  min_2d_height_ = 0;
  clear_has_min_2d_height();
}
inline float ModelParam::min_2d_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.min_2d_height)
  return min_2d_height_;
}
inline void ModelParam::set_min_2d_height(float value) {
  set_has_min_2d_height();
  min_2d_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.min_2d_height)
}

// optional float min_3d_height = 30 [default = 0];
inline bool ModelParam::has_min_3d_height() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ModelParam::set_has_min_3d_height() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ModelParam::clear_has_min_3d_height() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ModelParam::clear_min_3d_height() {
  min_3d_height_ = 0;
  clear_has_min_3d_height();
}
inline float ModelParam::min_3d_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.min_3d_height)
  return min_3d_height_;
}
inline void ModelParam::set_min_3d_height(float value) {
  set_has_min_3d_height();
  min_3d_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.min_3d_height)
}

// optional float min_3d_width = 31 [default = 0];
inline bool ModelParam::has_min_3d_width() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ModelParam::set_has_min_3d_width() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ModelParam::clear_has_min_3d_width() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ModelParam::clear_min_3d_width() {
  min_3d_width_ = 0;
  clear_has_min_3d_width();
}
inline float ModelParam::min_3d_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.min_3d_width)
  return min_3d_width_;
}
inline void ModelParam::set_min_3d_width(float value) {
  set_has_min_3d_width();
  min_3d_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.min_3d_width)
}

// optional float min_3d_length = 32 [default = 0];
inline bool ModelParam::has_min_3d_length() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ModelParam::set_has_min_3d_length() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ModelParam::clear_has_min_3d_length() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ModelParam::clear_min_3d_length() {
  min_3d_length_ = 0;
  clear_has_min_3d_length();
}
inline float ModelParam::min_3d_length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.min_3d_length)
  return min_3d_length_;
}
inline void ModelParam::set_min_3d_length(float value) {
  set_has_min_3d_length();
  min_3d_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.min_3d_length)
}

// optional string calibratetable_root = 11 [default = "./"];
inline bool ModelParam::has_calibratetable_root() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ModelParam::set_has_calibratetable_root() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ModelParam::clear_has_calibratetable_root() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ModelParam::clear_calibratetable_root() {
  if (calibratetable_root_ != _default_calibratetable_root_) {
    calibratetable_root_->assign(*_default_calibratetable_root_);
  }
  clear_has_calibratetable_root();
}
inline const ::std::string& ModelParam::calibratetable_root() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
  return *calibratetable_root_;
}
inline void ModelParam::set_calibratetable_root(const ::std::string& value) {
  set_has_calibratetable_root();
  if (calibratetable_root_ == _default_calibratetable_root_) {
    calibratetable_root_ = new ::std::string;
  }
  calibratetable_root_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
}
inline void ModelParam::set_calibratetable_root(const char* value) {
  set_has_calibratetable_root();
  if (calibratetable_root_ == _default_calibratetable_root_) {
    calibratetable_root_ = new ::std::string;
  }
  calibratetable_root_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
}
inline void ModelParam::set_calibratetable_root(const char* value, size_t size) {
  set_has_calibratetable_root();
  if (calibratetable_root_ == _default_calibratetable_root_) {
    calibratetable_root_ = new ::std::string;
  }
  calibratetable_root_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
}
inline ::std::string* ModelParam::mutable_calibratetable_root() {
  set_has_calibratetable_root();
  if (calibratetable_root_ == _default_calibratetable_root_) {
    calibratetable_root_ = new ::std::string(*_default_calibratetable_root_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
  return calibratetable_root_;
}
inline ::std::string* ModelParam::release_calibratetable_root() {
  clear_has_calibratetable_root();
  if (calibratetable_root_ == _default_calibratetable_root_) {
    return NULL;
  } else {
    ::std::string* temp = calibratetable_root_;
    calibratetable_root_ = const_cast< ::std::string*>(_default_calibratetable_root_);
    return temp;
  }
}
inline void ModelParam::set_allocated_calibratetable_root(::std::string* calibratetable_root) {
  if (calibratetable_root_ != _default_calibratetable_root_) {
    delete calibratetable_root_;
  }
  if (calibratetable_root) {
    set_has_calibratetable_root();
    calibratetable_root_ = calibratetable_root;
  } else {
    clear_has_calibratetable_root();
    calibratetable_root_ = const_cast< ::std::string*>(_default_calibratetable_root_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
}

// optional string model_type = 12 [default = "CaffeNet"];
inline bool ModelParam::has_model_type() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ModelParam::set_has_model_type() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ModelParam::clear_has_model_type() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ModelParam::clear_model_type() {
  if (model_type_ != _default_model_type_) {
    model_type_->assign(*_default_model_type_);
  }
  clear_has_model_type();
}
inline const ::std::string& ModelParam::model_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.model_type)
  return *model_type_;
}
inline void ModelParam::set_model_type(const ::std::string& value) {
  set_has_model_type();
  if (model_type_ == _default_model_type_) {
    model_type_ = new ::std::string;
  }
  model_type_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.model_type)
}
inline void ModelParam::set_model_type(const char* value) {
  set_has_model_type();
  if (model_type_ == _default_model_type_) {
    model_type_ = new ::std::string;
  }
  model_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.model_type)
}
inline void ModelParam::set_model_type(const char* value, size_t size) {
  set_has_model_type();
  if (model_type_ == _default_model_type_) {
    model_type_ = new ::std::string;
  }
  model_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.model_type)
}
inline ::std::string* ModelParam::mutable_model_type() {
  set_has_model_type();
  if (model_type_ == _default_model_type_) {
    model_type_ = new ::std::string(*_default_model_type_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.model_type)
  return model_type_;
}
inline ::std::string* ModelParam::release_model_type() {
  clear_has_model_type();
  if (model_type_ == _default_model_type_) {
    return NULL;
  } else {
    ::std::string* temp = model_type_;
    model_type_ = const_cast< ::std::string*>(_default_model_type_);
    return temp;
  }
}
inline void ModelParam::set_allocated_model_type(::std::string* model_type) {
  if (model_type_ != _default_model_type_) {
    delete model_type_;
  }
  if (model_type) {
    set_has_model_type();
    model_type_ = model_type;
  } else {
    clear_has_model_type();
    model_type_ = const_cast< ::std::string*>(_default_model_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.model_type)
}

// optional int32 ori_cycle = 16 [default = 1];
inline bool ModelParam::has_ori_cycle() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ModelParam::set_has_ori_cycle() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ModelParam::clear_has_ori_cycle() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ModelParam::clear_ori_cycle() {
  ori_cycle_ = 1;
  clear_has_ori_cycle();
}
inline ::google::protobuf::int32 ModelParam::ori_cycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.ori_cycle)
  return ori_cycle_;
}
inline void ModelParam::set_ori_cycle(::google::protobuf::int32 value) {
  set_has_ori_cycle();
  ori_cycle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.ori_cycle)
}

// optional bool per_cls_reg = 17 [default = false];
inline bool ModelParam::has_per_cls_reg() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ModelParam::set_has_per_cls_reg() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ModelParam::clear_has_per_cls_reg() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ModelParam::clear_per_cls_reg() {
  per_cls_reg_ = false;
  clear_has_per_cls_reg();
}
inline bool ModelParam::per_cls_reg() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.per_cls_reg)
  return per_cls_reg_;
}
inline void ModelParam::set_per_cls_reg(bool value) {
  set_has_per_cls_reg();
  per_cls_reg_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.per_cls_reg)
}

// repeated .apollo.perception.camera.yolo.DimensionStatistics dimension_statistics = 18;
inline int ModelParam::dimension_statistics_size() const {
  return dimension_statistics_.size();
}
inline void ModelParam::clear_dimension_statistics() {
  dimension_statistics_.Clear();
}
inline const ::apollo::perception::camera::yolo::DimensionStatistics& ModelParam::dimension_statistics(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.dimension_statistics)
  return dimension_statistics_.Get(index);
}
inline ::apollo::perception::camera::yolo::DimensionStatistics* ModelParam::mutable_dimension_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.dimension_statistics)
  return dimension_statistics_.Mutable(index);
}
inline ::apollo::perception::camera::yolo::DimensionStatistics* ModelParam::add_dimension_statistics() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.yolo.ModelParam.dimension_statistics)
  return dimension_statistics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::yolo::DimensionStatistics >&
ModelParam::dimension_statistics() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.yolo.ModelParam.dimension_statistics)
  return dimension_statistics_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::yolo::DimensionStatistics >*
ModelParam::mutable_dimension_statistics() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.yolo.ModelParam.dimension_statistics)
  return &dimension_statistics_;
}

// repeated .apollo.perception.camera.yolo.BBoxStatistics bbox_statistics = 19;
inline int ModelParam::bbox_statistics_size() const {
  return bbox_statistics_.size();
}
inline void ModelParam::clear_bbox_statistics() {
  bbox_statistics_.Clear();
}
inline const ::apollo::perception::camera::yolo::BBoxStatistics& ModelParam::bbox_statistics(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.bbox_statistics)
  return bbox_statistics_.Get(index);
}
inline ::apollo::perception::camera::yolo::BBoxStatistics* ModelParam::mutable_bbox_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.bbox_statistics)
  return bbox_statistics_.Mutable(index);
}
inline ::apollo::perception::camera::yolo::BBoxStatistics* ModelParam::add_bbox_statistics() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.yolo.ModelParam.bbox_statistics)
  return bbox_statistics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::yolo::BBoxStatistics >&
ModelParam::bbox_statistics() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.yolo.ModelParam.bbox_statistics)
  return bbox_statistics_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::yolo::BBoxStatistics >*
ModelParam::mutable_bbox_statistics() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.yolo.ModelParam.bbox_statistics)
  return &bbox_statistics_;
}

// optional string expand_file = 20 [default = "expand.txt"];
inline bool ModelParam::has_expand_file() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ModelParam::set_has_expand_file() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ModelParam::clear_has_expand_file() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ModelParam::clear_expand_file() {
  if (expand_file_ != _default_expand_file_) {
    expand_file_->assign(*_default_expand_file_);
  }
  clear_has_expand_file();
}
inline const ::std::string& ModelParam::expand_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.expand_file)
  return *expand_file_;
}
inline void ModelParam::set_expand_file(const ::std::string& value) {
  set_has_expand_file();
  if (expand_file_ == _default_expand_file_) {
    expand_file_ = new ::std::string;
  }
  expand_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.expand_file)
}
inline void ModelParam::set_expand_file(const char* value) {
  set_has_expand_file();
  if (expand_file_ == _default_expand_file_) {
    expand_file_ = new ::std::string;
  }
  expand_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.expand_file)
}
inline void ModelParam::set_expand_file(const char* value, size_t size) {
  set_has_expand_file();
  if (expand_file_ == _default_expand_file_) {
    expand_file_ = new ::std::string;
  }
  expand_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.expand_file)
}
inline ::std::string* ModelParam::mutable_expand_file() {
  set_has_expand_file();
  if (expand_file_ == _default_expand_file_) {
    expand_file_ = new ::std::string(*_default_expand_file_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.expand_file)
  return expand_file_;
}
inline ::std::string* ModelParam::release_expand_file() {
  clear_has_expand_file();
  if (expand_file_ == _default_expand_file_) {
    return NULL;
  } else {
    ::std::string* temp = expand_file_;
    expand_file_ = const_cast< ::std::string*>(_default_expand_file_);
    return temp;
  }
}
inline void ModelParam::set_allocated_expand_file(::std::string* expand_file) {
  if (expand_file_ != _default_expand_file_) {
    delete expand_file_;
  }
  if (expand_file) {
    set_has_expand_file();
    expand_file_ = expand_file;
  } else {
    clear_has_expand_file();
    expand_file_ = const_cast< ::std::string*>(_default_expand_file_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.expand_file)
}

// optional bool with_box3d = 41 [default = false];
inline bool ModelParam::has_with_box3d() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ModelParam::set_has_with_box3d() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ModelParam::clear_has_with_box3d() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ModelParam::clear_with_box3d() {
  with_box3d_ = false;
  clear_has_with_box3d();
}
inline bool ModelParam::with_box3d() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.with_box3d)
  return with_box3d_;
}
inline void ModelParam::set_with_box3d(bool value) {
  set_has_with_box3d();
  with_box3d_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.with_box3d)
}

// optional bool with_frbox = 42 [default = false];
inline bool ModelParam::has_with_frbox() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ModelParam::set_has_with_frbox() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ModelParam::clear_has_with_frbox() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ModelParam::clear_with_frbox() {
  with_frbox_ = false;
  clear_has_with_frbox();
}
inline bool ModelParam::with_frbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.with_frbox)
  return with_frbox_;
}
inline void ModelParam::set_with_frbox(bool value) {
  set_has_with_frbox();
  with_frbox_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.with_frbox)
}

// optional bool with_lights = 43 [default = false];
inline bool ModelParam::has_with_lights() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ModelParam::set_has_with_lights() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ModelParam::clear_has_with_lights() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ModelParam::clear_with_lights() {
  with_lights_ = false;
  clear_has_with_lights();
}
inline bool ModelParam::with_lights() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.with_lights)
  return with_lights_;
}
inline void ModelParam::set_with_lights(bool value) {
  set_has_with_lights();
  with_lights_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.with_lights)
}

// optional bool with_ratios = 44 [default = false];
inline bool ModelParam::has_with_ratios() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ModelParam::set_has_with_ratios() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ModelParam::clear_has_with_ratios() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ModelParam::clear_with_ratios() {
  with_ratios_ = false;
  clear_has_with_ratios();
}
inline bool ModelParam::with_ratios() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.with_ratios)
  return with_ratios_;
}
inline void ModelParam::set_with_ratios(bool value) {
  set_has_with_ratios();
  with_ratios_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.with_ratios)
}

// optional int32 num_areas = 46 [default = 0];
inline bool ModelParam::has_num_areas() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ModelParam::set_has_num_areas() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ModelParam::clear_has_num_areas() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ModelParam::clear_num_areas() {
  num_areas_ = 0;
  clear_has_num_areas();
}
inline ::google::protobuf::int32 ModelParam::num_areas() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.num_areas)
  return num_areas_;
}
inline void ModelParam::set_num_areas(::google::protobuf::int32 value) {
  set_has_num_areas();
  num_areas_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.num_areas)
}

// optional float border_ratio = 45 [default = 0.01];
inline bool ModelParam::has_border_ratio() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ModelParam::set_has_border_ratio() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ModelParam::clear_has_border_ratio() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ModelParam::clear_border_ratio() {
  border_ratio_ = 0.01f;
  clear_has_border_ratio();
}
inline float ModelParam::border_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.border_ratio)
  return border_ratio_;
}
inline void ModelParam::set_border_ratio(float value) {
  set_has_border_ratio();
  border_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.border_ratio)
}

// -------------------------------------------------------------------

// NetworkParam

// optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
inline bool NetworkParam::has_det1_loc_blob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkParam::set_has_det1_loc_blob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkParam::clear_has_det1_loc_blob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkParam::clear_det1_loc_blob() {
  if (det1_loc_blob_ != _default_det1_loc_blob_) {
    det1_loc_blob_->assign(*_default_det1_loc_blob_);
  }
  clear_has_det1_loc_blob();
}
inline const ::std::string& NetworkParam::det1_loc_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
  return *det1_loc_blob_;
}
inline void NetworkParam::set_det1_loc_blob(const ::std::string& value) {
  set_has_det1_loc_blob();
  if (det1_loc_blob_ == _default_det1_loc_blob_) {
    det1_loc_blob_ = new ::std::string;
  }
  det1_loc_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
}
inline void NetworkParam::set_det1_loc_blob(const char* value) {
  set_has_det1_loc_blob();
  if (det1_loc_blob_ == _default_det1_loc_blob_) {
    det1_loc_blob_ = new ::std::string;
  }
  det1_loc_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
}
inline void NetworkParam::set_det1_loc_blob(const char* value, size_t size) {
  set_has_det1_loc_blob();
  if (det1_loc_blob_ == _default_det1_loc_blob_) {
    det1_loc_blob_ = new ::std::string;
  }
  det1_loc_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
}
inline ::std::string* NetworkParam::mutable_det1_loc_blob() {
  set_has_det1_loc_blob();
  if (det1_loc_blob_ == _default_det1_loc_blob_) {
    det1_loc_blob_ = new ::std::string(*_default_det1_loc_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
  return det1_loc_blob_;
}
inline ::std::string* NetworkParam::release_det1_loc_blob() {
  clear_has_det1_loc_blob();
  if (det1_loc_blob_ == _default_det1_loc_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det1_loc_blob_;
    det1_loc_blob_ = const_cast< ::std::string*>(_default_det1_loc_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det1_loc_blob(::std::string* det1_loc_blob) {
  if (det1_loc_blob_ != _default_det1_loc_blob_) {
    delete det1_loc_blob_;
  }
  if (det1_loc_blob) {
    set_has_det1_loc_blob();
    det1_loc_blob_ = det1_loc_blob;
  } else {
    clear_has_det1_loc_blob();
    det1_loc_blob_ = const_cast< ::std::string*>(_default_det1_loc_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
}

// optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
inline bool NetworkParam::has_det1_obj_blob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkParam::set_has_det1_obj_blob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkParam::clear_has_det1_obj_blob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkParam::clear_det1_obj_blob() {
  if (det1_obj_blob_ != _default_det1_obj_blob_) {
    det1_obj_blob_->assign(*_default_det1_obj_blob_);
  }
  clear_has_det1_obj_blob();
}
inline const ::std::string& NetworkParam::det1_obj_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
  return *det1_obj_blob_;
}
inline void NetworkParam::set_det1_obj_blob(const ::std::string& value) {
  set_has_det1_obj_blob();
  if (det1_obj_blob_ == _default_det1_obj_blob_) {
    det1_obj_blob_ = new ::std::string;
  }
  det1_obj_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
}
inline void NetworkParam::set_det1_obj_blob(const char* value) {
  set_has_det1_obj_blob();
  if (det1_obj_blob_ == _default_det1_obj_blob_) {
    det1_obj_blob_ = new ::std::string;
  }
  det1_obj_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
}
inline void NetworkParam::set_det1_obj_blob(const char* value, size_t size) {
  set_has_det1_obj_blob();
  if (det1_obj_blob_ == _default_det1_obj_blob_) {
    det1_obj_blob_ = new ::std::string;
  }
  det1_obj_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
}
inline ::std::string* NetworkParam::mutable_det1_obj_blob() {
  set_has_det1_obj_blob();
  if (det1_obj_blob_ == _default_det1_obj_blob_) {
    det1_obj_blob_ = new ::std::string(*_default_det1_obj_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
  return det1_obj_blob_;
}
inline ::std::string* NetworkParam::release_det1_obj_blob() {
  clear_has_det1_obj_blob();
  if (det1_obj_blob_ == _default_det1_obj_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det1_obj_blob_;
    det1_obj_blob_ = const_cast< ::std::string*>(_default_det1_obj_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det1_obj_blob(::std::string* det1_obj_blob) {
  if (det1_obj_blob_ != _default_det1_obj_blob_) {
    delete det1_obj_blob_;
  }
  if (det1_obj_blob) {
    set_has_det1_obj_blob();
    det1_obj_blob_ = det1_obj_blob;
  } else {
    clear_has_det1_obj_blob();
    det1_obj_blob_ = const_cast< ::std::string*>(_default_det1_obj_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
}

// optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
inline bool NetworkParam::has_det1_cls_blob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkParam::set_has_det1_cls_blob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkParam::clear_has_det1_cls_blob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkParam::clear_det1_cls_blob() {
  if (det1_cls_blob_ != _default_det1_cls_blob_) {
    det1_cls_blob_->assign(*_default_det1_cls_blob_);
  }
  clear_has_det1_cls_blob();
}
inline const ::std::string& NetworkParam::det1_cls_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
  return *det1_cls_blob_;
}
inline void NetworkParam::set_det1_cls_blob(const ::std::string& value) {
  set_has_det1_cls_blob();
  if (det1_cls_blob_ == _default_det1_cls_blob_) {
    det1_cls_blob_ = new ::std::string;
  }
  det1_cls_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
}
inline void NetworkParam::set_det1_cls_blob(const char* value) {
  set_has_det1_cls_blob();
  if (det1_cls_blob_ == _default_det1_cls_blob_) {
    det1_cls_blob_ = new ::std::string;
  }
  det1_cls_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
}
inline void NetworkParam::set_det1_cls_blob(const char* value, size_t size) {
  set_has_det1_cls_blob();
  if (det1_cls_blob_ == _default_det1_cls_blob_) {
    det1_cls_blob_ = new ::std::string;
  }
  det1_cls_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
}
inline ::std::string* NetworkParam::mutable_det1_cls_blob() {
  set_has_det1_cls_blob();
  if (det1_cls_blob_ == _default_det1_cls_blob_) {
    det1_cls_blob_ = new ::std::string(*_default_det1_cls_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
  return det1_cls_blob_;
}
inline ::std::string* NetworkParam::release_det1_cls_blob() {
  clear_has_det1_cls_blob();
  if (det1_cls_blob_ == _default_det1_cls_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det1_cls_blob_;
    det1_cls_blob_ = const_cast< ::std::string*>(_default_det1_cls_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det1_cls_blob(::std::string* det1_cls_blob) {
  if (det1_cls_blob_ != _default_det1_cls_blob_) {
    delete det1_cls_blob_;
  }
  if (det1_cls_blob) {
    set_has_det1_cls_blob();
    det1_cls_blob_ = det1_cls_blob;
  } else {
    clear_has_det1_cls_blob();
    det1_cls_blob_ = const_cast< ::std::string*>(_default_det1_cls_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
}

// optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
inline bool NetworkParam::has_det1_ori_blob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkParam::set_has_det1_ori_blob() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetworkParam::clear_has_det1_ori_blob() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetworkParam::clear_det1_ori_blob() {
  if (det1_ori_blob_ != _default_det1_ori_blob_) {
    det1_ori_blob_->assign(*_default_det1_ori_blob_);
  }
  clear_has_det1_ori_blob();
}
inline const ::std::string& NetworkParam::det1_ori_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
  return *det1_ori_blob_;
}
inline void NetworkParam::set_det1_ori_blob(const ::std::string& value) {
  set_has_det1_ori_blob();
  if (det1_ori_blob_ == _default_det1_ori_blob_) {
    det1_ori_blob_ = new ::std::string;
  }
  det1_ori_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
}
inline void NetworkParam::set_det1_ori_blob(const char* value) {
  set_has_det1_ori_blob();
  if (det1_ori_blob_ == _default_det1_ori_blob_) {
    det1_ori_blob_ = new ::std::string;
  }
  det1_ori_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
}
inline void NetworkParam::set_det1_ori_blob(const char* value, size_t size) {
  set_has_det1_ori_blob();
  if (det1_ori_blob_ == _default_det1_ori_blob_) {
    det1_ori_blob_ = new ::std::string;
  }
  det1_ori_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
}
inline ::std::string* NetworkParam::mutable_det1_ori_blob() {
  set_has_det1_ori_blob();
  if (det1_ori_blob_ == _default_det1_ori_blob_) {
    det1_ori_blob_ = new ::std::string(*_default_det1_ori_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
  return det1_ori_blob_;
}
inline ::std::string* NetworkParam::release_det1_ori_blob() {
  clear_has_det1_ori_blob();
  if (det1_ori_blob_ == _default_det1_ori_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det1_ori_blob_;
    det1_ori_blob_ = const_cast< ::std::string*>(_default_det1_ori_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det1_ori_blob(::std::string* det1_ori_blob) {
  if (det1_ori_blob_ != _default_det1_ori_blob_) {
    delete det1_ori_blob_;
  }
  if (det1_ori_blob) {
    set_has_det1_ori_blob();
    det1_ori_blob_ = det1_ori_blob;
  } else {
    clear_has_det1_ori_blob();
    det1_ori_blob_ = const_cast< ::std::string*>(_default_det1_ori_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
}

// optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
inline bool NetworkParam::has_det1_ori_conf_blob() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetworkParam::set_has_det1_ori_conf_blob() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetworkParam::clear_has_det1_ori_conf_blob() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetworkParam::clear_det1_ori_conf_blob() {
  if (det1_ori_conf_blob_ != _default_det1_ori_conf_blob_) {
    det1_ori_conf_blob_->assign(*_default_det1_ori_conf_blob_);
  }
  clear_has_det1_ori_conf_blob();
}
inline const ::std::string& NetworkParam::det1_ori_conf_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
  return *det1_ori_conf_blob_;
}
inline void NetworkParam::set_det1_ori_conf_blob(const ::std::string& value) {
  set_has_det1_ori_conf_blob();
  if (det1_ori_conf_blob_ == _default_det1_ori_conf_blob_) {
    det1_ori_conf_blob_ = new ::std::string;
  }
  det1_ori_conf_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
}
inline void NetworkParam::set_det1_ori_conf_blob(const char* value) {
  set_has_det1_ori_conf_blob();
  if (det1_ori_conf_blob_ == _default_det1_ori_conf_blob_) {
    det1_ori_conf_blob_ = new ::std::string;
  }
  det1_ori_conf_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
}
inline void NetworkParam::set_det1_ori_conf_blob(const char* value, size_t size) {
  set_has_det1_ori_conf_blob();
  if (det1_ori_conf_blob_ == _default_det1_ori_conf_blob_) {
    det1_ori_conf_blob_ = new ::std::string;
  }
  det1_ori_conf_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
}
inline ::std::string* NetworkParam::mutable_det1_ori_conf_blob() {
  set_has_det1_ori_conf_blob();
  if (det1_ori_conf_blob_ == _default_det1_ori_conf_blob_) {
    det1_ori_conf_blob_ = new ::std::string(*_default_det1_ori_conf_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
  return det1_ori_conf_blob_;
}
inline ::std::string* NetworkParam::release_det1_ori_conf_blob() {
  clear_has_det1_ori_conf_blob();
  if (det1_ori_conf_blob_ == _default_det1_ori_conf_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det1_ori_conf_blob_;
    det1_ori_conf_blob_ = const_cast< ::std::string*>(_default_det1_ori_conf_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det1_ori_conf_blob(::std::string* det1_ori_conf_blob) {
  if (det1_ori_conf_blob_ != _default_det1_ori_conf_blob_) {
    delete det1_ori_conf_blob_;
  }
  if (det1_ori_conf_blob) {
    set_has_det1_ori_conf_blob();
    det1_ori_conf_blob_ = det1_ori_conf_blob;
  } else {
    clear_has_det1_ori_conf_blob();
    det1_ori_conf_blob_ = const_cast< ::std::string*>(_default_det1_ori_conf_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
}

// optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
inline bool NetworkParam::has_det1_dim_blob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetworkParam::set_has_det1_dim_blob() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetworkParam::clear_has_det1_dim_blob() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetworkParam::clear_det1_dim_blob() {
  if (det1_dim_blob_ != _default_det1_dim_blob_) {
    det1_dim_blob_->assign(*_default_det1_dim_blob_);
  }
  clear_has_det1_dim_blob();
}
inline const ::std::string& NetworkParam::det1_dim_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
  return *det1_dim_blob_;
}
inline void NetworkParam::set_det1_dim_blob(const ::std::string& value) {
  set_has_det1_dim_blob();
  if (det1_dim_blob_ == _default_det1_dim_blob_) {
    det1_dim_blob_ = new ::std::string;
  }
  det1_dim_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
}
inline void NetworkParam::set_det1_dim_blob(const char* value) {
  set_has_det1_dim_blob();
  if (det1_dim_blob_ == _default_det1_dim_blob_) {
    det1_dim_blob_ = new ::std::string;
  }
  det1_dim_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
}
inline void NetworkParam::set_det1_dim_blob(const char* value, size_t size) {
  set_has_det1_dim_blob();
  if (det1_dim_blob_ == _default_det1_dim_blob_) {
    det1_dim_blob_ = new ::std::string;
  }
  det1_dim_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
}
inline ::std::string* NetworkParam::mutable_det1_dim_blob() {
  set_has_det1_dim_blob();
  if (det1_dim_blob_ == _default_det1_dim_blob_) {
    det1_dim_blob_ = new ::std::string(*_default_det1_dim_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
  return det1_dim_blob_;
}
inline ::std::string* NetworkParam::release_det1_dim_blob() {
  clear_has_det1_dim_blob();
  if (det1_dim_blob_ == _default_det1_dim_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det1_dim_blob_;
    det1_dim_blob_ = const_cast< ::std::string*>(_default_det1_dim_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det1_dim_blob(::std::string* det1_dim_blob) {
  if (det1_dim_blob_ != _default_det1_dim_blob_) {
    delete det1_dim_blob_;
  }
  if (det1_dim_blob) {
    set_has_det1_dim_blob();
    det1_dim_blob_ = det1_dim_blob;
  } else {
    clear_has_det1_dim_blob();
    det1_dim_blob_ = const_cast< ::std::string*>(_default_det1_dim_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
}

// optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
inline bool NetworkParam::has_det2_loc_blob() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetworkParam::set_has_det2_loc_blob() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetworkParam::clear_has_det2_loc_blob() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetworkParam::clear_det2_loc_blob() {
  if (det2_loc_blob_ != _default_det2_loc_blob_) {
    det2_loc_blob_->assign(*_default_det2_loc_blob_);
  }
  clear_has_det2_loc_blob();
}
inline const ::std::string& NetworkParam::det2_loc_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
  return *det2_loc_blob_;
}
inline void NetworkParam::set_det2_loc_blob(const ::std::string& value) {
  set_has_det2_loc_blob();
  if (det2_loc_blob_ == _default_det2_loc_blob_) {
    det2_loc_blob_ = new ::std::string;
  }
  det2_loc_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
}
inline void NetworkParam::set_det2_loc_blob(const char* value) {
  set_has_det2_loc_blob();
  if (det2_loc_blob_ == _default_det2_loc_blob_) {
    det2_loc_blob_ = new ::std::string;
  }
  det2_loc_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
}
inline void NetworkParam::set_det2_loc_blob(const char* value, size_t size) {
  set_has_det2_loc_blob();
  if (det2_loc_blob_ == _default_det2_loc_blob_) {
    det2_loc_blob_ = new ::std::string;
  }
  det2_loc_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
}
inline ::std::string* NetworkParam::mutable_det2_loc_blob() {
  set_has_det2_loc_blob();
  if (det2_loc_blob_ == _default_det2_loc_blob_) {
    det2_loc_blob_ = new ::std::string(*_default_det2_loc_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
  return det2_loc_blob_;
}
inline ::std::string* NetworkParam::release_det2_loc_blob() {
  clear_has_det2_loc_blob();
  if (det2_loc_blob_ == _default_det2_loc_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det2_loc_blob_;
    det2_loc_blob_ = const_cast< ::std::string*>(_default_det2_loc_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det2_loc_blob(::std::string* det2_loc_blob) {
  if (det2_loc_blob_ != _default_det2_loc_blob_) {
    delete det2_loc_blob_;
  }
  if (det2_loc_blob) {
    set_has_det2_loc_blob();
    det2_loc_blob_ = det2_loc_blob;
  } else {
    clear_has_det2_loc_blob();
    det2_loc_blob_ = const_cast< ::std::string*>(_default_det2_loc_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
}

// optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
inline bool NetworkParam::has_det2_obj_blob() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetworkParam::set_has_det2_obj_blob() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetworkParam::clear_has_det2_obj_blob() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetworkParam::clear_det2_obj_blob() {
  if (det2_obj_blob_ != _default_det2_obj_blob_) {
    det2_obj_blob_->assign(*_default_det2_obj_blob_);
  }
  clear_has_det2_obj_blob();
}
inline const ::std::string& NetworkParam::det2_obj_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
  return *det2_obj_blob_;
}
inline void NetworkParam::set_det2_obj_blob(const ::std::string& value) {
  set_has_det2_obj_blob();
  if (det2_obj_blob_ == _default_det2_obj_blob_) {
    det2_obj_blob_ = new ::std::string;
  }
  det2_obj_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
}
inline void NetworkParam::set_det2_obj_blob(const char* value) {
  set_has_det2_obj_blob();
  if (det2_obj_blob_ == _default_det2_obj_blob_) {
    det2_obj_blob_ = new ::std::string;
  }
  det2_obj_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
}
inline void NetworkParam::set_det2_obj_blob(const char* value, size_t size) {
  set_has_det2_obj_blob();
  if (det2_obj_blob_ == _default_det2_obj_blob_) {
    det2_obj_blob_ = new ::std::string;
  }
  det2_obj_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
}
inline ::std::string* NetworkParam::mutable_det2_obj_blob() {
  set_has_det2_obj_blob();
  if (det2_obj_blob_ == _default_det2_obj_blob_) {
    det2_obj_blob_ = new ::std::string(*_default_det2_obj_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
  return det2_obj_blob_;
}
inline ::std::string* NetworkParam::release_det2_obj_blob() {
  clear_has_det2_obj_blob();
  if (det2_obj_blob_ == _default_det2_obj_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det2_obj_blob_;
    det2_obj_blob_ = const_cast< ::std::string*>(_default_det2_obj_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det2_obj_blob(::std::string* det2_obj_blob) {
  if (det2_obj_blob_ != _default_det2_obj_blob_) {
    delete det2_obj_blob_;
  }
  if (det2_obj_blob) {
    set_has_det2_obj_blob();
    det2_obj_blob_ = det2_obj_blob;
  } else {
    clear_has_det2_obj_blob();
    det2_obj_blob_ = const_cast< ::std::string*>(_default_det2_obj_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
}

// optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
inline bool NetworkParam::has_det2_cls_blob() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NetworkParam::set_has_det2_cls_blob() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NetworkParam::clear_has_det2_cls_blob() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NetworkParam::clear_det2_cls_blob() {
  if (det2_cls_blob_ != _default_det2_cls_blob_) {
    det2_cls_blob_->assign(*_default_det2_cls_blob_);
  }
  clear_has_det2_cls_blob();
}
inline const ::std::string& NetworkParam::det2_cls_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
  return *det2_cls_blob_;
}
inline void NetworkParam::set_det2_cls_blob(const ::std::string& value) {
  set_has_det2_cls_blob();
  if (det2_cls_blob_ == _default_det2_cls_blob_) {
    det2_cls_blob_ = new ::std::string;
  }
  det2_cls_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
}
inline void NetworkParam::set_det2_cls_blob(const char* value) {
  set_has_det2_cls_blob();
  if (det2_cls_blob_ == _default_det2_cls_blob_) {
    det2_cls_blob_ = new ::std::string;
  }
  det2_cls_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
}
inline void NetworkParam::set_det2_cls_blob(const char* value, size_t size) {
  set_has_det2_cls_blob();
  if (det2_cls_blob_ == _default_det2_cls_blob_) {
    det2_cls_blob_ = new ::std::string;
  }
  det2_cls_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
}
inline ::std::string* NetworkParam::mutable_det2_cls_blob() {
  set_has_det2_cls_blob();
  if (det2_cls_blob_ == _default_det2_cls_blob_) {
    det2_cls_blob_ = new ::std::string(*_default_det2_cls_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
  return det2_cls_blob_;
}
inline ::std::string* NetworkParam::release_det2_cls_blob() {
  clear_has_det2_cls_blob();
  if (det2_cls_blob_ == _default_det2_cls_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det2_cls_blob_;
    det2_cls_blob_ = const_cast< ::std::string*>(_default_det2_cls_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det2_cls_blob(::std::string* det2_cls_blob) {
  if (det2_cls_blob_ != _default_det2_cls_blob_) {
    delete det2_cls_blob_;
  }
  if (det2_cls_blob) {
    set_has_det2_cls_blob();
    det2_cls_blob_ = det2_cls_blob;
  } else {
    clear_has_det2_cls_blob();
    det2_cls_blob_ = const_cast< ::std::string*>(_default_det2_cls_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
}

// optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
inline bool NetworkParam::has_det2_ori_blob() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NetworkParam::set_has_det2_ori_blob() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NetworkParam::clear_has_det2_ori_blob() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NetworkParam::clear_det2_ori_blob() {
  if (det2_ori_blob_ != _default_det2_ori_blob_) {
    det2_ori_blob_->assign(*_default_det2_ori_blob_);
  }
  clear_has_det2_ori_blob();
}
inline const ::std::string& NetworkParam::det2_ori_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
  return *det2_ori_blob_;
}
inline void NetworkParam::set_det2_ori_blob(const ::std::string& value) {
  set_has_det2_ori_blob();
  if (det2_ori_blob_ == _default_det2_ori_blob_) {
    det2_ori_blob_ = new ::std::string;
  }
  det2_ori_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
}
inline void NetworkParam::set_det2_ori_blob(const char* value) {
  set_has_det2_ori_blob();
  if (det2_ori_blob_ == _default_det2_ori_blob_) {
    det2_ori_blob_ = new ::std::string;
  }
  det2_ori_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
}
inline void NetworkParam::set_det2_ori_blob(const char* value, size_t size) {
  set_has_det2_ori_blob();
  if (det2_ori_blob_ == _default_det2_ori_blob_) {
    det2_ori_blob_ = new ::std::string;
  }
  det2_ori_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
}
inline ::std::string* NetworkParam::mutable_det2_ori_blob() {
  set_has_det2_ori_blob();
  if (det2_ori_blob_ == _default_det2_ori_blob_) {
    det2_ori_blob_ = new ::std::string(*_default_det2_ori_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
  return det2_ori_blob_;
}
inline ::std::string* NetworkParam::release_det2_ori_blob() {
  clear_has_det2_ori_blob();
  if (det2_ori_blob_ == _default_det2_ori_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det2_ori_blob_;
    det2_ori_blob_ = const_cast< ::std::string*>(_default_det2_ori_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det2_ori_blob(::std::string* det2_ori_blob) {
  if (det2_ori_blob_ != _default_det2_ori_blob_) {
    delete det2_ori_blob_;
  }
  if (det2_ori_blob) {
    set_has_det2_ori_blob();
    det2_ori_blob_ = det2_ori_blob;
  } else {
    clear_has_det2_ori_blob();
    det2_ori_blob_ = const_cast< ::std::string*>(_default_det2_ori_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
}

// optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
inline bool NetworkParam::has_det2_ori_conf_blob() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NetworkParam::set_has_det2_ori_conf_blob() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NetworkParam::clear_has_det2_ori_conf_blob() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NetworkParam::clear_det2_ori_conf_blob() {
  if (det2_ori_conf_blob_ != _default_det2_ori_conf_blob_) {
    det2_ori_conf_blob_->assign(*_default_det2_ori_conf_blob_);
  }
  clear_has_det2_ori_conf_blob();
}
inline const ::std::string& NetworkParam::det2_ori_conf_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
  return *det2_ori_conf_blob_;
}
inline void NetworkParam::set_det2_ori_conf_blob(const ::std::string& value) {
  set_has_det2_ori_conf_blob();
  if (det2_ori_conf_blob_ == _default_det2_ori_conf_blob_) {
    det2_ori_conf_blob_ = new ::std::string;
  }
  det2_ori_conf_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
}
inline void NetworkParam::set_det2_ori_conf_blob(const char* value) {
  set_has_det2_ori_conf_blob();
  if (det2_ori_conf_blob_ == _default_det2_ori_conf_blob_) {
    det2_ori_conf_blob_ = new ::std::string;
  }
  det2_ori_conf_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
}
inline void NetworkParam::set_det2_ori_conf_blob(const char* value, size_t size) {
  set_has_det2_ori_conf_blob();
  if (det2_ori_conf_blob_ == _default_det2_ori_conf_blob_) {
    det2_ori_conf_blob_ = new ::std::string;
  }
  det2_ori_conf_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
}
inline ::std::string* NetworkParam::mutable_det2_ori_conf_blob() {
  set_has_det2_ori_conf_blob();
  if (det2_ori_conf_blob_ == _default_det2_ori_conf_blob_) {
    det2_ori_conf_blob_ = new ::std::string(*_default_det2_ori_conf_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
  return det2_ori_conf_blob_;
}
inline ::std::string* NetworkParam::release_det2_ori_conf_blob() {
  clear_has_det2_ori_conf_blob();
  if (det2_ori_conf_blob_ == _default_det2_ori_conf_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det2_ori_conf_blob_;
    det2_ori_conf_blob_ = const_cast< ::std::string*>(_default_det2_ori_conf_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det2_ori_conf_blob(::std::string* det2_ori_conf_blob) {
  if (det2_ori_conf_blob_ != _default_det2_ori_conf_blob_) {
    delete det2_ori_conf_blob_;
  }
  if (det2_ori_conf_blob) {
    set_has_det2_ori_conf_blob();
    det2_ori_conf_blob_ = det2_ori_conf_blob;
  } else {
    clear_has_det2_ori_conf_blob();
    det2_ori_conf_blob_ = const_cast< ::std::string*>(_default_det2_ori_conf_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
}

// optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
inline bool NetworkParam::has_det2_dim_blob() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NetworkParam::set_has_det2_dim_blob() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NetworkParam::clear_has_det2_dim_blob() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NetworkParam::clear_det2_dim_blob() {
  if (det2_dim_blob_ != _default_det2_dim_blob_) {
    det2_dim_blob_->assign(*_default_det2_dim_blob_);
  }
  clear_has_det2_dim_blob();
}
inline const ::std::string& NetworkParam::det2_dim_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
  return *det2_dim_blob_;
}
inline void NetworkParam::set_det2_dim_blob(const ::std::string& value) {
  set_has_det2_dim_blob();
  if (det2_dim_blob_ == _default_det2_dim_blob_) {
    det2_dim_blob_ = new ::std::string;
  }
  det2_dim_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
}
inline void NetworkParam::set_det2_dim_blob(const char* value) {
  set_has_det2_dim_blob();
  if (det2_dim_blob_ == _default_det2_dim_blob_) {
    det2_dim_blob_ = new ::std::string;
  }
  det2_dim_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
}
inline void NetworkParam::set_det2_dim_blob(const char* value, size_t size) {
  set_has_det2_dim_blob();
  if (det2_dim_blob_ == _default_det2_dim_blob_) {
    det2_dim_blob_ = new ::std::string;
  }
  det2_dim_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
}
inline ::std::string* NetworkParam::mutable_det2_dim_blob() {
  set_has_det2_dim_blob();
  if (det2_dim_blob_ == _default_det2_dim_blob_) {
    det2_dim_blob_ = new ::std::string(*_default_det2_dim_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
  return det2_dim_blob_;
}
inline ::std::string* NetworkParam::release_det2_dim_blob() {
  clear_has_det2_dim_blob();
  if (det2_dim_blob_ == _default_det2_dim_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det2_dim_blob_;
    det2_dim_blob_ = const_cast< ::std::string*>(_default_det2_dim_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det2_dim_blob(::std::string* det2_dim_blob) {
  if (det2_dim_blob_ != _default_det2_dim_blob_) {
    delete det2_dim_blob_;
  }
  if (det2_dim_blob) {
    set_has_det2_dim_blob();
    det2_dim_blob_ = det2_dim_blob;
  } else {
    clear_has_det2_dim_blob();
    det2_dim_blob_ = const_cast< ::std::string*>(_default_det2_dim_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
}

// optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
inline bool NetworkParam::has_det3_loc_blob() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NetworkParam::set_has_det3_loc_blob() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NetworkParam::clear_has_det3_loc_blob() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NetworkParam::clear_det3_loc_blob() {
  if (det3_loc_blob_ != _default_det3_loc_blob_) {
    det3_loc_blob_->assign(*_default_det3_loc_blob_);
  }
  clear_has_det3_loc_blob();
}
inline const ::std::string& NetworkParam::det3_loc_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
  return *det3_loc_blob_;
}
inline void NetworkParam::set_det3_loc_blob(const ::std::string& value) {
  set_has_det3_loc_blob();
  if (det3_loc_blob_ == _default_det3_loc_blob_) {
    det3_loc_blob_ = new ::std::string;
  }
  det3_loc_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
}
inline void NetworkParam::set_det3_loc_blob(const char* value) {
  set_has_det3_loc_blob();
  if (det3_loc_blob_ == _default_det3_loc_blob_) {
    det3_loc_blob_ = new ::std::string;
  }
  det3_loc_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
}
inline void NetworkParam::set_det3_loc_blob(const char* value, size_t size) {
  set_has_det3_loc_blob();
  if (det3_loc_blob_ == _default_det3_loc_blob_) {
    det3_loc_blob_ = new ::std::string;
  }
  det3_loc_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
}
inline ::std::string* NetworkParam::mutable_det3_loc_blob() {
  set_has_det3_loc_blob();
  if (det3_loc_blob_ == _default_det3_loc_blob_) {
    det3_loc_blob_ = new ::std::string(*_default_det3_loc_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
  return det3_loc_blob_;
}
inline ::std::string* NetworkParam::release_det3_loc_blob() {
  clear_has_det3_loc_blob();
  if (det3_loc_blob_ == _default_det3_loc_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det3_loc_blob_;
    det3_loc_blob_ = const_cast< ::std::string*>(_default_det3_loc_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det3_loc_blob(::std::string* det3_loc_blob) {
  if (det3_loc_blob_ != _default_det3_loc_blob_) {
    delete det3_loc_blob_;
  }
  if (det3_loc_blob) {
    set_has_det3_loc_blob();
    det3_loc_blob_ = det3_loc_blob;
  } else {
    clear_has_det3_loc_blob();
    det3_loc_blob_ = const_cast< ::std::string*>(_default_det3_loc_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
}

// optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
inline bool NetworkParam::has_det3_obj_blob() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NetworkParam::set_has_det3_obj_blob() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NetworkParam::clear_has_det3_obj_blob() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NetworkParam::clear_det3_obj_blob() {
  if (det3_obj_blob_ != _default_det3_obj_blob_) {
    det3_obj_blob_->assign(*_default_det3_obj_blob_);
  }
  clear_has_det3_obj_blob();
}
inline const ::std::string& NetworkParam::det3_obj_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
  return *det3_obj_blob_;
}
inline void NetworkParam::set_det3_obj_blob(const ::std::string& value) {
  set_has_det3_obj_blob();
  if (det3_obj_blob_ == _default_det3_obj_blob_) {
    det3_obj_blob_ = new ::std::string;
  }
  det3_obj_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
}
inline void NetworkParam::set_det3_obj_blob(const char* value) {
  set_has_det3_obj_blob();
  if (det3_obj_blob_ == _default_det3_obj_blob_) {
    det3_obj_blob_ = new ::std::string;
  }
  det3_obj_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
}
inline void NetworkParam::set_det3_obj_blob(const char* value, size_t size) {
  set_has_det3_obj_blob();
  if (det3_obj_blob_ == _default_det3_obj_blob_) {
    det3_obj_blob_ = new ::std::string;
  }
  det3_obj_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
}
inline ::std::string* NetworkParam::mutable_det3_obj_blob() {
  set_has_det3_obj_blob();
  if (det3_obj_blob_ == _default_det3_obj_blob_) {
    det3_obj_blob_ = new ::std::string(*_default_det3_obj_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
  return det3_obj_blob_;
}
inline ::std::string* NetworkParam::release_det3_obj_blob() {
  clear_has_det3_obj_blob();
  if (det3_obj_blob_ == _default_det3_obj_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det3_obj_blob_;
    det3_obj_blob_ = const_cast< ::std::string*>(_default_det3_obj_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det3_obj_blob(::std::string* det3_obj_blob) {
  if (det3_obj_blob_ != _default_det3_obj_blob_) {
    delete det3_obj_blob_;
  }
  if (det3_obj_blob) {
    set_has_det3_obj_blob();
    det3_obj_blob_ = det3_obj_blob;
  } else {
    clear_has_det3_obj_blob();
    det3_obj_blob_ = const_cast< ::std::string*>(_default_det3_obj_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
}

// optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
inline bool NetworkParam::has_det3_cls_blob() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NetworkParam::set_has_det3_cls_blob() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NetworkParam::clear_has_det3_cls_blob() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NetworkParam::clear_det3_cls_blob() {
  if (det3_cls_blob_ != _default_det3_cls_blob_) {
    det3_cls_blob_->assign(*_default_det3_cls_blob_);
  }
  clear_has_det3_cls_blob();
}
inline const ::std::string& NetworkParam::det3_cls_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
  return *det3_cls_blob_;
}
inline void NetworkParam::set_det3_cls_blob(const ::std::string& value) {
  set_has_det3_cls_blob();
  if (det3_cls_blob_ == _default_det3_cls_blob_) {
    det3_cls_blob_ = new ::std::string;
  }
  det3_cls_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
}
inline void NetworkParam::set_det3_cls_blob(const char* value) {
  set_has_det3_cls_blob();
  if (det3_cls_blob_ == _default_det3_cls_blob_) {
    det3_cls_blob_ = new ::std::string;
  }
  det3_cls_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
}
inline void NetworkParam::set_det3_cls_blob(const char* value, size_t size) {
  set_has_det3_cls_blob();
  if (det3_cls_blob_ == _default_det3_cls_blob_) {
    det3_cls_blob_ = new ::std::string;
  }
  det3_cls_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
}
inline ::std::string* NetworkParam::mutable_det3_cls_blob() {
  set_has_det3_cls_blob();
  if (det3_cls_blob_ == _default_det3_cls_blob_) {
    det3_cls_blob_ = new ::std::string(*_default_det3_cls_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
  return det3_cls_blob_;
}
inline ::std::string* NetworkParam::release_det3_cls_blob() {
  clear_has_det3_cls_blob();
  if (det3_cls_blob_ == _default_det3_cls_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det3_cls_blob_;
    det3_cls_blob_ = const_cast< ::std::string*>(_default_det3_cls_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det3_cls_blob(::std::string* det3_cls_blob) {
  if (det3_cls_blob_ != _default_det3_cls_blob_) {
    delete det3_cls_blob_;
  }
  if (det3_cls_blob) {
    set_has_det3_cls_blob();
    det3_cls_blob_ = det3_cls_blob;
  } else {
    clear_has_det3_cls_blob();
    det3_cls_blob_ = const_cast< ::std::string*>(_default_det3_cls_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
}

// optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
inline bool NetworkParam::has_det3_ori_blob() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NetworkParam::set_has_det3_ori_blob() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NetworkParam::clear_has_det3_ori_blob() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NetworkParam::clear_det3_ori_blob() {
  if (det3_ori_blob_ != _default_det3_ori_blob_) {
    det3_ori_blob_->assign(*_default_det3_ori_blob_);
  }
  clear_has_det3_ori_blob();
}
inline const ::std::string& NetworkParam::det3_ori_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
  return *det3_ori_blob_;
}
inline void NetworkParam::set_det3_ori_blob(const ::std::string& value) {
  set_has_det3_ori_blob();
  if (det3_ori_blob_ == _default_det3_ori_blob_) {
    det3_ori_blob_ = new ::std::string;
  }
  det3_ori_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
}
inline void NetworkParam::set_det3_ori_blob(const char* value) {
  set_has_det3_ori_blob();
  if (det3_ori_blob_ == _default_det3_ori_blob_) {
    det3_ori_blob_ = new ::std::string;
  }
  det3_ori_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
}
inline void NetworkParam::set_det3_ori_blob(const char* value, size_t size) {
  set_has_det3_ori_blob();
  if (det3_ori_blob_ == _default_det3_ori_blob_) {
    det3_ori_blob_ = new ::std::string;
  }
  det3_ori_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
}
inline ::std::string* NetworkParam::mutable_det3_ori_blob() {
  set_has_det3_ori_blob();
  if (det3_ori_blob_ == _default_det3_ori_blob_) {
    det3_ori_blob_ = new ::std::string(*_default_det3_ori_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
  return det3_ori_blob_;
}
inline ::std::string* NetworkParam::release_det3_ori_blob() {
  clear_has_det3_ori_blob();
  if (det3_ori_blob_ == _default_det3_ori_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det3_ori_blob_;
    det3_ori_blob_ = const_cast< ::std::string*>(_default_det3_ori_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det3_ori_blob(::std::string* det3_ori_blob) {
  if (det3_ori_blob_ != _default_det3_ori_blob_) {
    delete det3_ori_blob_;
  }
  if (det3_ori_blob) {
    set_has_det3_ori_blob();
    det3_ori_blob_ = det3_ori_blob;
  } else {
    clear_has_det3_ori_blob();
    det3_ori_blob_ = const_cast< ::std::string*>(_default_det3_ori_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
}

// optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
inline bool NetworkParam::has_det3_ori_conf_blob() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NetworkParam::set_has_det3_ori_conf_blob() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NetworkParam::clear_has_det3_ori_conf_blob() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NetworkParam::clear_det3_ori_conf_blob() {
  if (det3_ori_conf_blob_ != _default_det3_ori_conf_blob_) {
    det3_ori_conf_blob_->assign(*_default_det3_ori_conf_blob_);
  }
  clear_has_det3_ori_conf_blob();
}
inline const ::std::string& NetworkParam::det3_ori_conf_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
  return *det3_ori_conf_blob_;
}
inline void NetworkParam::set_det3_ori_conf_blob(const ::std::string& value) {
  set_has_det3_ori_conf_blob();
  if (det3_ori_conf_blob_ == _default_det3_ori_conf_blob_) {
    det3_ori_conf_blob_ = new ::std::string;
  }
  det3_ori_conf_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
}
inline void NetworkParam::set_det3_ori_conf_blob(const char* value) {
  set_has_det3_ori_conf_blob();
  if (det3_ori_conf_blob_ == _default_det3_ori_conf_blob_) {
    det3_ori_conf_blob_ = new ::std::string;
  }
  det3_ori_conf_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
}
inline void NetworkParam::set_det3_ori_conf_blob(const char* value, size_t size) {
  set_has_det3_ori_conf_blob();
  if (det3_ori_conf_blob_ == _default_det3_ori_conf_blob_) {
    det3_ori_conf_blob_ = new ::std::string;
  }
  det3_ori_conf_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
}
inline ::std::string* NetworkParam::mutable_det3_ori_conf_blob() {
  set_has_det3_ori_conf_blob();
  if (det3_ori_conf_blob_ == _default_det3_ori_conf_blob_) {
    det3_ori_conf_blob_ = new ::std::string(*_default_det3_ori_conf_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
  return det3_ori_conf_blob_;
}
inline ::std::string* NetworkParam::release_det3_ori_conf_blob() {
  clear_has_det3_ori_conf_blob();
  if (det3_ori_conf_blob_ == _default_det3_ori_conf_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det3_ori_conf_blob_;
    det3_ori_conf_blob_ = const_cast< ::std::string*>(_default_det3_ori_conf_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det3_ori_conf_blob(::std::string* det3_ori_conf_blob) {
  if (det3_ori_conf_blob_ != _default_det3_ori_conf_blob_) {
    delete det3_ori_conf_blob_;
  }
  if (det3_ori_conf_blob) {
    set_has_det3_ori_conf_blob();
    det3_ori_conf_blob_ = det3_ori_conf_blob;
  } else {
    clear_has_det3_ori_conf_blob();
    det3_ori_conf_blob_ = const_cast< ::std::string*>(_default_det3_ori_conf_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
}

// optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
inline bool NetworkParam::has_det3_dim_blob() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NetworkParam::set_has_det3_dim_blob() {
  _has_bits_[0] |= 0x00020000u;
}
inline void NetworkParam::clear_has_det3_dim_blob() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void NetworkParam::clear_det3_dim_blob() {
  if (det3_dim_blob_ != _default_det3_dim_blob_) {
    det3_dim_blob_->assign(*_default_det3_dim_blob_);
  }
  clear_has_det3_dim_blob();
}
inline const ::std::string& NetworkParam::det3_dim_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
  return *det3_dim_blob_;
}
inline void NetworkParam::set_det3_dim_blob(const ::std::string& value) {
  set_has_det3_dim_blob();
  if (det3_dim_blob_ == _default_det3_dim_blob_) {
    det3_dim_blob_ = new ::std::string;
  }
  det3_dim_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
}
inline void NetworkParam::set_det3_dim_blob(const char* value) {
  set_has_det3_dim_blob();
  if (det3_dim_blob_ == _default_det3_dim_blob_) {
    det3_dim_blob_ = new ::std::string;
  }
  det3_dim_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
}
inline void NetworkParam::set_det3_dim_blob(const char* value, size_t size) {
  set_has_det3_dim_blob();
  if (det3_dim_blob_ == _default_det3_dim_blob_) {
    det3_dim_blob_ = new ::std::string;
  }
  det3_dim_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
}
inline ::std::string* NetworkParam::mutable_det3_dim_blob() {
  set_has_det3_dim_blob();
  if (det3_dim_blob_ == _default_det3_dim_blob_) {
    det3_dim_blob_ = new ::std::string(*_default_det3_dim_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
  return det3_dim_blob_;
}
inline ::std::string* NetworkParam::release_det3_dim_blob() {
  clear_has_det3_dim_blob();
  if (det3_dim_blob_ == _default_det3_dim_blob_) {
    return NULL;
  } else {
    ::std::string* temp = det3_dim_blob_;
    det3_dim_blob_ = const_cast< ::std::string*>(_default_det3_dim_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_det3_dim_blob(::std::string* det3_dim_blob) {
  if (det3_dim_blob_ != _default_det3_dim_blob_) {
    delete det3_dim_blob_;
  }
  if (det3_dim_blob) {
    set_has_det3_dim_blob();
    det3_dim_blob_ = det3_dim_blob;
  } else {
    clear_has_det3_dim_blob();
    det3_dim_blob_ = const_cast< ::std::string*>(_default_det3_dim_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
}

// optional string lof_blob = 19 [default = "lof_pred"];
inline bool NetworkParam::has_lof_blob() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void NetworkParam::set_has_lof_blob() {
  _has_bits_[0] |= 0x00040000u;
}
inline void NetworkParam::clear_has_lof_blob() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void NetworkParam::clear_lof_blob() {
  if (lof_blob_ != _default_lof_blob_) {
    lof_blob_->assign(*_default_lof_blob_);
  }
  clear_has_lof_blob();
}
inline const ::std::string& NetworkParam::lof_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.lof_blob)
  return *lof_blob_;
}
inline void NetworkParam::set_lof_blob(const ::std::string& value) {
  set_has_lof_blob();
  if (lof_blob_ == _default_lof_blob_) {
    lof_blob_ = new ::std::string;
  }
  lof_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.lof_blob)
}
inline void NetworkParam::set_lof_blob(const char* value) {
  set_has_lof_blob();
  if (lof_blob_ == _default_lof_blob_) {
    lof_blob_ = new ::std::string;
  }
  lof_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.lof_blob)
}
inline void NetworkParam::set_lof_blob(const char* value, size_t size) {
  set_has_lof_blob();
  if (lof_blob_ == _default_lof_blob_) {
    lof_blob_ = new ::std::string;
  }
  lof_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.lof_blob)
}
inline ::std::string* NetworkParam::mutable_lof_blob() {
  set_has_lof_blob();
  if (lof_blob_ == _default_lof_blob_) {
    lof_blob_ = new ::std::string(*_default_lof_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.lof_blob)
  return lof_blob_;
}
inline ::std::string* NetworkParam::release_lof_blob() {
  clear_has_lof_blob();
  if (lof_blob_ == _default_lof_blob_) {
    return NULL;
  } else {
    ::std::string* temp = lof_blob_;
    lof_blob_ = const_cast< ::std::string*>(_default_lof_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_lof_blob(::std::string* lof_blob) {
  if (lof_blob_ != _default_lof_blob_) {
    delete lof_blob_;
  }
  if (lof_blob) {
    set_has_lof_blob();
    lof_blob_ = lof_blob;
  } else {
    clear_has_lof_blob();
    lof_blob_ = const_cast< ::std::string*>(_default_lof_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.lof_blob)
}

// optional string lor_blob = 20 [default = "lor_pred"];
inline bool NetworkParam::has_lor_blob() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void NetworkParam::set_has_lor_blob() {
  _has_bits_[0] |= 0x00080000u;
}
inline void NetworkParam::clear_has_lor_blob() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void NetworkParam::clear_lor_blob() {
  if (lor_blob_ != _default_lor_blob_) {
    lor_blob_->assign(*_default_lor_blob_);
  }
  clear_has_lor_blob();
}
inline const ::std::string& NetworkParam::lor_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.lor_blob)
  return *lor_blob_;
}
inline void NetworkParam::set_lor_blob(const ::std::string& value) {
  set_has_lor_blob();
  if (lor_blob_ == _default_lor_blob_) {
    lor_blob_ = new ::std::string;
  }
  lor_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.lor_blob)
}
inline void NetworkParam::set_lor_blob(const char* value) {
  set_has_lor_blob();
  if (lor_blob_ == _default_lor_blob_) {
    lor_blob_ = new ::std::string;
  }
  lor_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.lor_blob)
}
inline void NetworkParam::set_lor_blob(const char* value, size_t size) {
  set_has_lor_blob();
  if (lor_blob_ == _default_lor_blob_) {
    lor_blob_ = new ::std::string;
  }
  lor_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.lor_blob)
}
inline ::std::string* NetworkParam::mutable_lor_blob() {
  set_has_lor_blob();
  if (lor_blob_ == _default_lor_blob_) {
    lor_blob_ = new ::std::string(*_default_lor_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.lor_blob)
  return lor_blob_;
}
inline ::std::string* NetworkParam::release_lor_blob() {
  clear_has_lor_blob();
  if (lor_blob_ == _default_lor_blob_) {
    return NULL;
  } else {
    ::std::string* temp = lor_blob_;
    lor_blob_ = const_cast< ::std::string*>(_default_lor_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_lor_blob(::std::string* lor_blob) {
  if (lor_blob_ != _default_lor_blob_) {
    delete lor_blob_;
  }
  if (lor_blob) {
    set_has_lor_blob();
    lor_blob_ = lor_blob;
  } else {
    clear_has_lor_blob();
    lor_blob_ = const_cast< ::std::string*>(_default_lor_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.lor_blob)
}

// optional string input_blob = 21 [default = "data"];
inline bool NetworkParam::has_input_blob() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void NetworkParam::set_has_input_blob() {
  _has_bits_[0] |= 0x00100000u;
}
inline void NetworkParam::clear_has_input_blob() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void NetworkParam::clear_input_blob() {
  if (input_blob_ != _default_input_blob_) {
    input_blob_->assign(*_default_input_blob_);
  }
  clear_has_input_blob();
}
inline const ::std::string& NetworkParam::input_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.input_blob)
  return *input_blob_;
}
inline void NetworkParam::set_input_blob(const ::std::string& value) {
  set_has_input_blob();
  if (input_blob_ == _default_input_blob_) {
    input_blob_ = new ::std::string;
  }
  input_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.input_blob)
}
inline void NetworkParam::set_input_blob(const char* value) {
  set_has_input_blob();
  if (input_blob_ == _default_input_blob_) {
    input_blob_ = new ::std::string;
  }
  input_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.input_blob)
}
inline void NetworkParam::set_input_blob(const char* value, size_t size) {
  set_has_input_blob();
  if (input_blob_ == _default_input_blob_) {
    input_blob_ = new ::std::string;
  }
  input_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.input_blob)
}
inline ::std::string* NetworkParam::mutable_input_blob() {
  set_has_input_blob();
  if (input_blob_ == _default_input_blob_) {
    input_blob_ = new ::std::string(*_default_input_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.input_blob)
  return input_blob_;
}
inline ::std::string* NetworkParam::release_input_blob() {
  clear_has_input_blob();
  if (input_blob_ == _default_input_blob_) {
    return NULL;
  } else {
    ::std::string* temp = input_blob_;
    input_blob_ = const_cast< ::std::string*>(_default_input_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_input_blob(::std::string* input_blob) {
  if (input_blob_ != _default_input_blob_) {
    delete input_blob_;
  }
  if (input_blob) {
    set_has_input_blob();
    input_blob_ = input_blob;
  } else {
    clear_has_input_blob();
    input_blob_ = const_cast< ::std::string*>(_default_input_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.input_blob)
}

// optional string rois_blob = 22 [default = "rois_pred"];
inline bool NetworkParam::has_rois_blob() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void NetworkParam::set_has_rois_blob() {
  _has_bits_[0] |= 0x00200000u;
}
inline void NetworkParam::clear_has_rois_blob() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void NetworkParam::clear_rois_blob() {
  if (rois_blob_ != _default_rois_blob_) {
    rois_blob_->assign(*_default_rois_blob_);
  }
  clear_has_rois_blob();
}
inline const ::std::string& NetworkParam::rois_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.rois_blob)
  return *rois_blob_;
}
inline void NetworkParam::set_rois_blob(const ::std::string& value) {
  set_has_rois_blob();
  if (rois_blob_ == _default_rois_blob_) {
    rois_blob_ = new ::std::string;
  }
  rois_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.rois_blob)
}
inline void NetworkParam::set_rois_blob(const char* value) {
  set_has_rois_blob();
  if (rois_blob_ == _default_rois_blob_) {
    rois_blob_ = new ::std::string;
  }
  rois_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.rois_blob)
}
inline void NetworkParam::set_rois_blob(const char* value, size_t size) {
  set_has_rois_blob();
  if (rois_blob_ == _default_rois_blob_) {
    rois_blob_ = new ::std::string;
  }
  rois_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.rois_blob)
}
inline ::std::string* NetworkParam::mutable_rois_blob() {
  set_has_rois_blob();
  if (rois_blob_ == _default_rois_blob_) {
    rois_blob_ = new ::std::string(*_default_rois_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.rois_blob)
  return rois_blob_;
}
inline ::std::string* NetworkParam::release_rois_blob() {
  clear_has_rois_blob();
  if (rois_blob_ == _default_rois_blob_) {
    return NULL;
  } else {
    ::std::string* temp = rois_blob_;
    rois_blob_ = const_cast< ::std::string*>(_default_rois_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_rois_blob(::std::string* rois_blob) {
  if (rois_blob_ != _default_rois_blob_) {
    delete rois_blob_;
  }
  if (rois_blob) {
    set_has_rois_blob();
    rois_blob_ = rois_blob;
  } else {
    clear_has_rois_blob();
    rois_blob_ = const_cast< ::std::string*>(_default_rois_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.rois_blob)
}

// optional string feat_blob = 23 [default = "conv_feat"];
inline bool NetworkParam::has_feat_blob() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void NetworkParam::set_has_feat_blob() {
  _has_bits_[0] |= 0x00400000u;
}
inline void NetworkParam::clear_has_feat_blob() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void NetworkParam::clear_feat_blob() {
  if (feat_blob_ != _default_feat_blob_) {
    feat_blob_->assign(*_default_feat_blob_);
  }
  clear_has_feat_blob();
}
inline const ::std::string& NetworkParam::feat_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.feat_blob)
  return *feat_blob_;
}
inline void NetworkParam::set_feat_blob(const ::std::string& value) {
  set_has_feat_blob();
  if (feat_blob_ == _default_feat_blob_) {
    feat_blob_ = new ::std::string;
  }
  feat_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.feat_blob)
}
inline void NetworkParam::set_feat_blob(const char* value) {
  set_has_feat_blob();
  if (feat_blob_ == _default_feat_blob_) {
    feat_blob_ = new ::std::string;
  }
  feat_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.feat_blob)
}
inline void NetworkParam::set_feat_blob(const char* value, size_t size) {
  set_has_feat_blob();
  if (feat_blob_ == _default_feat_blob_) {
    feat_blob_ = new ::std::string;
  }
  feat_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.feat_blob)
}
inline ::std::string* NetworkParam::mutable_feat_blob() {
  set_has_feat_blob();
  if (feat_blob_ == _default_feat_blob_) {
    feat_blob_ = new ::std::string(*_default_feat_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.feat_blob)
  return feat_blob_;
}
inline ::std::string* NetworkParam::release_feat_blob() {
  clear_has_feat_blob();
  if (feat_blob_ == _default_feat_blob_) {
    return NULL;
  } else {
    ::std::string* temp = feat_blob_;
    feat_blob_ = const_cast< ::std::string*>(_default_feat_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_feat_blob(::std::string* feat_blob) {
  if (feat_blob_ != _default_feat_blob_) {
    delete feat_blob_;
  }
  if (feat_blob) {
    set_has_feat_blob();
    feat_blob_ = feat_blob;
  } else {
    clear_has_feat_blob();
    feat_blob_ = const_cast< ::std::string*>(_default_feat_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.feat_blob)
}

// optional string box_blob = 24 [default = "box_pred"];
inline bool NetworkParam::has_box_blob() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void NetworkParam::set_has_box_blob() {
  _has_bits_[0] |= 0x00800000u;
}
inline void NetworkParam::clear_has_box_blob() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void NetworkParam::clear_box_blob() {
  if (box_blob_ != _default_box_blob_) {
    box_blob_->assign(*_default_box_blob_);
  }
  clear_has_box_blob();
}
inline const ::std::string& NetworkParam::box_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.box_blob)
  return *box_blob_;
}
inline void NetworkParam::set_box_blob(const ::std::string& value) {
  set_has_box_blob();
  if (box_blob_ == _default_box_blob_) {
    box_blob_ = new ::std::string;
  }
  box_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.box_blob)
}
inline void NetworkParam::set_box_blob(const char* value) {
  set_has_box_blob();
  if (box_blob_ == _default_box_blob_) {
    box_blob_ = new ::std::string;
  }
  box_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.box_blob)
}
inline void NetworkParam::set_box_blob(const char* value, size_t size) {
  set_has_box_blob();
  if (box_blob_ == _default_box_blob_) {
    box_blob_ = new ::std::string;
  }
  box_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.box_blob)
}
inline ::std::string* NetworkParam::mutable_box_blob() {
  set_has_box_blob();
  if (box_blob_ == _default_box_blob_) {
    box_blob_ = new ::std::string(*_default_box_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.box_blob)
  return box_blob_;
}
inline ::std::string* NetworkParam::release_box_blob() {
  clear_has_box_blob();
  if (box_blob_ == _default_box_blob_) {
    return NULL;
  } else {
    ::std::string* temp = box_blob_;
    box_blob_ = const_cast< ::std::string*>(_default_box_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_box_blob(::std::string* box_blob) {
  if (box_blob_ != _default_box_blob_) {
    delete box_blob_;
  }
  if (box_blob) {
    set_has_box_blob();
    box_blob_ = box_blob;
  } else {
    clear_has_box_blob();
    box_blob_ = const_cast< ::std::string*>(_default_box_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.box_blob)
}

// optional string iou_blob = 25 [default = "iou_pred"];
inline bool NetworkParam::has_iou_blob() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void NetworkParam::set_has_iou_blob() {
  _has_bits_[0] |= 0x01000000u;
}
inline void NetworkParam::clear_has_iou_blob() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void NetworkParam::clear_iou_blob() {
  if (iou_blob_ != _default_iou_blob_) {
    iou_blob_->assign(*_default_iou_blob_);
  }
  clear_has_iou_blob();
}
inline const ::std::string& NetworkParam::iou_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.iou_blob)
  return *iou_blob_;
}
inline void NetworkParam::set_iou_blob(const ::std::string& value) {
  set_has_iou_blob();
  if (iou_blob_ == _default_iou_blob_) {
    iou_blob_ = new ::std::string;
  }
  iou_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.iou_blob)
}
inline void NetworkParam::set_iou_blob(const char* value) {
  set_has_iou_blob();
  if (iou_blob_ == _default_iou_blob_) {
    iou_blob_ = new ::std::string;
  }
  iou_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.iou_blob)
}
inline void NetworkParam::set_iou_blob(const char* value, size_t size) {
  set_has_iou_blob();
  if (iou_blob_ == _default_iou_blob_) {
    iou_blob_ = new ::std::string;
  }
  iou_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.iou_blob)
}
inline ::std::string* NetworkParam::mutable_iou_blob() {
  set_has_iou_blob();
  if (iou_blob_ == _default_iou_blob_) {
    iou_blob_ = new ::std::string(*_default_iou_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.iou_blob)
  return iou_blob_;
}
inline ::std::string* NetworkParam::release_iou_blob() {
  clear_has_iou_blob();
  if (iou_blob_ == _default_iou_blob_) {
    return NULL;
  } else {
    ::std::string* temp = iou_blob_;
    iou_blob_ = const_cast< ::std::string*>(_default_iou_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_iou_blob(::std::string* iou_blob) {
  if (iou_blob_ != _default_iou_blob_) {
    delete iou_blob_;
  }
  if (iou_blob) {
    set_has_iou_blob();
    iou_blob_ = iou_blob;
  } else {
    clear_has_iou_blob();
    iou_blob_ = const_cast< ::std::string*>(_default_iou_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.iou_blob)
}

// optional string brvis_blob = 26 [default = "brvis_pred"];
inline bool NetworkParam::has_brvis_blob() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void NetworkParam::set_has_brvis_blob() {
  _has_bits_[0] |= 0x02000000u;
}
inline void NetworkParam::clear_has_brvis_blob() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void NetworkParam::clear_brvis_blob() {
  if (brvis_blob_ != _default_brvis_blob_) {
    brvis_blob_->assign(*_default_brvis_blob_);
  }
  clear_has_brvis_blob();
}
inline const ::std::string& NetworkParam::brvis_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
  return *brvis_blob_;
}
inline void NetworkParam::set_brvis_blob(const ::std::string& value) {
  set_has_brvis_blob();
  if (brvis_blob_ == _default_brvis_blob_) {
    brvis_blob_ = new ::std::string;
  }
  brvis_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
}
inline void NetworkParam::set_brvis_blob(const char* value) {
  set_has_brvis_blob();
  if (brvis_blob_ == _default_brvis_blob_) {
    brvis_blob_ = new ::std::string;
  }
  brvis_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
}
inline void NetworkParam::set_brvis_blob(const char* value, size_t size) {
  set_has_brvis_blob();
  if (brvis_blob_ == _default_brvis_blob_) {
    brvis_blob_ = new ::std::string;
  }
  brvis_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
}
inline ::std::string* NetworkParam::mutable_brvis_blob() {
  set_has_brvis_blob();
  if (brvis_blob_ == _default_brvis_blob_) {
    brvis_blob_ = new ::std::string(*_default_brvis_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
  return brvis_blob_;
}
inline ::std::string* NetworkParam::release_brvis_blob() {
  clear_has_brvis_blob();
  if (brvis_blob_ == _default_brvis_blob_) {
    return NULL;
  } else {
    ::std::string* temp = brvis_blob_;
    brvis_blob_ = const_cast< ::std::string*>(_default_brvis_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_brvis_blob(::std::string* brvis_blob) {
  if (brvis_blob_ != _default_brvis_blob_) {
    delete brvis_blob_;
  }
  if (brvis_blob) {
    set_has_brvis_blob();
    brvis_blob_ = brvis_blob;
  } else {
    clear_has_brvis_blob();
    brvis_blob_ = const_cast< ::std::string*>(_default_brvis_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
}

// optional string brswt_blob = 27 [default = "brswt_pred"];
inline bool NetworkParam::has_brswt_blob() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void NetworkParam::set_has_brswt_blob() {
  _has_bits_[0] |= 0x04000000u;
}
inline void NetworkParam::clear_has_brswt_blob() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void NetworkParam::clear_brswt_blob() {
  if (brswt_blob_ != _default_brswt_blob_) {
    brswt_blob_->assign(*_default_brswt_blob_);
  }
  clear_has_brswt_blob();
}
inline const ::std::string& NetworkParam::brswt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
  return *brswt_blob_;
}
inline void NetworkParam::set_brswt_blob(const ::std::string& value) {
  set_has_brswt_blob();
  if (brswt_blob_ == _default_brswt_blob_) {
    brswt_blob_ = new ::std::string;
  }
  brswt_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
}
inline void NetworkParam::set_brswt_blob(const char* value) {
  set_has_brswt_blob();
  if (brswt_blob_ == _default_brswt_blob_) {
    brswt_blob_ = new ::std::string;
  }
  brswt_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
}
inline void NetworkParam::set_brswt_blob(const char* value, size_t size) {
  set_has_brswt_blob();
  if (brswt_blob_ == _default_brswt_blob_) {
    brswt_blob_ = new ::std::string;
  }
  brswt_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
}
inline ::std::string* NetworkParam::mutable_brswt_blob() {
  set_has_brswt_blob();
  if (brswt_blob_ == _default_brswt_blob_) {
    brswt_blob_ = new ::std::string(*_default_brswt_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
  return brswt_blob_;
}
inline ::std::string* NetworkParam::release_brswt_blob() {
  clear_has_brswt_blob();
  if (brswt_blob_ == _default_brswt_blob_) {
    return NULL;
  } else {
    ::std::string* temp = brswt_blob_;
    brswt_blob_ = const_cast< ::std::string*>(_default_brswt_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_brswt_blob(::std::string* brswt_blob) {
  if (brswt_blob_ != _default_brswt_blob_) {
    delete brswt_blob_;
  }
  if (brswt_blob) {
    set_has_brswt_blob();
    brswt_blob_ = brswt_blob;
  } else {
    clear_has_brswt_blob();
    brswt_blob_ = const_cast< ::std::string*>(_default_brswt_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
}

// optional string ltvis_blob = 28 [default = "ltvis_pred"];
inline bool NetworkParam::has_ltvis_blob() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void NetworkParam::set_has_ltvis_blob() {
  _has_bits_[0] |= 0x08000000u;
}
inline void NetworkParam::clear_has_ltvis_blob() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void NetworkParam::clear_ltvis_blob() {
  if (ltvis_blob_ != _default_ltvis_blob_) {
    ltvis_blob_->assign(*_default_ltvis_blob_);
  }
  clear_has_ltvis_blob();
}
inline const ::std::string& NetworkParam::ltvis_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
  return *ltvis_blob_;
}
inline void NetworkParam::set_ltvis_blob(const ::std::string& value) {
  set_has_ltvis_blob();
  if (ltvis_blob_ == _default_ltvis_blob_) {
    ltvis_blob_ = new ::std::string;
  }
  ltvis_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
}
inline void NetworkParam::set_ltvis_blob(const char* value) {
  set_has_ltvis_blob();
  if (ltvis_blob_ == _default_ltvis_blob_) {
    ltvis_blob_ = new ::std::string;
  }
  ltvis_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
}
inline void NetworkParam::set_ltvis_blob(const char* value, size_t size) {
  set_has_ltvis_blob();
  if (ltvis_blob_ == _default_ltvis_blob_) {
    ltvis_blob_ = new ::std::string;
  }
  ltvis_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
}
inline ::std::string* NetworkParam::mutable_ltvis_blob() {
  set_has_ltvis_blob();
  if (ltvis_blob_ == _default_ltvis_blob_) {
    ltvis_blob_ = new ::std::string(*_default_ltvis_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
  return ltvis_blob_;
}
inline ::std::string* NetworkParam::release_ltvis_blob() {
  clear_has_ltvis_blob();
  if (ltvis_blob_ == _default_ltvis_blob_) {
    return NULL;
  } else {
    ::std::string* temp = ltvis_blob_;
    ltvis_blob_ = const_cast< ::std::string*>(_default_ltvis_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_ltvis_blob(::std::string* ltvis_blob) {
  if (ltvis_blob_ != _default_ltvis_blob_) {
    delete ltvis_blob_;
  }
  if (ltvis_blob) {
    set_has_ltvis_blob();
    ltvis_blob_ = ltvis_blob;
  } else {
    clear_has_ltvis_blob();
    ltvis_blob_ = const_cast< ::std::string*>(_default_ltvis_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
}

// optional string ltswt_blob = 29 [default = "ltswt_pred"];
inline bool NetworkParam::has_ltswt_blob() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void NetworkParam::set_has_ltswt_blob() {
  _has_bits_[0] |= 0x10000000u;
}
inline void NetworkParam::clear_has_ltswt_blob() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void NetworkParam::clear_ltswt_blob() {
  if (ltswt_blob_ != _default_ltswt_blob_) {
    ltswt_blob_->assign(*_default_ltswt_blob_);
  }
  clear_has_ltswt_blob();
}
inline const ::std::string& NetworkParam::ltswt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
  return *ltswt_blob_;
}
inline void NetworkParam::set_ltswt_blob(const ::std::string& value) {
  set_has_ltswt_blob();
  if (ltswt_blob_ == _default_ltswt_blob_) {
    ltswt_blob_ = new ::std::string;
  }
  ltswt_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
}
inline void NetworkParam::set_ltswt_blob(const char* value) {
  set_has_ltswt_blob();
  if (ltswt_blob_ == _default_ltswt_blob_) {
    ltswt_blob_ = new ::std::string;
  }
  ltswt_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
}
inline void NetworkParam::set_ltswt_blob(const char* value, size_t size) {
  set_has_ltswt_blob();
  if (ltswt_blob_ == _default_ltswt_blob_) {
    ltswt_blob_ = new ::std::string;
  }
  ltswt_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
}
inline ::std::string* NetworkParam::mutable_ltswt_blob() {
  set_has_ltswt_blob();
  if (ltswt_blob_ == _default_ltswt_blob_) {
    ltswt_blob_ = new ::std::string(*_default_ltswt_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
  return ltswt_blob_;
}
inline ::std::string* NetworkParam::release_ltswt_blob() {
  clear_has_ltswt_blob();
  if (ltswt_blob_ == _default_ltswt_blob_) {
    return NULL;
  } else {
    ::std::string* temp = ltswt_blob_;
    ltswt_blob_ = const_cast< ::std::string*>(_default_ltswt_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_ltswt_blob(::std::string* ltswt_blob) {
  if (ltswt_blob_ != _default_ltswt_blob_) {
    delete ltswt_blob_;
  }
  if (ltswt_blob) {
    set_has_ltswt_blob();
    ltswt_blob_ = ltswt_blob;
  } else {
    clear_has_ltswt_blob();
    ltswt_blob_ = const_cast< ::std::string*>(_default_ltswt_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
}

// optional string rtvis_blob = 30 [default = "rtvis_pred"];
inline bool NetworkParam::has_rtvis_blob() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void NetworkParam::set_has_rtvis_blob() {
  _has_bits_[0] |= 0x20000000u;
}
inline void NetworkParam::clear_has_rtvis_blob() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void NetworkParam::clear_rtvis_blob() {
  if (rtvis_blob_ != _default_rtvis_blob_) {
    rtvis_blob_->assign(*_default_rtvis_blob_);
  }
  clear_has_rtvis_blob();
}
inline const ::std::string& NetworkParam::rtvis_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
  return *rtvis_blob_;
}
inline void NetworkParam::set_rtvis_blob(const ::std::string& value) {
  set_has_rtvis_blob();
  if (rtvis_blob_ == _default_rtvis_blob_) {
    rtvis_blob_ = new ::std::string;
  }
  rtvis_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
}
inline void NetworkParam::set_rtvis_blob(const char* value) {
  set_has_rtvis_blob();
  if (rtvis_blob_ == _default_rtvis_blob_) {
    rtvis_blob_ = new ::std::string;
  }
  rtvis_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
}
inline void NetworkParam::set_rtvis_blob(const char* value, size_t size) {
  set_has_rtvis_blob();
  if (rtvis_blob_ == _default_rtvis_blob_) {
    rtvis_blob_ = new ::std::string;
  }
  rtvis_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
}
inline ::std::string* NetworkParam::mutable_rtvis_blob() {
  set_has_rtvis_blob();
  if (rtvis_blob_ == _default_rtvis_blob_) {
    rtvis_blob_ = new ::std::string(*_default_rtvis_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
  return rtvis_blob_;
}
inline ::std::string* NetworkParam::release_rtvis_blob() {
  clear_has_rtvis_blob();
  if (rtvis_blob_ == _default_rtvis_blob_) {
    return NULL;
  } else {
    ::std::string* temp = rtvis_blob_;
    rtvis_blob_ = const_cast< ::std::string*>(_default_rtvis_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_rtvis_blob(::std::string* rtvis_blob) {
  if (rtvis_blob_ != _default_rtvis_blob_) {
    delete rtvis_blob_;
  }
  if (rtvis_blob) {
    set_has_rtvis_blob();
    rtvis_blob_ = rtvis_blob;
  } else {
    clear_has_rtvis_blob();
    rtvis_blob_ = const_cast< ::std::string*>(_default_rtvis_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
}

// optional string rtswt_blob = 31 [default = "rtswt_pred"];
inline bool NetworkParam::has_rtswt_blob() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void NetworkParam::set_has_rtswt_blob() {
  _has_bits_[0] |= 0x40000000u;
}
inline void NetworkParam::clear_has_rtswt_blob() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void NetworkParam::clear_rtswt_blob() {
  if (rtswt_blob_ != _default_rtswt_blob_) {
    rtswt_blob_->assign(*_default_rtswt_blob_);
  }
  clear_has_rtswt_blob();
}
inline const ::std::string& NetworkParam::rtswt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
  return *rtswt_blob_;
}
inline void NetworkParam::set_rtswt_blob(const ::std::string& value) {
  set_has_rtswt_blob();
  if (rtswt_blob_ == _default_rtswt_blob_) {
    rtswt_blob_ = new ::std::string;
  }
  rtswt_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
}
inline void NetworkParam::set_rtswt_blob(const char* value) {
  set_has_rtswt_blob();
  if (rtswt_blob_ == _default_rtswt_blob_) {
    rtswt_blob_ = new ::std::string;
  }
  rtswt_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
}
inline void NetworkParam::set_rtswt_blob(const char* value, size_t size) {
  set_has_rtswt_blob();
  if (rtswt_blob_ == _default_rtswt_blob_) {
    rtswt_blob_ = new ::std::string;
  }
  rtswt_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
}
inline ::std::string* NetworkParam::mutable_rtswt_blob() {
  set_has_rtswt_blob();
  if (rtswt_blob_ == _default_rtswt_blob_) {
    rtswt_blob_ = new ::std::string(*_default_rtswt_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
  return rtswt_blob_;
}
inline ::std::string* NetworkParam::release_rtswt_blob() {
  clear_has_rtswt_blob();
  if (rtswt_blob_ == _default_rtswt_blob_) {
    return NULL;
  } else {
    ::std::string* temp = rtswt_blob_;
    rtswt_blob_ = const_cast< ::std::string*>(_default_rtswt_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_rtswt_blob(::std::string* rtswt_blob) {
  if (rtswt_blob_ != _default_rtswt_blob_) {
    delete rtswt_blob_;
  }
  if (rtswt_blob) {
    set_has_rtswt_blob();
    rtswt_blob_ = rtswt_blob;
  } else {
    clear_has_rtswt_blob();
    rtswt_blob_ = const_cast< ::std::string*>(_default_rtswt_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
}

// optional string area_id_blob = 32 [default = "area_id_pred"];
inline bool NetworkParam::has_area_id_blob() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void NetworkParam::set_has_area_id_blob() {
  _has_bits_[0] |= 0x80000000u;
}
inline void NetworkParam::clear_has_area_id_blob() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void NetworkParam::clear_area_id_blob() {
  if (area_id_blob_ != _default_area_id_blob_) {
    area_id_blob_->assign(*_default_area_id_blob_);
  }
  clear_has_area_id_blob();
}
inline const ::std::string& NetworkParam::area_id_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
  return *area_id_blob_;
}
inline void NetworkParam::set_area_id_blob(const ::std::string& value) {
  set_has_area_id_blob();
  if (area_id_blob_ == _default_area_id_blob_) {
    area_id_blob_ = new ::std::string;
  }
  area_id_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
}
inline void NetworkParam::set_area_id_blob(const char* value) {
  set_has_area_id_blob();
  if (area_id_blob_ == _default_area_id_blob_) {
    area_id_blob_ = new ::std::string;
  }
  area_id_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
}
inline void NetworkParam::set_area_id_blob(const char* value, size_t size) {
  set_has_area_id_blob();
  if (area_id_blob_ == _default_area_id_blob_) {
    area_id_blob_ = new ::std::string;
  }
  area_id_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
}
inline ::std::string* NetworkParam::mutable_area_id_blob() {
  set_has_area_id_blob();
  if (area_id_blob_ == _default_area_id_blob_) {
    area_id_blob_ = new ::std::string(*_default_area_id_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
  return area_id_blob_;
}
inline ::std::string* NetworkParam::release_area_id_blob() {
  clear_has_area_id_blob();
  if (area_id_blob_ == _default_area_id_blob_) {
    return NULL;
  } else {
    ::std::string* temp = area_id_blob_;
    area_id_blob_ = const_cast< ::std::string*>(_default_area_id_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_area_id_blob(::std::string* area_id_blob) {
  if (area_id_blob_ != _default_area_id_blob_) {
    delete area_id_blob_;
  }
  if (area_id_blob) {
    set_has_area_id_blob();
    area_id_blob_ = area_id_blob;
  } else {
    clear_has_area_id_blob();
    area_id_blob_ = const_cast< ::std::string*>(_default_area_id_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
}

// optional string visible_ratio_blob = 33 [default = "vis_pred"];
inline bool NetworkParam::has_visible_ratio_blob() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void NetworkParam::set_has_visible_ratio_blob() {
  _has_bits_[1] |= 0x00000001u;
}
inline void NetworkParam::clear_has_visible_ratio_blob() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void NetworkParam::clear_visible_ratio_blob() {
  if (visible_ratio_blob_ != _default_visible_ratio_blob_) {
    visible_ratio_blob_->assign(*_default_visible_ratio_blob_);
  }
  clear_has_visible_ratio_blob();
}
inline const ::std::string& NetworkParam::visible_ratio_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
  return *visible_ratio_blob_;
}
inline void NetworkParam::set_visible_ratio_blob(const ::std::string& value) {
  set_has_visible_ratio_blob();
  if (visible_ratio_blob_ == _default_visible_ratio_blob_) {
    visible_ratio_blob_ = new ::std::string;
  }
  visible_ratio_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
}
inline void NetworkParam::set_visible_ratio_blob(const char* value) {
  set_has_visible_ratio_blob();
  if (visible_ratio_blob_ == _default_visible_ratio_blob_) {
    visible_ratio_blob_ = new ::std::string;
  }
  visible_ratio_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
}
inline void NetworkParam::set_visible_ratio_blob(const char* value, size_t size) {
  set_has_visible_ratio_blob();
  if (visible_ratio_blob_ == _default_visible_ratio_blob_) {
    visible_ratio_blob_ = new ::std::string;
  }
  visible_ratio_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
}
inline ::std::string* NetworkParam::mutable_visible_ratio_blob() {
  set_has_visible_ratio_blob();
  if (visible_ratio_blob_ == _default_visible_ratio_blob_) {
    visible_ratio_blob_ = new ::std::string(*_default_visible_ratio_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
  return visible_ratio_blob_;
}
inline ::std::string* NetworkParam::release_visible_ratio_blob() {
  clear_has_visible_ratio_blob();
  if (visible_ratio_blob_ == _default_visible_ratio_blob_) {
    return NULL;
  } else {
    ::std::string* temp = visible_ratio_blob_;
    visible_ratio_blob_ = const_cast< ::std::string*>(_default_visible_ratio_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_visible_ratio_blob(::std::string* visible_ratio_blob) {
  if (visible_ratio_blob_ != _default_visible_ratio_blob_) {
    delete visible_ratio_blob_;
  }
  if (visible_ratio_blob) {
    set_has_visible_ratio_blob();
    visible_ratio_blob_ = visible_ratio_blob;
  } else {
    clear_has_visible_ratio_blob();
    visible_ratio_blob_ = const_cast< ::std::string*>(_default_visible_ratio_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
}

// optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
inline bool NetworkParam::has_cut_off_ratio_blob() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void NetworkParam::set_has_cut_off_ratio_blob() {
  _has_bits_[1] |= 0x00000002u;
}
inline void NetworkParam::clear_has_cut_off_ratio_blob() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void NetworkParam::clear_cut_off_ratio_blob() {
  if (cut_off_ratio_blob_ != _default_cut_off_ratio_blob_) {
    cut_off_ratio_blob_->assign(*_default_cut_off_ratio_blob_);
  }
  clear_has_cut_off_ratio_blob();
}
inline const ::std::string& NetworkParam::cut_off_ratio_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
  return *cut_off_ratio_blob_;
}
inline void NetworkParam::set_cut_off_ratio_blob(const ::std::string& value) {
  set_has_cut_off_ratio_blob();
  if (cut_off_ratio_blob_ == _default_cut_off_ratio_blob_) {
    cut_off_ratio_blob_ = new ::std::string;
  }
  cut_off_ratio_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
}
inline void NetworkParam::set_cut_off_ratio_blob(const char* value) {
  set_has_cut_off_ratio_blob();
  if (cut_off_ratio_blob_ == _default_cut_off_ratio_blob_) {
    cut_off_ratio_blob_ = new ::std::string;
  }
  cut_off_ratio_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
}
inline void NetworkParam::set_cut_off_ratio_blob(const char* value, size_t size) {
  set_has_cut_off_ratio_blob();
  if (cut_off_ratio_blob_ == _default_cut_off_ratio_blob_) {
    cut_off_ratio_blob_ = new ::std::string;
  }
  cut_off_ratio_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
}
inline ::std::string* NetworkParam::mutable_cut_off_ratio_blob() {
  set_has_cut_off_ratio_blob();
  if (cut_off_ratio_blob_ == _default_cut_off_ratio_blob_) {
    cut_off_ratio_blob_ = new ::std::string(*_default_cut_off_ratio_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
  return cut_off_ratio_blob_;
}
inline ::std::string* NetworkParam::release_cut_off_ratio_blob() {
  clear_has_cut_off_ratio_blob();
  if (cut_off_ratio_blob_ == _default_cut_off_ratio_blob_) {
    return NULL;
  } else {
    ::std::string* temp = cut_off_ratio_blob_;
    cut_off_ratio_blob_ = const_cast< ::std::string*>(_default_cut_off_ratio_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_cut_off_ratio_blob(::std::string* cut_off_ratio_blob) {
  if (cut_off_ratio_blob_ != _default_cut_off_ratio_blob_) {
    delete cut_off_ratio_blob_;
  }
  if (cut_off_ratio_blob) {
    set_has_cut_off_ratio_blob();
    cut_off_ratio_blob_ = cut_off_ratio_blob;
  } else {
    clear_has_cut_off_ratio_blob();
    cut_off_ratio_blob_ = const_cast< ::std::string*>(_default_cut_off_ratio_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
}

// -------------------------------------------------------------------

// NMSParam

// optional string type = 1 [default = "NormalNMS"];
inline bool NMSParam::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NMSParam::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NMSParam::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NMSParam::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& NMSParam::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NMSParam.type)
  return *type_;
}
inline void NMSParam::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NMSParam.type)
}
inline void NMSParam::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NMSParam.type)
}
inline void NMSParam::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NMSParam.type)
}
inline ::std::string* NMSParam::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NMSParam.type)
  return type_;
}
inline ::std::string* NMSParam::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void NMSParam::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NMSParam.type)
}

// optional float threshold = 2 [default = 0.4];
inline bool NMSParam::has_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NMSParam::set_has_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NMSParam::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NMSParam::clear_threshold() {
  threshold_ = 0.4f;
  clear_has_threshold();
}
inline float NMSParam::threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NMSParam.threshold)
  return threshold_;
}
inline void NMSParam::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NMSParam.threshold)
}

// optional float sigma = 3 [default = 0.4];
inline bool NMSParam::has_sigma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NMSParam::set_has_sigma() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NMSParam::clear_has_sigma() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NMSParam::clear_sigma() {
  sigma_ = 0.4f;
  clear_has_sigma();
}
inline float NMSParam::sigma() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NMSParam.sigma)
  return sigma_;
}
inline void NMSParam::set_sigma(float value) {
  set_has_sigma();
  sigma_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NMSParam.sigma)
}

// optional float inter_cls_conf_thresh = 4 [default = 0.1];
inline bool NMSParam::has_inter_cls_conf_thresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NMSParam::set_has_inter_cls_conf_thresh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NMSParam::clear_has_inter_cls_conf_thresh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NMSParam::clear_inter_cls_conf_thresh() {
  inter_cls_conf_thresh_ = 0.1f;
  clear_has_inter_cls_conf_thresh();
}
inline float NMSParam::inter_cls_conf_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NMSParam.inter_cls_conf_thresh)
  return inter_cls_conf_thresh_;
}
inline void NMSParam::set_inter_cls_conf_thresh(float value) {
  set_has_inter_cls_conf_thresh();
  inter_cls_conf_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NMSParam.inter_cls_conf_thresh)
}

// optional float inter_cls_nms_thresh = 5 [default = 1];
inline bool NMSParam::has_inter_cls_nms_thresh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NMSParam::set_has_inter_cls_nms_thresh() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NMSParam::clear_has_inter_cls_nms_thresh() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NMSParam::clear_inter_cls_nms_thresh() {
  inter_cls_nms_thresh_ = 1;
  clear_has_inter_cls_nms_thresh();
}
inline float NMSParam::inter_cls_nms_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NMSParam.inter_cls_nms_thresh)
  return inter_cls_nms_thresh_;
}
inline void NMSParam::set_inter_cls_nms_thresh(float value) {
  set_has_inter_cls_nms_thresh();
  inter_cls_nms_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NMSParam.inter_cls_nms_thresh)
}

// -------------------------------------------------------------------

// BBoxStatistics

// repeated float mean = 1;
inline int BBoxStatistics::mean_size() const {
  return mean_.size();
}
inline void BBoxStatistics::clear_mean() {
  mean_.Clear();
}
inline float BBoxStatistics::mean(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.BBoxStatistics.mean)
  return mean_.Get(index);
}
inline void BBoxStatistics::set_mean(int index, float value) {
  mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.BBoxStatistics.mean)
}
inline void BBoxStatistics::add_mean(float value) {
  mean_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.camera.yolo.BBoxStatistics.mean)
}
inline const ::google::protobuf::RepeatedField< float >&
BBoxStatistics::mean() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.yolo.BBoxStatistics.mean)
  return mean_;
}
inline ::google::protobuf::RepeatedField< float >*
BBoxStatistics::mutable_mean() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.yolo.BBoxStatistics.mean)
  return &mean_;
}

// repeated float std = 2;
inline int BBoxStatistics::std_size() const {
  return std_.size();
}
inline void BBoxStatistics::clear_std() {
  std_.Clear();
}
inline float BBoxStatistics::std(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.BBoxStatistics.std)
  return std_.Get(index);
}
inline void BBoxStatistics::set_std(int index, float value) {
  std_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.BBoxStatistics.std)
}
inline void BBoxStatistics::add_std(float value) {
  std_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.camera.yolo.BBoxStatistics.std)
}
inline const ::google::protobuf::RepeatedField< float >&
BBoxStatistics::std() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.yolo.BBoxStatistics.std)
  return std_;
}
inline ::google::protobuf::RepeatedField< float >*
BBoxStatistics::mutable_std() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.yolo.BBoxStatistics.std)
  return &std_;
}

// -------------------------------------------------------------------

// DimensionStatistics

// optional float mean_h = 1 [default = 0];
inline bool DimensionStatistics::has_mean_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DimensionStatistics::set_has_mean_h() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DimensionStatistics::clear_has_mean_h() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DimensionStatistics::clear_mean_h() {
  mean_h_ = 0;
  clear_has_mean_h();
}
inline float DimensionStatistics::mean_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.DimensionStatistics.mean_h)
  return mean_h_;
}
inline void DimensionStatistics::set_mean_h(float value) {
  set_has_mean_h();
  mean_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.DimensionStatistics.mean_h)
}

// optional float mean_w = 2 [default = 0];
inline bool DimensionStatistics::has_mean_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DimensionStatistics::set_has_mean_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DimensionStatistics::clear_has_mean_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DimensionStatistics::clear_mean_w() {
  mean_w_ = 0;
  clear_has_mean_w();
}
inline float DimensionStatistics::mean_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.DimensionStatistics.mean_w)
  return mean_w_;
}
inline void DimensionStatistics::set_mean_w(float value) {
  set_has_mean_w();
  mean_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.DimensionStatistics.mean_w)
}

// optional float mean_l = 3 [default = 0];
inline bool DimensionStatistics::has_mean_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DimensionStatistics::set_has_mean_l() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DimensionStatistics::clear_has_mean_l() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DimensionStatistics::clear_mean_l() {
  mean_l_ = 0;
  clear_has_mean_l();
}
inline float DimensionStatistics::mean_l() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.DimensionStatistics.mean_l)
  return mean_l_;
}
inline void DimensionStatistics::set_mean_l(float value) {
  set_has_mean_l();
  mean_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.DimensionStatistics.mean_l)
}

// optional float std_h = 4 [default = 1];
inline bool DimensionStatistics::has_std_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DimensionStatistics::set_has_std_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DimensionStatistics::clear_has_std_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DimensionStatistics::clear_std_h() {
  std_h_ = 1;
  clear_has_std_h();
}
inline float DimensionStatistics::std_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.DimensionStatistics.std_h)
  return std_h_;
}
inline void DimensionStatistics::set_std_h(float value) {
  set_has_std_h();
  std_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.DimensionStatistics.std_h)
}

// optional float std_w = 5 [default = 1];
inline bool DimensionStatistics::has_std_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DimensionStatistics::set_has_std_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DimensionStatistics::clear_has_std_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DimensionStatistics::clear_std_w() {
  std_w_ = 1;
  clear_has_std_w();
}
inline float DimensionStatistics::std_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.DimensionStatistics.std_w)
  return std_w_;
}
inline void DimensionStatistics::set_std_w(float value) {
  set_has_std_w();
  std_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.DimensionStatistics.std_w)
}

// optional float std_l = 6 [default = 1];
inline bool DimensionStatistics::has_std_l() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DimensionStatistics::set_has_std_l() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DimensionStatistics::clear_has_std_l() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DimensionStatistics::clear_std_l() {
  std_l_ = 1;
  clear_has_std_l();
}
inline float DimensionStatistics::std_l() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.DimensionStatistics.std_l)
  return std_l_;
}
inline void DimensionStatistics::set_std_l(float value) {
  set_has_std_l();
  std_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.DimensionStatistics.std_l)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace yolo
}  // namespace camera
}  // namespace perception
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_yolo_2eproto__INCLUDED
