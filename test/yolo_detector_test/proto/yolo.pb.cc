// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yolo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "yolo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace camera {
namespace yolo {

namespace {

const ::google::protobuf::Descriptor* YoloParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YoloParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* NMSParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NMSParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* BBoxStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BBoxStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* DimensionStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DimensionStatistics_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_yolo_2eproto() {
  protobuf_AddDesc_yolo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "yolo.proto");
  GOOGLE_CHECK(file != NULL);
  YoloParam_descriptor_ = file->message_type(0);
  static const int YoloParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoloParam, model_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoloParam, net_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoloParam, nms_param_),
  };
  YoloParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YoloParam_descriptor_,
      YoloParam::default_instance_,
      YoloParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoloParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoloParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YoloParam));
  ModelParam_descriptor_ = file->message_type(1);
  static const int ModelParam_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, proto_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, weight_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, stage1_pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, stage1_md_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, stage2_pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, stage2_md_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, anchors_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, types_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, feature_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, offset_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, cropped_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, resized_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, aligned_pixel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, confidence_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, light_vis_conf_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, light_swt_conf_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, roi_conf_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, box_conf_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, stage2_nms_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, min_2d_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, min_3d_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, min_3d_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, min_3d_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, calibratetable_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, model_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, ori_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, per_cls_reg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, dimension_statistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, bbox_statistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, expand_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, with_box3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, with_frbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, with_lights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, with_ratios_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, num_areas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, border_ratio_),
  };
  ModelParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelParam_descriptor_,
      ModelParam::default_instance_,
      ModelParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelParam));
  NetworkParam_descriptor_ = file->message_type(2);
  static const int NetworkParam_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det1_loc_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det1_obj_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det1_cls_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det1_ori_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det1_ori_conf_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det1_dim_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det2_loc_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det2_obj_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det2_cls_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det2_ori_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det2_ori_conf_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det2_dim_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det3_loc_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det3_obj_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det3_cls_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det3_ori_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det3_ori_conf_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, det3_dim_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, lof_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, lor_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, input_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, rois_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, feat_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, box_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, iou_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, brvis_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, brswt_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, ltvis_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, ltswt_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, rtvis_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, rtswt_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, area_id_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, visible_ratio_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, cut_off_ratio_blob_),
  };
  NetworkParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkParam_descriptor_,
      NetworkParam::default_instance_,
      NetworkParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkParam));
  NMSParam_descriptor_ = file->message_type(3);
  static const int NMSParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, sigma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, inter_cls_conf_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, inter_cls_nms_thresh_),
  };
  NMSParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NMSParam_descriptor_,
      NMSParam::default_instance_,
      NMSParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NMSParam));
  BBoxStatistics_descriptor_ = file->message_type(4);
  static const int BBoxStatistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxStatistics, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxStatistics, std_),
  };
  BBoxStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BBoxStatistics_descriptor_,
      BBoxStatistics::default_instance_,
      BBoxStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBoxStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BBoxStatistics));
  DimensionStatistics_descriptor_ = file->message_type(5);
  static const int DimensionStatistics_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatistics, mean_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatistics, mean_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatistics, mean_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatistics, std_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatistics, std_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatistics, std_l_),
  };
  DimensionStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DimensionStatistics_descriptor_,
      DimensionStatistics::default_instance_,
      DimensionStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DimensionStatistics));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_yolo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YoloParam_descriptor_, &YoloParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelParam_descriptor_, &ModelParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkParam_descriptor_, &NetworkParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NMSParam_descriptor_, &NMSParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BBoxStatistics_descriptor_, &BBoxStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DimensionStatistics_descriptor_, &DimensionStatistics::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_yolo_2eproto() {
  delete YoloParam::default_instance_;
  delete YoloParam_reflection_;
  delete ModelParam::default_instance_;
  delete ModelParam_reflection_;
  delete ModelParam::_default_model_name_;
  delete ModelParam::_default_proto_file_;
  delete ModelParam::_default_weight_file_;
  delete ModelParam::_default_stage1_pt_;
  delete ModelParam::_default_stage1_md_;
  delete ModelParam::_default_stage2_pt_;
  delete ModelParam::_default_stage2_md_;
  delete ModelParam::_default_anchors_file_;
  delete ModelParam::_default_types_file_;
  delete ModelParam::_default_feature_file_;
  delete ModelParam::_default_calibratetable_root_;
  delete ModelParam::_default_model_type_;
  delete ModelParam::_default_expand_file_;
  delete NetworkParam::default_instance_;
  delete NetworkParam_reflection_;
  delete NetworkParam::_default_det1_loc_blob_;
  delete NetworkParam::_default_det1_obj_blob_;
  delete NetworkParam::_default_det1_cls_blob_;
  delete NetworkParam::_default_det1_ori_blob_;
  delete NetworkParam::_default_det1_ori_conf_blob_;
  delete NetworkParam::_default_det1_dim_blob_;
  delete NetworkParam::_default_det2_loc_blob_;
  delete NetworkParam::_default_det2_obj_blob_;
  delete NetworkParam::_default_det2_cls_blob_;
  delete NetworkParam::_default_det2_ori_blob_;
  delete NetworkParam::_default_det2_ori_conf_blob_;
  delete NetworkParam::_default_det2_dim_blob_;
  delete NetworkParam::_default_det3_loc_blob_;
  delete NetworkParam::_default_det3_obj_blob_;
  delete NetworkParam::_default_det3_cls_blob_;
  delete NetworkParam::_default_det3_ori_blob_;
  delete NetworkParam::_default_det3_ori_conf_blob_;
  delete NetworkParam::_default_det3_dim_blob_;
  delete NetworkParam::_default_lof_blob_;
  delete NetworkParam::_default_lor_blob_;
  delete NetworkParam::_default_input_blob_;
  delete NetworkParam::_default_rois_blob_;
  delete NetworkParam::_default_feat_blob_;
  delete NetworkParam::_default_box_blob_;
  delete NetworkParam::_default_iou_blob_;
  delete NetworkParam::_default_brvis_blob_;
  delete NetworkParam::_default_brswt_blob_;
  delete NetworkParam::_default_ltvis_blob_;
  delete NetworkParam::_default_ltswt_blob_;
  delete NetworkParam::_default_rtvis_blob_;
  delete NetworkParam::_default_rtswt_blob_;
  delete NetworkParam::_default_area_id_blob_;
  delete NetworkParam::_default_visible_ratio_blob_;
  delete NetworkParam::_default_cut_off_ratio_blob_;
  delete NMSParam::default_instance_;
  delete NMSParam_reflection_;
  delete NMSParam::_default_type_;
  delete BBoxStatistics::default_instance_;
  delete BBoxStatistics_reflection_;
  delete DimensionStatistics::default_instance_;
  delete DimensionStatistics_reflection_;
}

void protobuf_AddDesc_yolo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nyolo.proto\022\035apollo.perception.camera.y"
    "olo\"\307\001\n\tYoloParam\022>\n\013model_param\030\001 \001(\0132)"
    ".apollo.perception.camera.yolo.ModelPara"
    "m\022>\n\tnet_param\030\002 \001(\0132+.apollo.perception"
    ".camera.yolo.NetworkParam\022:\n\tnms_param\030\003"
    " \001(\0132\'.apollo.perception.camera.yolo.NMS"
    "Param\"\311\t\n\nModelParam\022\033\n\nmodel_name\030\001 \001(\t"
    ":\007yolo-2d\022\034\n\nproto_file\030\002 \001(\t:\010caffe.pt\022"
    " \n\013weight_file\030\003 \001(\t:\013caffe.model\022\033\n\tsta"
    "ge1_pt\030\025 \001(\t:\010caffe.pt\022\036\n\tstage1_md\030\026 \001("
    "\t:\013caffe.model\022\033\n\tstage2_pt\030\027 \001(\t:\010caffe"
    ".pt\022\036\n\tstage2_md\030\030 \001(\t:\013caffe.model\022!\n\014a"
    "nchors_file\030\004 \001(\t:\013anchors.txt\022\035\n\ntypes_"
    "file\030\005 \001(\t:\ttypes.txt\022 \n\014feature_file\030\006 "
    "\001(\t:\nfeature.pt\022\036\n\014offset_ratio\030\007 \001(\002:\0100"
    ".288889\022\037\n\rcropped_ratio\030\r \001(\002:\0100.711111"
    "\022\033\n\rresized_width\030\016 \001(\005:\0041440\022\031\n\raligned"
    "_pixel\030\017 \001(\005:\00232\022!\n\024confidence_threshold"
    "\030\010 \001(\002:\0030.1\022%\n\030light_vis_conf_threshold\030"
    "! \001(\002:\0030.5\022%\n\030light_swt_conf_threshold\030\""
    " \001(\002:\0030.5\022\037\n\022roi_conf_threshold\030\031 \001(\002:\0030"
    ".1\022\037\n\022box_conf_threshold\030\032 \001(\002:\0030.5\022!\n\024s"
    "tage2_nms_threshold\030\033 \001(\002:\0030.4\022\030\n\rmin_2d"
    "_height\030\t \001(\002:\0010\022\030\n\rmin_3d_height\030\036 \001(\002:"
    "\0010\022\027\n\014min_3d_width\030\037 \001(\002:\0010\022\030\n\rmin_3d_le"
    "ngth\030  \001(\002:\0010\022\037\n\023calibratetable_root\030\013 \001"
    "(\t:\002./\022\034\n\nmodel_type\030\014 \001(\t:\010CaffeNet\022\024\n\t"
    "ori_cycle\030\020 \001(\005:\0011\022\032\n\013per_cls_reg\030\021 \001(\010:"
    "\005false\022P\n\024dimension_statistics\030\022 \003(\01322.a"
    "pollo.perception.camera.yolo.DimensionSt"
    "atistics\022F\n\017bbox_statistics\030\023 \003(\0132-.apol"
    "lo.perception.camera.yolo.BBoxStatistics"
    "\022\037\n\013expand_file\030\024 \001(\t:\nexpand.txt\022\031\n\nwit"
    "h_box3d\030) \001(\010:\005false\022\031\n\nwith_frbox\030* \001(\010"
    ":\005false\022\032\n\013with_lights\030+ \001(\010:\005false\022\032\n\013w"
    "ith_ratios\030, \001(\010:\005false\022\024\n\tnum_areas\030. \001"
    "(\005:\0010\022\032\n\014border_ratio\030- \001(\002:\0040.01\"\204\n\n\014Ne"
    "tworkParam\022\'\n\rdet1_loc_blob\030\001 \001(\t:\020detec"
    "t1_loc_pred\022\'\n\rdet1_obj_blob\030\002 \001(\t:\020dete"
    "ct1_obj_pred\022\'\n\rdet1_cls_blob\030\003 \001(\t:\020det"
    "ect1_cls_pred\022\'\n\rdet1_ori_blob\030\004 \001(\t:\020de"
    "tect1_ori_pred\0221\n\022det1_ori_conf_blob\030\005 \001"
    "(\t:\025detect1_ori_conf_pred\022\'\n\rdet1_dim_bl"
    "ob\030\006 \001(\t:\020detect1_dim_pred\022\'\n\rdet2_loc_b"
    "lob\030\007 \001(\t:\020detect2_loc_pred\022\'\n\rdet2_obj_"
    "blob\030\010 \001(\t:\020detect2_obj_pred\022\'\n\rdet2_cls"
    "_blob\030\t \001(\t:\020detect2_cls_pred\022\'\n\rdet2_or"
    "i_blob\030\n \001(\t:\020detect2_ori_pred\0221\n\022det2_o"
    "ri_conf_blob\030\013 \001(\t:\025detect2_ori_conf_pre"
    "d\022\'\n\rdet2_dim_blob\030\014 \001(\t:\020detect2_dim_pr"
    "ed\022\'\n\rdet3_loc_blob\030\r \001(\t:\020detect3_loc_p"
    "red\022\'\n\rdet3_obj_blob\030\016 \001(\t:\020detect3_obj_"
    "pred\022\'\n\rdet3_cls_blob\030\017 \001(\t:\020detect3_cls"
    "_pred\022\'\n\rdet3_ori_blob\030\020 \001(\t:\020detect3_or"
    "i_pred\0221\n\022det3_ori_conf_blob\030\021 \001(\t:\025dete"
    "ct3_ori_conf_pred\022\'\n\rdet3_dim_blob\030\022 \001(\t"
    ":\020detect3_dim_pred\022\032\n\010lof_blob\030\023 \001(\t:\010lo"
    "f_pred\022\032\n\010lor_blob\030\024 \001(\t:\010lor_pred\022\030\n\nin"
    "put_blob\030\025 \001(\t:\004data\022\034\n\trois_blob\030\026 \001(\t:"
    "\trois_pred\022\034\n\tfeat_blob\030\027 \001(\t:\tconv_feat"
    "\022\032\n\010box_blob\030\030 \001(\t:\010box_pred\022\032\n\010iou_blob"
    "\030\031 \001(\t:\010iou_pred\022\036\n\nbrvis_blob\030\032 \001(\t:\nbr"
    "vis_pred\022\036\n\nbrswt_blob\030\033 \001(\t:\nbrswt_pred"
    "\022\036\n\nltvis_blob\030\034 \001(\t:\nltvis_pred\022\036\n\nltsw"
    "t_blob\030\035 \001(\t:\nltswt_pred\022\036\n\nrtvis_blob\030\036"
    " \001(\t:\nrtvis_pred\022\036\n\nrtswt_blob\030\037 \001(\t:\nrt"
    "swt_pred\022\"\n\014area_id_blob\030  \001(\t:\014area_id_"
    "pred\022$\n\022visible_ratio_blob\030! \001(\t:\010vis_pr"
    "ed\022$\n\022cut_off_ratio_blob\030\" \001(\t:\010cut_pred"
    "\"\224\001\n\010NMSParam\022\027\n\004type\030\001 \001(\t:\tNormalNMS\022\026"
    "\n\tthreshold\030\002 \001(\002:\0030.4\022\022\n\005sigma\030\003 \001(\002:\0030"
    ".4\022\"\n\025inter_cls_conf_thresh\030\004 \001(\002:\0030.1\022\037"
    "\n\024inter_cls_nms_thresh\030\005 \001(\002:\0011\"+\n\016BBoxS"
    "tatistics\022\014\n\004mean\030\001 \003(\002\022\013\n\003std\030\002 \003(\002\"\204\001\n"
    "\023DimensionStatistics\022\021\n\006mean_h\030\001 \001(\002:\0010\022"
    "\021\n\006mean_w\030\002 \001(\002:\0010\022\021\n\006mean_l\030\003 \001(\002:\0010\022\020\n"
    "\005std_h\030\004 \001(\002:\0011\022\020\n\005std_w\030\005 \001(\002:\0011\022\020\n\005std"
    "_l\030\006 \001(\002:\0011", 3091);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "yolo.proto", &protobuf_RegisterTypes);
  YoloParam::default_instance_ = new YoloParam();
  ModelParam::_default_model_name_ =
      new ::std::string("yolo-2d", 7);
  ModelParam::_default_proto_file_ =
      new ::std::string("caffe.pt", 8);
  ModelParam::_default_weight_file_ =
      new ::std::string("caffe.model", 11);
  ModelParam::_default_stage1_pt_ =
      new ::std::string("caffe.pt", 8);
  ModelParam::_default_stage1_md_ =
      new ::std::string("caffe.model", 11);
  ModelParam::_default_stage2_pt_ =
      new ::std::string("caffe.pt", 8);
  ModelParam::_default_stage2_md_ =
      new ::std::string("caffe.model", 11);
  ModelParam::_default_anchors_file_ =
      new ::std::string("anchors.txt", 11);
  ModelParam::_default_types_file_ =
      new ::std::string("types.txt", 9);
  ModelParam::_default_feature_file_ =
      new ::std::string("feature.pt", 10);
  ModelParam::_default_calibratetable_root_ =
      new ::std::string("./", 2);
  ModelParam::_default_model_type_ =
      new ::std::string("CaffeNet", 8);
  ModelParam::_default_expand_file_ =
      new ::std::string("expand.txt", 10);
  ModelParam::default_instance_ = new ModelParam();
  NetworkParam::_default_det1_loc_blob_ =
      new ::std::string("detect1_loc_pred", 16);
  NetworkParam::_default_det1_obj_blob_ =
      new ::std::string("detect1_obj_pred", 16);
  NetworkParam::_default_det1_cls_blob_ =
      new ::std::string("detect1_cls_pred", 16);
  NetworkParam::_default_det1_ori_blob_ =
      new ::std::string("detect1_ori_pred", 16);
  NetworkParam::_default_det1_ori_conf_blob_ =
      new ::std::string("detect1_ori_conf_pred", 21);
  NetworkParam::_default_det1_dim_blob_ =
      new ::std::string("detect1_dim_pred", 16);
  NetworkParam::_default_det2_loc_blob_ =
      new ::std::string("detect2_loc_pred", 16);
  NetworkParam::_default_det2_obj_blob_ =
      new ::std::string("detect2_obj_pred", 16);
  NetworkParam::_default_det2_cls_blob_ =
      new ::std::string("detect2_cls_pred", 16);
  NetworkParam::_default_det2_ori_blob_ =
      new ::std::string("detect2_ori_pred", 16);
  NetworkParam::_default_det2_ori_conf_blob_ =
      new ::std::string("detect2_ori_conf_pred", 21);
  NetworkParam::_default_det2_dim_blob_ =
      new ::std::string("detect2_dim_pred", 16);
  NetworkParam::_default_det3_loc_blob_ =
      new ::std::string("detect3_loc_pred", 16);
  NetworkParam::_default_det3_obj_blob_ =
      new ::std::string("detect3_obj_pred", 16);
  NetworkParam::_default_det3_cls_blob_ =
      new ::std::string("detect3_cls_pred", 16);
  NetworkParam::_default_det3_ori_blob_ =
      new ::std::string("detect3_ori_pred", 16);
  NetworkParam::_default_det3_ori_conf_blob_ =
      new ::std::string("detect3_ori_conf_pred", 21);
  NetworkParam::_default_det3_dim_blob_ =
      new ::std::string("detect3_dim_pred", 16);
  NetworkParam::_default_lof_blob_ =
      new ::std::string("lof_pred", 8);
  NetworkParam::_default_lor_blob_ =
      new ::std::string("lor_pred", 8);
  NetworkParam::_default_input_blob_ =
      new ::std::string("data", 4);
  NetworkParam::_default_rois_blob_ =
      new ::std::string("rois_pred", 9);
  NetworkParam::_default_feat_blob_ =
      new ::std::string("conv_feat", 9);
  NetworkParam::_default_box_blob_ =
      new ::std::string("box_pred", 8);
  NetworkParam::_default_iou_blob_ =
      new ::std::string("iou_pred", 8);
  NetworkParam::_default_brvis_blob_ =
      new ::std::string("brvis_pred", 10);
  NetworkParam::_default_brswt_blob_ =
      new ::std::string("brswt_pred", 10);
  NetworkParam::_default_ltvis_blob_ =
      new ::std::string("ltvis_pred", 10);
  NetworkParam::_default_ltswt_blob_ =
      new ::std::string("ltswt_pred", 10);
  NetworkParam::_default_rtvis_blob_ =
      new ::std::string("rtvis_pred", 10);
  NetworkParam::_default_rtswt_blob_ =
      new ::std::string("rtswt_pred", 10);
  NetworkParam::_default_area_id_blob_ =
      new ::std::string("area_id_pred", 12);
  NetworkParam::_default_visible_ratio_blob_ =
      new ::std::string("vis_pred", 8);
  NetworkParam::_default_cut_off_ratio_blob_ =
      new ::std::string("cut_pred", 8);
  NetworkParam::default_instance_ = new NetworkParam();
  NMSParam::_default_type_ =
      new ::std::string("NormalNMS", 9);
  NMSParam::default_instance_ = new NMSParam();
  BBoxStatistics::default_instance_ = new BBoxStatistics();
  DimensionStatistics::default_instance_ = new DimensionStatistics();
  YoloParam::default_instance_->InitAsDefaultInstance();
  ModelParam::default_instance_->InitAsDefaultInstance();
  NetworkParam::default_instance_->InitAsDefaultInstance();
  NMSParam::default_instance_->InitAsDefaultInstance();
  BBoxStatistics::default_instance_->InitAsDefaultInstance();
  DimensionStatistics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_yolo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_yolo_2eproto {
  StaticDescriptorInitializer_yolo_2eproto() {
    protobuf_AddDesc_yolo_2eproto();
  }
} static_descriptor_initializer_yolo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int YoloParam::kModelParamFieldNumber;
const int YoloParam::kNetParamFieldNumber;
const int YoloParam::kNmsParamFieldNumber;
#endif  // !_MSC_VER

YoloParam::YoloParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.yolo.YoloParam)
}

void YoloParam::InitAsDefaultInstance() {
  model_param_ = const_cast< ::apollo::perception::camera::yolo::ModelParam*>(&::apollo::perception::camera::yolo::ModelParam::default_instance());
  net_param_ = const_cast< ::apollo::perception::camera::yolo::NetworkParam*>(&::apollo::perception::camera::yolo::NetworkParam::default_instance());
  nms_param_ = const_cast< ::apollo::perception::camera::yolo::NMSParam*>(&::apollo::perception::camera::yolo::NMSParam::default_instance());
}

YoloParam::YoloParam(const YoloParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.yolo.YoloParam)
}

void YoloParam::SharedCtor() {
  _cached_size_ = 0;
  model_param_ = NULL;
  net_param_ = NULL;
  nms_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YoloParam::~YoloParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.yolo.YoloParam)
  SharedDtor();
}

void YoloParam::SharedDtor() {
  if (this != default_instance_) {
    delete model_param_;
    delete net_param_;
    delete nms_param_;
  }
}

void YoloParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YoloParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YoloParam_descriptor_;
}

const YoloParam& YoloParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yolo_2eproto();
  return *default_instance_;
}

YoloParam* YoloParam::default_instance_ = NULL;

YoloParam* YoloParam::New() const {
  return new YoloParam;
}

void YoloParam::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_model_param()) {
      if (model_param_ != NULL) model_param_->::apollo::perception::camera::yolo::ModelParam::Clear();
    }
    if (has_net_param()) {
      if (net_param_ != NULL) net_param_->::apollo::perception::camera::yolo::NetworkParam::Clear();
    }
    if (has_nms_param()) {
      if (nms_param_ != NULL) nms_param_->::apollo::perception::camera::yolo::NMSParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YoloParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.yolo.YoloParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.camera.yolo.ModelParam model_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_net_param;
        break;
      }

      // optional .apollo.perception.camera.yolo.NetworkParam net_param = 2;
      case 2: {
        if (tag == 18) {
         parse_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nms_param;
        break;
      }

      // optional .apollo.perception.camera.yolo.NMSParam nms_param = 3;
      case 3: {
        if (tag == 26) {
         parse_nms_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nms_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.yolo.YoloParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.yolo.YoloParam)
  return false;
#undef DO_
}

void YoloParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.yolo.YoloParam)
  // optional .apollo.perception.camera.yolo.ModelParam model_param = 1;
  if (has_model_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->model_param(), output);
  }

  // optional .apollo.perception.camera.yolo.NetworkParam net_param = 2;
  if (has_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->net_param(), output);
  }

  // optional .apollo.perception.camera.yolo.NMSParam nms_param = 3;
  if (has_nms_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nms_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.yolo.YoloParam)
}

::google::protobuf::uint8* YoloParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.yolo.YoloParam)
  // optional .apollo.perception.camera.yolo.ModelParam model_param = 1;
  if (has_model_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->model_param(), target);
  }

  // optional .apollo.perception.camera.yolo.NetworkParam net_param = 2;
  if (has_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->net_param(), target);
  }

  // optional .apollo.perception.camera.yolo.NMSParam nms_param = 3;
  if (has_nms_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nms_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.yolo.YoloParam)
  return target;
}

int YoloParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.perception.camera.yolo.ModelParam model_param = 1;
    if (has_model_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model_param());
    }

    // optional .apollo.perception.camera.yolo.NetworkParam net_param = 2;
    if (has_net_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->net_param());
    }

    // optional .apollo.perception.camera.yolo.NMSParam nms_param = 3;
    if (has_nms_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nms_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YoloParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YoloParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YoloParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YoloParam::MergeFrom(const YoloParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_param()) {
      mutable_model_param()->::apollo::perception::camera::yolo::ModelParam::MergeFrom(from.model_param());
    }
    if (from.has_net_param()) {
      mutable_net_param()->::apollo::perception::camera::yolo::NetworkParam::MergeFrom(from.net_param());
    }
    if (from.has_nms_param()) {
      mutable_nms_param()->::apollo::perception::camera::yolo::NMSParam::MergeFrom(from.nms_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YoloParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YoloParam::CopyFrom(const YoloParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoloParam::IsInitialized() const {

  return true;
}

void YoloParam::Swap(YoloParam* other) {
  if (other != this) {
    std::swap(model_param_, other->model_param_);
    std::swap(net_param_, other->net_param_);
    std::swap(nms_param_, other->nms_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YoloParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YoloParam_descriptor_;
  metadata.reflection = YoloParam_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ModelParam::_default_model_name_ = NULL;
::std::string* ModelParam::_default_proto_file_ = NULL;
::std::string* ModelParam::_default_weight_file_ = NULL;
::std::string* ModelParam::_default_stage1_pt_ = NULL;
::std::string* ModelParam::_default_stage1_md_ = NULL;
::std::string* ModelParam::_default_stage2_pt_ = NULL;
::std::string* ModelParam::_default_stage2_md_ = NULL;
::std::string* ModelParam::_default_anchors_file_ = NULL;
::std::string* ModelParam::_default_types_file_ = NULL;
::std::string* ModelParam::_default_feature_file_ = NULL;
::std::string* ModelParam::_default_calibratetable_root_ = NULL;
::std::string* ModelParam::_default_model_type_ = NULL;
::std::string* ModelParam::_default_expand_file_ = NULL;
#ifndef _MSC_VER
const int ModelParam::kModelNameFieldNumber;
const int ModelParam::kProtoFileFieldNumber;
const int ModelParam::kWeightFileFieldNumber;
const int ModelParam::kStage1PtFieldNumber;
const int ModelParam::kStage1MdFieldNumber;
const int ModelParam::kStage2PtFieldNumber;
const int ModelParam::kStage2MdFieldNumber;
const int ModelParam::kAnchorsFileFieldNumber;
const int ModelParam::kTypesFileFieldNumber;
const int ModelParam::kFeatureFileFieldNumber;
const int ModelParam::kOffsetRatioFieldNumber;
const int ModelParam::kCroppedRatioFieldNumber;
const int ModelParam::kResizedWidthFieldNumber;
const int ModelParam::kAlignedPixelFieldNumber;
const int ModelParam::kConfidenceThresholdFieldNumber;
const int ModelParam::kLightVisConfThresholdFieldNumber;
const int ModelParam::kLightSwtConfThresholdFieldNumber;
const int ModelParam::kRoiConfThresholdFieldNumber;
const int ModelParam::kBoxConfThresholdFieldNumber;
const int ModelParam::kStage2NmsThresholdFieldNumber;
const int ModelParam::kMin2DHeightFieldNumber;
const int ModelParam::kMin3DHeightFieldNumber;
const int ModelParam::kMin3DWidthFieldNumber;
const int ModelParam::kMin3DLengthFieldNumber;
const int ModelParam::kCalibratetableRootFieldNumber;
const int ModelParam::kModelTypeFieldNumber;
const int ModelParam::kOriCycleFieldNumber;
const int ModelParam::kPerClsRegFieldNumber;
const int ModelParam::kDimensionStatisticsFieldNumber;
const int ModelParam::kBboxStatisticsFieldNumber;
const int ModelParam::kExpandFileFieldNumber;
const int ModelParam::kWithBox3DFieldNumber;
const int ModelParam::kWithFrboxFieldNumber;
const int ModelParam::kWithLightsFieldNumber;
const int ModelParam::kWithRatiosFieldNumber;
const int ModelParam::kNumAreasFieldNumber;
const int ModelParam::kBorderRatioFieldNumber;
#endif  // !_MSC_VER

ModelParam::ModelParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.yolo.ModelParam)
}

void ModelParam::InitAsDefaultInstance() {
}

ModelParam::ModelParam(const ModelParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.yolo.ModelParam)
}

void ModelParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(_default_model_name_);
  proto_file_ = const_cast< ::std::string*>(_default_proto_file_);
  weight_file_ = const_cast< ::std::string*>(_default_weight_file_);
  stage1_pt_ = const_cast< ::std::string*>(_default_stage1_pt_);
  stage1_md_ = const_cast< ::std::string*>(_default_stage1_md_);
  stage2_pt_ = const_cast< ::std::string*>(_default_stage2_pt_);
  stage2_md_ = const_cast< ::std::string*>(_default_stage2_md_);
  anchors_file_ = const_cast< ::std::string*>(_default_anchors_file_);
  types_file_ = const_cast< ::std::string*>(_default_types_file_);
  feature_file_ = const_cast< ::std::string*>(_default_feature_file_);
  offset_ratio_ = 0.288889f;
  cropped_ratio_ = 0.711111f;
  resized_width_ = 1440;
  aligned_pixel_ = 32;
  confidence_threshold_ = 0.1f;
  light_vis_conf_threshold_ = 0.5f;
  light_swt_conf_threshold_ = 0.5f;
  roi_conf_threshold_ = 0.1f;
  box_conf_threshold_ = 0.5f;
  stage2_nms_threshold_ = 0.4f;
  min_2d_height_ = 0;
  min_3d_height_ = 0;
  min_3d_width_ = 0;
  min_3d_length_ = 0;
  calibratetable_root_ = const_cast< ::std::string*>(_default_calibratetable_root_);
  model_type_ = const_cast< ::std::string*>(_default_model_type_);
  ori_cycle_ = 1;
  per_cls_reg_ = false;
  expand_file_ = const_cast< ::std::string*>(_default_expand_file_);
  with_box3d_ = false;
  with_frbox_ = false;
  with_lights_ = false;
  with_ratios_ = false;
  num_areas_ = 0;
  border_ratio_ = 0.01f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelParam::~ModelParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.yolo.ModelParam)
  SharedDtor();
}

void ModelParam::SharedDtor() {
  if (model_name_ != _default_model_name_) {
    delete model_name_;
  }
  if (proto_file_ != _default_proto_file_) {
    delete proto_file_;
  }
  if (weight_file_ != _default_weight_file_) {
    delete weight_file_;
  }
  if (stage1_pt_ != _default_stage1_pt_) {
    delete stage1_pt_;
  }
  if (stage1_md_ != _default_stage1_md_) {
    delete stage1_md_;
  }
  if (stage2_pt_ != _default_stage2_pt_) {
    delete stage2_pt_;
  }
  if (stage2_md_ != _default_stage2_md_) {
    delete stage2_md_;
  }
  if (anchors_file_ != _default_anchors_file_) {
    delete anchors_file_;
  }
  if (types_file_ != _default_types_file_) {
    delete types_file_;
  }
  if (feature_file_ != _default_feature_file_) {
    delete feature_file_;
  }
  if (calibratetable_root_ != _default_calibratetable_root_) {
    delete calibratetable_root_;
  }
  if (model_type_ != _default_model_type_) {
    delete model_type_;
  }
  if (expand_file_ != _default_expand_file_) {
    delete expand_file_;
  }
  if (this != default_instance_) {
  }
}

void ModelParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelParam_descriptor_;
}

const ModelParam& ModelParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yolo_2eproto();
  return *default_instance_;
}

ModelParam* ModelParam::default_instance_ = NULL;

ModelParam* ModelParam::New() const {
  return new ModelParam;
}

void ModelParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ModelParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_model_name()) {
      if (model_name_ != _default_model_name_) {
        model_name_->assign(*_default_model_name_);
      }
    }
    if (has_proto_file()) {
      if (proto_file_ != _default_proto_file_) {
        proto_file_->assign(*_default_proto_file_);
      }
    }
    if (has_weight_file()) {
      if (weight_file_ != _default_weight_file_) {
        weight_file_->assign(*_default_weight_file_);
      }
    }
    if (has_stage1_pt()) {
      if (stage1_pt_ != _default_stage1_pt_) {
        stage1_pt_->assign(*_default_stage1_pt_);
      }
    }
    if (has_stage1_md()) {
      if (stage1_md_ != _default_stage1_md_) {
        stage1_md_->assign(*_default_stage1_md_);
      }
    }
    if (has_stage2_pt()) {
      if (stage2_pt_ != _default_stage2_pt_) {
        stage2_pt_->assign(*_default_stage2_pt_);
      }
    }
    if (has_stage2_md()) {
      if (stage2_md_ != _default_stage2_md_) {
        stage2_md_->assign(*_default_stage2_md_);
      }
    }
    if (has_anchors_file()) {
      if (anchors_file_ != _default_anchors_file_) {
        anchors_file_->assign(*_default_anchors_file_);
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_types_file()) {
      if (types_file_ != _default_types_file_) {
        types_file_->assign(*_default_types_file_);
      }
    }
    if (has_feature_file()) {
      if (feature_file_ != _default_feature_file_) {
        feature_file_->assign(*_default_feature_file_);
      }
    }
    offset_ratio_ = 0.288889f;
    cropped_ratio_ = 0.711111f;
    resized_width_ = 1440;
    aligned_pixel_ = 32;
    confidence_threshold_ = 0.1f;
    light_vis_conf_threshold_ = 0.5f;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(min_2d_height_, min_3d_length_);
    light_swt_conf_threshold_ = 0.5f;
    roi_conf_threshold_ = 0.1f;
    box_conf_threshold_ = 0.5f;
    stage2_nms_threshold_ = 0.4f;
  }
  if (_has_bits_[24 / 32] & 3472883712) {
    ZR_(per_cls_reg_, with_box3d_);
    if (has_calibratetable_root()) {
      if (calibratetable_root_ != _default_calibratetable_root_) {
        calibratetable_root_->assign(*_default_calibratetable_root_);
      }
    }
    if (has_model_type()) {
      if (model_type_ != _default_model_type_) {
        model_type_->assign(*_default_model_type_);
      }
    }
    ori_cycle_ = 1;
    if (has_expand_file()) {
      if (expand_file_ != _default_expand_file_) {
        expand_file_->assign(*_default_expand_file_);
      }
    }
  }
  if (_has_bits_[32 / 32] & 31) {
    ZR_(with_frbox_, with_lights_);
    ZR_(with_ratios_, num_areas_);
    border_ratio_ = 0.01f;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dimension_statistics_.Clear();
  bbox_statistics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.yolo.ModelParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1 [default = "yolo-2d"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_proto_file;
        break;
      }

      // optional string proto_file = 2 [default = "caffe.pt"];
      case 2: {
        if (tag == 18) {
         parse_proto_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto_file().data(), this->proto_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_file;
        break;
      }

      // optional string weight_file = 3 [default = "caffe.model"];
      case 3: {
        if (tag == 26) {
         parse_weight_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weight_file().data(), this->weight_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "weight_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_anchors_file;
        break;
      }

      // optional string anchors_file = 4 [default = "anchors.txt"];
      case 4: {
        if (tag == 34) {
         parse_anchors_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anchors_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->anchors_file().data(), this->anchors_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "anchors_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_types_file;
        break;
      }

      // optional string types_file = 5 [default = "types.txt"];
      case 5: {
        if (tag == 42) {
         parse_types_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_types_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->types_file().data(), this->types_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "types_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_feature_file;
        break;
      }

      // optional string feature_file = 6 [default = "feature.pt"];
      case 6: {
        if (tag == 50) {
         parse_feature_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feature_file().data(), this->feature_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "feature_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_offset_ratio;
        break;
      }

      // optional float offset_ratio = 7 [default = 0.288889];
      case 7: {
        if (tag == 61) {
         parse_offset_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_ratio_)));
          set_has_offset_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_confidence_threshold;
        break;
      }

      // optional float confidence_threshold = 8 [default = 0.1];
      case 8: {
        if (tag == 69) {
         parse_confidence_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_threshold_)));
          set_has_confidence_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_min_2d_height;
        break;
      }

      // optional float min_2d_height = 9 [default = 0];
      case 9: {
        if (tag == 77) {
         parse_min_2d_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_2d_height_)));
          set_has_min_2d_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_calibratetable_root;
        break;
      }

      // optional string calibratetable_root = 11 [default = "./"];
      case 11: {
        if (tag == 90) {
         parse_calibratetable_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_calibratetable_root()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->calibratetable_root().data(), this->calibratetable_root().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "calibratetable_root");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_model_type;
        break;
      }

      // optional string model_type = 12 [default = "CaffeNet"];
      case 12: {
        if (tag == 98) {
         parse_model_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_type().data(), this->model_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_cropped_ratio;
        break;
      }

      // optional float cropped_ratio = 13 [default = 0.711111];
      case 13: {
        if (tag == 109) {
         parse_cropped_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cropped_ratio_)));
          set_has_cropped_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_resized_width;
        break;
      }

      // optional int32 resized_width = 14 [default = 1440];
      case 14: {
        if (tag == 112) {
         parse_resized_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resized_width_)));
          set_has_resized_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_aligned_pixel;
        break;
      }

      // optional int32 aligned_pixel = 15 [default = 32];
      case 15: {
        if (tag == 120) {
         parse_aligned_pixel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aligned_pixel_)));
          set_has_aligned_pixel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ori_cycle;
        break;
      }

      // optional int32 ori_cycle = 16 [default = 1];
      case 16: {
        if (tag == 128) {
         parse_ori_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ori_cycle_)));
          set_has_ori_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_per_cls_reg;
        break;
      }

      // optional bool per_cls_reg = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_per_cls_reg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &per_cls_reg_)));
          set_has_per_cls_reg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_dimension_statistics;
        break;
      }

      // repeated .apollo.perception.camera.yolo.DimensionStatistics dimension_statistics = 18;
      case 18: {
        if (tag == 146) {
         parse_dimension_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dimension_statistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_dimension_statistics;
        if (input->ExpectTag(154)) goto parse_bbox_statistics;
        break;
      }

      // repeated .apollo.perception.camera.yolo.BBoxStatistics bbox_statistics = 19;
      case 19: {
        if (tag == 154) {
         parse_bbox_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bbox_statistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_bbox_statistics;
        if (input->ExpectTag(162)) goto parse_expand_file;
        break;
      }

      // optional string expand_file = 20 [default = "expand.txt"];
      case 20: {
        if (tag == 162) {
         parse_expand_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expand_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->expand_file().data(), this->expand_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "expand_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_stage1_pt;
        break;
      }

      // optional string stage1_pt = 21 [default = "caffe.pt"];
      case 21: {
        if (tag == 170) {
         parse_stage1_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage1_pt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage1_pt().data(), this->stage1_pt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stage1_pt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_stage1_md;
        break;
      }

      // optional string stage1_md = 22 [default = "caffe.model"];
      case 22: {
        if (tag == 178) {
         parse_stage1_md:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage1_md()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage1_md().data(), this->stage1_md().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stage1_md");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_stage2_pt;
        break;
      }

      // optional string stage2_pt = 23 [default = "caffe.pt"];
      case 23: {
        if (tag == 186) {
         parse_stage2_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage2_pt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage2_pt().data(), this->stage2_pt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stage2_pt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_stage2_md;
        break;
      }

      // optional string stage2_md = 24 [default = "caffe.model"];
      case 24: {
        if (tag == 194) {
         parse_stage2_md:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage2_md()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage2_md().data(), this->stage2_md().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stage2_md");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_roi_conf_threshold;
        break;
      }

      // optional float roi_conf_threshold = 25 [default = 0.1];
      case 25: {
        if (tag == 205) {
         parse_roi_conf_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roi_conf_threshold_)));
          set_has_roi_conf_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_box_conf_threshold;
        break;
      }

      // optional float box_conf_threshold = 26 [default = 0.5];
      case 26: {
        if (tag == 213) {
         parse_box_conf_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &box_conf_threshold_)));
          set_has_box_conf_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_stage2_nms_threshold;
        break;
      }

      // optional float stage2_nms_threshold = 27 [default = 0.4];
      case 27: {
        if (tag == 221) {
         parse_stage2_nms_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stage2_nms_threshold_)));
          set_has_stage2_nms_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_min_3d_height;
        break;
      }

      // optional float min_3d_height = 30 [default = 0];
      case 30: {
        if (tag == 245) {
         parse_min_3d_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_3d_height_)));
          set_has_min_3d_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_min_3d_width;
        break;
      }

      // optional float min_3d_width = 31 [default = 0];
      case 31: {
        if (tag == 253) {
         parse_min_3d_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_3d_width_)));
          set_has_min_3d_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_min_3d_length;
        break;
      }

      // optional float min_3d_length = 32 [default = 0];
      case 32: {
        if (tag == 261) {
         parse_min_3d_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_3d_length_)));
          set_has_min_3d_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(269)) goto parse_light_vis_conf_threshold;
        break;
      }

      // optional float light_vis_conf_threshold = 33 [default = 0.5];
      case 33: {
        if (tag == 269) {
         parse_light_vis_conf_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_vis_conf_threshold_)));
          set_has_light_vis_conf_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(277)) goto parse_light_swt_conf_threshold;
        break;
      }

      // optional float light_swt_conf_threshold = 34 [default = 0.5];
      case 34: {
        if (tag == 277) {
         parse_light_swt_conf_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_swt_conf_threshold_)));
          set_has_light_swt_conf_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_with_box3d;
        break;
      }

      // optional bool with_box3d = 41 [default = false];
      case 41: {
        if (tag == 328) {
         parse_with_box3d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_box3d_)));
          set_has_with_box3d();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_with_frbox;
        break;
      }

      // optional bool with_frbox = 42 [default = false];
      case 42: {
        if (tag == 336) {
         parse_with_frbox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_frbox_)));
          set_has_with_frbox();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_with_lights;
        break;
      }

      // optional bool with_lights = 43 [default = false];
      case 43: {
        if (tag == 344) {
         parse_with_lights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_lights_)));
          set_has_with_lights();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_with_ratios;
        break;
      }

      // optional bool with_ratios = 44 [default = false];
      case 44: {
        if (tag == 352) {
         parse_with_ratios:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_ratios_)));
          set_has_with_ratios();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(365)) goto parse_border_ratio;
        break;
      }

      // optional float border_ratio = 45 [default = 0.01];
      case 45: {
        if (tag == 365) {
         parse_border_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &border_ratio_)));
          set_has_border_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_num_areas;
        break;
      }

      // optional int32 num_areas = 46 [default = 0];
      case 46: {
        if (tag == 368) {
         parse_num_areas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_areas_)));
          set_has_num_areas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.yolo.ModelParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.yolo.ModelParam)
  return false;
#undef DO_
}

void ModelParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.yolo.ModelParam)
  // optional string model_name = 1 [default = "yolo-2d"];
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // optional string proto_file = 2 [default = "caffe.pt"];
  if (has_proto_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_file().data(), this->proto_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proto_file(), output);
  }

  // optional string weight_file = 3 [default = "caffe.model"];
  if (has_weight_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight_file().data(), this->weight_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "weight_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->weight_file(), output);
  }

  // optional string anchors_file = 4 [default = "anchors.txt"];
  if (has_anchors_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anchors_file().data(), this->anchors_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "anchors_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->anchors_file(), output);
  }

  // optional string types_file = 5 [default = "types.txt"];
  if (has_types_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->types_file().data(), this->types_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "types_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->types_file(), output);
  }

  // optional string feature_file = 6 [default = "feature.pt"];
  if (has_feature_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature_file().data(), this->feature_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "feature_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->feature_file(), output);
  }

  // optional float offset_ratio = 7 [default = 0.288889];
  if (has_offset_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->offset_ratio(), output);
  }

  // optional float confidence_threshold = 8 [default = 0.1];
  if (has_confidence_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->confidence_threshold(), output);
  }

  // optional float min_2d_height = 9 [default = 0];
  if (has_min_2d_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->min_2d_height(), output);
  }

  // optional string calibratetable_root = 11 [default = "./"];
  if (has_calibratetable_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calibratetable_root().data(), this->calibratetable_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "calibratetable_root");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->calibratetable_root(), output);
  }

  // optional string model_type = 12 [default = "CaffeNet"];
  if (has_model_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_type().data(), this->model_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->model_type(), output);
  }

  // optional float cropped_ratio = 13 [default = 0.711111];
  if (has_cropped_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->cropped_ratio(), output);
  }

  // optional int32 resized_width = 14 [default = 1440];
  if (has_resized_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->resized_width(), output);
  }

  // optional int32 aligned_pixel = 15 [default = 32];
  if (has_aligned_pixel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->aligned_pixel(), output);
  }

  // optional int32 ori_cycle = 16 [default = 1];
  if (has_ori_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->ori_cycle(), output);
  }

  // optional bool per_cls_reg = 17 [default = false];
  if (has_per_cls_reg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->per_cls_reg(), output);
  }

  // repeated .apollo.perception.camera.yolo.DimensionStatistics dimension_statistics = 18;
  for (int i = 0; i < this->dimension_statistics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->dimension_statistics(i), output);
  }

  // repeated .apollo.perception.camera.yolo.BBoxStatistics bbox_statistics = 19;
  for (int i = 0; i < this->bbox_statistics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->bbox_statistics(i), output);
  }

  // optional string expand_file = 20 [default = "expand.txt"];
  if (has_expand_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->expand_file().data(), this->expand_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "expand_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->expand_file(), output);
  }

  // optional string stage1_pt = 21 [default = "caffe.pt"];
  if (has_stage1_pt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage1_pt().data(), this->stage1_pt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage1_pt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->stage1_pt(), output);
  }

  // optional string stage1_md = 22 [default = "caffe.model"];
  if (has_stage1_md()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage1_md().data(), this->stage1_md().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage1_md");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->stage1_md(), output);
  }

  // optional string stage2_pt = 23 [default = "caffe.pt"];
  if (has_stage2_pt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage2_pt().data(), this->stage2_pt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage2_pt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->stage2_pt(), output);
  }

  // optional string stage2_md = 24 [default = "caffe.model"];
  if (has_stage2_md()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage2_md().data(), this->stage2_md().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage2_md");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->stage2_md(), output);
  }

  // optional float roi_conf_threshold = 25 [default = 0.1];
  if (has_roi_conf_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->roi_conf_threshold(), output);
  }

  // optional float box_conf_threshold = 26 [default = 0.5];
  if (has_box_conf_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->box_conf_threshold(), output);
  }

  // optional float stage2_nms_threshold = 27 [default = 0.4];
  if (has_stage2_nms_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->stage2_nms_threshold(), output);
  }

  // optional float min_3d_height = 30 [default = 0];
  if (has_min_3d_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->min_3d_height(), output);
  }

  // optional float min_3d_width = 31 [default = 0];
  if (has_min_3d_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->min_3d_width(), output);
  }

  // optional float min_3d_length = 32 [default = 0];
  if (has_min_3d_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->min_3d_length(), output);
  }

  // optional float light_vis_conf_threshold = 33 [default = 0.5];
  if (has_light_vis_conf_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->light_vis_conf_threshold(), output);
  }

  // optional float light_swt_conf_threshold = 34 [default = 0.5];
  if (has_light_swt_conf_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->light_swt_conf_threshold(), output);
  }

  // optional bool with_box3d = 41 [default = false];
  if (has_with_box3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->with_box3d(), output);
  }

  // optional bool with_frbox = 42 [default = false];
  if (has_with_frbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->with_frbox(), output);
  }

  // optional bool with_lights = 43 [default = false];
  if (has_with_lights()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->with_lights(), output);
  }

  // optional bool with_ratios = 44 [default = false];
  if (has_with_ratios()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->with_ratios(), output);
  }

  // optional float border_ratio = 45 [default = 0.01];
  if (has_border_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->border_ratio(), output);
  }

  // optional int32 num_areas = 46 [default = 0];
  if (has_num_areas()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->num_areas(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.yolo.ModelParam)
}

::google::protobuf::uint8* ModelParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.yolo.ModelParam)
  // optional string model_name = 1 [default = "yolo-2d"];
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // optional string proto_file = 2 [default = "caffe.pt"];
  if (has_proto_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_file().data(), this->proto_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proto_file(), target);
  }

  // optional string weight_file = 3 [default = "caffe.model"];
  if (has_weight_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight_file().data(), this->weight_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "weight_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->weight_file(), target);
  }

  // optional string anchors_file = 4 [default = "anchors.txt"];
  if (has_anchors_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anchors_file().data(), this->anchors_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "anchors_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->anchors_file(), target);
  }

  // optional string types_file = 5 [default = "types.txt"];
  if (has_types_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->types_file().data(), this->types_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "types_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->types_file(), target);
  }

  // optional string feature_file = 6 [default = "feature.pt"];
  if (has_feature_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature_file().data(), this->feature_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "feature_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->feature_file(), target);
  }

  // optional float offset_ratio = 7 [default = 0.288889];
  if (has_offset_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->offset_ratio(), target);
  }

  // optional float confidence_threshold = 8 [default = 0.1];
  if (has_confidence_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->confidence_threshold(), target);
  }

  // optional float min_2d_height = 9 [default = 0];
  if (has_min_2d_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->min_2d_height(), target);
  }

  // optional string calibratetable_root = 11 [default = "./"];
  if (has_calibratetable_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calibratetable_root().data(), this->calibratetable_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "calibratetable_root");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->calibratetable_root(), target);
  }

  // optional string model_type = 12 [default = "CaffeNet"];
  if (has_model_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_type().data(), this->model_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->model_type(), target);
  }

  // optional float cropped_ratio = 13 [default = 0.711111];
  if (has_cropped_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->cropped_ratio(), target);
  }

  // optional int32 resized_width = 14 [default = 1440];
  if (has_resized_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->resized_width(), target);
  }

  // optional int32 aligned_pixel = 15 [default = 32];
  if (has_aligned_pixel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->aligned_pixel(), target);
  }

  // optional int32 ori_cycle = 16 [default = 1];
  if (has_ori_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->ori_cycle(), target);
  }

  // optional bool per_cls_reg = 17 [default = false];
  if (has_per_cls_reg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->per_cls_reg(), target);
  }

  // repeated .apollo.perception.camera.yolo.DimensionStatistics dimension_statistics = 18;
  for (int i = 0; i < this->dimension_statistics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->dimension_statistics(i), target);
  }

  // repeated .apollo.perception.camera.yolo.BBoxStatistics bbox_statistics = 19;
  for (int i = 0; i < this->bbox_statistics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->bbox_statistics(i), target);
  }

  // optional string expand_file = 20 [default = "expand.txt"];
  if (has_expand_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->expand_file().data(), this->expand_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "expand_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->expand_file(), target);
  }

  // optional string stage1_pt = 21 [default = "caffe.pt"];
  if (has_stage1_pt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage1_pt().data(), this->stage1_pt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage1_pt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->stage1_pt(), target);
  }

  // optional string stage1_md = 22 [default = "caffe.model"];
  if (has_stage1_md()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage1_md().data(), this->stage1_md().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage1_md");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->stage1_md(), target);
  }

  // optional string stage2_pt = 23 [default = "caffe.pt"];
  if (has_stage2_pt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage2_pt().data(), this->stage2_pt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage2_pt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->stage2_pt(), target);
  }

  // optional string stage2_md = 24 [default = "caffe.model"];
  if (has_stage2_md()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage2_md().data(), this->stage2_md().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage2_md");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->stage2_md(), target);
  }

  // optional float roi_conf_threshold = 25 [default = 0.1];
  if (has_roi_conf_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->roi_conf_threshold(), target);
  }

  // optional float box_conf_threshold = 26 [default = 0.5];
  if (has_box_conf_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->box_conf_threshold(), target);
  }

  // optional float stage2_nms_threshold = 27 [default = 0.4];
  if (has_stage2_nms_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->stage2_nms_threshold(), target);
  }

  // optional float min_3d_height = 30 [default = 0];
  if (has_min_3d_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->min_3d_height(), target);
  }

  // optional float min_3d_width = 31 [default = 0];
  if (has_min_3d_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->min_3d_width(), target);
  }

  // optional float min_3d_length = 32 [default = 0];
  if (has_min_3d_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->min_3d_length(), target);
  }

  // optional float light_vis_conf_threshold = 33 [default = 0.5];
  if (has_light_vis_conf_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->light_vis_conf_threshold(), target);
  }

  // optional float light_swt_conf_threshold = 34 [default = 0.5];
  if (has_light_swt_conf_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->light_swt_conf_threshold(), target);
  }

  // optional bool with_box3d = 41 [default = false];
  if (has_with_box3d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->with_box3d(), target);
  }

  // optional bool with_frbox = 42 [default = false];
  if (has_with_frbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->with_frbox(), target);
  }

  // optional bool with_lights = 43 [default = false];
  if (has_with_lights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->with_lights(), target);
  }

  // optional bool with_ratios = 44 [default = false];
  if (has_with_ratios()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->with_ratios(), target);
  }

  // optional float border_ratio = 45 [default = 0.01];
  if (has_border_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(45, this->border_ratio(), target);
  }

  // optional int32 num_areas = 46 [default = 0];
  if (has_num_areas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->num_areas(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.yolo.ModelParam)
  return target;
}

int ModelParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_name = 1 [default = "yolo-2d"];
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string proto_file = 2 [default = "caffe.pt"];
    if (has_proto_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proto_file());
    }

    // optional string weight_file = 3 [default = "caffe.model"];
    if (has_weight_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weight_file());
    }

    // optional string stage1_pt = 21 [default = "caffe.pt"];
    if (has_stage1_pt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage1_pt());
    }

    // optional string stage1_md = 22 [default = "caffe.model"];
    if (has_stage1_md()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage1_md());
    }

    // optional string stage2_pt = 23 [default = "caffe.pt"];
    if (has_stage2_pt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage2_pt());
    }

    // optional string stage2_md = 24 [default = "caffe.model"];
    if (has_stage2_md()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage2_md());
    }

    // optional string anchors_file = 4 [default = "anchors.txt"];
    if (has_anchors_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anchors_file());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string types_file = 5 [default = "types.txt"];
    if (has_types_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->types_file());
    }

    // optional string feature_file = 6 [default = "feature.pt"];
    if (has_feature_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feature_file());
    }

    // optional float offset_ratio = 7 [default = 0.288889];
    if (has_offset_ratio()) {
      total_size += 1 + 4;
    }

    // optional float cropped_ratio = 13 [default = 0.711111];
    if (has_cropped_ratio()) {
      total_size += 1 + 4;
    }

    // optional int32 resized_width = 14 [default = 1440];
    if (has_resized_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resized_width());
    }

    // optional int32 aligned_pixel = 15 [default = 32];
    if (has_aligned_pixel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aligned_pixel());
    }

    // optional float confidence_threshold = 8 [default = 0.1];
    if (has_confidence_threshold()) {
      total_size += 1 + 4;
    }

    // optional float light_vis_conf_threshold = 33 [default = 0.5];
    if (has_light_vis_conf_threshold()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float light_swt_conf_threshold = 34 [default = 0.5];
    if (has_light_swt_conf_threshold()) {
      total_size += 2 + 4;
    }

    // optional float roi_conf_threshold = 25 [default = 0.1];
    if (has_roi_conf_threshold()) {
      total_size += 2 + 4;
    }

    // optional float box_conf_threshold = 26 [default = 0.5];
    if (has_box_conf_threshold()) {
      total_size += 2 + 4;
    }

    // optional float stage2_nms_threshold = 27 [default = 0.4];
    if (has_stage2_nms_threshold()) {
      total_size += 2 + 4;
    }

    // optional float min_2d_height = 9 [default = 0];
    if (has_min_2d_height()) {
      total_size += 1 + 4;
    }

    // optional float min_3d_height = 30 [default = 0];
    if (has_min_3d_height()) {
      total_size += 2 + 4;
    }

    // optional float min_3d_width = 31 [default = 0];
    if (has_min_3d_width()) {
      total_size += 2 + 4;
    }

    // optional float min_3d_length = 32 [default = 0];
    if (has_min_3d_length()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string calibratetable_root = 11 [default = "./"];
    if (has_calibratetable_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->calibratetable_root());
    }

    // optional string model_type = 12 [default = "CaffeNet"];
    if (has_model_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_type());
    }

    // optional int32 ori_cycle = 16 [default = 1];
    if (has_ori_cycle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ori_cycle());
    }

    // optional bool per_cls_reg = 17 [default = false];
    if (has_per_cls_reg()) {
      total_size += 2 + 1;
    }

    // optional string expand_file = 20 [default = "expand.txt"];
    if (has_expand_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expand_file());
    }

    // optional bool with_box3d = 41 [default = false];
    if (has_with_box3d()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool with_frbox = 42 [default = false];
    if (has_with_frbox()) {
      total_size += 2 + 1;
    }

    // optional bool with_lights = 43 [default = false];
    if (has_with_lights()) {
      total_size += 2 + 1;
    }

    // optional bool with_ratios = 44 [default = false];
    if (has_with_ratios()) {
      total_size += 2 + 1;
    }

    // optional int32 num_areas = 46 [default = 0];
    if (has_num_areas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_areas());
    }

    // optional float border_ratio = 45 [default = 0.01];
    if (has_border_ratio()) {
      total_size += 2 + 4;
    }

  }
  // repeated .apollo.perception.camera.yolo.DimensionStatistics dimension_statistics = 18;
  total_size += 2 * this->dimension_statistics_size();
  for (int i = 0; i < this->dimension_statistics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dimension_statistics(i));
  }

  // repeated .apollo.perception.camera.yolo.BBoxStatistics bbox_statistics = 19;
  total_size += 2 * this->bbox_statistics_size();
  for (int i = 0; i < this->bbox_statistics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bbox_statistics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelParam::MergeFrom(const ModelParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  dimension_statistics_.MergeFrom(from.dimension_statistics_);
  bbox_statistics_.MergeFrom(from.bbox_statistics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_proto_file()) {
      set_proto_file(from.proto_file());
    }
    if (from.has_weight_file()) {
      set_weight_file(from.weight_file());
    }
    if (from.has_stage1_pt()) {
      set_stage1_pt(from.stage1_pt());
    }
    if (from.has_stage1_md()) {
      set_stage1_md(from.stage1_md());
    }
    if (from.has_stage2_pt()) {
      set_stage2_pt(from.stage2_pt());
    }
    if (from.has_stage2_md()) {
      set_stage2_md(from.stage2_md());
    }
    if (from.has_anchors_file()) {
      set_anchors_file(from.anchors_file());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_types_file()) {
      set_types_file(from.types_file());
    }
    if (from.has_feature_file()) {
      set_feature_file(from.feature_file());
    }
    if (from.has_offset_ratio()) {
      set_offset_ratio(from.offset_ratio());
    }
    if (from.has_cropped_ratio()) {
      set_cropped_ratio(from.cropped_ratio());
    }
    if (from.has_resized_width()) {
      set_resized_width(from.resized_width());
    }
    if (from.has_aligned_pixel()) {
      set_aligned_pixel(from.aligned_pixel());
    }
    if (from.has_confidence_threshold()) {
      set_confidence_threshold(from.confidence_threshold());
    }
    if (from.has_light_vis_conf_threshold()) {
      set_light_vis_conf_threshold(from.light_vis_conf_threshold());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_light_swt_conf_threshold()) {
      set_light_swt_conf_threshold(from.light_swt_conf_threshold());
    }
    if (from.has_roi_conf_threshold()) {
      set_roi_conf_threshold(from.roi_conf_threshold());
    }
    if (from.has_box_conf_threshold()) {
      set_box_conf_threshold(from.box_conf_threshold());
    }
    if (from.has_stage2_nms_threshold()) {
      set_stage2_nms_threshold(from.stage2_nms_threshold());
    }
    if (from.has_min_2d_height()) {
      set_min_2d_height(from.min_2d_height());
    }
    if (from.has_min_3d_height()) {
      set_min_3d_height(from.min_3d_height());
    }
    if (from.has_min_3d_width()) {
      set_min_3d_width(from.min_3d_width());
    }
    if (from.has_min_3d_length()) {
      set_min_3d_length(from.min_3d_length());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_calibratetable_root()) {
      set_calibratetable_root(from.calibratetable_root());
    }
    if (from.has_model_type()) {
      set_model_type(from.model_type());
    }
    if (from.has_ori_cycle()) {
      set_ori_cycle(from.ori_cycle());
    }
    if (from.has_per_cls_reg()) {
      set_per_cls_reg(from.per_cls_reg());
    }
    if (from.has_expand_file()) {
      set_expand_file(from.expand_file());
    }
    if (from.has_with_box3d()) {
      set_with_box3d(from.with_box3d());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_with_frbox()) {
      set_with_frbox(from.with_frbox());
    }
    if (from.has_with_lights()) {
      set_with_lights(from.with_lights());
    }
    if (from.has_with_ratios()) {
      set_with_ratios(from.with_ratios());
    }
    if (from.has_num_areas()) {
      set_num_areas(from.num_areas());
    }
    if (from.has_border_ratio()) {
      set_border_ratio(from.border_ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelParam::CopyFrom(const ModelParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelParam::IsInitialized() const {

  return true;
}

void ModelParam::Swap(ModelParam* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    std::swap(proto_file_, other->proto_file_);
    std::swap(weight_file_, other->weight_file_);
    std::swap(stage1_pt_, other->stage1_pt_);
    std::swap(stage1_md_, other->stage1_md_);
    std::swap(stage2_pt_, other->stage2_pt_);
    std::swap(stage2_md_, other->stage2_md_);
    std::swap(anchors_file_, other->anchors_file_);
    std::swap(types_file_, other->types_file_);
    std::swap(feature_file_, other->feature_file_);
    std::swap(offset_ratio_, other->offset_ratio_);
    std::swap(cropped_ratio_, other->cropped_ratio_);
    std::swap(resized_width_, other->resized_width_);
    std::swap(aligned_pixel_, other->aligned_pixel_);
    std::swap(confidence_threshold_, other->confidence_threshold_);
    std::swap(light_vis_conf_threshold_, other->light_vis_conf_threshold_);
    std::swap(light_swt_conf_threshold_, other->light_swt_conf_threshold_);
    std::swap(roi_conf_threshold_, other->roi_conf_threshold_);
    std::swap(box_conf_threshold_, other->box_conf_threshold_);
    std::swap(stage2_nms_threshold_, other->stage2_nms_threshold_);
    std::swap(min_2d_height_, other->min_2d_height_);
    std::swap(min_3d_height_, other->min_3d_height_);
    std::swap(min_3d_width_, other->min_3d_width_);
    std::swap(min_3d_length_, other->min_3d_length_);
    std::swap(calibratetable_root_, other->calibratetable_root_);
    std::swap(model_type_, other->model_type_);
    std::swap(ori_cycle_, other->ori_cycle_);
    std::swap(per_cls_reg_, other->per_cls_reg_);
    dimension_statistics_.Swap(&other->dimension_statistics_);
    bbox_statistics_.Swap(&other->bbox_statistics_);
    std::swap(expand_file_, other->expand_file_);
    std::swap(with_box3d_, other->with_box3d_);
    std::swap(with_frbox_, other->with_frbox_);
    std::swap(with_lights_, other->with_lights_);
    std::swap(with_ratios_, other->with_ratios_);
    std::swap(num_areas_, other->num_areas_);
    std::swap(border_ratio_, other->border_ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelParam_descriptor_;
  metadata.reflection = ModelParam_reflection_;
  return metadata;
}


// ===================================================================

::std::string* NetworkParam::_default_det1_loc_blob_ = NULL;
::std::string* NetworkParam::_default_det1_obj_blob_ = NULL;
::std::string* NetworkParam::_default_det1_cls_blob_ = NULL;
::std::string* NetworkParam::_default_det1_ori_blob_ = NULL;
::std::string* NetworkParam::_default_det1_ori_conf_blob_ = NULL;
::std::string* NetworkParam::_default_det1_dim_blob_ = NULL;
::std::string* NetworkParam::_default_det2_loc_blob_ = NULL;
::std::string* NetworkParam::_default_det2_obj_blob_ = NULL;
::std::string* NetworkParam::_default_det2_cls_blob_ = NULL;
::std::string* NetworkParam::_default_det2_ori_blob_ = NULL;
::std::string* NetworkParam::_default_det2_ori_conf_blob_ = NULL;
::std::string* NetworkParam::_default_det2_dim_blob_ = NULL;
::std::string* NetworkParam::_default_det3_loc_blob_ = NULL;
::std::string* NetworkParam::_default_det3_obj_blob_ = NULL;
::std::string* NetworkParam::_default_det3_cls_blob_ = NULL;
::std::string* NetworkParam::_default_det3_ori_blob_ = NULL;
::std::string* NetworkParam::_default_det3_ori_conf_blob_ = NULL;
::std::string* NetworkParam::_default_det3_dim_blob_ = NULL;
::std::string* NetworkParam::_default_lof_blob_ = NULL;
::std::string* NetworkParam::_default_lor_blob_ = NULL;
::std::string* NetworkParam::_default_input_blob_ = NULL;
::std::string* NetworkParam::_default_rois_blob_ = NULL;
::std::string* NetworkParam::_default_feat_blob_ = NULL;
::std::string* NetworkParam::_default_box_blob_ = NULL;
::std::string* NetworkParam::_default_iou_blob_ = NULL;
::std::string* NetworkParam::_default_brvis_blob_ = NULL;
::std::string* NetworkParam::_default_brswt_blob_ = NULL;
::std::string* NetworkParam::_default_ltvis_blob_ = NULL;
::std::string* NetworkParam::_default_ltswt_blob_ = NULL;
::std::string* NetworkParam::_default_rtvis_blob_ = NULL;
::std::string* NetworkParam::_default_rtswt_blob_ = NULL;
::std::string* NetworkParam::_default_area_id_blob_ = NULL;
::std::string* NetworkParam::_default_visible_ratio_blob_ = NULL;
::std::string* NetworkParam::_default_cut_off_ratio_blob_ = NULL;
#ifndef _MSC_VER
const int NetworkParam::kDet1LocBlobFieldNumber;
const int NetworkParam::kDet1ObjBlobFieldNumber;
const int NetworkParam::kDet1ClsBlobFieldNumber;
const int NetworkParam::kDet1OriBlobFieldNumber;
const int NetworkParam::kDet1OriConfBlobFieldNumber;
const int NetworkParam::kDet1DimBlobFieldNumber;
const int NetworkParam::kDet2LocBlobFieldNumber;
const int NetworkParam::kDet2ObjBlobFieldNumber;
const int NetworkParam::kDet2ClsBlobFieldNumber;
const int NetworkParam::kDet2OriBlobFieldNumber;
const int NetworkParam::kDet2OriConfBlobFieldNumber;
const int NetworkParam::kDet2DimBlobFieldNumber;
const int NetworkParam::kDet3LocBlobFieldNumber;
const int NetworkParam::kDet3ObjBlobFieldNumber;
const int NetworkParam::kDet3ClsBlobFieldNumber;
const int NetworkParam::kDet3OriBlobFieldNumber;
const int NetworkParam::kDet3OriConfBlobFieldNumber;
const int NetworkParam::kDet3DimBlobFieldNumber;
const int NetworkParam::kLofBlobFieldNumber;
const int NetworkParam::kLorBlobFieldNumber;
const int NetworkParam::kInputBlobFieldNumber;
const int NetworkParam::kRoisBlobFieldNumber;
const int NetworkParam::kFeatBlobFieldNumber;
const int NetworkParam::kBoxBlobFieldNumber;
const int NetworkParam::kIouBlobFieldNumber;
const int NetworkParam::kBrvisBlobFieldNumber;
const int NetworkParam::kBrswtBlobFieldNumber;
const int NetworkParam::kLtvisBlobFieldNumber;
const int NetworkParam::kLtswtBlobFieldNumber;
const int NetworkParam::kRtvisBlobFieldNumber;
const int NetworkParam::kRtswtBlobFieldNumber;
const int NetworkParam::kAreaIdBlobFieldNumber;
const int NetworkParam::kVisibleRatioBlobFieldNumber;
const int NetworkParam::kCutOffRatioBlobFieldNumber;
#endif  // !_MSC_VER

NetworkParam::NetworkParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.yolo.NetworkParam)
}

void NetworkParam::InitAsDefaultInstance() {
}

NetworkParam::NetworkParam(const NetworkParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.yolo.NetworkParam)
}

void NetworkParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  det1_loc_blob_ = const_cast< ::std::string*>(_default_det1_loc_blob_);
  det1_obj_blob_ = const_cast< ::std::string*>(_default_det1_obj_blob_);
  det1_cls_blob_ = const_cast< ::std::string*>(_default_det1_cls_blob_);
  det1_ori_blob_ = const_cast< ::std::string*>(_default_det1_ori_blob_);
  det1_ori_conf_blob_ = const_cast< ::std::string*>(_default_det1_ori_conf_blob_);
  det1_dim_blob_ = const_cast< ::std::string*>(_default_det1_dim_blob_);
  det2_loc_blob_ = const_cast< ::std::string*>(_default_det2_loc_blob_);
  det2_obj_blob_ = const_cast< ::std::string*>(_default_det2_obj_blob_);
  det2_cls_blob_ = const_cast< ::std::string*>(_default_det2_cls_blob_);
  det2_ori_blob_ = const_cast< ::std::string*>(_default_det2_ori_blob_);
  det2_ori_conf_blob_ = const_cast< ::std::string*>(_default_det2_ori_conf_blob_);
  det2_dim_blob_ = const_cast< ::std::string*>(_default_det2_dim_blob_);
  det3_loc_blob_ = const_cast< ::std::string*>(_default_det3_loc_blob_);
  det3_obj_blob_ = const_cast< ::std::string*>(_default_det3_obj_blob_);
  det3_cls_blob_ = const_cast< ::std::string*>(_default_det3_cls_blob_);
  det3_ori_blob_ = const_cast< ::std::string*>(_default_det3_ori_blob_);
  det3_ori_conf_blob_ = const_cast< ::std::string*>(_default_det3_ori_conf_blob_);
  det3_dim_blob_ = const_cast< ::std::string*>(_default_det3_dim_blob_);
  lof_blob_ = const_cast< ::std::string*>(_default_lof_blob_);
  lor_blob_ = const_cast< ::std::string*>(_default_lor_blob_);
  input_blob_ = const_cast< ::std::string*>(_default_input_blob_);
  rois_blob_ = const_cast< ::std::string*>(_default_rois_blob_);
  feat_blob_ = const_cast< ::std::string*>(_default_feat_blob_);
  box_blob_ = const_cast< ::std::string*>(_default_box_blob_);
  iou_blob_ = const_cast< ::std::string*>(_default_iou_blob_);
  brvis_blob_ = const_cast< ::std::string*>(_default_brvis_blob_);
  brswt_blob_ = const_cast< ::std::string*>(_default_brswt_blob_);
  ltvis_blob_ = const_cast< ::std::string*>(_default_ltvis_blob_);
  ltswt_blob_ = const_cast< ::std::string*>(_default_ltswt_blob_);
  rtvis_blob_ = const_cast< ::std::string*>(_default_rtvis_blob_);
  rtswt_blob_ = const_cast< ::std::string*>(_default_rtswt_blob_);
  area_id_blob_ = const_cast< ::std::string*>(_default_area_id_blob_);
  visible_ratio_blob_ = const_cast< ::std::string*>(_default_visible_ratio_blob_);
  cut_off_ratio_blob_ = const_cast< ::std::string*>(_default_cut_off_ratio_blob_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkParam::~NetworkParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.yolo.NetworkParam)
  SharedDtor();
}

void NetworkParam::SharedDtor() {
  if (det1_loc_blob_ != _default_det1_loc_blob_) {
    delete det1_loc_blob_;
  }
  if (det1_obj_blob_ != _default_det1_obj_blob_) {
    delete det1_obj_blob_;
  }
  if (det1_cls_blob_ != _default_det1_cls_blob_) {
    delete det1_cls_blob_;
  }
  if (det1_ori_blob_ != _default_det1_ori_blob_) {
    delete det1_ori_blob_;
  }
  if (det1_ori_conf_blob_ != _default_det1_ori_conf_blob_) {
    delete det1_ori_conf_blob_;
  }
  if (det1_dim_blob_ != _default_det1_dim_blob_) {
    delete det1_dim_blob_;
  }
  if (det2_loc_blob_ != _default_det2_loc_blob_) {
    delete det2_loc_blob_;
  }
  if (det2_obj_blob_ != _default_det2_obj_blob_) {
    delete det2_obj_blob_;
  }
  if (det2_cls_blob_ != _default_det2_cls_blob_) {
    delete det2_cls_blob_;
  }
  if (det2_ori_blob_ != _default_det2_ori_blob_) {
    delete det2_ori_blob_;
  }
  if (det2_ori_conf_blob_ != _default_det2_ori_conf_blob_) {
    delete det2_ori_conf_blob_;
  }
  if (det2_dim_blob_ != _default_det2_dim_blob_) {
    delete det2_dim_blob_;
  }
  if (det3_loc_blob_ != _default_det3_loc_blob_) {
    delete det3_loc_blob_;
  }
  if (det3_obj_blob_ != _default_det3_obj_blob_) {
    delete det3_obj_blob_;
  }
  if (det3_cls_blob_ != _default_det3_cls_blob_) {
    delete det3_cls_blob_;
  }
  if (det3_ori_blob_ != _default_det3_ori_blob_) {
    delete det3_ori_blob_;
  }
  if (det3_ori_conf_blob_ != _default_det3_ori_conf_blob_) {
    delete det3_ori_conf_blob_;
  }
  if (det3_dim_blob_ != _default_det3_dim_blob_) {
    delete det3_dim_blob_;
  }
  if (lof_blob_ != _default_lof_blob_) {
    delete lof_blob_;
  }
  if (lor_blob_ != _default_lor_blob_) {
    delete lor_blob_;
  }
  if (input_blob_ != _default_input_blob_) {
    delete input_blob_;
  }
  if (rois_blob_ != _default_rois_blob_) {
    delete rois_blob_;
  }
  if (feat_blob_ != _default_feat_blob_) {
    delete feat_blob_;
  }
  if (box_blob_ != _default_box_blob_) {
    delete box_blob_;
  }
  if (iou_blob_ != _default_iou_blob_) {
    delete iou_blob_;
  }
  if (brvis_blob_ != _default_brvis_blob_) {
    delete brvis_blob_;
  }
  if (brswt_blob_ != _default_brswt_blob_) {
    delete brswt_blob_;
  }
  if (ltvis_blob_ != _default_ltvis_blob_) {
    delete ltvis_blob_;
  }
  if (ltswt_blob_ != _default_ltswt_blob_) {
    delete ltswt_blob_;
  }
  if (rtvis_blob_ != _default_rtvis_blob_) {
    delete rtvis_blob_;
  }
  if (rtswt_blob_ != _default_rtswt_blob_) {
    delete rtswt_blob_;
  }
  if (area_id_blob_ != _default_area_id_blob_) {
    delete area_id_blob_;
  }
  if (visible_ratio_blob_ != _default_visible_ratio_blob_) {
    delete visible_ratio_blob_;
  }
  if (cut_off_ratio_blob_ != _default_cut_off_ratio_blob_) {
    delete cut_off_ratio_blob_;
  }
  if (this != default_instance_) {
  }
}

void NetworkParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkParam_descriptor_;
}

const NetworkParam& NetworkParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yolo_2eproto();
  return *default_instance_;
}

NetworkParam* NetworkParam::default_instance_ = NULL;

NetworkParam* NetworkParam::New() const {
  return new NetworkParam;
}

void NetworkParam::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_det1_loc_blob()) {
      if (det1_loc_blob_ != _default_det1_loc_blob_) {
        det1_loc_blob_->assign(*_default_det1_loc_blob_);
      }
    }
    if (has_det1_obj_blob()) {
      if (det1_obj_blob_ != _default_det1_obj_blob_) {
        det1_obj_blob_->assign(*_default_det1_obj_blob_);
      }
    }
    if (has_det1_cls_blob()) {
      if (det1_cls_blob_ != _default_det1_cls_blob_) {
        det1_cls_blob_->assign(*_default_det1_cls_blob_);
      }
    }
    if (has_det1_ori_blob()) {
      if (det1_ori_blob_ != _default_det1_ori_blob_) {
        det1_ori_blob_->assign(*_default_det1_ori_blob_);
      }
    }
    if (has_det1_ori_conf_blob()) {
      if (det1_ori_conf_blob_ != _default_det1_ori_conf_blob_) {
        det1_ori_conf_blob_->assign(*_default_det1_ori_conf_blob_);
      }
    }
    if (has_det1_dim_blob()) {
      if (det1_dim_blob_ != _default_det1_dim_blob_) {
        det1_dim_blob_->assign(*_default_det1_dim_blob_);
      }
    }
    if (has_det2_loc_blob()) {
      if (det2_loc_blob_ != _default_det2_loc_blob_) {
        det2_loc_blob_->assign(*_default_det2_loc_blob_);
      }
    }
    if (has_det2_obj_blob()) {
      if (det2_obj_blob_ != _default_det2_obj_blob_) {
        det2_obj_blob_->assign(*_default_det2_obj_blob_);
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_det2_cls_blob()) {
      if (det2_cls_blob_ != _default_det2_cls_blob_) {
        det2_cls_blob_->assign(*_default_det2_cls_blob_);
      }
    }
    if (has_det2_ori_blob()) {
      if (det2_ori_blob_ != _default_det2_ori_blob_) {
        det2_ori_blob_->assign(*_default_det2_ori_blob_);
      }
    }
    if (has_det2_ori_conf_blob()) {
      if (det2_ori_conf_blob_ != _default_det2_ori_conf_blob_) {
        det2_ori_conf_blob_->assign(*_default_det2_ori_conf_blob_);
      }
    }
    if (has_det2_dim_blob()) {
      if (det2_dim_blob_ != _default_det2_dim_blob_) {
        det2_dim_blob_->assign(*_default_det2_dim_blob_);
      }
    }
    if (has_det3_loc_blob()) {
      if (det3_loc_blob_ != _default_det3_loc_blob_) {
        det3_loc_blob_->assign(*_default_det3_loc_blob_);
      }
    }
    if (has_det3_obj_blob()) {
      if (det3_obj_blob_ != _default_det3_obj_blob_) {
        det3_obj_blob_->assign(*_default_det3_obj_blob_);
      }
    }
    if (has_det3_cls_blob()) {
      if (det3_cls_blob_ != _default_det3_cls_blob_) {
        det3_cls_blob_->assign(*_default_det3_cls_blob_);
      }
    }
    if (has_det3_ori_blob()) {
      if (det3_ori_blob_ != _default_det3_ori_blob_) {
        det3_ori_blob_->assign(*_default_det3_ori_blob_);
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_det3_ori_conf_blob()) {
      if (det3_ori_conf_blob_ != _default_det3_ori_conf_blob_) {
        det3_ori_conf_blob_->assign(*_default_det3_ori_conf_blob_);
      }
    }
    if (has_det3_dim_blob()) {
      if (det3_dim_blob_ != _default_det3_dim_blob_) {
        det3_dim_blob_->assign(*_default_det3_dim_blob_);
      }
    }
    if (has_lof_blob()) {
      if (lof_blob_ != _default_lof_blob_) {
        lof_blob_->assign(*_default_lof_blob_);
      }
    }
    if (has_lor_blob()) {
      if (lor_blob_ != _default_lor_blob_) {
        lor_blob_->assign(*_default_lor_blob_);
      }
    }
    if (has_input_blob()) {
      if (input_blob_ != _default_input_blob_) {
        input_blob_->assign(*_default_input_blob_);
      }
    }
    if (has_rois_blob()) {
      if (rois_blob_ != _default_rois_blob_) {
        rois_blob_->assign(*_default_rois_blob_);
      }
    }
    if (has_feat_blob()) {
      if (feat_blob_ != _default_feat_blob_) {
        feat_blob_->assign(*_default_feat_blob_);
      }
    }
    if (has_box_blob()) {
      if (box_blob_ != _default_box_blob_) {
        box_blob_->assign(*_default_box_blob_);
      }
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_iou_blob()) {
      if (iou_blob_ != _default_iou_blob_) {
        iou_blob_->assign(*_default_iou_blob_);
      }
    }
    if (has_brvis_blob()) {
      if (brvis_blob_ != _default_brvis_blob_) {
        brvis_blob_->assign(*_default_brvis_blob_);
      }
    }
    if (has_brswt_blob()) {
      if (brswt_blob_ != _default_brswt_blob_) {
        brswt_blob_->assign(*_default_brswt_blob_);
      }
    }
    if (has_ltvis_blob()) {
      if (ltvis_blob_ != _default_ltvis_blob_) {
        ltvis_blob_->assign(*_default_ltvis_blob_);
      }
    }
    if (has_ltswt_blob()) {
      if (ltswt_blob_ != _default_ltswt_blob_) {
        ltswt_blob_->assign(*_default_ltswt_blob_);
      }
    }
    if (has_rtvis_blob()) {
      if (rtvis_blob_ != _default_rtvis_blob_) {
        rtvis_blob_->assign(*_default_rtvis_blob_);
      }
    }
    if (has_rtswt_blob()) {
      if (rtswt_blob_ != _default_rtswt_blob_) {
        rtswt_blob_->assign(*_default_rtswt_blob_);
      }
    }
    if (has_area_id_blob()) {
      if (area_id_blob_ != _default_area_id_blob_) {
        area_id_blob_->assign(*_default_area_id_blob_);
      }
    }
  }
  if (_has_bits_[32 / 32] & 3) {
    if (has_visible_ratio_blob()) {
      if (visible_ratio_blob_ != _default_visible_ratio_blob_) {
        visible_ratio_blob_->assign(*_default_visible_ratio_blob_);
      }
    }
    if (has_cut_off_ratio_blob()) {
      if (cut_off_ratio_blob_ != _default_cut_off_ratio_blob_) {
        cut_off_ratio_blob_->assign(*_default_cut_off_ratio_blob_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.yolo.NetworkParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det1_loc_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det1_loc_blob().data(), this->det1_loc_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det1_loc_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_det1_obj_blob;
        break;
      }

      // optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
      case 2: {
        if (tag == 18) {
         parse_det1_obj_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det1_obj_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det1_obj_blob().data(), this->det1_obj_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det1_obj_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_det1_cls_blob;
        break;
      }

      // optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
      case 3: {
        if (tag == 26) {
         parse_det1_cls_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det1_cls_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det1_cls_blob().data(), this->det1_cls_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det1_cls_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_det1_ori_blob;
        break;
      }

      // optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
      case 4: {
        if (tag == 34) {
         parse_det1_ori_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det1_ori_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det1_ori_blob().data(), this->det1_ori_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det1_ori_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_det1_ori_conf_blob;
        break;
      }

      // optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
      case 5: {
        if (tag == 42) {
         parse_det1_ori_conf_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det1_ori_conf_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det1_ori_conf_blob().data(), this->det1_ori_conf_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det1_ori_conf_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_det1_dim_blob;
        break;
      }

      // optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
      case 6: {
        if (tag == 50) {
         parse_det1_dim_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det1_dim_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det1_dim_blob().data(), this->det1_dim_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det1_dim_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_det2_loc_blob;
        break;
      }

      // optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
      case 7: {
        if (tag == 58) {
         parse_det2_loc_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det2_loc_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det2_loc_blob().data(), this->det2_loc_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det2_loc_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_det2_obj_blob;
        break;
      }

      // optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
      case 8: {
        if (tag == 66) {
         parse_det2_obj_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det2_obj_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det2_obj_blob().data(), this->det2_obj_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det2_obj_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_det2_cls_blob;
        break;
      }

      // optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
      case 9: {
        if (tag == 74) {
         parse_det2_cls_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det2_cls_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det2_cls_blob().data(), this->det2_cls_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det2_cls_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_det2_ori_blob;
        break;
      }

      // optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
      case 10: {
        if (tag == 82) {
         parse_det2_ori_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det2_ori_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det2_ori_blob().data(), this->det2_ori_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det2_ori_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_det2_ori_conf_blob;
        break;
      }

      // optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
      case 11: {
        if (tag == 90) {
         parse_det2_ori_conf_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det2_ori_conf_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det2_ori_conf_blob().data(), this->det2_ori_conf_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det2_ori_conf_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_det2_dim_blob;
        break;
      }

      // optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
      case 12: {
        if (tag == 98) {
         parse_det2_dim_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det2_dim_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det2_dim_blob().data(), this->det2_dim_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det2_dim_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_det3_loc_blob;
        break;
      }

      // optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
      case 13: {
        if (tag == 106) {
         parse_det3_loc_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det3_loc_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det3_loc_blob().data(), this->det3_loc_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det3_loc_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_det3_obj_blob;
        break;
      }

      // optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
      case 14: {
        if (tag == 114) {
         parse_det3_obj_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det3_obj_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det3_obj_blob().data(), this->det3_obj_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det3_obj_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_det3_cls_blob;
        break;
      }

      // optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
      case 15: {
        if (tag == 122) {
         parse_det3_cls_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det3_cls_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det3_cls_blob().data(), this->det3_cls_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det3_cls_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_det3_ori_blob;
        break;
      }

      // optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
      case 16: {
        if (tag == 130) {
         parse_det3_ori_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det3_ori_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det3_ori_blob().data(), this->det3_ori_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det3_ori_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_det3_ori_conf_blob;
        break;
      }

      // optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
      case 17: {
        if (tag == 138) {
         parse_det3_ori_conf_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det3_ori_conf_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det3_ori_conf_blob().data(), this->det3_ori_conf_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det3_ori_conf_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_det3_dim_blob;
        break;
      }

      // optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
      case 18: {
        if (tag == 146) {
         parse_det3_dim_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det3_dim_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det3_dim_blob().data(), this->det3_dim_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "det3_dim_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_lof_blob;
        break;
      }

      // optional string lof_blob = 19 [default = "lof_pred"];
      case 19: {
        if (tag == 154) {
         parse_lof_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lof_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lof_blob().data(), this->lof_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lof_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_lor_blob;
        break;
      }

      // optional string lor_blob = 20 [default = "lor_pred"];
      case 20: {
        if (tag == 162) {
         parse_lor_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lor_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lor_blob().data(), this->lor_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lor_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_input_blob;
        break;
      }

      // optional string input_blob = 21 [default = "data"];
      case 21: {
        if (tag == 170) {
         parse_input_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_blob().data(), this->input_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_rois_blob;
        break;
      }

      // optional string rois_blob = 22 [default = "rois_pred"];
      case 22: {
        if (tag == 178) {
         parse_rois_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rois_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rois_blob().data(), this->rois_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rois_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_feat_blob;
        break;
      }

      // optional string feat_blob = 23 [default = "conv_feat"];
      case 23: {
        if (tag == 186) {
         parse_feat_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feat_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feat_blob().data(), this->feat_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "feat_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_box_blob;
        break;
      }

      // optional string box_blob = 24 [default = "box_pred"];
      case 24: {
        if (tag == 194) {
         parse_box_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_box_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->box_blob().data(), this->box_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "box_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_iou_blob;
        break;
      }

      // optional string iou_blob = 25 [default = "iou_pred"];
      case 25: {
        if (tag == 202) {
         parse_iou_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iou_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iou_blob().data(), this->iou_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iou_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_brvis_blob;
        break;
      }

      // optional string brvis_blob = 26 [default = "brvis_pred"];
      case 26: {
        if (tag == 210) {
         parse_brvis_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brvis_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brvis_blob().data(), this->brvis_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brvis_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_brswt_blob;
        break;
      }

      // optional string brswt_blob = 27 [default = "brswt_pred"];
      case 27: {
        if (tag == 218) {
         parse_brswt_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brswt_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brswt_blob().data(), this->brswt_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "brswt_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_ltvis_blob;
        break;
      }

      // optional string ltvis_blob = 28 [default = "ltvis_pred"];
      case 28: {
        if (tag == 226) {
         parse_ltvis_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ltvis_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ltvis_blob().data(), this->ltvis_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ltvis_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_ltswt_blob;
        break;
      }

      // optional string ltswt_blob = 29 [default = "ltswt_pred"];
      case 29: {
        if (tag == 234) {
         parse_ltswt_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ltswt_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ltswt_blob().data(), this->ltswt_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ltswt_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_rtvis_blob;
        break;
      }

      // optional string rtvis_blob = 30 [default = "rtvis_pred"];
      case 30: {
        if (tag == 242) {
         parse_rtvis_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rtvis_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rtvis_blob().data(), this->rtvis_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rtvis_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_rtswt_blob;
        break;
      }

      // optional string rtswt_blob = 31 [default = "rtswt_pred"];
      case 31: {
        if (tag == 250) {
         parse_rtswt_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rtswt_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rtswt_blob().data(), this->rtswt_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rtswt_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_area_id_blob;
        break;
      }

      // optional string area_id_blob = 32 [default = "area_id_pred"];
      case 32: {
        if (tag == 258) {
         parse_area_id_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area_id_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->area_id_blob().data(), this->area_id_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "area_id_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_visible_ratio_blob;
        break;
      }

      // optional string visible_ratio_blob = 33 [default = "vis_pred"];
      case 33: {
        if (tag == 266) {
         parse_visible_ratio_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_visible_ratio_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->visible_ratio_blob().data(), this->visible_ratio_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "visible_ratio_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_cut_off_ratio_blob;
        break;
      }

      // optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
      case 34: {
        if (tag == 274) {
         parse_cut_off_ratio_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cut_off_ratio_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cut_off_ratio_blob().data(), this->cut_off_ratio_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cut_off_ratio_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.yolo.NetworkParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.yolo.NetworkParam)
  return false;
#undef DO_
}

void NetworkParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.yolo.NetworkParam)
  // optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
  if (has_det1_loc_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det1_loc_blob().data(), this->det1_loc_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det1_loc_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->det1_loc_blob(), output);
  }

  // optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
  if (has_det1_obj_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det1_obj_blob().data(), this->det1_obj_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det1_obj_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->det1_obj_blob(), output);
  }

  // optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
  if (has_det1_cls_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det1_cls_blob().data(), this->det1_cls_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det1_cls_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->det1_cls_blob(), output);
  }

  // optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
  if (has_det1_ori_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det1_ori_blob().data(), this->det1_ori_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det1_ori_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->det1_ori_blob(), output);
  }

  // optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
  if (has_det1_ori_conf_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det1_ori_conf_blob().data(), this->det1_ori_conf_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det1_ori_conf_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->det1_ori_conf_blob(), output);
  }

  // optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
  if (has_det1_dim_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det1_dim_blob().data(), this->det1_dim_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det1_dim_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->det1_dim_blob(), output);
  }

  // optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
  if (has_det2_loc_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det2_loc_blob().data(), this->det2_loc_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det2_loc_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->det2_loc_blob(), output);
  }

  // optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
  if (has_det2_obj_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det2_obj_blob().data(), this->det2_obj_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det2_obj_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->det2_obj_blob(), output);
  }

  // optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
  if (has_det2_cls_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det2_cls_blob().data(), this->det2_cls_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det2_cls_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->det2_cls_blob(), output);
  }

  // optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
  if (has_det2_ori_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det2_ori_blob().data(), this->det2_ori_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det2_ori_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->det2_ori_blob(), output);
  }

  // optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
  if (has_det2_ori_conf_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det2_ori_conf_blob().data(), this->det2_ori_conf_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det2_ori_conf_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->det2_ori_conf_blob(), output);
  }

  // optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
  if (has_det2_dim_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det2_dim_blob().data(), this->det2_dim_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det2_dim_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->det2_dim_blob(), output);
  }

  // optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
  if (has_det3_loc_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det3_loc_blob().data(), this->det3_loc_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det3_loc_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->det3_loc_blob(), output);
  }

  // optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
  if (has_det3_obj_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det3_obj_blob().data(), this->det3_obj_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det3_obj_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->det3_obj_blob(), output);
  }

  // optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
  if (has_det3_cls_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det3_cls_blob().data(), this->det3_cls_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det3_cls_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->det3_cls_blob(), output);
  }

  // optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
  if (has_det3_ori_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det3_ori_blob().data(), this->det3_ori_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det3_ori_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->det3_ori_blob(), output);
  }

  // optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
  if (has_det3_ori_conf_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det3_ori_conf_blob().data(), this->det3_ori_conf_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det3_ori_conf_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->det3_ori_conf_blob(), output);
  }

  // optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
  if (has_det3_dim_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det3_dim_blob().data(), this->det3_dim_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det3_dim_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->det3_dim_blob(), output);
  }

  // optional string lof_blob = 19 [default = "lof_pred"];
  if (has_lof_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lof_blob().data(), this->lof_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lof_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->lof_blob(), output);
  }

  // optional string lor_blob = 20 [default = "lor_pred"];
  if (has_lor_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lor_blob().data(), this->lor_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lor_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->lor_blob(), output);
  }

  // optional string input_blob = 21 [default = "data"];
  if (has_input_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_blob().data(), this->input_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->input_blob(), output);
  }

  // optional string rois_blob = 22 [default = "rois_pred"];
  if (has_rois_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rois_blob().data(), this->rois_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rois_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->rois_blob(), output);
  }

  // optional string feat_blob = 23 [default = "conv_feat"];
  if (has_feat_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feat_blob().data(), this->feat_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "feat_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->feat_blob(), output);
  }

  // optional string box_blob = 24 [default = "box_pred"];
  if (has_box_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->box_blob().data(), this->box_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "box_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->box_blob(), output);
  }

  // optional string iou_blob = 25 [default = "iou_pred"];
  if (has_iou_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iou_blob().data(), this->iou_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iou_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->iou_blob(), output);
  }

  // optional string brvis_blob = 26 [default = "brvis_pred"];
  if (has_brvis_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brvis_blob().data(), this->brvis_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brvis_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->brvis_blob(), output);
  }

  // optional string brswt_blob = 27 [default = "brswt_pred"];
  if (has_brswt_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brswt_blob().data(), this->brswt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brswt_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->brswt_blob(), output);
  }

  // optional string ltvis_blob = 28 [default = "ltvis_pred"];
  if (has_ltvis_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ltvis_blob().data(), this->ltvis_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ltvis_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->ltvis_blob(), output);
  }

  // optional string ltswt_blob = 29 [default = "ltswt_pred"];
  if (has_ltswt_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ltswt_blob().data(), this->ltswt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ltswt_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->ltswt_blob(), output);
  }

  // optional string rtvis_blob = 30 [default = "rtvis_pred"];
  if (has_rtvis_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtvis_blob().data(), this->rtvis_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtvis_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->rtvis_blob(), output);
  }

  // optional string rtswt_blob = 31 [default = "rtswt_pred"];
  if (has_rtswt_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtswt_blob().data(), this->rtswt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtswt_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->rtswt_blob(), output);
  }

  // optional string area_id_blob = 32 [default = "area_id_pred"];
  if (has_area_id_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->area_id_blob().data(), this->area_id_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "area_id_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->area_id_blob(), output);
  }

  // optional string visible_ratio_blob = 33 [default = "vis_pred"];
  if (has_visible_ratio_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->visible_ratio_blob().data(), this->visible_ratio_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "visible_ratio_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->visible_ratio_blob(), output);
  }

  // optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
  if (has_cut_off_ratio_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cut_off_ratio_blob().data(), this->cut_off_ratio_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cut_off_ratio_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->cut_off_ratio_blob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.yolo.NetworkParam)
}

::google::protobuf::uint8* NetworkParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.yolo.NetworkParam)
  // optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
  if (has_det1_loc_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det1_loc_blob().data(), this->det1_loc_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det1_loc_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->det1_loc_blob(), target);
  }

  // optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
  if (has_det1_obj_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det1_obj_blob().data(), this->det1_obj_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det1_obj_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->det1_obj_blob(), target);
  }

  // optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
  if (has_det1_cls_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det1_cls_blob().data(), this->det1_cls_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det1_cls_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->det1_cls_blob(), target);
  }

  // optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
  if (has_det1_ori_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det1_ori_blob().data(), this->det1_ori_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det1_ori_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->det1_ori_blob(), target);
  }

  // optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
  if (has_det1_ori_conf_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det1_ori_conf_blob().data(), this->det1_ori_conf_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det1_ori_conf_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->det1_ori_conf_blob(), target);
  }

  // optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
  if (has_det1_dim_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det1_dim_blob().data(), this->det1_dim_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det1_dim_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->det1_dim_blob(), target);
  }

  // optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
  if (has_det2_loc_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det2_loc_blob().data(), this->det2_loc_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det2_loc_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->det2_loc_blob(), target);
  }

  // optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
  if (has_det2_obj_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det2_obj_blob().data(), this->det2_obj_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det2_obj_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->det2_obj_blob(), target);
  }

  // optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
  if (has_det2_cls_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det2_cls_blob().data(), this->det2_cls_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det2_cls_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->det2_cls_blob(), target);
  }

  // optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
  if (has_det2_ori_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det2_ori_blob().data(), this->det2_ori_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det2_ori_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->det2_ori_blob(), target);
  }

  // optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
  if (has_det2_ori_conf_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det2_ori_conf_blob().data(), this->det2_ori_conf_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det2_ori_conf_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->det2_ori_conf_blob(), target);
  }

  // optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
  if (has_det2_dim_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det2_dim_blob().data(), this->det2_dim_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det2_dim_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->det2_dim_blob(), target);
  }

  // optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
  if (has_det3_loc_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det3_loc_blob().data(), this->det3_loc_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det3_loc_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->det3_loc_blob(), target);
  }

  // optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
  if (has_det3_obj_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det3_obj_blob().data(), this->det3_obj_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det3_obj_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->det3_obj_blob(), target);
  }

  // optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
  if (has_det3_cls_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det3_cls_blob().data(), this->det3_cls_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det3_cls_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->det3_cls_blob(), target);
  }

  // optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
  if (has_det3_ori_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det3_ori_blob().data(), this->det3_ori_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det3_ori_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->det3_ori_blob(), target);
  }

  // optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
  if (has_det3_ori_conf_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det3_ori_conf_blob().data(), this->det3_ori_conf_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det3_ori_conf_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->det3_ori_conf_blob(), target);
  }

  // optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
  if (has_det3_dim_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det3_dim_blob().data(), this->det3_dim_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "det3_dim_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->det3_dim_blob(), target);
  }

  // optional string lof_blob = 19 [default = "lof_pred"];
  if (has_lof_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lof_blob().data(), this->lof_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lof_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->lof_blob(), target);
  }

  // optional string lor_blob = 20 [default = "lor_pred"];
  if (has_lor_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lor_blob().data(), this->lor_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lor_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->lor_blob(), target);
  }

  // optional string input_blob = 21 [default = "data"];
  if (has_input_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_blob().data(), this->input_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->input_blob(), target);
  }

  // optional string rois_blob = 22 [default = "rois_pred"];
  if (has_rois_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rois_blob().data(), this->rois_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rois_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->rois_blob(), target);
  }

  // optional string feat_blob = 23 [default = "conv_feat"];
  if (has_feat_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feat_blob().data(), this->feat_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "feat_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->feat_blob(), target);
  }

  // optional string box_blob = 24 [default = "box_pred"];
  if (has_box_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->box_blob().data(), this->box_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "box_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->box_blob(), target);
  }

  // optional string iou_blob = 25 [default = "iou_pred"];
  if (has_iou_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iou_blob().data(), this->iou_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iou_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->iou_blob(), target);
  }

  // optional string brvis_blob = 26 [default = "brvis_pred"];
  if (has_brvis_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brvis_blob().data(), this->brvis_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brvis_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->brvis_blob(), target);
  }

  // optional string brswt_blob = 27 [default = "brswt_pred"];
  if (has_brswt_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brswt_blob().data(), this->brswt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "brswt_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->brswt_blob(), target);
  }

  // optional string ltvis_blob = 28 [default = "ltvis_pred"];
  if (has_ltvis_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ltvis_blob().data(), this->ltvis_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ltvis_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->ltvis_blob(), target);
  }

  // optional string ltswt_blob = 29 [default = "ltswt_pred"];
  if (has_ltswt_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ltswt_blob().data(), this->ltswt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ltswt_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->ltswt_blob(), target);
  }

  // optional string rtvis_blob = 30 [default = "rtvis_pred"];
  if (has_rtvis_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtvis_blob().data(), this->rtvis_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtvis_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->rtvis_blob(), target);
  }

  // optional string rtswt_blob = 31 [default = "rtswt_pred"];
  if (has_rtswt_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rtswt_blob().data(), this->rtswt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rtswt_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->rtswt_blob(), target);
  }

  // optional string area_id_blob = 32 [default = "area_id_pred"];
  if (has_area_id_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->area_id_blob().data(), this->area_id_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "area_id_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->area_id_blob(), target);
  }

  // optional string visible_ratio_blob = 33 [default = "vis_pred"];
  if (has_visible_ratio_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->visible_ratio_blob().data(), this->visible_ratio_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "visible_ratio_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->visible_ratio_blob(), target);
  }

  // optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
  if (has_cut_off_ratio_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cut_off_ratio_blob().data(), this->cut_off_ratio_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cut_off_ratio_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->cut_off_ratio_blob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.yolo.NetworkParam)
  return target;
}

int NetworkParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
    if (has_det1_loc_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det1_loc_blob());
    }

    // optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
    if (has_det1_obj_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det1_obj_blob());
    }

    // optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
    if (has_det1_cls_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det1_cls_blob());
    }

    // optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
    if (has_det1_ori_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det1_ori_blob());
    }

    // optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
    if (has_det1_ori_conf_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det1_ori_conf_blob());
    }

    // optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
    if (has_det1_dim_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det1_dim_blob());
    }

    // optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
    if (has_det2_loc_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det2_loc_blob());
    }

    // optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
    if (has_det2_obj_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det2_obj_blob());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
    if (has_det2_cls_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det2_cls_blob());
    }

    // optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
    if (has_det2_ori_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det2_ori_blob());
    }

    // optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
    if (has_det2_ori_conf_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det2_ori_conf_blob());
    }

    // optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
    if (has_det2_dim_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det2_dim_blob());
    }

    // optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
    if (has_det3_loc_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det3_loc_blob());
    }

    // optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
    if (has_det3_obj_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det3_obj_blob());
    }

    // optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
    if (has_det3_cls_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det3_cls_blob());
    }

    // optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
    if (has_det3_ori_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det3_ori_blob());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
    if (has_det3_ori_conf_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det3_ori_conf_blob());
    }

    // optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
    if (has_det3_dim_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det3_dim_blob());
    }

    // optional string lof_blob = 19 [default = "lof_pred"];
    if (has_lof_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lof_blob());
    }

    // optional string lor_blob = 20 [default = "lor_pred"];
    if (has_lor_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lor_blob());
    }

    // optional string input_blob = 21 [default = "data"];
    if (has_input_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_blob());
    }

    // optional string rois_blob = 22 [default = "rois_pred"];
    if (has_rois_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rois_blob());
    }

    // optional string feat_blob = 23 [default = "conv_feat"];
    if (has_feat_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feat_blob());
    }

    // optional string box_blob = 24 [default = "box_pred"];
    if (has_box_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->box_blob());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string iou_blob = 25 [default = "iou_pred"];
    if (has_iou_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iou_blob());
    }

    // optional string brvis_blob = 26 [default = "brvis_pred"];
    if (has_brvis_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brvis_blob());
    }

    // optional string brswt_blob = 27 [default = "brswt_pred"];
    if (has_brswt_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brswt_blob());
    }

    // optional string ltvis_blob = 28 [default = "ltvis_pred"];
    if (has_ltvis_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ltvis_blob());
    }

    // optional string ltswt_blob = 29 [default = "ltswt_pred"];
    if (has_ltswt_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ltswt_blob());
    }

    // optional string rtvis_blob = 30 [default = "rtvis_pred"];
    if (has_rtvis_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rtvis_blob());
    }

    // optional string rtswt_blob = 31 [default = "rtswt_pred"];
    if (has_rtswt_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rtswt_blob());
    }

    // optional string area_id_blob = 32 [default = "area_id_pred"];
    if (has_area_id_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->area_id_blob());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string visible_ratio_blob = 33 [default = "vis_pred"];
    if (has_visible_ratio_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->visible_ratio_blob());
    }

    // optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
    if (has_cut_off_ratio_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cut_off_ratio_blob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkParam::MergeFrom(const NetworkParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_det1_loc_blob()) {
      set_det1_loc_blob(from.det1_loc_blob());
    }
    if (from.has_det1_obj_blob()) {
      set_det1_obj_blob(from.det1_obj_blob());
    }
    if (from.has_det1_cls_blob()) {
      set_det1_cls_blob(from.det1_cls_blob());
    }
    if (from.has_det1_ori_blob()) {
      set_det1_ori_blob(from.det1_ori_blob());
    }
    if (from.has_det1_ori_conf_blob()) {
      set_det1_ori_conf_blob(from.det1_ori_conf_blob());
    }
    if (from.has_det1_dim_blob()) {
      set_det1_dim_blob(from.det1_dim_blob());
    }
    if (from.has_det2_loc_blob()) {
      set_det2_loc_blob(from.det2_loc_blob());
    }
    if (from.has_det2_obj_blob()) {
      set_det2_obj_blob(from.det2_obj_blob());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_det2_cls_blob()) {
      set_det2_cls_blob(from.det2_cls_blob());
    }
    if (from.has_det2_ori_blob()) {
      set_det2_ori_blob(from.det2_ori_blob());
    }
    if (from.has_det2_ori_conf_blob()) {
      set_det2_ori_conf_blob(from.det2_ori_conf_blob());
    }
    if (from.has_det2_dim_blob()) {
      set_det2_dim_blob(from.det2_dim_blob());
    }
    if (from.has_det3_loc_blob()) {
      set_det3_loc_blob(from.det3_loc_blob());
    }
    if (from.has_det3_obj_blob()) {
      set_det3_obj_blob(from.det3_obj_blob());
    }
    if (from.has_det3_cls_blob()) {
      set_det3_cls_blob(from.det3_cls_blob());
    }
    if (from.has_det3_ori_blob()) {
      set_det3_ori_blob(from.det3_ori_blob());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_det3_ori_conf_blob()) {
      set_det3_ori_conf_blob(from.det3_ori_conf_blob());
    }
    if (from.has_det3_dim_blob()) {
      set_det3_dim_blob(from.det3_dim_blob());
    }
    if (from.has_lof_blob()) {
      set_lof_blob(from.lof_blob());
    }
    if (from.has_lor_blob()) {
      set_lor_blob(from.lor_blob());
    }
    if (from.has_input_blob()) {
      set_input_blob(from.input_blob());
    }
    if (from.has_rois_blob()) {
      set_rois_blob(from.rois_blob());
    }
    if (from.has_feat_blob()) {
      set_feat_blob(from.feat_blob());
    }
    if (from.has_box_blob()) {
      set_box_blob(from.box_blob());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_iou_blob()) {
      set_iou_blob(from.iou_blob());
    }
    if (from.has_brvis_blob()) {
      set_brvis_blob(from.brvis_blob());
    }
    if (from.has_brswt_blob()) {
      set_brswt_blob(from.brswt_blob());
    }
    if (from.has_ltvis_blob()) {
      set_ltvis_blob(from.ltvis_blob());
    }
    if (from.has_ltswt_blob()) {
      set_ltswt_blob(from.ltswt_blob());
    }
    if (from.has_rtvis_blob()) {
      set_rtvis_blob(from.rtvis_blob());
    }
    if (from.has_rtswt_blob()) {
      set_rtswt_blob(from.rtswt_blob());
    }
    if (from.has_area_id_blob()) {
      set_area_id_blob(from.area_id_blob());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_visible_ratio_blob()) {
      set_visible_ratio_blob(from.visible_ratio_blob());
    }
    if (from.has_cut_off_ratio_blob()) {
      set_cut_off_ratio_blob(from.cut_off_ratio_blob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParam::CopyFrom(const NetworkParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParam::IsInitialized() const {

  return true;
}

void NetworkParam::Swap(NetworkParam* other) {
  if (other != this) {
    std::swap(det1_loc_blob_, other->det1_loc_blob_);
    std::swap(det1_obj_blob_, other->det1_obj_blob_);
    std::swap(det1_cls_blob_, other->det1_cls_blob_);
    std::swap(det1_ori_blob_, other->det1_ori_blob_);
    std::swap(det1_ori_conf_blob_, other->det1_ori_conf_blob_);
    std::swap(det1_dim_blob_, other->det1_dim_blob_);
    std::swap(det2_loc_blob_, other->det2_loc_blob_);
    std::swap(det2_obj_blob_, other->det2_obj_blob_);
    std::swap(det2_cls_blob_, other->det2_cls_blob_);
    std::swap(det2_ori_blob_, other->det2_ori_blob_);
    std::swap(det2_ori_conf_blob_, other->det2_ori_conf_blob_);
    std::swap(det2_dim_blob_, other->det2_dim_blob_);
    std::swap(det3_loc_blob_, other->det3_loc_blob_);
    std::swap(det3_obj_blob_, other->det3_obj_blob_);
    std::swap(det3_cls_blob_, other->det3_cls_blob_);
    std::swap(det3_ori_blob_, other->det3_ori_blob_);
    std::swap(det3_ori_conf_blob_, other->det3_ori_conf_blob_);
    std::swap(det3_dim_blob_, other->det3_dim_blob_);
    std::swap(lof_blob_, other->lof_blob_);
    std::swap(lor_blob_, other->lor_blob_);
    std::swap(input_blob_, other->input_blob_);
    std::swap(rois_blob_, other->rois_blob_);
    std::swap(feat_blob_, other->feat_blob_);
    std::swap(box_blob_, other->box_blob_);
    std::swap(iou_blob_, other->iou_blob_);
    std::swap(brvis_blob_, other->brvis_blob_);
    std::swap(brswt_blob_, other->brswt_blob_);
    std::swap(ltvis_blob_, other->ltvis_blob_);
    std::swap(ltswt_blob_, other->ltswt_blob_);
    std::swap(rtvis_blob_, other->rtvis_blob_);
    std::swap(rtswt_blob_, other->rtswt_blob_);
    std::swap(area_id_blob_, other->area_id_blob_);
    std::swap(visible_ratio_blob_, other->visible_ratio_blob_);
    std::swap(cut_off_ratio_blob_, other->cut_off_ratio_blob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkParam_descriptor_;
  metadata.reflection = NetworkParam_reflection_;
  return metadata;
}


// ===================================================================

::std::string* NMSParam::_default_type_ = NULL;
#ifndef _MSC_VER
const int NMSParam::kTypeFieldNumber;
const int NMSParam::kThresholdFieldNumber;
const int NMSParam::kSigmaFieldNumber;
const int NMSParam::kInterClsConfThreshFieldNumber;
const int NMSParam::kInterClsNmsThreshFieldNumber;
#endif  // !_MSC_VER

NMSParam::NMSParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.yolo.NMSParam)
}

void NMSParam::InitAsDefaultInstance() {
}

NMSParam::NMSParam(const NMSParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.yolo.NMSParam)
}

void NMSParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(_default_type_);
  threshold_ = 0.4f;
  sigma_ = 0.4f;
  inter_cls_conf_thresh_ = 0.1f;
  inter_cls_nms_thresh_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NMSParam::~NMSParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.yolo.NMSParam)
  SharedDtor();
}

void NMSParam::SharedDtor() {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void NMSParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NMSParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NMSParam_descriptor_;
}

const NMSParam& NMSParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yolo_2eproto();
  return *default_instance_;
}

NMSParam* NMSParam::default_instance_ = NULL;

NMSParam* NMSParam::New() const {
  return new NMSParam;
}

void NMSParam::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_type()) {
      if (type_ != _default_type_) {
        type_->assign(*_default_type_);
      }
    }
    threshold_ = 0.4f;
    sigma_ = 0.4f;
    inter_cls_conf_thresh_ = 0.1f;
    inter_cls_nms_thresh_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NMSParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.yolo.NMSParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "NormalNMS"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_threshold;
        break;
      }

      // optional float threshold = 2 [default = 0.4];
      case 2: {
        if (tag == 21) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_sigma;
        break;
      }

      // optional float sigma = 3 [default = 0.4];
      case 3: {
        if (tag == 29) {
         parse_sigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_)));
          set_has_sigma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_inter_cls_conf_thresh;
        break;
      }

      // optional float inter_cls_conf_thresh = 4 [default = 0.1];
      case 4: {
        if (tag == 37) {
         parse_inter_cls_conf_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inter_cls_conf_thresh_)));
          set_has_inter_cls_conf_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_inter_cls_nms_thresh;
        break;
      }

      // optional float inter_cls_nms_thresh = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_inter_cls_nms_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inter_cls_nms_thresh_)));
          set_has_inter_cls_nms_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.yolo.NMSParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.yolo.NMSParam)
  return false;
#undef DO_
}

void NMSParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.yolo.NMSParam)
  // optional string type = 1 [default = "NormalNMS"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional float threshold = 2 [default = 0.4];
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->threshold(), output);
  }

  // optional float sigma = 3 [default = 0.4];
  if (has_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sigma(), output);
  }

  // optional float inter_cls_conf_thresh = 4 [default = 0.1];
  if (has_inter_cls_conf_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->inter_cls_conf_thresh(), output);
  }

  // optional float inter_cls_nms_thresh = 5 [default = 1];
  if (has_inter_cls_nms_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->inter_cls_nms_thresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.yolo.NMSParam)
}

::google::protobuf::uint8* NMSParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.yolo.NMSParam)
  // optional string type = 1 [default = "NormalNMS"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional float threshold = 2 [default = 0.4];
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->threshold(), target);
  }

  // optional float sigma = 3 [default = 0.4];
  if (has_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sigma(), target);
  }

  // optional float inter_cls_conf_thresh = 4 [default = 0.1];
  if (has_inter_cls_conf_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->inter_cls_conf_thresh(), target);
  }

  // optional float inter_cls_nms_thresh = 5 [default = 1];
  if (has_inter_cls_nms_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->inter_cls_nms_thresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.yolo.NMSParam)
  return target;
}

int NMSParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1 [default = "NormalNMS"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float threshold = 2 [default = 0.4];
    if (has_threshold()) {
      total_size += 1 + 4;
    }

    // optional float sigma = 3 [default = 0.4];
    if (has_sigma()) {
      total_size += 1 + 4;
    }

    // optional float inter_cls_conf_thresh = 4 [default = 0.1];
    if (has_inter_cls_conf_thresh()) {
      total_size += 1 + 4;
    }

    // optional float inter_cls_nms_thresh = 5 [default = 1];
    if (has_inter_cls_nms_thresh()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NMSParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NMSParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NMSParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NMSParam::MergeFrom(const NMSParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
    if (from.has_sigma()) {
      set_sigma(from.sigma());
    }
    if (from.has_inter_cls_conf_thresh()) {
      set_inter_cls_conf_thresh(from.inter_cls_conf_thresh());
    }
    if (from.has_inter_cls_nms_thresh()) {
      set_inter_cls_nms_thresh(from.inter_cls_nms_thresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NMSParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NMSParam::CopyFrom(const NMSParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NMSParam::IsInitialized() const {

  return true;
}

void NMSParam::Swap(NMSParam* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(threshold_, other->threshold_);
    std::swap(sigma_, other->sigma_);
    std::swap(inter_cls_conf_thresh_, other->inter_cls_conf_thresh_);
    std::swap(inter_cls_nms_thresh_, other->inter_cls_nms_thresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NMSParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NMSParam_descriptor_;
  metadata.reflection = NMSParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BBoxStatistics::kMeanFieldNumber;
const int BBoxStatistics::kStdFieldNumber;
#endif  // !_MSC_VER

BBoxStatistics::BBoxStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.yolo.BBoxStatistics)
}

void BBoxStatistics::InitAsDefaultInstance() {
}

BBoxStatistics::BBoxStatistics(const BBoxStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.yolo.BBoxStatistics)
}

void BBoxStatistics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BBoxStatistics::~BBoxStatistics() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.yolo.BBoxStatistics)
  SharedDtor();
}

void BBoxStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BBoxStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BBoxStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BBoxStatistics_descriptor_;
}

const BBoxStatistics& BBoxStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yolo_2eproto();
  return *default_instance_;
}

BBoxStatistics* BBoxStatistics::default_instance_ = NULL;

BBoxStatistics* BBoxStatistics::New() const {
  return new BBoxStatistics;
}

void BBoxStatistics::Clear() {
  mean_.Clear();
  std_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BBoxStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.yolo.BBoxStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float mean = 1;
      case 1: {
        if (tag == 13) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_mean())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_mean;
        if (input->ExpectTag(21)) goto parse_std;
        break;
      }

      // repeated float std = 2;
      case 2: {
        if (tag == 21) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_std())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_std())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_std;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.yolo.BBoxStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.yolo.BBoxStatistics)
  return false;
#undef DO_
}

void BBoxStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.yolo.BBoxStatistics)
  // repeated float mean = 1;
  for (int i = 0; i < this->mean_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->mean(i), output);
  }

  // repeated float std = 2;
  for (int i = 0; i < this->std_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->std(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.yolo.BBoxStatistics)
}

::google::protobuf::uint8* BBoxStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.yolo.BBoxStatistics)
  // repeated float mean = 1;
  for (int i = 0; i < this->mean_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->mean(i), target);
  }

  // repeated float std = 2;
  for (int i = 0; i < this->std_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->std(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.yolo.BBoxStatistics)
  return target;
}

int BBoxStatistics::ByteSize() const {
  int total_size = 0;

  // repeated float mean = 1;
  {
    int data_size = 0;
    data_size = 4 * this->mean_size();
    total_size += 1 * this->mean_size() + data_size;
  }

  // repeated float std = 2;
  {
    int data_size = 0;
    data_size = 4 * this->std_size();
    total_size += 1 * this->std_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBoxStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BBoxStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BBoxStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BBoxStatistics::MergeFrom(const BBoxStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  mean_.MergeFrom(from.mean_);
  std_.MergeFrom(from.std_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BBoxStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBoxStatistics::CopyFrom(const BBoxStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBoxStatistics::IsInitialized() const {

  return true;
}

void BBoxStatistics::Swap(BBoxStatistics* other) {
  if (other != this) {
    mean_.Swap(&other->mean_);
    std_.Swap(&other->std_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BBoxStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BBoxStatistics_descriptor_;
  metadata.reflection = BBoxStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DimensionStatistics::kMeanHFieldNumber;
const int DimensionStatistics::kMeanWFieldNumber;
const int DimensionStatistics::kMeanLFieldNumber;
const int DimensionStatistics::kStdHFieldNumber;
const int DimensionStatistics::kStdWFieldNumber;
const int DimensionStatistics::kStdLFieldNumber;
#endif  // !_MSC_VER

DimensionStatistics::DimensionStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.yolo.DimensionStatistics)
}

void DimensionStatistics::InitAsDefaultInstance() {
}

DimensionStatistics::DimensionStatistics(const DimensionStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.yolo.DimensionStatistics)
}

void DimensionStatistics::SharedCtor() {
  _cached_size_ = 0;
  mean_h_ = 0;
  mean_w_ = 0;
  mean_l_ = 0;
  std_h_ = 1;
  std_w_ = 1;
  std_l_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DimensionStatistics::~DimensionStatistics() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.yolo.DimensionStatistics)
  SharedDtor();
}

void DimensionStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DimensionStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DimensionStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DimensionStatistics_descriptor_;
}

const DimensionStatistics& DimensionStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yolo_2eproto();
  return *default_instance_;
}

DimensionStatistics* DimensionStatistics::default_instance_ = NULL;

DimensionStatistics* DimensionStatistics::New() const {
  return new DimensionStatistics;
}

void DimensionStatistics::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DimensionStatistics*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(mean_h_, mean_l_);
    std_h_ = 1;
    std_w_ = 1;
    std_l_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DimensionStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.yolo.DimensionStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float mean_h = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_h_)));
          set_has_mean_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_mean_w;
        break;
      }

      // optional float mean_w = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_mean_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_w_)));
          set_has_mean_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_mean_l;
        break;
      }

      // optional float mean_l = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_mean_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_l_)));
          set_has_mean_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_std_h;
        break;
      }

      // optional float std_h = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_std_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_h_)));
          set_has_std_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_std_w;
        break;
      }

      // optional float std_w = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_std_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_w_)));
          set_has_std_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_std_l;
        break;
      }

      // optional float std_l = 6 [default = 1];
      case 6: {
        if (tag == 53) {
         parse_std_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_l_)));
          set_has_std_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.yolo.DimensionStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.yolo.DimensionStatistics)
  return false;
#undef DO_
}

void DimensionStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.yolo.DimensionStatistics)
  // optional float mean_h = 1 [default = 0];
  if (has_mean_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->mean_h(), output);
  }

  // optional float mean_w = 2 [default = 0];
  if (has_mean_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mean_w(), output);
  }

  // optional float mean_l = 3 [default = 0];
  if (has_mean_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mean_l(), output);
  }

  // optional float std_h = 4 [default = 1];
  if (has_std_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->std_h(), output);
  }

  // optional float std_w = 5 [default = 1];
  if (has_std_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->std_w(), output);
  }

  // optional float std_l = 6 [default = 1];
  if (has_std_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->std_l(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.yolo.DimensionStatistics)
}

::google::protobuf::uint8* DimensionStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.yolo.DimensionStatistics)
  // optional float mean_h = 1 [default = 0];
  if (has_mean_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->mean_h(), target);
  }

  // optional float mean_w = 2 [default = 0];
  if (has_mean_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mean_w(), target);
  }

  // optional float mean_l = 3 [default = 0];
  if (has_mean_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mean_l(), target);
  }

  // optional float std_h = 4 [default = 1];
  if (has_std_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->std_h(), target);
  }

  // optional float std_w = 5 [default = 1];
  if (has_std_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->std_w(), target);
  }

  // optional float std_l = 6 [default = 1];
  if (has_std_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->std_l(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.yolo.DimensionStatistics)
  return target;
}

int DimensionStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float mean_h = 1 [default = 0];
    if (has_mean_h()) {
      total_size += 1 + 4;
    }

    // optional float mean_w = 2 [default = 0];
    if (has_mean_w()) {
      total_size += 1 + 4;
    }

    // optional float mean_l = 3 [default = 0];
    if (has_mean_l()) {
      total_size += 1 + 4;
    }

    // optional float std_h = 4 [default = 1];
    if (has_std_h()) {
      total_size += 1 + 4;
    }

    // optional float std_w = 5 [default = 1];
    if (has_std_w()) {
      total_size += 1 + 4;
    }

    // optional float std_l = 6 [default = 1];
    if (has_std_l()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DimensionStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DimensionStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DimensionStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DimensionStatistics::MergeFrom(const DimensionStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mean_h()) {
      set_mean_h(from.mean_h());
    }
    if (from.has_mean_w()) {
      set_mean_w(from.mean_w());
    }
    if (from.has_mean_l()) {
      set_mean_l(from.mean_l());
    }
    if (from.has_std_h()) {
      set_std_h(from.std_h());
    }
    if (from.has_std_w()) {
      set_std_w(from.std_w());
    }
    if (from.has_std_l()) {
      set_std_l(from.std_l());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DimensionStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimensionStatistics::CopyFrom(const DimensionStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionStatistics::IsInitialized() const {

  return true;
}

void DimensionStatistics::Swap(DimensionStatistics* other) {
  if (other != this) {
    std::swap(mean_h_, other->mean_h_);
    std::swap(mean_w_, other->mean_w_);
    std::swap(mean_l_, other->mean_l_);
    std::swap(std_h_, other->std_h_);
    std::swap(std_w_, other->std_w_);
    std::swap(std_l_, other->std_l_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DimensionStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DimensionStatistics_descriptor_;
  metadata.reflection = DimensionStatistics_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace yolo
}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
