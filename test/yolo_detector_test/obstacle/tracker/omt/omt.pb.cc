// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: omt.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "omt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace camera {
namespace omt {

namespace {

const ::google::protobuf::Descriptor* KalmanParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KalmanParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferenceParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeightParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeightParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* OmtParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OmtParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_omt_2eproto() {
  protobuf_AddDesc_omt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "omt.proto");
  GOOGLE_CHECK(file != NULL);
  KalmanParam_descriptor_ = file->message_type(0);
  static const int KalmanParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KalmanParam, init_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KalmanParam, process_variance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KalmanParam, measure_variance_),
  };
  KalmanParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KalmanParam_descriptor_,
      KalmanParam::default_instance_,
      KalmanParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KalmanParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KalmanParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KalmanParam));
  TargetParam_descriptor_ = file->message_type(1);
  static const int TargetParam_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, velocity_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, velocity_output_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, world_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, image_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, image_wh_update_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, world_lhw_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, height_diff_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, world_state_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, min_cached_world_state_history_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, min_cached_velocity_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, min_cached_position_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, calc_avg_position_window_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, static_speed_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, static_speed_threshold_ped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, min_moving_avg_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, min_moving_avg_speed_ped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, abnormal_acc_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, abnormal_acc_threshold_ped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, abnormal_velocity_heading_angle_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, clapping_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, world_mean_velocity_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, tracked_life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, type_filter_var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, large_velocity_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, too_large_velocity_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, mean_filter_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, direction_filter_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, displacement_theta_var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, velocity_theta_var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, stable_moving_speed_),
  };
  TargetParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetParam_descriptor_,
      TargetParam::default_instance_,
      TargetParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetParam));
  ReferenceParam_descriptor_ = file->message_type(2);
  static const int ReferenceParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceParam, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceParam, min_allow_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceParam, area_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceParam, down_sampling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceParam, height_diff_ratio_),
  };
  ReferenceParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReferenceParam_descriptor_,
      ReferenceParam::default_instance_,
      ReferenceParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReferenceParam));
  WeightParam_descriptor_ = file->message_type(3);
  static const int WeightParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightParam, appearance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightParam, motion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightParam, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightParam, tracklet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightParam, overlap_),
  };
  WeightParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeightParam_descriptor_,
      WeightParam::default_instance_,
      WeightParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeightParam));
  OmtParam_descriptor_ = file->message_type(4);
  static const int OmtParam_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, img_capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, lost_age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, reserve_age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, weight_same_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, weight_diff_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, target_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, correct_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, target_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, min_init_height_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, target_combine_iou_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, fusion_target_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, image_displacement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, abnormal_movement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, same_ts_eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, type_change_cost_),
  };
  OmtParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OmtParam_descriptor_,
      OmtParam::default_instance_,
      OmtParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OmtParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OmtParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_omt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KalmanParam_descriptor_, &KalmanParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetParam_descriptor_, &TargetParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReferenceParam_descriptor_, &ReferenceParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeightParam_descriptor_, &WeightParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OmtParam_descriptor_, &OmtParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_omt_2eproto() {
  delete KalmanParam::default_instance_;
  delete KalmanParam_reflection_;
  delete TargetParam::default_instance_;
  delete TargetParam_reflection_;
  delete ReferenceParam::default_instance_;
  delete ReferenceParam_reflection_;
  delete WeightParam::default_instance_;
  delete WeightParam_reflection_;
  delete OmtParam::default_instance_;
  delete OmtParam_reflection_;
}

void protobuf_AddDesc_omt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tomt.proto\022\034apollo.perception.camera.om"
    "t\"X\n\013KalmanParam\022\025\n\rinit_variance\030\001 \001(\002\022"
    "\030\n\020process_variance\030\002 \001(\002\022\030\n\020measure_var"
    "iance\030\003 \001(\002\"\210\t\n\013TargetParam\022\035\n\022velocity_"
    "threshold\030\001 \001(\002:\0012\022 \n\025velocity_output_de"
    "lay\030\002 \001(\005:\0012\022\?\n\014world_center\030\003 \001(\0132).apo"
    "llo.perception.camera.omt.KalmanParam\022\?\n"
    "\014image_center\030\004 \001(\0132).apollo.perception."
    "camera.omt.KalmanParam\022\034\n\024image_wh_updat"
    "e_rate\030\005 \001(\002\022\035\n\021world_lhw_history\030\006 \001(\005:"
    "\00215\022\036\n\021height_diff_ratio\030\007 \001(\002:\0030.1\022\037\n\023w"
    "orld_state_history\030\010 \001(\005:\00230\022.\n#min_cach"
    "ed_world_state_history_size\030\t \001(\005:\0015\022$\n\030"
    "min_cached_velocity_size\030\n \001(\005:\00210\022$\n\030mi"
    "n_cached_position_size\030\013 \001(\005:\00225\022(\n\035calc"
    "_avg_position_window_size\030\014 \001(\005:\0017\022#\n\026st"
    "atic_speed_threshold\030\r \001(\002:\0030.5\022\'\n\032stati"
    "c_speed_threshold_ped\030\016 \001(\002:\0030.3\022\037\n\024min_"
    "moving_avg_speed\030\017 \001(\002:\0011\022%\n\030min_moving_"
    "avg_speed_ped\030\020 \001(\002:\0030.5\022!\n\026abnormal_acc"
    "_threshold\030\021 \001(\002:\0016\022%\n\032abnormal_acc_thre"
    "shold_ped\030\022 \001(\002:\0013\0229\n)abnormal_velocity_"
    "heading_angle_threshold\030\023 \001(\002:\0060.7854\022 \n"
    "\021clapping_velocity\030\024 \001(\010:\005false\022(\n\034world"
    "_mean_velocity_duration\030\025 \001(\005:\00210\022\027\n\014tra"
    "cked_life\030\026 \001(\005:\0013\022\034\n\017type_filter_var\030\027 "
    "\001(\002:\0030.3\022!\n\024large_velocity_ratio\030\030 \001(\002:\003"
    "2.5\022%\n\030too_large_velocity_ratio\030\031 \001(\002:\0031"
    ".5\022\036\n\022mean_filter_window\030\032 \001(\005:\00210\022#\n\026di"
    "rection_filter_ratio\030\033 \001(\002:\0030.7\022$\n\026displ"
    "acement_theta_var\030\034 \001(\002:\0040.25\022\037\n\022velocit"
    "y_theta_var\030\035 \001(\002:\0030.5\022\036\n\023stable_moving_"
    "speed\030\036 \001(\002:\0012\"\226\001\n\016ReferenceParam\022\021\n\006mar"
    "gin\030\001 \001(\005:\0012\022\034\n\020min_allow_height\030\002 \001(\005:\002"
    "50\022\030\n\narea_decay\030\003 \001(\002:\0040.99\022\031\n\rdown_sam"
    "pling\030\004 \001(\005:\00240\022\036\n\021height_diff_ratio\030\005 \001"
    "(\002:\0030.1\"r\n\013WeightParam\022\025\n\nappearance\030\001 \001"
    "(\002:\0010\022\021\n\006motion\030\002 \001(\002:\0010\022\020\n\005shape\030\003 \001(\002:"
    "\0010\022\023\n\010tracklet\030\004 \001(\002:\0010\022\022\n\007overlap\030\005 \001(\002"
    ":\0010\"\227\005\n\010OmtParam\022\031\n\016img_capability\030\001 \001(\005"
    ":\0017\022\023\n\010lost_age\030\002 \001(\005:\0012\022\026\n\013reserve_age\030"
    "\003 \001(\005:\0013\022E\n\022weight_same_camera\030\004 \001(\0132).a"
    "pollo.perception.camera.omt.WeightParam\022"
    "E\n\022weight_diff_camera\030\005 \001(\0132).apollo.per"
    "ception.camera.omt.WeightParam\022\022\n\006border"
    "\030\t \001(\002:\00230\022\033\n\rtarget_thresh\030\n \001(\002:\0040.65\022"
    "\033\n\014correct_type\030\013 \001(\010:\005false\022\?\n\014target_p"
    "aram\030\014 \001(\0132).apollo.perception.camera.om"
    "t.TargetParam\022!\n\025min_init_height_ratio\030\r"
    " \001(\002:\00217\022)\n\034target_combine_iou_threshold"
    "\030\016 \001(\002:\0030.5\022\"\n\024fusion_target_thresh\030\017 \001("
    "\002:\0040.45\022\036\n\022image_displacement\030\020 \001(\002:\00250\022"
    "\036\n\021abnormal_movement\030\021 \001(\002:\0030.3\022\031\n\013same_"
    "ts_eps\030\022 \001(\001:\0040.05\022\?\n\treference\030\023 \001(\0132,."
    "apollo.perception.camera.omt.ReferencePa"
    "ram\022\030\n\020type_change_cost\030\024 \001(\t", 2229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "omt.proto", &protobuf_RegisterTypes);
  KalmanParam::default_instance_ = new KalmanParam();
  TargetParam::default_instance_ = new TargetParam();
  ReferenceParam::default_instance_ = new ReferenceParam();
  WeightParam::default_instance_ = new WeightParam();
  OmtParam::default_instance_ = new OmtParam();
  KalmanParam::default_instance_->InitAsDefaultInstance();
  TargetParam::default_instance_->InitAsDefaultInstance();
  ReferenceParam::default_instance_->InitAsDefaultInstance();
  WeightParam::default_instance_->InitAsDefaultInstance();
  OmtParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_omt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_omt_2eproto {
  StaticDescriptorInitializer_omt_2eproto() {
    protobuf_AddDesc_omt_2eproto();
  }
} static_descriptor_initializer_omt_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int KalmanParam::kInitVarianceFieldNumber;
const int KalmanParam::kProcessVarianceFieldNumber;
const int KalmanParam::kMeasureVarianceFieldNumber;
#endif  // !_MSC_VER

KalmanParam::KalmanParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.omt.KalmanParam)
}

void KalmanParam::InitAsDefaultInstance() {
}

KalmanParam::KalmanParam(const KalmanParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.KalmanParam)
}

void KalmanParam::SharedCtor() {
  _cached_size_ = 0;
  init_variance_ = 0;
  process_variance_ = 0;
  measure_variance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KalmanParam::~KalmanParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.KalmanParam)
  SharedDtor();
}

void KalmanParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KalmanParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KalmanParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KalmanParam_descriptor_;
}

const KalmanParam& KalmanParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_omt_2eproto();
  return *default_instance_;
}

KalmanParam* KalmanParam::default_instance_ = NULL;

KalmanParam* KalmanParam::New() const {
  return new KalmanParam;
}

void KalmanParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KalmanParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(init_variance_, measure_variance_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KalmanParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.omt.KalmanParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float init_variance = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_variance_)));
          set_has_init_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_process_variance;
        break;
      }

      // optional float process_variance = 2;
      case 2: {
        if (tag == 21) {
         parse_process_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &process_variance_)));
          set_has_process_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_measure_variance;
        break;
      }

      // optional float measure_variance = 3;
      case 3: {
        if (tag == 29) {
         parse_measure_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &measure_variance_)));
          set_has_measure_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.omt.KalmanParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.omt.KalmanParam)
  return false;
#undef DO_
}

void KalmanParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.omt.KalmanParam)
  // optional float init_variance = 1;
  if (has_init_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->init_variance(), output);
  }

  // optional float process_variance = 2;
  if (has_process_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->process_variance(), output);
  }

  // optional float measure_variance = 3;
  if (has_measure_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->measure_variance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.omt.KalmanParam)
}

::google::protobuf::uint8* KalmanParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.KalmanParam)
  // optional float init_variance = 1;
  if (has_init_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->init_variance(), target);
  }

  // optional float process_variance = 2;
  if (has_process_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->process_variance(), target);
  }

  // optional float measure_variance = 3;
  if (has_measure_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->measure_variance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.KalmanParam)
  return target;
}

int KalmanParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float init_variance = 1;
    if (has_init_variance()) {
      total_size += 1 + 4;
    }

    // optional float process_variance = 2;
    if (has_process_variance()) {
      total_size += 1 + 4;
    }

    // optional float measure_variance = 3;
    if (has_measure_variance()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KalmanParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KalmanParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KalmanParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KalmanParam::MergeFrom(const KalmanParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_init_variance()) {
      set_init_variance(from.init_variance());
    }
    if (from.has_process_variance()) {
      set_process_variance(from.process_variance());
    }
    if (from.has_measure_variance()) {
      set_measure_variance(from.measure_variance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KalmanParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KalmanParam::CopyFrom(const KalmanParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KalmanParam::IsInitialized() const {

  return true;
}

void KalmanParam::Swap(KalmanParam* other) {
  if (other != this) {
    std::swap(init_variance_, other->init_variance_);
    std::swap(process_variance_, other->process_variance_);
    std::swap(measure_variance_, other->measure_variance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KalmanParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KalmanParam_descriptor_;
  metadata.reflection = KalmanParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetParam::kVelocityThresholdFieldNumber;
const int TargetParam::kVelocityOutputDelayFieldNumber;
const int TargetParam::kWorldCenterFieldNumber;
const int TargetParam::kImageCenterFieldNumber;
const int TargetParam::kImageWhUpdateRateFieldNumber;
const int TargetParam::kWorldLhwHistoryFieldNumber;
const int TargetParam::kHeightDiffRatioFieldNumber;
const int TargetParam::kWorldStateHistoryFieldNumber;
const int TargetParam::kMinCachedWorldStateHistorySizeFieldNumber;
const int TargetParam::kMinCachedVelocitySizeFieldNumber;
const int TargetParam::kMinCachedPositionSizeFieldNumber;
const int TargetParam::kCalcAvgPositionWindowSizeFieldNumber;
const int TargetParam::kStaticSpeedThresholdFieldNumber;
const int TargetParam::kStaticSpeedThresholdPedFieldNumber;
const int TargetParam::kMinMovingAvgSpeedFieldNumber;
const int TargetParam::kMinMovingAvgSpeedPedFieldNumber;
const int TargetParam::kAbnormalAccThresholdFieldNumber;
const int TargetParam::kAbnormalAccThresholdPedFieldNumber;
const int TargetParam::kAbnormalVelocityHeadingAngleThresholdFieldNumber;
const int TargetParam::kClappingVelocityFieldNumber;
const int TargetParam::kWorldMeanVelocityDurationFieldNumber;
const int TargetParam::kTrackedLifeFieldNumber;
const int TargetParam::kTypeFilterVarFieldNumber;
const int TargetParam::kLargeVelocityRatioFieldNumber;
const int TargetParam::kTooLargeVelocityRatioFieldNumber;
const int TargetParam::kMeanFilterWindowFieldNumber;
const int TargetParam::kDirectionFilterRatioFieldNumber;
const int TargetParam::kDisplacementThetaVarFieldNumber;
const int TargetParam::kVelocityThetaVarFieldNumber;
const int TargetParam::kStableMovingSpeedFieldNumber;
#endif  // !_MSC_VER

TargetParam::TargetParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.omt.TargetParam)
}

void TargetParam::InitAsDefaultInstance() {
  world_center_ = const_cast< ::apollo::perception::camera::omt::KalmanParam*>(&::apollo::perception::camera::omt::KalmanParam::default_instance());
  image_center_ = const_cast< ::apollo::perception::camera::omt::KalmanParam*>(&::apollo::perception::camera::omt::KalmanParam::default_instance());
}

TargetParam::TargetParam(const TargetParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.TargetParam)
}

void TargetParam::SharedCtor() {
  _cached_size_ = 0;
  velocity_threshold_ = 2;
  velocity_output_delay_ = 2;
  world_center_ = NULL;
  image_center_ = NULL;
  image_wh_update_rate_ = 0;
  world_lhw_history_ = 15;
  height_diff_ratio_ = 0.1f;
  world_state_history_ = 30;
  min_cached_world_state_history_size_ = 5;
  min_cached_velocity_size_ = 10;
  min_cached_position_size_ = 25;
  calc_avg_position_window_size_ = 7;
  static_speed_threshold_ = 0.5f;
  static_speed_threshold_ped_ = 0.3f;
  min_moving_avg_speed_ = 1;
  min_moving_avg_speed_ped_ = 0.5f;
  abnormal_acc_threshold_ = 6;
  abnormal_acc_threshold_ped_ = 3;
  abnormal_velocity_heading_angle_threshold_ = 0.7854f;
  clapping_velocity_ = false;
  world_mean_velocity_duration_ = 10;
  tracked_life_ = 3;
  type_filter_var_ = 0.3f;
  large_velocity_ratio_ = 2.5f;
  too_large_velocity_ratio_ = 1.5f;
  mean_filter_window_ = 10;
  direction_filter_ratio_ = 0.7f;
  displacement_theta_var_ = 0.25f;
  velocity_theta_var_ = 0.5f;
  stable_moving_speed_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetParam::~TargetParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.TargetParam)
  SharedDtor();
}

void TargetParam::SharedDtor() {
  if (this != default_instance_) {
    delete world_center_;
    delete image_center_;
  }
}

void TargetParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetParam_descriptor_;
}

const TargetParam& TargetParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_omt_2eproto();
  return *default_instance_;
}

TargetParam* TargetParam::default_instance_ = NULL;

TargetParam* TargetParam::New() const {
  return new TargetParam;
}

void TargetParam::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    velocity_threshold_ = 2;
    velocity_output_delay_ = 2;
    if (has_world_center()) {
      if (world_center_ != NULL) world_center_->::apollo::perception::camera::omt::KalmanParam::Clear();
    }
    if (has_image_center()) {
      if (image_center_ != NULL) image_center_->::apollo::perception::camera::omt::KalmanParam::Clear();
    }
    image_wh_update_rate_ = 0;
    world_lhw_history_ = 15;
    height_diff_ratio_ = 0.1f;
    world_state_history_ = 30;
  }
  if (_has_bits_[8 / 32] & 65280) {
    min_cached_world_state_history_size_ = 5;
    min_cached_velocity_size_ = 10;
    min_cached_position_size_ = 25;
    calc_avg_position_window_size_ = 7;
    static_speed_threshold_ = 0.5f;
    static_speed_threshold_ped_ = 0.3f;
    min_moving_avg_speed_ = 1;
    min_moving_avg_speed_ped_ = 0.5f;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    abnormal_acc_threshold_ = 6;
    abnormal_acc_threshold_ped_ = 3;
    abnormal_velocity_heading_angle_threshold_ = 0.7854f;
    clapping_velocity_ = false;
    world_mean_velocity_duration_ = 10;
    tracked_life_ = 3;
    type_filter_var_ = 0.3f;
    large_velocity_ratio_ = 2.5f;
  }
  if (_has_bits_[24 / 32] & 1056964608) {
    too_large_velocity_ratio_ = 1.5f;
    mean_filter_window_ = 10;
    direction_filter_ratio_ = 0.7f;
    displacement_theta_var_ = 0.25f;
    velocity_theta_var_ = 0.5f;
    stable_moving_speed_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.omt.TargetParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float velocity_threshold = 1 [default = 2];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_threshold_)));
          set_has_velocity_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_velocity_output_delay;
        break;
      }

      // optional int32 velocity_output_delay = 2 [default = 2];
      case 2: {
        if (tag == 16) {
         parse_velocity_output_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &velocity_output_delay_)));
          set_has_velocity_output_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_world_center;
        break;
      }

      // optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
      case 3: {
        if (tag == 26) {
         parse_world_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_image_center;
        break;
      }

      // optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
      case 4: {
        if (tag == 34) {
         parse_image_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_image_wh_update_rate;
        break;
      }

      // optional float image_wh_update_rate = 5;
      case 5: {
        if (tag == 45) {
         parse_image_wh_update_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &image_wh_update_rate_)));
          set_has_image_wh_update_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_world_lhw_history;
        break;
      }

      // optional int32 world_lhw_history = 6 [default = 15];
      case 6: {
        if (tag == 48) {
         parse_world_lhw_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_lhw_history_)));
          set_has_world_lhw_history();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_height_diff_ratio;
        break;
      }

      // optional float height_diff_ratio = 7 [default = 0.1];
      case 7: {
        if (tag == 61) {
         parse_height_diff_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_diff_ratio_)));
          set_has_height_diff_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_world_state_history;
        break;
      }

      // optional int32 world_state_history = 8 [default = 30];
      case 8: {
        if (tag == 64) {
         parse_world_state_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_state_history_)));
          set_has_world_state_history();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_min_cached_world_state_history_size;
        break;
      }

      // optional int32 min_cached_world_state_history_size = 9 [default = 5];
      case 9: {
        if (tag == 72) {
         parse_min_cached_world_state_history_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_cached_world_state_history_size_)));
          set_has_min_cached_world_state_history_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_min_cached_velocity_size;
        break;
      }

      // optional int32 min_cached_velocity_size = 10 [default = 10];
      case 10: {
        if (tag == 80) {
         parse_min_cached_velocity_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_cached_velocity_size_)));
          set_has_min_cached_velocity_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_min_cached_position_size;
        break;
      }

      // optional int32 min_cached_position_size = 11 [default = 25];
      case 11: {
        if (tag == 88) {
         parse_min_cached_position_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_cached_position_size_)));
          set_has_min_cached_position_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_calc_avg_position_window_size;
        break;
      }

      // optional int32 calc_avg_position_window_size = 12 [default = 7];
      case 12: {
        if (tag == 96) {
         parse_calc_avg_position_window_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calc_avg_position_window_size_)));
          set_has_calc_avg_position_window_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_static_speed_threshold;
        break;
      }

      // optional float static_speed_threshold = 13 [default = 0.5];
      case 13: {
        if (tag == 109) {
         parse_static_speed_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &static_speed_threshold_)));
          set_has_static_speed_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_static_speed_threshold_ped;
        break;
      }

      // optional float static_speed_threshold_ped = 14 [default = 0.3];
      case 14: {
        if (tag == 117) {
         parse_static_speed_threshold_ped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &static_speed_threshold_ped_)));
          set_has_static_speed_threshold_ped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_min_moving_avg_speed;
        break;
      }

      // optional float min_moving_avg_speed = 15 [default = 1];
      case 15: {
        if (tag == 125) {
         parse_min_moving_avg_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_moving_avg_speed_)));
          set_has_min_moving_avg_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_min_moving_avg_speed_ped;
        break;
      }

      // optional float min_moving_avg_speed_ped = 16 [default = 0.5];
      case 16: {
        if (tag == 133) {
         parse_min_moving_avg_speed_ped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_moving_avg_speed_ped_)));
          set_has_min_moving_avg_speed_ped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_abnormal_acc_threshold;
        break;
      }

      // optional float abnormal_acc_threshold = 17 [default = 6];
      case 17: {
        if (tag == 141) {
         parse_abnormal_acc_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abnormal_acc_threshold_)));
          set_has_abnormal_acc_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_abnormal_acc_threshold_ped;
        break;
      }

      // optional float abnormal_acc_threshold_ped = 18 [default = 3];
      case 18: {
        if (tag == 149) {
         parse_abnormal_acc_threshold_ped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abnormal_acc_threshold_ped_)));
          set_has_abnormal_acc_threshold_ped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_abnormal_velocity_heading_angle_threshold;
        break;
      }

      // optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
      case 19: {
        if (tag == 157) {
         parse_abnormal_velocity_heading_angle_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abnormal_velocity_heading_angle_threshold_)));
          set_has_abnormal_velocity_heading_angle_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_clapping_velocity;
        break;
      }

      // optional bool clapping_velocity = 20 [default = false];
      case 20: {
        if (tag == 160) {
         parse_clapping_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clapping_velocity_)));
          set_has_clapping_velocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_world_mean_velocity_duration;
        break;
      }

      // optional int32 world_mean_velocity_duration = 21 [default = 10];
      case 21: {
        if (tag == 168) {
         parse_world_mean_velocity_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_mean_velocity_duration_)));
          set_has_world_mean_velocity_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_tracked_life;
        break;
      }

      // optional int32 tracked_life = 22 [default = 3];
      case 22: {
        if (tag == 176) {
         parse_tracked_life:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tracked_life_)));
          set_has_tracked_life();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_type_filter_var;
        break;
      }

      // optional float type_filter_var = 23 [default = 0.3];
      case 23: {
        if (tag == 189) {
         parse_type_filter_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &type_filter_var_)));
          set_has_type_filter_var();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_large_velocity_ratio;
        break;
      }

      // optional float large_velocity_ratio = 24 [default = 2.5];
      case 24: {
        if (tag == 197) {
         parse_large_velocity_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &large_velocity_ratio_)));
          set_has_large_velocity_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_too_large_velocity_ratio;
        break;
      }

      // optional float too_large_velocity_ratio = 25 [default = 1.5];
      case 25: {
        if (tag == 205) {
         parse_too_large_velocity_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &too_large_velocity_ratio_)));
          set_has_too_large_velocity_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_mean_filter_window;
        break;
      }

      // optional int32 mean_filter_window = 26 [default = 10];
      case 26: {
        if (tag == 208) {
         parse_mean_filter_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mean_filter_window_)));
          set_has_mean_filter_window();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_direction_filter_ratio;
        break;
      }

      // optional float direction_filter_ratio = 27 [default = 0.7];
      case 27: {
        if (tag == 221) {
         parse_direction_filter_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_filter_ratio_)));
          set_has_direction_filter_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_displacement_theta_var;
        break;
      }

      // optional float displacement_theta_var = 28 [default = 0.25];
      case 28: {
        if (tag == 229) {
         parse_displacement_theta_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &displacement_theta_var_)));
          set_has_displacement_theta_var();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_velocity_theta_var;
        break;
      }

      // optional float velocity_theta_var = 29 [default = 0.5];
      case 29: {
        if (tag == 237) {
         parse_velocity_theta_var:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_theta_var_)));
          set_has_velocity_theta_var();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_stable_moving_speed;
        break;
      }

      // optional float stable_moving_speed = 30 [default = 2];
      case 30: {
        if (tag == 245) {
         parse_stable_moving_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stable_moving_speed_)));
          set_has_stable_moving_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.omt.TargetParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.omt.TargetParam)
  return false;
#undef DO_
}

void TargetParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.omt.TargetParam)
  // optional float velocity_threshold = 1 [default = 2];
  if (has_velocity_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->velocity_threshold(), output);
  }

  // optional int32 velocity_output_delay = 2 [default = 2];
  if (has_velocity_output_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->velocity_output_delay(), output);
  }

  // optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
  if (has_world_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->world_center(), output);
  }

  // optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
  if (has_image_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->image_center(), output);
  }

  // optional float image_wh_update_rate = 5;
  if (has_image_wh_update_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->image_wh_update_rate(), output);
  }

  // optional int32 world_lhw_history = 6 [default = 15];
  if (has_world_lhw_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->world_lhw_history(), output);
  }

  // optional float height_diff_ratio = 7 [default = 0.1];
  if (has_height_diff_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->height_diff_ratio(), output);
  }

  // optional int32 world_state_history = 8 [default = 30];
  if (has_world_state_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->world_state_history(), output);
  }

  // optional int32 min_cached_world_state_history_size = 9 [default = 5];
  if (has_min_cached_world_state_history_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->min_cached_world_state_history_size(), output);
  }

  // optional int32 min_cached_velocity_size = 10 [default = 10];
  if (has_min_cached_velocity_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->min_cached_velocity_size(), output);
  }

  // optional int32 min_cached_position_size = 11 [default = 25];
  if (has_min_cached_position_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->min_cached_position_size(), output);
  }

  // optional int32 calc_avg_position_window_size = 12 [default = 7];
  if (has_calc_avg_position_window_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->calc_avg_position_window_size(), output);
  }

  // optional float static_speed_threshold = 13 [default = 0.5];
  if (has_static_speed_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->static_speed_threshold(), output);
  }

  // optional float static_speed_threshold_ped = 14 [default = 0.3];
  if (has_static_speed_threshold_ped()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->static_speed_threshold_ped(), output);
  }

  // optional float min_moving_avg_speed = 15 [default = 1];
  if (has_min_moving_avg_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->min_moving_avg_speed(), output);
  }

  // optional float min_moving_avg_speed_ped = 16 [default = 0.5];
  if (has_min_moving_avg_speed_ped()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->min_moving_avg_speed_ped(), output);
  }

  // optional float abnormal_acc_threshold = 17 [default = 6];
  if (has_abnormal_acc_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->abnormal_acc_threshold(), output);
  }

  // optional float abnormal_acc_threshold_ped = 18 [default = 3];
  if (has_abnormal_acc_threshold_ped()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->abnormal_acc_threshold_ped(), output);
  }

  // optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
  if (has_abnormal_velocity_heading_angle_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->abnormal_velocity_heading_angle_threshold(), output);
  }

  // optional bool clapping_velocity = 20 [default = false];
  if (has_clapping_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->clapping_velocity(), output);
  }

  // optional int32 world_mean_velocity_duration = 21 [default = 10];
  if (has_world_mean_velocity_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->world_mean_velocity_duration(), output);
  }

  // optional int32 tracked_life = 22 [default = 3];
  if (has_tracked_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->tracked_life(), output);
  }

  // optional float type_filter_var = 23 [default = 0.3];
  if (has_type_filter_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->type_filter_var(), output);
  }

  // optional float large_velocity_ratio = 24 [default = 2.5];
  if (has_large_velocity_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->large_velocity_ratio(), output);
  }

  // optional float too_large_velocity_ratio = 25 [default = 1.5];
  if (has_too_large_velocity_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->too_large_velocity_ratio(), output);
  }

  // optional int32 mean_filter_window = 26 [default = 10];
  if (has_mean_filter_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->mean_filter_window(), output);
  }

  // optional float direction_filter_ratio = 27 [default = 0.7];
  if (has_direction_filter_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->direction_filter_ratio(), output);
  }

  // optional float displacement_theta_var = 28 [default = 0.25];
  if (has_displacement_theta_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->displacement_theta_var(), output);
  }

  // optional float velocity_theta_var = 29 [default = 0.5];
  if (has_velocity_theta_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->velocity_theta_var(), output);
  }

  // optional float stable_moving_speed = 30 [default = 2];
  if (has_stable_moving_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->stable_moving_speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.omt.TargetParam)
}

::google::protobuf::uint8* TargetParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.TargetParam)
  // optional float velocity_threshold = 1 [default = 2];
  if (has_velocity_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->velocity_threshold(), target);
  }

  // optional int32 velocity_output_delay = 2 [default = 2];
  if (has_velocity_output_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->velocity_output_delay(), target);
  }

  // optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
  if (has_world_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->world_center(), target);
  }

  // optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
  if (has_image_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->image_center(), target);
  }

  // optional float image_wh_update_rate = 5;
  if (has_image_wh_update_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->image_wh_update_rate(), target);
  }

  // optional int32 world_lhw_history = 6 [default = 15];
  if (has_world_lhw_history()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->world_lhw_history(), target);
  }

  // optional float height_diff_ratio = 7 [default = 0.1];
  if (has_height_diff_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->height_diff_ratio(), target);
  }

  // optional int32 world_state_history = 8 [default = 30];
  if (has_world_state_history()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->world_state_history(), target);
  }

  // optional int32 min_cached_world_state_history_size = 9 [default = 5];
  if (has_min_cached_world_state_history_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->min_cached_world_state_history_size(), target);
  }

  // optional int32 min_cached_velocity_size = 10 [default = 10];
  if (has_min_cached_velocity_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->min_cached_velocity_size(), target);
  }

  // optional int32 min_cached_position_size = 11 [default = 25];
  if (has_min_cached_position_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->min_cached_position_size(), target);
  }

  // optional int32 calc_avg_position_window_size = 12 [default = 7];
  if (has_calc_avg_position_window_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->calc_avg_position_window_size(), target);
  }

  // optional float static_speed_threshold = 13 [default = 0.5];
  if (has_static_speed_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->static_speed_threshold(), target);
  }

  // optional float static_speed_threshold_ped = 14 [default = 0.3];
  if (has_static_speed_threshold_ped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->static_speed_threshold_ped(), target);
  }

  // optional float min_moving_avg_speed = 15 [default = 1];
  if (has_min_moving_avg_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->min_moving_avg_speed(), target);
  }

  // optional float min_moving_avg_speed_ped = 16 [default = 0.5];
  if (has_min_moving_avg_speed_ped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->min_moving_avg_speed_ped(), target);
  }

  // optional float abnormal_acc_threshold = 17 [default = 6];
  if (has_abnormal_acc_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->abnormal_acc_threshold(), target);
  }

  // optional float abnormal_acc_threshold_ped = 18 [default = 3];
  if (has_abnormal_acc_threshold_ped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->abnormal_acc_threshold_ped(), target);
  }

  // optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
  if (has_abnormal_velocity_heading_angle_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->abnormal_velocity_heading_angle_threshold(), target);
  }

  // optional bool clapping_velocity = 20 [default = false];
  if (has_clapping_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->clapping_velocity(), target);
  }

  // optional int32 world_mean_velocity_duration = 21 [default = 10];
  if (has_world_mean_velocity_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->world_mean_velocity_duration(), target);
  }

  // optional int32 tracked_life = 22 [default = 3];
  if (has_tracked_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->tracked_life(), target);
  }

  // optional float type_filter_var = 23 [default = 0.3];
  if (has_type_filter_var()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->type_filter_var(), target);
  }

  // optional float large_velocity_ratio = 24 [default = 2.5];
  if (has_large_velocity_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->large_velocity_ratio(), target);
  }

  // optional float too_large_velocity_ratio = 25 [default = 1.5];
  if (has_too_large_velocity_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->too_large_velocity_ratio(), target);
  }

  // optional int32 mean_filter_window = 26 [default = 10];
  if (has_mean_filter_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->mean_filter_window(), target);
  }

  // optional float direction_filter_ratio = 27 [default = 0.7];
  if (has_direction_filter_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->direction_filter_ratio(), target);
  }

  // optional float displacement_theta_var = 28 [default = 0.25];
  if (has_displacement_theta_var()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->displacement_theta_var(), target);
  }

  // optional float velocity_theta_var = 29 [default = 0.5];
  if (has_velocity_theta_var()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->velocity_theta_var(), target);
  }

  // optional float stable_moving_speed = 30 [default = 2];
  if (has_stable_moving_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->stable_moving_speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.TargetParam)
  return target;
}

int TargetParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float velocity_threshold = 1 [default = 2];
    if (has_velocity_threshold()) {
      total_size += 1 + 4;
    }

    // optional int32 velocity_output_delay = 2 [default = 2];
    if (has_velocity_output_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->velocity_output_delay());
    }

    // optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
    if (has_world_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world_center());
    }

    // optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
    if (has_image_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_center());
    }

    // optional float image_wh_update_rate = 5;
    if (has_image_wh_update_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 world_lhw_history = 6 [default = 15];
    if (has_world_lhw_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world_lhw_history());
    }

    // optional float height_diff_ratio = 7 [default = 0.1];
    if (has_height_diff_ratio()) {
      total_size += 1 + 4;
    }

    // optional int32 world_state_history = 8 [default = 30];
    if (has_world_state_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world_state_history());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 min_cached_world_state_history_size = 9 [default = 5];
    if (has_min_cached_world_state_history_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_cached_world_state_history_size());
    }

    // optional int32 min_cached_velocity_size = 10 [default = 10];
    if (has_min_cached_velocity_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_cached_velocity_size());
    }

    // optional int32 min_cached_position_size = 11 [default = 25];
    if (has_min_cached_position_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_cached_position_size());
    }

    // optional int32 calc_avg_position_window_size = 12 [default = 7];
    if (has_calc_avg_position_window_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calc_avg_position_window_size());
    }

    // optional float static_speed_threshold = 13 [default = 0.5];
    if (has_static_speed_threshold()) {
      total_size += 1 + 4;
    }

    // optional float static_speed_threshold_ped = 14 [default = 0.3];
    if (has_static_speed_threshold_ped()) {
      total_size += 1 + 4;
    }

    // optional float min_moving_avg_speed = 15 [default = 1];
    if (has_min_moving_avg_speed()) {
      total_size += 1 + 4;
    }

    // optional float min_moving_avg_speed_ped = 16 [default = 0.5];
    if (has_min_moving_avg_speed_ped()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float abnormal_acc_threshold = 17 [default = 6];
    if (has_abnormal_acc_threshold()) {
      total_size += 2 + 4;
    }

    // optional float abnormal_acc_threshold_ped = 18 [default = 3];
    if (has_abnormal_acc_threshold_ped()) {
      total_size += 2 + 4;
    }

    // optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
    if (has_abnormal_velocity_heading_angle_threshold()) {
      total_size += 2 + 4;
    }

    // optional bool clapping_velocity = 20 [default = false];
    if (has_clapping_velocity()) {
      total_size += 2 + 1;
    }

    // optional int32 world_mean_velocity_duration = 21 [default = 10];
    if (has_world_mean_velocity_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world_mean_velocity_duration());
    }

    // optional int32 tracked_life = 22 [default = 3];
    if (has_tracked_life()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tracked_life());
    }

    // optional float type_filter_var = 23 [default = 0.3];
    if (has_type_filter_var()) {
      total_size += 2 + 4;
    }

    // optional float large_velocity_ratio = 24 [default = 2.5];
    if (has_large_velocity_ratio()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float too_large_velocity_ratio = 25 [default = 1.5];
    if (has_too_large_velocity_ratio()) {
      total_size += 2 + 4;
    }

    // optional int32 mean_filter_window = 26 [default = 10];
    if (has_mean_filter_window()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mean_filter_window());
    }

    // optional float direction_filter_ratio = 27 [default = 0.7];
    if (has_direction_filter_ratio()) {
      total_size += 2 + 4;
    }

    // optional float displacement_theta_var = 28 [default = 0.25];
    if (has_displacement_theta_var()) {
      total_size += 2 + 4;
    }

    // optional float velocity_theta_var = 29 [default = 0.5];
    if (has_velocity_theta_var()) {
      total_size += 2 + 4;
    }

    // optional float stable_moving_speed = 30 [default = 2];
    if (has_stable_moving_speed()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetParam::MergeFrom(const TargetParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_velocity_threshold()) {
      set_velocity_threshold(from.velocity_threshold());
    }
    if (from.has_velocity_output_delay()) {
      set_velocity_output_delay(from.velocity_output_delay());
    }
    if (from.has_world_center()) {
      mutable_world_center()->::apollo::perception::camera::omt::KalmanParam::MergeFrom(from.world_center());
    }
    if (from.has_image_center()) {
      mutable_image_center()->::apollo::perception::camera::omt::KalmanParam::MergeFrom(from.image_center());
    }
    if (from.has_image_wh_update_rate()) {
      set_image_wh_update_rate(from.image_wh_update_rate());
    }
    if (from.has_world_lhw_history()) {
      set_world_lhw_history(from.world_lhw_history());
    }
    if (from.has_height_diff_ratio()) {
      set_height_diff_ratio(from.height_diff_ratio());
    }
    if (from.has_world_state_history()) {
      set_world_state_history(from.world_state_history());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min_cached_world_state_history_size()) {
      set_min_cached_world_state_history_size(from.min_cached_world_state_history_size());
    }
    if (from.has_min_cached_velocity_size()) {
      set_min_cached_velocity_size(from.min_cached_velocity_size());
    }
    if (from.has_min_cached_position_size()) {
      set_min_cached_position_size(from.min_cached_position_size());
    }
    if (from.has_calc_avg_position_window_size()) {
      set_calc_avg_position_window_size(from.calc_avg_position_window_size());
    }
    if (from.has_static_speed_threshold()) {
      set_static_speed_threshold(from.static_speed_threshold());
    }
    if (from.has_static_speed_threshold_ped()) {
      set_static_speed_threshold_ped(from.static_speed_threshold_ped());
    }
    if (from.has_min_moving_avg_speed()) {
      set_min_moving_avg_speed(from.min_moving_avg_speed());
    }
    if (from.has_min_moving_avg_speed_ped()) {
      set_min_moving_avg_speed_ped(from.min_moving_avg_speed_ped());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_abnormal_acc_threshold()) {
      set_abnormal_acc_threshold(from.abnormal_acc_threshold());
    }
    if (from.has_abnormal_acc_threshold_ped()) {
      set_abnormal_acc_threshold_ped(from.abnormal_acc_threshold_ped());
    }
    if (from.has_abnormal_velocity_heading_angle_threshold()) {
      set_abnormal_velocity_heading_angle_threshold(from.abnormal_velocity_heading_angle_threshold());
    }
    if (from.has_clapping_velocity()) {
      set_clapping_velocity(from.clapping_velocity());
    }
    if (from.has_world_mean_velocity_duration()) {
      set_world_mean_velocity_duration(from.world_mean_velocity_duration());
    }
    if (from.has_tracked_life()) {
      set_tracked_life(from.tracked_life());
    }
    if (from.has_type_filter_var()) {
      set_type_filter_var(from.type_filter_var());
    }
    if (from.has_large_velocity_ratio()) {
      set_large_velocity_ratio(from.large_velocity_ratio());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_too_large_velocity_ratio()) {
      set_too_large_velocity_ratio(from.too_large_velocity_ratio());
    }
    if (from.has_mean_filter_window()) {
      set_mean_filter_window(from.mean_filter_window());
    }
    if (from.has_direction_filter_ratio()) {
      set_direction_filter_ratio(from.direction_filter_ratio());
    }
    if (from.has_displacement_theta_var()) {
      set_displacement_theta_var(from.displacement_theta_var());
    }
    if (from.has_velocity_theta_var()) {
      set_velocity_theta_var(from.velocity_theta_var());
    }
    if (from.has_stable_moving_speed()) {
      set_stable_moving_speed(from.stable_moving_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetParam::CopyFrom(const TargetParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetParam::IsInitialized() const {

  return true;
}

void TargetParam::Swap(TargetParam* other) {
  if (other != this) {
    std::swap(velocity_threshold_, other->velocity_threshold_);
    std::swap(velocity_output_delay_, other->velocity_output_delay_);
    std::swap(world_center_, other->world_center_);
    std::swap(image_center_, other->image_center_);
    std::swap(image_wh_update_rate_, other->image_wh_update_rate_);
    std::swap(world_lhw_history_, other->world_lhw_history_);
    std::swap(height_diff_ratio_, other->height_diff_ratio_);
    std::swap(world_state_history_, other->world_state_history_);
    std::swap(min_cached_world_state_history_size_, other->min_cached_world_state_history_size_);
    std::swap(min_cached_velocity_size_, other->min_cached_velocity_size_);
    std::swap(min_cached_position_size_, other->min_cached_position_size_);
    std::swap(calc_avg_position_window_size_, other->calc_avg_position_window_size_);
    std::swap(static_speed_threshold_, other->static_speed_threshold_);
    std::swap(static_speed_threshold_ped_, other->static_speed_threshold_ped_);
    std::swap(min_moving_avg_speed_, other->min_moving_avg_speed_);
    std::swap(min_moving_avg_speed_ped_, other->min_moving_avg_speed_ped_);
    std::swap(abnormal_acc_threshold_, other->abnormal_acc_threshold_);
    std::swap(abnormal_acc_threshold_ped_, other->abnormal_acc_threshold_ped_);
    std::swap(abnormal_velocity_heading_angle_threshold_, other->abnormal_velocity_heading_angle_threshold_);
    std::swap(clapping_velocity_, other->clapping_velocity_);
    std::swap(world_mean_velocity_duration_, other->world_mean_velocity_duration_);
    std::swap(tracked_life_, other->tracked_life_);
    std::swap(type_filter_var_, other->type_filter_var_);
    std::swap(large_velocity_ratio_, other->large_velocity_ratio_);
    std::swap(too_large_velocity_ratio_, other->too_large_velocity_ratio_);
    std::swap(mean_filter_window_, other->mean_filter_window_);
    std::swap(direction_filter_ratio_, other->direction_filter_ratio_);
    std::swap(displacement_theta_var_, other->displacement_theta_var_);
    std::swap(velocity_theta_var_, other->velocity_theta_var_);
    std::swap(stable_moving_speed_, other->stable_moving_speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetParam_descriptor_;
  metadata.reflection = TargetParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReferenceParam::kMarginFieldNumber;
const int ReferenceParam::kMinAllowHeightFieldNumber;
const int ReferenceParam::kAreaDecayFieldNumber;
const int ReferenceParam::kDownSamplingFieldNumber;
const int ReferenceParam::kHeightDiffRatioFieldNumber;
#endif  // !_MSC_VER

ReferenceParam::ReferenceParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.omt.ReferenceParam)
}

void ReferenceParam::InitAsDefaultInstance() {
}

ReferenceParam::ReferenceParam(const ReferenceParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.ReferenceParam)
}

void ReferenceParam::SharedCtor() {
  _cached_size_ = 0;
  margin_ = 2;
  min_allow_height_ = 50;
  area_decay_ = 0.99f;
  down_sampling_ = 40;
  height_diff_ratio_ = 0.1f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferenceParam::~ReferenceParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.ReferenceParam)
  SharedDtor();
}

void ReferenceParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReferenceParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceParam_descriptor_;
}

const ReferenceParam& ReferenceParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_omt_2eproto();
  return *default_instance_;
}

ReferenceParam* ReferenceParam::default_instance_ = NULL;

ReferenceParam* ReferenceParam::New() const {
  return new ReferenceParam;
}

void ReferenceParam::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    margin_ = 2;
    min_allow_height_ = 50;
    area_decay_ = 0.99f;
    down_sampling_ = 40;
    height_diff_ratio_ = 0.1f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReferenceParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.omt.ReferenceParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 margin = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &margin_)));
          set_has_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_allow_height;
        break;
      }

      // optional int32 min_allow_height = 2 [default = 50];
      case 2: {
        if (tag == 16) {
         parse_min_allow_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_allow_height_)));
          set_has_min_allow_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_area_decay;
        break;
      }

      // optional float area_decay = 3 [default = 0.99];
      case 3: {
        if (tag == 29) {
         parse_area_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &area_decay_)));
          set_has_area_decay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_down_sampling;
        break;
      }

      // optional int32 down_sampling = 4 [default = 40];
      case 4: {
        if (tag == 32) {
         parse_down_sampling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &down_sampling_)));
          set_has_down_sampling();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_height_diff_ratio;
        break;
      }

      // optional float height_diff_ratio = 5 [default = 0.1];
      case 5: {
        if (tag == 45) {
         parse_height_diff_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_diff_ratio_)));
          set_has_height_diff_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.omt.ReferenceParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.omt.ReferenceParam)
  return false;
#undef DO_
}

void ReferenceParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.omt.ReferenceParam)
  // optional int32 margin = 1 [default = 2];
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->margin(), output);
  }

  // optional int32 min_allow_height = 2 [default = 50];
  if (has_min_allow_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_allow_height(), output);
  }

  // optional float area_decay = 3 [default = 0.99];
  if (has_area_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->area_decay(), output);
  }

  // optional int32 down_sampling = 4 [default = 40];
  if (has_down_sampling()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->down_sampling(), output);
  }

  // optional float height_diff_ratio = 5 [default = 0.1];
  if (has_height_diff_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->height_diff_ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.omt.ReferenceParam)
}

::google::protobuf::uint8* ReferenceParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.ReferenceParam)
  // optional int32 margin = 1 [default = 2];
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->margin(), target);
  }

  // optional int32 min_allow_height = 2 [default = 50];
  if (has_min_allow_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_allow_height(), target);
  }

  // optional float area_decay = 3 [default = 0.99];
  if (has_area_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->area_decay(), target);
  }

  // optional int32 down_sampling = 4 [default = 40];
  if (has_down_sampling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->down_sampling(), target);
  }

  // optional float height_diff_ratio = 5 [default = 0.1];
  if (has_height_diff_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->height_diff_ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.ReferenceParam)
  return target;
}

int ReferenceParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 margin = 1 [default = 2];
    if (has_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->margin());
    }

    // optional int32 min_allow_height = 2 [default = 50];
    if (has_min_allow_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_allow_height());
    }

    // optional float area_decay = 3 [default = 0.99];
    if (has_area_decay()) {
      total_size += 1 + 4;
    }

    // optional int32 down_sampling = 4 [default = 40];
    if (has_down_sampling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->down_sampling());
    }

    // optional float height_diff_ratio = 5 [default = 0.1];
    if (has_height_diff_ratio()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReferenceParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReferenceParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReferenceParam::MergeFrom(const ReferenceParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_min_allow_height()) {
      set_min_allow_height(from.min_allow_height());
    }
    if (from.has_area_decay()) {
      set_area_decay(from.area_decay());
    }
    if (from.has_down_sampling()) {
      set_down_sampling(from.down_sampling());
    }
    if (from.has_height_diff_ratio()) {
      set_height_diff_ratio(from.height_diff_ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReferenceParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceParam::CopyFrom(const ReferenceParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceParam::IsInitialized() const {

  return true;
}

void ReferenceParam::Swap(ReferenceParam* other) {
  if (other != this) {
    std::swap(margin_, other->margin_);
    std::swap(min_allow_height_, other->min_allow_height_);
    std::swap(area_decay_, other->area_decay_);
    std::swap(down_sampling_, other->down_sampling_);
    std::swap(height_diff_ratio_, other->height_diff_ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReferenceParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceParam_descriptor_;
  metadata.reflection = ReferenceParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeightParam::kAppearanceFieldNumber;
const int WeightParam::kMotionFieldNumber;
const int WeightParam::kShapeFieldNumber;
const int WeightParam::kTrackletFieldNumber;
const int WeightParam::kOverlapFieldNumber;
#endif  // !_MSC_VER

WeightParam::WeightParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.omt.WeightParam)
}

void WeightParam::InitAsDefaultInstance() {
}

WeightParam::WeightParam(const WeightParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.WeightParam)
}

void WeightParam::SharedCtor() {
  _cached_size_ = 0;
  appearance_ = 0;
  motion_ = 0;
  shape_ = 0;
  tracklet_ = 0;
  overlap_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeightParam::~WeightParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.WeightParam)
  SharedDtor();
}

void WeightParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeightParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeightParam_descriptor_;
}

const WeightParam& WeightParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_omt_2eproto();
  return *default_instance_;
}

WeightParam* WeightParam::default_instance_ = NULL;

WeightParam* WeightParam::New() const {
  return new WeightParam;
}

void WeightParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WeightParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(appearance_, overlap_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeightParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.omt.WeightParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float appearance = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &appearance_)));
          set_has_appearance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_motion;
        break;
      }

      // optional float motion = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_motion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motion_)));
          set_has_motion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_shape;
        break;
      }

      // optional float shape = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shape_)));
          set_has_shape();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_tracklet;
        break;
      }

      // optional float tracklet = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_tracklet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tracklet_)));
          set_has_tracklet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_overlap;
        break;
      }

      // optional float overlap = 5 [default = 0];
      case 5: {
        if (tag == 45) {
         parse_overlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_)));
          set_has_overlap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.omt.WeightParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.omt.WeightParam)
  return false;
#undef DO_
}

void WeightParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.omt.WeightParam)
  // optional float appearance = 1 [default = 0];
  if (has_appearance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->appearance(), output);
  }

  // optional float motion = 2 [default = 0];
  if (has_motion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->motion(), output);
  }

  // optional float shape = 3 [default = 0];
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shape(), output);
  }

  // optional float tracklet = 4 [default = 0];
  if (has_tracklet()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->tracklet(), output);
  }

  // optional float overlap = 5 [default = 0];
  if (has_overlap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->overlap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.omt.WeightParam)
}

::google::protobuf::uint8* WeightParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.WeightParam)
  // optional float appearance = 1 [default = 0];
  if (has_appearance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->appearance(), target);
  }

  // optional float motion = 2 [default = 0];
  if (has_motion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->motion(), target);
  }

  // optional float shape = 3 [default = 0];
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shape(), target);
  }

  // optional float tracklet = 4 [default = 0];
  if (has_tracklet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->tracklet(), target);
  }

  // optional float overlap = 5 [default = 0];
  if (has_overlap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->overlap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.WeightParam)
  return target;
}

int WeightParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float appearance = 1 [default = 0];
    if (has_appearance()) {
      total_size += 1 + 4;
    }

    // optional float motion = 2 [default = 0];
    if (has_motion()) {
      total_size += 1 + 4;
    }

    // optional float shape = 3 [default = 0];
    if (has_shape()) {
      total_size += 1 + 4;
    }

    // optional float tracklet = 4 [default = 0];
    if (has_tracklet()) {
      total_size += 1 + 4;
    }

    // optional float overlap = 5 [default = 0];
    if (has_overlap()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeightParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeightParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeightParam::MergeFrom(const WeightParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appearance()) {
      set_appearance(from.appearance());
    }
    if (from.has_motion()) {
      set_motion(from.motion());
    }
    if (from.has_shape()) {
      set_shape(from.shape());
    }
    if (from.has_tracklet()) {
      set_tracklet(from.tracklet());
    }
    if (from.has_overlap()) {
      set_overlap(from.overlap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeightParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightParam::CopyFrom(const WeightParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightParam::IsInitialized() const {

  return true;
}

void WeightParam::Swap(WeightParam* other) {
  if (other != this) {
    std::swap(appearance_, other->appearance_);
    std::swap(motion_, other->motion_);
    std::swap(shape_, other->shape_);
    std::swap(tracklet_, other->tracklet_);
    std::swap(overlap_, other->overlap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeightParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeightParam_descriptor_;
  metadata.reflection = WeightParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OmtParam::kImgCapabilityFieldNumber;
const int OmtParam::kLostAgeFieldNumber;
const int OmtParam::kReserveAgeFieldNumber;
const int OmtParam::kWeightSameCameraFieldNumber;
const int OmtParam::kWeightDiffCameraFieldNumber;
const int OmtParam::kBorderFieldNumber;
const int OmtParam::kTargetThreshFieldNumber;
const int OmtParam::kCorrectTypeFieldNumber;
const int OmtParam::kTargetParamFieldNumber;
const int OmtParam::kMinInitHeightRatioFieldNumber;
const int OmtParam::kTargetCombineIouThresholdFieldNumber;
const int OmtParam::kFusionTargetThreshFieldNumber;
const int OmtParam::kImageDisplacementFieldNumber;
const int OmtParam::kAbnormalMovementFieldNumber;
const int OmtParam::kSameTsEpsFieldNumber;
const int OmtParam::kReferenceFieldNumber;
const int OmtParam::kTypeChangeCostFieldNumber;
#endif  // !_MSC_VER

OmtParam::OmtParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.omt.OmtParam)
}

void OmtParam::InitAsDefaultInstance() {
  weight_same_camera_ = const_cast< ::apollo::perception::camera::omt::WeightParam*>(&::apollo::perception::camera::omt::WeightParam::default_instance());
  weight_diff_camera_ = const_cast< ::apollo::perception::camera::omt::WeightParam*>(&::apollo::perception::camera::omt::WeightParam::default_instance());
  target_param_ = const_cast< ::apollo::perception::camera::omt::TargetParam*>(&::apollo::perception::camera::omt::TargetParam::default_instance());
  reference_ = const_cast< ::apollo::perception::camera::omt::ReferenceParam*>(&::apollo::perception::camera::omt::ReferenceParam::default_instance());
}

OmtParam::OmtParam(const OmtParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.OmtParam)
}

void OmtParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  img_capability_ = 7;
  lost_age_ = 2;
  reserve_age_ = 3;
  weight_same_camera_ = NULL;
  weight_diff_camera_ = NULL;
  border_ = 30;
  target_thresh_ = 0.65f;
  correct_type_ = false;
  target_param_ = NULL;
  min_init_height_ratio_ = 17;
  target_combine_iou_threshold_ = 0.5f;
  fusion_target_thresh_ = 0.45f;
  image_displacement_ = 50;
  abnormal_movement_ = 0.3f;
  same_ts_eps_ = 0.05;
  reference_ = NULL;
  type_change_cost_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OmtParam::~OmtParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.OmtParam)
  SharedDtor();
}

void OmtParam::SharedDtor() {
  if (type_change_cost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_change_cost_;
  }
  if (this != default_instance_) {
    delete weight_same_camera_;
    delete weight_diff_camera_;
    delete target_param_;
    delete reference_;
  }
}

void OmtParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OmtParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OmtParam_descriptor_;
}

const OmtParam& OmtParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_omt_2eproto();
  return *default_instance_;
}

OmtParam* OmtParam::default_instance_ = NULL;

OmtParam* OmtParam::New() const {
  return new OmtParam;
}

void OmtParam::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    img_capability_ = 7;
    lost_age_ = 2;
    reserve_age_ = 3;
    if (has_weight_same_camera()) {
      if (weight_same_camera_ != NULL) weight_same_camera_->::apollo::perception::camera::omt::WeightParam::Clear();
    }
    if (has_weight_diff_camera()) {
      if (weight_diff_camera_ != NULL) weight_diff_camera_->::apollo::perception::camera::omt::WeightParam::Clear();
    }
    border_ = 30;
    target_thresh_ = 0.65f;
    correct_type_ = false;
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_target_param()) {
      if (target_param_ != NULL) target_param_->::apollo::perception::camera::omt::TargetParam::Clear();
    }
    min_init_height_ratio_ = 17;
    target_combine_iou_threshold_ = 0.5f;
    fusion_target_thresh_ = 0.45f;
    image_displacement_ = 50;
    abnormal_movement_ = 0.3f;
    same_ts_eps_ = 0.05;
    if (has_reference()) {
      if (reference_ != NULL) reference_->::apollo::perception::camera::omt::ReferenceParam::Clear();
    }
  }
  if (has_type_change_cost()) {
    if (type_change_cost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      type_change_cost_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OmtParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.omt.OmtParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 img_capability = 1 [default = 7];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &img_capability_)));
          set_has_img_capability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lost_age;
        break;
      }

      // optional int32 lost_age = 2 [default = 2];
      case 2: {
        if (tag == 16) {
         parse_lost_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lost_age_)));
          set_has_lost_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reserve_age;
        break;
      }

      // optional int32 reserve_age = 3 [default = 3];
      case 3: {
        if (tag == 24) {
         parse_reserve_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_age_)));
          set_has_reserve_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_weight_same_camera;
        break;
      }

      // optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
      case 4: {
        if (tag == 34) {
         parse_weight_same_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_same_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_weight_diff_camera;
        break;
      }

      // optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
      case 5: {
        if (tag == 42) {
         parse_weight_diff_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_diff_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_border;
        break;
      }

      // optional float border = 9 [default = 30];
      case 9: {
        if (tag == 77) {
         parse_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &border_)));
          set_has_border();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_target_thresh;
        break;
      }

      // optional float target_thresh = 10 [default = 0.65];
      case 10: {
        if (tag == 85) {
         parse_target_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_thresh_)));
          set_has_target_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_correct_type;
        break;
      }

      // optional bool correct_type = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_correct_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correct_type_)));
          set_has_correct_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_target_param;
        break;
      }

      // optional .apollo.perception.camera.omt.TargetParam target_param = 12;
      case 12: {
        if (tag == 98) {
         parse_target_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_min_init_height_ratio;
        break;
      }

      // optional float min_init_height_ratio = 13 [default = 17];
      case 13: {
        if (tag == 109) {
         parse_min_init_height_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_init_height_ratio_)));
          set_has_min_init_height_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_target_combine_iou_threshold;
        break;
      }

      // optional float target_combine_iou_threshold = 14 [default = 0.5];
      case 14: {
        if (tag == 117) {
         parse_target_combine_iou_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_combine_iou_threshold_)));
          set_has_target_combine_iou_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_fusion_target_thresh;
        break;
      }

      // optional float fusion_target_thresh = 15 [default = 0.45];
      case 15: {
        if (tag == 125) {
         parse_fusion_target_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fusion_target_thresh_)));
          set_has_fusion_target_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_image_displacement;
        break;
      }

      // optional float image_displacement = 16 [default = 50];
      case 16: {
        if (tag == 133) {
         parse_image_displacement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &image_displacement_)));
          set_has_image_displacement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_abnormal_movement;
        break;
      }

      // optional float abnormal_movement = 17 [default = 0.3];
      case 17: {
        if (tag == 141) {
         parse_abnormal_movement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abnormal_movement_)));
          set_has_abnormal_movement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_same_ts_eps;
        break;
      }

      // optional double same_ts_eps = 18 [default = 0.05];
      case 18: {
        if (tag == 145) {
         parse_same_ts_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &same_ts_eps_)));
          set_has_same_ts_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_reference;
        break;
      }

      // optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
      case 19: {
        if (tag == 154) {
         parse_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reference()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_type_change_cost;
        break;
      }

      // optional string type_change_cost = 20;
      case 20: {
        if (tag == 162) {
         parse_type_change_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_change_cost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type_change_cost().data(), this->type_change_cost().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type_change_cost");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.omt.OmtParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.omt.OmtParam)
  return false;
#undef DO_
}

void OmtParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.omt.OmtParam)
  // optional int32 img_capability = 1 [default = 7];
  if (has_img_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->img_capability(), output);
  }

  // optional int32 lost_age = 2 [default = 2];
  if (has_lost_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lost_age(), output);
  }

  // optional int32 reserve_age = 3 [default = 3];
  if (has_reserve_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reserve_age(), output);
  }

  // optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
  if (has_weight_same_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->weight_same_camera(), output);
  }

  // optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
  if (has_weight_diff_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->weight_diff_camera(), output);
  }

  // optional float border = 9 [default = 30];
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->border(), output);
  }

  // optional float target_thresh = 10 [default = 0.65];
  if (has_target_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->target_thresh(), output);
  }

  // optional bool correct_type = 11 [default = false];
  if (has_correct_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->correct_type(), output);
  }

  // optional .apollo.perception.camera.omt.TargetParam target_param = 12;
  if (has_target_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->target_param(), output);
  }

  // optional float min_init_height_ratio = 13 [default = 17];
  if (has_min_init_height_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->min_init_height_ratio(), output);
  }

  // optional float target_combine_iou_threshold = 14 [default = 0.5];
  if (has_target_combine_iou_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->target_combine_iou_threshold(), output);
  }

  // optional float fusion_target_thresh = 15 [default = 0.45];
  if (has_fusion_target_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->fusion_target_thresh(), output);
  }

  // optional float image_displacement = 16 [default = 50];
  if (has_image_displacement()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->image_displacement(), output);
  }

  // optional float abnormal_movement = 17 [default = 0.3];
  if (has_abnormal_movement()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->abnormal_movement(), output);
  }

  // optional double same_ts_eps = 18 [default = 0.05];
  if (has_same_ts_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->same_ts_eps(), output);
  }

  // optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
  if (has_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->reference(), output);
  }

  // optional string type_change_cost = 20;
  if (has_type_change_cost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_change_cost().data(), this->type_change_cost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type_change_cost");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->type_change_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.omt.OmtParam)
}

::google::protobuf::uint8* OmtParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.OmtParam)
  // optional int32 img_capability = 1 [default = 7];
  if (has_img_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->img_capability(), target);
  }

  // optional int32 lost_age = 2 [default = 2];
  if (has_lost_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lost_age(), target);
  }

  // optional int32 reserve_age = 3 [default = 3];
  if (has_reserve_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reserve_age(), target);
  }

  // optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
  if (has_weight_same_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->weight_same_camera(), target);
  }

  // optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
  if (has_weight_diff_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->weight_diff_camera(), target);
  }

  // optional float border = 9 [default = 30];
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->border(), target);
  }

  // optional float target_thresh = 10 [default = 0.65];
  if (has_target_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->target_thresh(), target);
  }

  // optional bool correct_type = 11 [default = false];
  if (has_correct_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->correct_type(), target);
  }

  // optional .apollo.perception.camera.omt.TargetParam target_param = 12;
  if (has_target_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->target_param(), target);
  }

  // optional float min_init_height_ratio = 13 [default = 17];
  if (has_min_init_height_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->min_init_height_ratio(), target);
  }

  // optional float target_combine_iou_threshold = 14 [default = 0.5];
  if (has_target_combine_iou_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->target_combine_iou_threshold(), target);
  }

  // optional float fusion_target_thresh = 15 [default = 0.45];
  if (has_fusion_target_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->fusion_target_thresh(), target);
  }

  // optional float image_displacement = 16 [default = 50];
  if (has_image_displacement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->image_displacement(), target);
  }

  // optional float abnormal_movement = 17 [default = 0.3];
  if (has_abnormal_movement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->abnormal_movement(), target);
  }

  // optional double same_ts_eps = 18 [default = 0.05];
  if (has_same_ts_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->same_ts_eps(), target);
  }

  // optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
  if (has_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->reference(), target);
  }

  // optional string type_change_cost = 20;
  if (has_type_change_cost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_change_cost().data(), this->type_change_cost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type_change_cost");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->type_change_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.OmtParam)
  return target;
}

int OmtParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 img_capability = 1 [default = 7];
    if (has_img_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->img_capability());
    }

    // optional int32 lost_age = 2 [default = 2];
    if (has_lost_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lost_age());
    }

    // optional int32 reserve_age = 3 [default = 3];
    if (has_reserve_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve_age());
    }

    // optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
    if (has_weight_same_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_same_camera());
    }

    // optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
    if (has_weight_diff_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_diff_camera());
    }

    // optional float border = 9 [default = 30];
    if (has_border()) {
      total_size += 1 + 4;
    }

    // optional float target_thresh = 10 [default = 0.65];
    if (has_target_thresh()) {
      total_size += 1 + 4;
    }

    // optional bool correct_type = 11 [default = false];
    if (has_correct_type()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .apollo.perception.camera.omt.TargetParam target_param = 12;
    if (has_target_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_param());
    }

    // optional float min_init_height_ratio = 13 [default = 17];
    if (has_min_init_height_ratio()) {
      total_size += 1 + 4;
    }

    // optional float target_combine_iou_threshold = 14 [default = 0.5];
    if (has_target_combine_iou_threshold()) {
      total_size += 1 + 4;
    }

    // optional float fusion_target_thresh = 15 [default = 0.45];
    if (has_fusion_target_thresh()) {
      total_size += 1 + 4;
    }

    // optional float image_displacement = 16 [default = 50];
    if (has_image_displacement()) {
      total_size += 2 + 4;
    }

    // optional float abnormal_movement = 17 [default = 0.3];
    if (has_abnormal_movement()) {
      total_size += 2 + 4;
    }

    // optional double same_ts_eps = 18 [default = 0.05];
    if (has_same_ts_eps()) {
      total_size += 2 + 8;
    }

    // optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
    if (has_reference()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reference());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string type_change_cost = 20;
    if (has_type_change_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type_change_cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OmtParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OmtParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OmtParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OmtParam::MergeFrom(const OmtParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img_capability()) {
      set_img_capability(from.img_capability());
    }
    if (from.has_lost_age()) {
      set_lost_age(from.lost_age());
    }
    if (from.has_reserve_age()) {
      set_reserve_age(from.reserve_age());
    }
    if (from.has_weight_same_camera()) {
      mutable_weight_same_camera()->::apollo::perception::camera::omt::WeightParam::MergeFrom(from.weight_same_camera());
    }
    if (from.has_weight_diff_camera()) {
      mutable_weight_diff_camera()->::apollo::perception::camera::omt::WeightParam::MergeFrom(from.weight_diff_camera());
    }
    if (from.has_border()) {
      set_border(from.border());
    }
    if (from.has_target_thresh()) {
      set_target_thresh(from.target_thresh());
    }
    if (from.has_correct_type()) {
      set_correct_type(from.correct_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_target_param()) {
      mutable_target_param()->::apollo::perception::camera::omt::TargetParam::MergeFrom(from.target_param());
    }
    if (from.has_min_init_height_ratio()) {
      set_min_init_height_ratio(from.min_init_height_ratio());
    }
    if (from.has_target_combine_iou_threshold()) {
      set_target_combine_iou_threshold(from.target_combine_iou_threshold());
    }
    if (from.has_fusion_target_thresh()) {
      set_fusion_target_thresh(from.fusion_target_thresh());
    }
    if (from.has_image_displacement()) {
      set_image_displacement(from.image_displacement());
    }
    if (from.has_abnormal_movement()) {
      set_abnormal_movement(from.abnormal_movement());
    }
    if (from.has_same_ts_eps()) {
      set_same_ts_eps(from.same_ts_eps());
    }
    if (from.has_reference()) {
      mutable_reference()->::apollo::perception::camera::omt::ReferenceParam::MergeFrom(from.reference());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_type_change_cost()) {
      set_type_change_cost(from.type_change_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OmtParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OmtParam::CopyFrom(const OmtParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmtParam::IsInitialized() const {

  return true;
}

void OmtParam::Swap(OmtParam* other) {
  if (other != this) {
    std::swap(img_capability_, other->img_capability_);
    std::swap(lost_age_, other->lost_age_);
    std::swap(reserve_age_, other->reserve_age_);
    std::swap(weight_same_camera_, other->weight_same_camera_);
    std::swap(weight_diff_camera_, other->weight_diff_camera_);
    std::swap(border_, other->border_);
    std::swap(target_thresh_, other->target_thresh_);
    std::swap(correct_type_, other->correct_type_);
    std::swap(target_param_, other->target_param_);
    std::swap(min_init_height_ratio_, other->min_init_height_ratio_);
    std::swap(target_combine_iou_threshold_, other->target_combine_iou_threshold_);
    std::swap(fusion_target_thresh_, other->fusion_target_thresh_);
    std::swap(image_displacement_, other->image_displacement_);
    std::swap(abnormal_movement_, other->abnormal_movement_);
    std::swap(same_ts_eps_, other->same_ts_eps_);
    std::swap(reference_, other->reference_);
    std::swap(type_change_cost_, other->type_change_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OmtParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OmtParam_descriptor_;
  metadata.reflection = OmtParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace omt
}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
