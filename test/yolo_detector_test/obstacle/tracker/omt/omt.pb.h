// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: omt.proto

#ifndef PROTOBUF_omt_2eproto__INCLUDED
#define PROTOBUF_omt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace camera {
namespace omt {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_omt_2eproto();
void protobuf_AssignDesc_omt_2eproto();
void protobuf_ShutdownFile_omt_2eproto();

class KalmanParam;
class TargetParam;
class ReferenceParam;
class WeightParam;
class OmtParam;

// ===================================================================

class KalmanParam : public ::google::protobuf::Message {
 public:
  KalmanParam();
  virtual ~KalmanParam();

  KalmanParam(const KalmanParam& from);

  inline KalmanParam& operator=(const KalmanParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KalmanParam& default_instance();

  void Swap(KalmanParam* other);

  // implements Message ----------------------------------------------

  KalmanParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KalmanParam& from);
  void MergeFrom(const KalmanParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float init_variance = 1;
  inline bool has_init_variance() const;
  inline void clear_init_variance();
  static const int kInitVarianceFieldNumber = 1;
  inline float init_variance() const;
  inline void set_init_variance(float value);

  // optional float process_variance = 2;
  inline bool has_process_variance() const;
  inline void clear_process_variance();
  static const int kProcessVarianceFieldNumber = 2;
  inline float process_variance() const;
  inline void set_process_variance(float value);

  // optional float measure_variance = 3;
  inline bool has_measure_variance() const;
  inline void clear_measure_variance();
  static const int kMeasureVarianceFieldNumber = 3;
  inline float measure_variance() const;
  inline void set_measure_variance(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.omt.KalmanParam)
 private:
  inline void set_has_init_variance();
  inline void clear_has_init_variance();
  inline void set_has_process_variance();
  inline void clear_has_process_variance();
  inline void set_has_measure_variance();
  inline void clear_has_measure_variance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float init_variance_;
  float process_variance_;
  float measure_variance_;
  friend void  protobuf_AddDesc_omt_2eproto();
  friend void protobuf_AssignDesc_omt_2eproto();
  friend void protobuf_ShutdownFile_omt_2eproto();

  void InitAsDefaultInstance();
  static KalmanParam* default_instance_;
};
// -------------------------------------------------------------------

class TargetParam : public ::google::protobuf::Message {
 public:
  TargetParam();
  virtual ~TargetParam();

  TargetParam(const TargetParam& from);

  inline TargetParam& operator=(const TargetParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetParam& default_instance();

  void Swap(TargetParam* other);

  // implements Message ----------------------------------------------

  TargetParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetParam& from);
  void MergeFrom(const TargetParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float velocity_threshold = 1 [default = 2];
  inline bool has_velocity_threshold() const;
  inline void clear_velocity_threshold();
  static const int kVelocityThresholdFieldNumber = 1;
  inline float velocity_threshold() const;
  inline void set_velocity_threshold(float value);

  // optional int32 velocity_output_delay = 2 [default = 2];
  inline bool has_velocity_output_delay() const;
  inline void clear_velocity_output_delay();
  static const int kVelocityOutputDelayFieldNumber = 2;
  inline ::google::protobuf::int32 velocity_output_delay() const;
  inline void set_velocity_output_delay(::google::protobuf::int32 value);

  // optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
  inline bool has_world_center() const;
  inline void clear_world_center();
  static const int kWorldCenterFieldNumber = 3;
  inline const ::apollo::perception::camera::omt::KalmanParam& world_center() const;
  inline ::apollo::perception::camera::omt::KalmanParam* mutable_world_center();
  inline ::apollo::perception::camera::omt::KalmanParam* release_world_center();
  inline void set_allocated_world_center(::apollo::perception::camera::omt::KalmanParam* world_center);

  // optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
  inline bool has_image_center() const;
  inline void clear_image_center();
  static const int kImageCenterFieldNumber = 4;
  inline const ::apollo::perception::camera::omt::KalmanParam& image_center() const;
  inline ::apollo::perception::camera::omt::KalmanParam* mutable_image_center();
  inline ::apollo::perception::camera::omt::KalmanParam* release_image_center();
  inline void set_allocated_image_center(::apollo::perception::camera::omt::KalmanParam* image_center);

  // optional float image_wh_update_rate = 5;
  inline bool has_image_wh_update_rate() const;
  inline void clear_image_wh_update_rate();
  static const int kImageWhUpdateRateFieldNumber = 5;
  inline float image_wh_update_rate() const;
  inline void set_image_wh_update_rate(float value);

  // optional int32 world_lhw_history = 6 [default = 15];
  inline bool has_world_lhw_history() const;
  inline void clear_world_lhw_history();
  static const int kWorldLhwHistoryFieldNumber = 6;
  inline ::google::protobuf::int32 world_lhw_history() const;
  inline void set_world_lhw_history(::google::protobuf::int32 value);

  // optional float height_diff_ratio = 7 [default = 0.1];
  inline bool has_height_diff_ratio() const;
  inline void clear_height_diff_ratio();
  static const int kHeightDiffRatioFieldNumber = 7;
  inline float height_diff_ratio() const;
  inline void set_height_diff_ratio(float value);

  // optional int32 world_state_history = 8 [default = 30];
  inline bool has_world_state_history() const;
  inline void clear_world_state_history();
  static const int kWorldStateHistoryFieldNumber = 8;
  inline ::google::protobuf::int32 world_state_history() const;
  inline void set_world_state_history(::google::protobuf::int32 value);

  // optional int32 min_cached_world_state_history_size = 9 [default = 5];
  inline bool has_min_cached_world_state_history_size() const;
  inline void clear_min_cached_world_state_history_size();
  static const int kMinCachedWorldStateHistorySizeFieldNumber = 9;
  inline ::google::protobuf::int32 min_cached_world_state_history_size() const;
  inline void set_min_cached_world_state_history_size(::google::protobuf::int32 value);

  // optional int32 min_cached_velocity_size = 10 [default = 10];
  inline bool has_min_cached_velocity_size() const;
  inline void clear_min_cached_velocity_size();
  static const int kMinCachedVelocitySizeFieldNumber = 10;
  inline ::google::protobuf::int32 min_cached_velocity_size() const;
  inline void set_min_cached_velocity_size(::google::protobuf::int32 value);

  // optional int32 min_cached_position_size = 11 [default = 25];
  inline bool has_min_cached_position_size() const;
  inline void clear_min_cached_position_size();
  static const int kMinCachedPositionSizeFieldNumber = 11;
  inline ::google::protobuf::int32 min_cached_position_size() const;
  inline void set_min_cached_position_size(::google::protobuf::int32 value);

  // optional int32 calc_avg_position_window_size = 12 [default = 7];
  inline bool has_calc_avg_position_window_size() const;
  inline void clear_calc_avg_position_window_size();
  static const int kCalcAvgPositionWindowSizeFieldNumber = 12;
  inline ::google::protobuf::int32 calc_avg_position_window_size() const;
  inline void set_calc_avg_position_window_size(::google::protobuf::int32 value);

  // optional float static_speed_threshold = 13 [default = 0.5];
  inline bool has_static_speed_threshold() const;
  inline void clear_static_speed_threshold();
  static const int kStaticSpeedThresholdFieldNumber = 13;
  inline float static_speed_threshold() const;
  inline void set_static_speed_threshold(float value);

  // optional float static_speed_threshold_ped = 14 [default = 0.3];
  inline bool has_static_speed_threshold_ped() const;
  inline void clear_static_speed_threshold_ped();
  static const int kStaticSpeedThresholdPedFieldNumber = 14;
  inline float static_speed_threshold_ped() const;
  inline void set_static_speed_threshold_ped(float value);

  // optional float min_moving_avg_speed = 15 [default = 1];
  inline bool has_min_moving_avg_speed() const;
  inline void clear_min_moving_avg_speed();
  static const int kMinMovingAvgSpeedFieldNumber = 15;
  inline float min_moving_avg_speed() const;
  inline void set_min_moving_avg_speed(float value);

  // optional float min_moving_avg_speed_ped = 16 [default = 0.5];
  inline bool has_min_moving_avg_speed_ped() const;
  inline void clear_min_moving_avg_speed_ped();
  static const int kMinMovingAvgSpeedPedFieldNumber = 16;
  inline float min_moving_avg_speed_ped() const;
  inline void set_min_moving_avg_speed_ped(float value);

  // optional float abnormal_acc_threshold = 17 [default = 6];
  inline bool has_abnormal_acc_threshold() const;
  inline void clear_abnormal_acc_threshold();
  static const int kAbnormalAccThresholdFieldNumber = 17;
  inline float abnormal_acc_threshold() const;
  inline void set_abnormal_acc_threshold(float value);

  // optional float abnormal_acc_threshold_ped = 18 [default = 3];
  inline bool has_abnormal_acc_threshold_ped() const;
  inline void clear_abnormal_acc_threshold_ped();
  static const int kAbnormalAccThresholdPedFieldNumber = 18;
  inline float abnormal_acc_threshold_ped() const;
  inline void set_abnormal_acc_threshold_ped(float value);

  // optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
  inline bool has_abnormal_velocity_heading_angle_threshold() const;
  inline void clear_abnormal_velocity_heading_angle_threshold();
  static const int kAbnormalVelocityHeadingAngleThresholdFieldNumber = 19;
  inline float abnormal_velocity_heading_angle_threshold() const;
  inline void set_abnormal_velocity_heading_angle_threshold(float value);

  // optional bool clapping_velocity = 20 [default = false];
  inline bool has_clapping_velocity() const;
  inline void clear_clapping_velocity();
  static const int kClappingVelocityFieldNumber = 20;
  inline bool clapping_velocity() const;
  inline void set_clapping_velocity(bool value);

  // optional int32 world_mean_velocity_duration = 21 [default = 10];
  inline bool has_world_mean_velocity_duration() const;
  inline void clear_world_mean_velocity_duration();
  static const int kWorldMeanVelocityDurationFieldNumber = 21;
  inline ::google::protobuf::int32 world_mean_velocity_duration() const;
  inline void set_world_mean_velocity_duration(::google::protobuf::int32 value);

  // optional int32 tracked_life = 22 [default = 3];
  inline bool has_tracked_life() const;
  inline void clear_tracked_life();
  static const int kTrackedLifeFieldNumber = 22;
  inline ::google::protobuf::int32 tracked_life() const;
  inline void set_tracked_life(::google::protobuf::int32 value);

  // optional float type_filter_var = 23 [default = 0.3];
  inline bool has_type_filter_var() const;
  inline void clear_type_filter_var();
  static const int kTypeFilterVarFieldNumber = 23;
  inline float type_filter_var() const;
  inline void set_type_filter_var(float value);

  // optional float large_velocity_ratio = 24 [default = 2.5];
  inline bool has_large_velocity_ratio() const;
  inline void clear_large_velocity_ratio();
  static const int kLargeVelocityRatioFieldNumber = 24;
  inline float large_velocity_ratio() const;
  inline void set_large_velocity_ratio(float value);

  // optional float too_large_velocity_ratio = 25 [default = 1.5];
  inline bool has_too_large_velocity_ratio() const;
  inline void clear_too_large_velocity_ratio();
  static const int kTooLargeVelocityRatioFieldNumber = 25;
  inline float too_large_velocity_ratio() const;
  inline void set_too_large_velocity_ratio(float value);

  // optional int32 mean_filter_window = 26 [default = 10];
  inline bool has_mean_filter_window() const;
  inline void clear_mean_filter_window();
  static const int kMeanFilterWindowFieldNumber = 26;
  inline ::google::protobuf::int32 mean_filter_window() const;
  inline void set_mean_filter_window(::google::protobuf::int32 value);

  // optional float direction_filter_ratio = 27 [default = 0.7];
  inline bool has_direction_filter_ratio() const;
  inline void clear_direction_filter_ratio();
  static const int kDirectionFilterRatioFieldNumber = 27;
  inline float direction_filter_ratio() const;
  inline void set_direction_filter_ratio(float value);

  // optional float displacement_theta_var = 28 [default = 0.25];
  inline bool has_displacement_theta_var() const;
  inline void clear_displacement_theta_var();
  static const int kDisplacementThetaVarFieldNumber = 28;
  inline float displacement_theta_var() const;
  inline void set_displacement_theta_var(float value);

  // optional float velocity_theta_var = 29 [default = 0.5];
  inline bool has_velocity_theta_var() const;
  inline void clear_velocity_theta_var();
  static const int kVelocityThetaVarFieldNumber = 29;
  inline float velocity_theta_var() const;
  inline void set_velocity_theta_var(float value);

  // optional float stable_moving_speed = 30 [default = 2];
  inline bool has_stable_moving_speed() const;
  inline void clear_stable_moving_speed();
  static const int kStableMovingSpeedFieldNumber = 30;
  inline float stable_moving_speed() const;
  inline void set_stable_moving_speed(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.omt.TargetParam)
 private:
  inline void set_has_velocity_threshold();
  inline void clear_has_velocity_threshold();
  inline void set_has_velocity_output_delay();
  inline void clear_has_velocity_output_delay();
  inline void set_has_world_center();
  inline void clear_has_world_center();
  inline void set_has_image_center();
  inline void clear_has_image_center();
  inline void set_has_image_wh_update_rate();
  inline void clear_has_image_wh_update_rate();
  inline void set_has_world_lhw_history();
  inline void clear_has_world_lhw_history();
  inline void set_has_height_diff_ratio();
  inline void clear_has_height_diff_ratio();
  inline void set_has_world_state_history();
  inline void clear_has_world_state_history();
  inline void set_has_min_cached_world_state_history_size();
  inline void clear_has_min_cached_world_state_history_size();
  inline void set_has_min_cached_velocity_size();
  inline void clear_has_min_cached_velocity_size();
  inline void set_has_min_cached_position_size();
  inline void clear_has_min_cached_position_size();
  inline void set_has_calc_avg_position_window_size();
  inline void clear_has_calc_avg_position_window_size();
  inline void set_has_static_speed_threshold();
  inline void clear_has_static_speed_threshold();
  inline void set_has_static_speed_threshold_ped();
  inline void clear_has_static_speed_threshold_ped();
  inline void set_has_min_moving_avg_speed();
  inline void clear_has_min_moving_avg_speed();
  inline void set_has_min_moving_avg_speed_ped();
  inline void clear_has_min_moving_avg_speed_ped();
  inline void set_has_abnormal_acc_threshold();
  inline void clear_has_abnormal_acc_threshold();
  inline void set_has_abnormal_acc_threshold_ped();
  inline void clear_has_abnormal_acc_threshold_ped();
  inline void set_has_abnormal_velocity_heading_angle_threshold();
  inline void clear_has_abnormal_velocity_heading_angle_threshold();
  inline void set_has_clapping_velocity();
  inline void clear_has_clapping_velocity();
  inline void set_has_world_mean_velocity_duration();
  inline void clear_has_world_mean_velocity_duration();
  inline void set_has_tracked_life();
  inline void clear_has_tracked_life();
  inline void set_has_type_filter_var();
  inline void clear_has_type_filter_var();
  inline void set_has_large_velocity_ratio();
  inline void clear_has_large_velocity_ratio();
  inline void set_has_too_large_velocity_ratio();
  inline void clear_has_too_large_velocity_ratio();
  inline void set_has_mean_filter_window();
  inline void clear_has_mean_filter_window();
  inline void set_has_direction_filter_ratio();
  inline void clear_has_direction_filter_ratio();
  inline void set_has_displacement_theta_var();
  inline void clear_has_displacement_theta_var();
  inline void set_has_velocity_theta_var();
  inline void clear_has_velocity_theta_var();
  inline void set_has_stable_moving_speed();
  inline void clear_has_stable_moving_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float velocity_threshold_;
  ::google::protobuf::int32 velocity_output_delay_;
  ::apollo::perception::camera::omt::KalmanParam* world_center_;
  ::apollo::perception::camera::omt::KalmanParam* image_center_;
  float image_wh_update_rate_;
  ::google::protobuf::int32 world_lhw_history_;
  float height_diff_ratio_;
  ::google::protobuf::int32 world_state_history_;
  ::google::protobuf::int32 min_cached_world_state_history_size_;
  ::google::protobuf::int32 min_cached_velocity_size_;
  ::google::protobuf::int32 min_cached_position_size_;
  ::google::protobuf::int32 calc_avg_position_window_size_;
  float static_speed_threshold_;
  float static_speed_threshold_ped_;
  float min_moving_avg_speed_;
  float min_moving_avg_speed_ped_;
  float abnormal_acc_threshold_;
  float abnormal_acc_threshold_ped_;
  float abnormal_velocity_heading_angle_threshold_;
  bool clapping_velocity_;
  ::google::protobuf::int32 world_mean_velocity_duration_;
  ::google::protobuf::int32 tracked_life_;
  float type_filter_var_;
  float large_velocity_ratio_;
  float too_large_velocity_ratio_;
  ::google::protobuf::int32 mean_filter_window_;
  float direction_filter_ratio_;
  float displacement_theta_var_;
  float velocity_theta_var_;
  float stable_moving_speed_;
  friend void  protobuf_AddDesc_omt_2eproto();
  friend void protobuf_AssignDesc_omt_2eproto();
  friend void protobuf_ShutdownFile_omt_2eproto();

  void InitAsDefaultInstance();
  static TargetParam* default_instance_;
};
// -------------------------------------------------------------------

class ReferenceParam : public ::google::protobuf::Message {
 public:
  ReferenceParam();
  virtual ~ReferenceParam();

  ReferenceParam(const ReferenceParam& from);

  inline ReferenceParam& operator=(const ReferenceParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceParam& default_instance();

  void Swap(ReferenceParam* other);

  // implements Message ----------------------------------------------

  ReferenceParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReferenceParam& from);
  void MergeFrom(const ReferenceParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 margin = 1 [default = 2];
  inline bool has_margin() const;
  inline void clear_margin();
  static const int kMarginFieldNumber = 1;
  inline ::google::protobuf::int32 margin() const;
  inline void set_margin(::google::protobuf::int32 value);

  // optional int32 min_allow_height = 2 [default = 50];
  inline bool has_min_allow_height() const;
  inline void clear_min_allow_height();
  static const int kMinAllowHeightFieldNumber = 2;
  inline ::google::protobuf::int32 min_allow_height() const;
  inline void set_min_allow_height(::google::protobuf::int32 value);

  // optional float area_decay = 3 [default = 0.99];
  inline bool has_area_decay() const;
  inline void clear_area_decay();
  static const int kAreaDecayFieldNumber = 3;
  inline float area_decay() const;
  inline void set_area_decay(float value);

  // optional int32 down_sampling = 4 [default = 40];
  inline bool has_down_sampling() const;
  inline void clear_down_sampling();
  static const int kDownSamplingFieldNumber = 4;
  inline ::google::protobuf::int32 down_sampling() const;
  inline void set_down_sampling(::google::protobuf::int32 value);

  // optional float height_diff_ratio = 5 [default = 0.1];
  inline bool has_height_diff_ratio() const;
  inline void clear_height_diff_ratio();
  static const int kHeightDiffRatioFieldNumber = 5;
  inline float height_diff_ratio() const;
  inline void set_height_diff_ratio(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.omt.ReferenceParam)
 private:
  inline void set_has_margin();
  inline void clear_has_margin();
  inline void set_has_min_allow_height();
  inline void clear_has_min_allow_height();
  inline void set_has_area_decay();
  inline void clear_has_area_decay();
  inline void set_has_down_sampling();
  inline void clear_has_down_sampling();
  inline void set_has_height_diff_ratio();
  inline void clear_has_height_diff_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 margin_;
  ::google::protobuf::int32 min_allow_height_;
  float area_decay_;
  ::google::protobuf::int32 down_sampling_;
  float height_diff_ratio_;
  friend void  protobuf_AddDesc_omt_2eproto();
  friend void protobuf_AssignDesc_omt_2eproto();
  friend void protobuf_ShutdownFile_omt_2eproto();

  void InitAsDefaultInstance();
  static ReferenceParam* default_instance_;
};
// -------------------------------------------------------------------

class WeightParam : public ::google::protobuf::Message {
 public:
  WeightParam();
  virtual ~WeightParam();

  WeightParam(const WeightParam& from);

  inline WeightParam& operator=(const WeightParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeightParam& default_instance();

  void Swap(WeightParam* other);

  // implements Message ----------------------------------------------

  WeightParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeightParam& from);
  void MergeFrom(const WeightParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float appearance = 1 [default = 0];
  inline bool has_appearance() const;
  inline void clear_appearance();
  static const int kAppearanceFieldNumber = 1;
  inline float appearance() const;
  inline void set_appearance(float value);

  // optional float motion = 2 [default = 0];
  inline bool has_motion() const;
  inline void clear_motion();
  static const int kMotionFieldNumber = 2;
  inline float motion() const;
  inline void set_motion(float value);

  // optional float shape = 3 [default = 0];
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 3;
  inline float shape() const;
  inline void set_shape(float value);

  // optional float tracklet = 4 [default = 0];
  inline bool has_tracklet() const;
  inline void clear_tracklet();
  static const int kTrackletFieldNumber = 4;
  inline float tracklet() const;
  inline void set_tracklet(float value);

  // optional float overlap = 5 [default = 0];
  inline bool has_overlap() const;
  inline void clear_overlap();
  static const int kOverlapFieldNumber = 5;
  inline float overlap() const;
  inline void set_overlap(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.omt.WeightParam)
 private:
  inline void set_has_appearance();
  inline void clear_has_appearance();
  inline void set_has_motion();
  inline void clear_has_motion();
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_tracklet();
  inline void clear_has_tracklet();
  inline void set_has_overlap();
  inline void clear_has_overlap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float appearance_;
  float motion_;
  float shape_;
  float tracklet_;
  float overlap_;
  friend void  protobuf_AddDesc_omt_2eproto();
  friend void protobuf_AssignDesc_omt_2eproto();
  friend void protobuf_ShutdownFile_omt_2eproto();

  void InitAsDefaultInstance();
  static WeightParam* default_instance_;
};
// -------------------------------------------------------------------

class OmtParam : public ::google::protobuf::Message {
 public:
  OmtParam();
  virtual ~OmtParam();

  OmtParam(const OmtParam& from);

  inline OmtParam& operator=(const OmtParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OmtParam& default_instance();

  void Swap(OmtParam* other);

  // implements Message ----------------------------------------------

  OmtParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OmtParam& from);
  void MergeFrom(const OmtParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 img_capability = 1 [default = 7];
  inline bool has_img_capability() const;
  inline void clear_img_capability();
  static const int kImgCapabilityFieldNumber = 1;
  inline ::google::protobuf::int32 img_capability() const;
  inline void set_img_capability(::google::protobuf::int32 value);

  // optional int32 lost_age = 2 [default = 2];
  inline bool has_lost_age() const;
  inline void clear_lost_age();
  static const int kLostAgeFieldNumber = 2;
  inline ::google::protobuf::int32 lost_age() const;
  inline void set_lost_age(::google::protobuf::int32 value);

  // optional int32 reserve_age = 3 [default = 3];
  inline bool has_reserve_age() const;
  inline void clear_reserve_age();
  static const int kReserveAgeFieldNumber = 3;
  inline ::google::protobuf::int32 reserve_age() const;
  inline void set_reserve_age(::google::protobuf::int32 value);

  // optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
  inline bool has_weight_same_camera() const;
  inline void clear_weight_same_camera();
  static const int kWeightSameCameraFieldNumber = 4;
  inline const ::apollo::perception::camera::omt::WeightParam& weight_same_camera() const;
  inline ::apollo::perception::camera::omt::WeightParam* mutable_weight_same_camera();
  inline ::apollo::perception::camera::omt::WeightParam* release_weight_same_camera();
  inline void set_allocated_weight_same_camera(::apollo::perception::camera::omt::WeightParam* weight_same_camera);

  // optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
  inline bool has_weight_diff_camera() const;
  inline void clear_weight_diff_camera();
  static const int kWeightDiffCameraFieldNumber = 5;
  inline const ::apollo::perception::camera::omt::WeightParam& weight_diff_camera() const;
  inline ::apollo::perception::camera::omt::WeightParam* mutable_weight_diff_camera();
  inline ::apollo::perception::camera::omt::WeightParam* release_weight_diff_camera();
  inline void set_allocated_weight_diff_camera(::apollo::perception::camera::omt::WeightParam* weight_diff_camera);

  // optional float border = 9 [default = 30];
  inline bool has_border() const;
  inline void clear_border();
  static const int kBorderFieldNumber = 9;
  inline float border() const;
  inline void set_border(float value);

  // optional float target_thresh = 10 [default = 0.65];
  inline bool has_target_thresh() const;
  inline void clear_target_thresh();
  static const int kTargetThreshFieldNumber = 10;
  inline float target_thresh() const;
  inline void set_target_thresh(float value);

  // optional bool correct_type = 11 [default = false];
  inline bool has_correct_type() const;
  inline void clear_correct_type();
  static const int kCorrectTypeFieldNumber = 11;
  inline bool correct_type() const;
  inline void set_correct_type(bool value);

  // optional .apollo.perception.camera.omt.TargetParam target_param = 12;
  inline bool has_target_param() const;
  inline void clear_target_param();
  static const int kTargetParamFieldNumber = 12;
  inline const ::apollo::perception::camera::omt::TargetParam& target_param() const;
  inline ::apollo::perception::camera::omt::TargetParam* mutable_target_param();
  inline ::apollo::perception::camera::omt::TargetParam* release_target_param();
  inline void set_allocated_target_param(::apollo::perception::camera::omt::TargetParam* target_param);

  // optional float min_init_height_ratio = 13 [default = 17];
  inline bool has_min_init_height_ratio() const;
  inline void clear_min_init_height_ratio();
  static const int kMinInitHeightRatioFieldNumber = 13;
  inline float min_init_height_ratio() const;
  inline void set_min_init_height_ratio(float value);

  // optional float target_combine_iou_threshold = 14 [default = 0.5];
  inline bool has_target_combine_iou_threshold() const;
  inline void clear_target_combine_iou_threshold();
  static const int kTargetCombineIouThresholdFieldNumber = 14;
  inline float target_combine_iou_threshold() const;
  inline void set_target_combine_iou_threshold(float value);

  // optional float fusion_target_thresh = 15 [default = 0.45];
  inline bool has_fusion_target_thresh() const;
  inline void clear_fusion_target_thresh();
  static const int kFusionTargetThreshFieldNumber = 15;
  inline float fusion_target_thresh() const;
  inline void set_fusion_target_thresh(float value);

  // optional float image_displacement = 16 [default = 50];
  inline bool has_image_displacement() const;
  inline void clear_image_displacement();
  static const int kImageDisplacementFieldNumber = 16;
  inline float image_displacement() const;
  inline void set_image_displacement(float value);

  // optional float abnormal_movement = 17 [default = 0.3];
  inline bool has_abnormal_movement() const;
  inline void clear_abnormal_movement();
  static const int kAbnormalMovementFieldNumber = 17;
  inline float abnormal_movement() const;
  inline void set_abnormal_movement(float value);

  // optional double same_ts_eps = 18 [default = 0.05];
  inline bool has_same_ts_eps() const;
  inline void clear_same_ts_eps();
  static const int kSameTsEpsFieldNumber = 18;
  inline double same_ts_eps() const;
  inline void set_same_ts_eps(double value);

  // optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
  inline bool has_reference() const;
  inline void clear_reference();
  static const int kReferenceFieldNumber = 19;
  inline const ::apollo::perception::camera::omt::ReferenceParam& reference() const;
  inline ::apollo::perception::camera::omt::ReferenceParam* mutable_reference();
  inline ::apollo::perception::camera::omt::ReferenceParam* release_reference();
  inline void set_allocated_reference(::apollo::perception::camera::omt::ReferenceParam* reference);

  // optional string type_change_cost = 20;
  inline bool has_type_change_cost() const;
  inline void clear_type_change_cost();
  static const int kTypeChangeCostFieldNumber = 20;
  inline const ::std::string& type_change_cost() const;
  inline void set_type_change_cost(const ::std::string& value);
  inline void set_type_change_cost(const char* value);
  inline void set_type_change_cost(const char* value, size_t size);
  inline ::std::string* mutable_type_change_cost();
  inline ::std::string* release_type_change_cost();
  inline void set_allocated_type_change_cost(::std::string* type_change_cost);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.omt.OmtParam)
 private:
  inline void set_has_img_capability();
  inline void clear_has_img_capability();
  inline void set_has_lost_age();
  inline void clear_has_lost_age();
  inline void set_has_reserve_age();
  inline void clear_has_reserve_age();
  inline void set_has_weight_same_camera();
  inline void clear_has_weight_same_camera();
  inline void set_has_weight_diff_camera();
  inline void clear_has_weight_diff_camera();
  inline void set_has_border();
  inline void clear_has_border();
  inline void set_has_target_thresh();
  inline void clear_has_target_thresh();
  inline void set_has_correct_type();
  inline void clear_has_correct_type();
  inline void set_has_target_param();
  inline void clear_has_target_param();
  inline void set_has_min_init_height_ratio();
  inline void clear_has_min_init_height_ratio();
  inline void set_has_target_combine_iou_threshold();
  inline void clear_has_target_combine_iou_threshold();
  inline void set_has_fusion_target_thresh();
  inline void clear_has_fusion_target_thresh();
  inline void set_has_image_displacement();
  inline void clear_has_image_displacement();
  inline void set_has_abnormal_movement();
  inline void clear_has_abnormal_movement();
  inline void set_has_same_ts_eps();
  inline void clear_has_same_ts_eps();
  inline void set_has_reference();
  inline void clear_has_reference();
  inline void set_has_type_change_cost();
  inline void clear_has_type_change_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 img_capability_;
  ::google::protobuf::int32 lost_age_;
  ::apollo::perception::camera::omt::WeightParam* weight_same_camera_;
  ::google::protobuf::int32 reserve_age_;
  float border_;
  ::apollo::perception::camera::omt::WeightParam* weight_diff_camera_;
  float target_thresh_;
  bool correct_type_;
  ::apollo::perception::camera::omt::TargetParam* target_param_;
  float min_init_height_ratio_;
  float target_combine_iou_threshold_;
  float fusion_target_thresh_;
  float image_displacement_;
  double same_ts_eps_;
  ::apollo::perception::camera::omt::ReferenceParam* reference_;
  ::std::string* type_change_cost_;
  float abnormal_movement_;
  friend void  protobuf_AddDesc_omt_2eproto();
  friend void protobuf_AssignDesc_omt_2eproto();
  friend void protobuf_ShutdownFile_omt_2eproto();

  void InitAsDefaultInstance();
  static OmtParam* default_instance_;
};
// ===================================================================


// ===================================================================

// KalmanParam

// optional float init_variance = 1;
inline bool KalmanParam::has_init_variance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KalmanParam::set_has_init_variance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KalmanParam::clear_has_init_variance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KalmanParam::clear_init_variance() {
  init_variance_ = 0;
  clear_has_init_variance();
}
inline float KalmanParam::init_variance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.KalmanParam.init_variance)
  return init_variance_;
}
inline void KalmanParam::set_init_variance(float value) {
  set_has_init_variance();
  init_variance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.KalmanParam.init_variance)
}

// optional float process_variance = 2;
inline bool KalmanParam::has_process_variance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KalmanParam::set_has_process_variance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KalmanParam::clear_has_process_variance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KalmanParam::clear_process_variance() {
  process_variance_ = 0;
  clear_has_process_variance();
}
inline float KalmanParam::process_variance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.KalmanParam.process_variance)
  return process_variance_;
}
inline void KalmanParam::set_process_variance(float value) {
  set_has_process_variance();
  process_variance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.KalmanParam.process_variance)
}

// optional float measure_variance = 3;
inline bool KalmanParam::has_measure_variance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KalmanParam::set_has_measure_variance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KalmanParam::clear_has_measure_variance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KalmanParam::clear_measure_variance() {
  measure_variance_ = 0;
  clear_has_measure_variance();
}
inline float KalmanParam::measure_variance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.KalmanParam.measure_variance)
  return measure_variance_;
}
inline void KalmanParam::set_measure_variance(float value) {
  set_has_measure_variance();
  measure_variance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.KalmanParam.measure_variance)
}

// -------------------------------------------------------------------

// TargetParam

// optional float velocity_threshold = 1 [default = 2];
inline bool TargetParam::has_velocity_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TargetParam::set_has_velocity_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TargetParam::clear_has_velocity_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TargetParam::clear_velocity_threshold() {
  velocity_threshold_ = 2;
  clear_has_velocity_threshold();
}
inline float TargetParam::velocity_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.velocity_threshold)
  return velocity_threshold_;
}
inline void TargetParam::set_velocity_threshold(float value) {
  set_has_velocity_threshold();
  velocity_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.velocity_threshold)
}

// optional int32 velocity_output_delay = 2 [default = 2];
inline bool TargetParam::has_velocity_output_delay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TargetParam::set_has_velocity_output_delay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TargetParam::clear_has_velocity_output_delay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TargetParam::clear_velocity_output_delay() {
  velocity_output_delay_ = 2;
  clear_has_velocity_output_delay();
}
inline ::google::protobuf::int32 TargetParam::velocity_output_delay() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.velocity_output_delay)
  return velocity_output_delay_;
}
inline void TargetParam::set_velocity_output_delay(::google::protobuf::int32 value) {
  set_has_velocity_output_delay();
  velocity_output_delay_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.velocity_output_delay)
}

// optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
inline bool TargetParam::has_world_center() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TargetParam::set_has_world_center() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TargetParam::clear_has_world_center() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TargetParam::clear_world_center() {
  if (world_center_ != NULL) world_center_->::apollo::perception::camera::omt::KalmanParam::Clear();
  clear_has_world_center();
}
inline const ::apollo::perception::camera::omt::KalmanParam& TargetParam::world_center() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.world_center)
  return world_center_ != NULL ? *world_center_ : *default_instance_->world_center_;
}
inline ::apollo::perception::camera::omt::KalmanParam* TargetParam::mutable_world_center() {
  set_has_world_center();
  if (world_center_ == NULL) world_center_ = new ::apollo::perception::camera::omt::KalmanParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.TargetParam.world_center)
  return world_center_;
}
inline ::apollo::perception::camera::omt::KalmanParam* TargetParam::release_world_center() {
  clear_has_world_center();
  ::apollo::perception::camera::omt::KalmanParam* temp = world_center_;
  world_center_ = NULL;
  return temp;
}
inline void TargetParam::set_allocated_world_center(::apollo::perception::camera::omt::KalmanParam* world_center) {
  delete world_center_;
  world_center_ = world_center;
  if (world_center) {
    set_has_world_center();
  } else {
    clear_has_world_center();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.TargetParam.world_center)
}

// optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
inline bool TargetParam::has_image_center() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TargetParam::set_has_image_center() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TargetParam::clear_has_image_center() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TargetParam::clear_image_center() {
  if (image_center_ != NULL) image_center_->::apollo::perception::camera::omt::KalmanParam::Clear();
  clear_has_image_center();
}
inline const ::apollo::perception::camera::omt::KalmanParam& TargetParam::image_center() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.image_center)
  return image_center_ != NULL ? *image_center_ : *default_instance_->image_center_;
}
inline ::apollo::perception::camera::omt::KalmanParam* TargetParam::mutable_image_center() {
  set_has_image_center();
  if (image_center_ == NULL) image_center_ = new ::apollo::perception::camera::omt::KalmanParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.TargetParam.image_center)
  return image_center_;
}
inline ::apollo::perception::camera::omt::KalmanParam* TargetParam::release_image_center() {
  clear_has_image_center();
  ::apollo::perception::camera::omt::KalmanParam* temp = image_center_;
  image_center_ = NULL;
  return temp;
}
inline void TargetParam::set_allocated_image_center(::apollo::perception::camera::omt::KalmanParam* image_center) {
  delete image_center_;
  image_center_ = image_center;
  if (image_center) {
    set_has_image_center();
  } else {
    clear_has_image_center();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.TargetParam.image_center)
}

// optional float image_wh_update_rate = 5;
inline bool TargetParam::has_image_wh_update_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TargetParam::set_has_image_wh_update_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TargetParam::clear_has_image_wh_update_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TargetParam::clear_image_wh_update_rate() {
  image_wh_update_rate_ = 0;
  clear_has_image_wh_update_rate();
}
inline float TargetParam::image_wh_update_rate() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.image_wh_update_rate)
  return image_wh_update_rate_;
}
inline void TargetParam::set_image_wh_update_rate(float value) {
  set_has_image_wh_update_rate();
  image_wh_update_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.image_wh_update_rate)
}

// optional int32 world_lhw_history = 6 [default = 15];
inline bool TargetParam::has_world_lhw_history() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TargetParam::set_has_world_lhw_history() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TargetParam::clear_has_world_lhw_history() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TargetParam::clear_world_lhw_history() {
  world_lhw_history_ = 15;
  clear_has_world_lhw_history();
}
inline ::google::protobuf::int32 TargetParam::world_lhw_history() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.world_lhw_history)
  return world_lhw_history_;
}
inline void TargetParam::set_world_lhw_history(::google::protobuf::int32 value) {
  set_has_world_lhw_history();
  world_lhw_history_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.world_lhw_history)
}

// optional float height_diff_ratio = 7 [default = 0.1];
inline bool TargetParam::has_height_diff_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TargetParam::set_has_height_diff_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TargetParam::clear_has_height_diff_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TargetParam::clear_height_diff_ratio() {
  height_diff_ratio_ = 0.1f;
  clear_has_height_diff_ratio();
}
inline float TargetParam::height_diff_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.height_diff_ratio)
  return height_diff_ratio_;
}
inline void TargetParam::set_height_diff_ratio(float value) {
  set_has_height_diff_ratio();
  height_diff_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.height_diff_ratio)
}

// optional int32 world_state_history = 8 [default = 30];
inline bool TargetParam::has_world_state_history() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TargetParam::set_has_world_state_history() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TargetParam::clear_has_world_state_history() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TargetParam::clear_world_state_history() {
  world_state_history_ = 30;
  clear_has_world_state_history();
}
inline ::google::protobuf::int32 TargetParam::world_state_history() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.world_state_history)
  return world_state_history_;
}
inline void TargetParam::set_world_state_history(::google::protobuf::int32 value) {
  set_has_world_state_history();
  world_state_history_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.world_state_history)
}

// optional int32 min_cached_world_state_history_size = 9 [default = 5];
inline bool TargetParam::has_min_cached_world_state_history_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TargetParam::set_has_min_cached_world_state_history_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TargetParam::clear_has_min_cached_world_state_history_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TargetParam::clear_min_cached_world_state_history_size() {
  min_cached_world_state_history_size_ = 5;
  clear_has_min_cached_world_state_history_size();
}
inline ::google::protobuf::int32 TargetParam::min_cached_world_state_history_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.min_cached_world_state_history_size)
  return min_cached_world_state_history_size_;
}
inline void TargetParam::set_min_cached_world_state_history_size(::google::protobuf::int32 value) {
  set_has_min_cached_world_state_history_size();
  min_cached_world_state_history_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.min_cached_world_state_history_size)
}

// optional int32 min_cached_velocity_size = 10 [default = 10];
inline bool TargetParam::has_min_cached_velocity_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TargetParam::set_has_min_cached_velocity_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TargetParam::clear_has_min_cached_velocity_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TargetParam::clear_min_cached_velocity_size() {
  min_cached_velocity_size_ = 10;
  clear_has_min_cached_velocity_size();
}
inline ::google::protobuf::int32 TargetParam::min_cached_velocity_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.min_cached_velocity_size)
  return min_cached_velocity_size_;
}
inline void TargetParam::set_min_cached_velocity_size(::google::protobuf::int32 value) {
  set_has_min_cached_velocity_size();
  min_cached_velocity_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.min_cached_velocity_size)
}

// optional int32 min_cached_position_size = 11 [default = 25];
inline bool TargetParam::has_min_cached_position_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TargetParam::set_has_min_cached_position_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TargetParam::clear_has_min_cached_position_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TargetParam::clear_min_cached_position_size() {
  min_cached_position_size_ = 25;
  clear_has_min_cached_position_size();
}
inline ::google::protobuf::int32 TargetParam::min_cached_position_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.min_cached_position_size)
  return min_cached_position_size_;
}
inline void TargetParam::set_min_cached_position_size(::google::protobuf::int32 value) {
  set_has_min_cached_position_size();
  min_cached_position_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.min_cached_position_size)
}

// optional int32 calc_avg_position_window_size = 12 [default = 7];
inline bool TargetParam::has_calc_avg_position_window_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TargetParam::set_has_calc_avg_position_window_size() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TargetParam::clear_has_calc_avg_position_window_size() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TargetParam::clear_calc_avg_position_window_size() {
  calc_avg_position_window_size_ = 7;
  clear_has_calc_avg_position_window_size();
}
inline ::google::protobuf::int32 TargetParam::calc_avg_position_window_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.calc_avg_position_window_size)
  return calc_avg_position_window_size_;
}
inline void TargetParam::set_calc_avg_position_window_size(::google::protobuf::int32 value) {
  set_has_calc_avg_position_window_size();
  calc_avg_position_window_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.calc_avg_position_window_size)
}

// optional float static_speed_threshold = 13 [default = 0.5];
inline bool TargetParam::has_static_speed_threshold() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TargetParam::set_has_static_speed_threshold() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TargetParam::clear_has_static_speed_threshold() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TargetParam::clear_static_speed_threshold() {
  static_speed_threshold_ = 0.5f;
  clear_has_static_speed_threshold();
}
inline float TargetParam::static_speed_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.static_speed_threshold)
  return static_speed_threshold_;
}
inline void TargetParam::set_static_speed_threshold(float value) {
  set_has_static_speed_threshold();
  static_speed_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.static_speed_threshold)
}

// optional float static_speed_threshold_ped = 14 [default = 0.3];
inline bool TargetParam::has_static_speed_threshold_ped() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TargetParam::set_has_static_speed_threshold_ped() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TargetParam::clear_has_static_speed_threshold_ped() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TargetParam::clear_static_speed_threshold_ped() {
  static_speed_threshold_ped_ = 0.3f;
  clear_has_static_speed_threshold_ped();
}
inline float TargetParam::static_speed_threshold_ped() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.static_speed_threshold_ped)
  return static_speed_threshold_ped_;
}
inline void TargetParam::set_static_speed_threshold_ped(float value) {
  set_has_static_speed_threshold_ped();
  static_speed_threshold_ped_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.static_speed_threshold_ped)
}

// optional float min_moving_avg_speed = 15 [default = 1];
inline bool TargetParam::has_min_moving_avg_speed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TargetParam::set_has_min_moving_avg_speed() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TargetParam::clear_has_min_moving_avg_speed() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TargetParam::clear_min_moving_avg_speed() {
  min_moving_avg_speed_ = 1;
  clear_has_min_moving_avg_speed();
}
inline float TargetParam::min_moving_avg_speed() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.min_moving_avg_speed)
  return min_moving_avg_speed_;
}
inline void TargetParam::set_min_moving_avg_speed(float value) {
  set_has_min_moving_avg_speed();
  min_moving_avg_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.min_moving_avg_speed)
}

// optional float min_moving_avg_speed_ped = 16 [default = 0.5];
inline bool TargetParam::has_min_moving_avg_speed_ped() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TargetParam::set_has_min_moving_avg_speed_ped() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TargetParam::clear_has_min_moving_avg_speed_ped() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TargetParam::clear_min_moving_avg_speed_ped() {
  min_moving_avg_speed_ped_ = 0.5f;
  clear_has_min_moving_avg_speed_ped();
}
inline float TargetParam::min_moving_avg_speed_ped() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.min_moving_avg_speed_ped)
  return min_moving_avg_speed_ped_;
}
inline void TargetParam::set_min_moving_avg_speed_ped(float value) {
  set_has_min_moving_avg_speed_ped();
  min_moving_avg_speed_ped_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.min_moving_avg_speed_ped)
}

// optional float abnormal_acc_threshold = 17 [default = 6];
inline bool TargetParam::has_abnormal_acc_threshold() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TargetParam::set_has_abnormal_acc_threshold() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TargetParam::clear_has_abnormal_acc_threshold() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TargetParam::clear_abnormal_acc_threshold() {
  abnormal_acc_threshold_ = 6;
  clear_has_abnormal_acc_threshold();
}
inline float TargetParam::abnormal_acc_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.abnormal_acc_threshold)
  return abnormal_acc_threshold_;
}
inline void TargetParam::set_abnormal_acc_threshold(float value) {
  set_has_abnormal_acc_threshold();
  abnormal_acc_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.abnormal_acc_threshold)
}

// optional float abnormal_acc_threshold_ped = 18 [default = 3];
inline bool TargetParam::has_abnormal_acc_threshold_ped() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TargetParam::set_has_abnormal_acc_threshold_ped() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TargetParam::clear_has_abnormal_acc_threshold_ped() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TargetParam::clear_abnormal_acc_threshold_ped() {
  abnormal_acc_threshold_ped_ = 3;
  clear_has_abnormal_acc_threshold_ped();
}
inline float TargetParam::abnormal_acc_threshold_ped() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.abnormal_acc_threshold_ped)
  return abnormal_acc_threshold_ped_;
}
inline void TargetParam::set_abnormal_acc_threshold_ped(float value) {
  set_has_abnormal_acc_threshold_ped();
  abnormal_acc_threshold_ped_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.abnormal_acc_threshold_ped)
}

// optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
inline bool TargetParam::has_abnormal_velocity_heading_angle_threshold() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TargetParam::set_has_abnormal_velocity_heading_angle_threshold() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TargetParam::clear_has_abnormal_velocity_heading_angle_threshold() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TargetParam::clear_abnormal_velocity_heading_angle_threshold() {
  abnormal_velocity_heading_angle_threshold_ = 0.7854f;
  clear_has_abnormal_velocity_heading_angle_threshold();
}
inline float TargetParam::abnormal_velocity_heading_angle_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.abnormal_velocity_heading_angle_threshold)
  return abnormal_velocity_heading_angle_threshold_;
}
inline void TargetParam::set_abnormal_velocity_heading_angle_threshold(float value) {
  set_has_abnormal_velocity_heading_angle_threshold();
  abnormal_velocity_heading_angle_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.abnormal_velocity_heading_angle_threshold)
}

// optional bool clapping_velocity = 20 [default = false];
inline bool TargetParam::has_clapping_velocity() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TargetParam::set_has_clapping_velocity() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TargetParam::clear_has_clapping_velocity() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TargetParam::clear_clapping_velocity() {
  clapping_velocity_ = false;
  clear_has_clapping_velocity();
}
inline bool TargetParam::clapping_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.clapping_velocity)
  return clapping_velocity_;
}
inline void TargetParam::set_clapping_velocity(bool value) {
  set_has_clapping_velocity();
  clapping_velocity_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.clapping_velocity)
}

// optional int32 world_mean_velocity_duration = 21 [default = 10];
inline bool TargetParam::has_world_mean_velocity_duration() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TargetParam::set_has_world_mean_velocity_duration() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TargetParam::clear_has_world_mean_velocity_duration() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TargetParam::clear_world_mean_velocity_duration() {
  world_mean_velocity_duration_ = 10;
  clear_has_world_mean_velocity_duration();
}
inline ::google::protobuf::int32 TargetParam::world_mean_velocity_duration() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.world_mean_velocity_duration)
  return world_mean_velocity_duration_;
}
inline void TargetParam::set_world_mean_velocity_duration(::google::protobuf::int32 value) {
  set_has_world_mean_velocity_duration();
  world_mean_velocity_duration_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.world_mean_velocity_duration)
}

// optional int32 tracked_life = 22 [default = 3];
inline bool TargetParam::has_tracked_life() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TargetParam::set_has_tracked_life() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TargetParam::clear_has_tracked_life() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TargetParam::clear_tracked_life() {
  tracked_life_ = 3;
  clear_has_tracked_life();
}
inline ::google::protobuf::int32 TargetParam::tracked_life() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.tracked_life)
  return tracked_life_;
}
inline void TargetParam::set_tracked_life(::google::protobuf::int32 value) {
  set_has_tracked_life();
  tracked_life_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.tracked_life)
}

// optional float type_filter_var = 23 [default = 0.3];
inline bool TargetParam::has_type_filter_var() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TargetParam::set_has_type_filter_var() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TargetParam::clear_has_type_filter_var() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TargetParam::clear_type_filter_var() {
  type_filter_var_ = 0.3f;
  clear_has_type_filter_var();
}
inline float TargetParam::type_filter_var() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.type_filter_var)
  return type_filter_var_;
}
inline void TargetParam::set_type_filter_var(float value) {
  set_has_type_filter_var();
  type_filter_var_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.type_filter_var)
}

// optional float large_velocity_ratio = 24 [default = 2.5];
inline bool TargetParam::has_large_velocity_ratio() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TargetParam::set_has_large_velocity_ratio() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TargetParam::clear_has_large_velocity_ratio() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TargetParam::clear_large_velocity_ratio() {
  large_velocity_ratio_ = 2.5f;
  clear_has_large_velocity_ratio();
}
inline float TargetParam::large_velocity_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.large_velocity_ratio)
  return large_velocity_ratio_;
}
inline void TargetParam::set_large_velocity_ratio(float value) {
  set_has_large_velocity_ratio();
  large_velocity_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.large_velocity_ratio)
}

// optional float too_large_velocity_ratio = 25 [default = 1.5];
inline bool TargetParam::has_too_large_velocity_ratio() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TargetParam::set_has_too_large_velocity_ratio() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TargetParam::clear_has_too_large_velocity_ratio() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TargetParam::clear_too_large_velocity_ratio() {
  too_large_velocity_ratio_ = 1.5f;
  clear_has_too_large_velocity_ratio();
}
inline float TargetParam::too_large_velocity_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.too_large_velocity_ratio)
  return too_large_velocity_ratio_;
}
inline void TargetParam::set_too_large_velocity_ratio(float value) {
  set_has_too_large_velocity_ratio();
  too_large_velocity_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.too_large_velocity_ratio)
}

// optional int32 mean_filter_window = 26 [default = 10];
inline bool TargetParam::has_mean_filter_window() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TargetParam::set_has_mean_filter_window() {
  _has_bits_[0] |= 0x02000000u;
}
inline void TargetParam::clear_has_mean_filter_window() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void TargetParam::clear_mean_filter_window() {
  mean_filter_window_ = 10;
  clear_has_mean_filter_window();
}
inline ::google::protobuf::int32 TargetParam::mean_filter_window() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.mean_filter_window)
  return mean_filter_window_;
}
inline void TargetParam::set_mean_filter_window(::google::protobuf::int32 value) {
  set_has_mean_filter_window();
  mean_filter_window_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.mean_filter_window)
}

// optional float direction_filter_ratio = 27 [default = 0.7];
inline bool TargetParam::has_direction_filter_ratio() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void TargetParam::set_has_direction_filter_ratio() {
  _has_bits_[0] |= 0x04000000u;
}
inline void TargetParam::clear_has_direction_filter_ratio() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void TargetParam::clear_direction_filter_ratio() {
  direction_filter_ratio_ = 0.7f;
  clear_has_direction_filter_ratio();
}
inline float TargetParam::direction_filter_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.direction_filter_ratio)
  return direction_filter_ratio_;
}
inline void TargetParam::set_direction_filter_ratio(float value) {
  set_has_direction_filter_ratio();
  direction_filter_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.direction_filter_ratio)
}

// optional float displacement_theta_var = 28 [default = 0.25];
inline bool TargetParam::has_displacement_theta_var() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void TargetParam::set_has_displacement_theta_var() {
  _has_bits_[0] |= 0x08000000u;
}
inline void TargetParam::clear_has_displacement_theta_var() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void TargetParam::clear_displacement_theta_var() {
  displacement_theta_var_ = 0.25f;
  clear_has_displacement_theta_var();
}
inline float TargetParam::displacement_theta_var() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.displacement_theta_var)
  return displacement_theta_var_;
}
inline void TargetParam::set_displacement_theta_var(float value) {
  set_has_displacement_theta_var();
  displacement_theta_var_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.displacement_theta_var)
}

// optional float velocity_theta_var = 29 [default = 0.5];
inline bool TargetParam::has_velocity_theta_var() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void TargetParam::set_has_velocity_theta_var() {
  _has_bits_[0] |= 0x10000000u;
}
inline void TargetParam::clear_has_velocity_theta_var() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void TargetParam::clear_velocity_theta_var() {
  velocity_theta_var_ = 0.5f;
  clear_has_velocity_theta_var();
}
inline float TargetParam::velocity_theta_var() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.velocity_theta_var)
  return velocity_theta_var_;
}
inline void TargetParam::set_velocity_theta_var(float value) {
  set_has_velocity_theta_var();
  velocity_theta_var_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.velocity_theta_var)
}

// optional float stable_moving_speed = 30 [default = 2];
inline bool TargetParam::has_stable_moving_speed() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TargetParam::set_has_stable_moving_speed() {
  _has_bits_[0] |= 0x20000000u;
}
inline void TargetParam::clear_has_stable_moving_speed() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void TargetParam::clear_stable_moving_speed() {
  stable_moving_speed_ = 2;
  clear_has_stable_moving_speed();
}
inline float TargetParam::stable_moving_speed() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.TargetParam.stable_moving_speed)
  return stable_moving_speed_;
}
inline void TargetParam::set_stable_moving_speed(float value) {
  set_has_stable_moving_speed();
  stable_moving_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.TargetParam.stable_moving_speed)
}

// -------------------------------------------------------------------

// ReferenceParam

// optional int32 margin = 1 [default = 2];
inline bool ReferenceParam::has_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReferenceParam::set_has_margin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReferenceParam::clear_has_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReferenceParam::clear_margin() {
  margin_ = 2;
  clear_has_margin();
}
inline ::google::protobuf::int32 ReferenceParam::margin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.ReferenceParam.margin)
  return margin_;
}
inline void ReferenceParam::set_margin(::google::protobuf::int32 value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.ReferenceParam.margin)
}

// optional int32 min_allow_height = 2 [default = 50];
inline bool ReferenceParam::has_min_allow_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReferenceParam::set_has_min_allow_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReferenceParam::clear_has_min_allow_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReferenceParam::clear_min_allow_height() {
  min_allow_height_ = 50;
  clear_has_min_allow_height();
}
inline ::google::protobuf::int32 ReferenceParam::min_allow_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.ReferenceParam.min_allow_height)
  return min_allow_height_;
}
inline void ReferenceParam::set_min_allow_height(::google::protobuf::int32 value) {
  set_has_min_allow_height();
  min_allow_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.ReferenceParam.min_allow_height)
}

// optional float area_decay = 3 [default = 0.99];
inline bool ReferenceParam::has_area_decay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReferenceParam::set_has_area_decay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReferenceParam::clear_has_area_decay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReferenceParam::clear_area_decay() {
  area_decay_ = 0.99f;
  clear_has_area_decay();
}
inline float ReferenceParam::area_decay() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.ReferenceParam.area_decay)
  return area_decay_;
}
inline void ReferenceParam::set_area_decay(float value) {
  set_has_area_decay();
  area_decay_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.ReferenceParam.area_decay)
}

// optional int32 down_sampling = 4 [default = 40];
inline bool ReferenceParam::has_down_sampling() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReferenceParam::set_has_down_sampling() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReferenceParam::clear_has_down_sampling() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReferenceParam::clear_down_sampling() {
  down_sampling_ = 40;
  clear_has_down_sampling();
}
inline ::google::protobuf::int32 ReferenceParam::down_sampling() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.ReferenceParam.down_sampling)
  return down_sampling_;
}
inline void ReferenceParam::set_down_sampling(::google::protobuf::int32 value) {
  set_has_down_sampling();
  down_sampling_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.ReferenceParam.down_sampling)
}

// optional float height_diff_ratio = 5 [default = 0.1];
inline bool ReferenceParam::has_height_diff_ratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReferenceParam::set_has_height_diff_ratio() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReferenceParam::clear_has_height_diff_ratio() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReferenceParam::clear_height_diff_ratio() {
  height_diff_ratio_ = 0.1f;
  clear_has_height_diff_ratio();
}
inline float ReferenceParam::height_diff_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.ReferenceParam.height_diff_ratio)
  return height_diff_ratio_;
}
inline void ReferenceParam::set_height_diff_ratio(float value) {
  set_has_height_diff_ratio();
  height_diff_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.ReferenceParam.height_diff_ratio)
}

// -------------------------------------------------------------------

// WeightParam

// optional float appearance = 1 [default = 0];
inline bool WeightParam::has_appearance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeightParam::set_has_appearance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeightParam::clear_has_appearance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeightParam::clear_appearance() {
  appearance_ = 0;
  clear_has_appearance();
}
inline float WeightParam::appearance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.WeightParam.appearance)
  return appearance_;
}
inline void WeightParam::set_appearance(float value) {
  set_has_appearance();
  appearance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.WeightParam.appearance)
}

// optional float motion = 2 [default = 0];
inline bool WeightParam::has_motion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeightParam::set_has_motion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeightParam::clear_has_motion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeightParam::clear_motion() {
  motion_ = 0;
  clear_has_motion();
}
inline float WeightParam::motion() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.WeightParam.motion)
  return motion_;
}
inline void WeightParam::set_motion(float value) {
  set_has_motion();
  motion_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.WeightParam.motion)
}

// optional float shape = 3 [default = 0];
inline bool WeightParam::has_shape() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeightParam::set_has_shape() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeightParam::clear_has_shape() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeightParam::clear_shape() {
  shape_ = 0;
  clear_has_shape();
}
inline float WeightParam::shape() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.WeightParam.shape)
  return shape_;
}
inline void WeightParam::set_shape(float value) {
  set_has_shape();
  shape_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.WeightParam.shape)
}

// optional float tracklet = 4 [default = 0];
inline bool WeightParam::has_tracklet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeightParam::set_has_tracklet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeightParam::clear_has_tracklet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeightParam::clear_tracklet() {
  tracklet_ = 0;
  clear_has_tracklet();
}
inline float WeightParam::tracklet() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.WeightParam.tracklet)
  return tracklet_;
}
inline void WeightParam::set_tracklet(float value) {
  set_has_tracklet();
  tracklet_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.WeightParam.tracklet)
}

// optional float overlap = 5 [default = 0];
inline bool WeightParam::has_overlap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeightParam::set_has_overlap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeightParam::clear_has_overlap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeightParam::clear_overlap() {
  overlap_ = 0;
  clear_has_overlap();
}
inline float WeightParam::overlap() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.WeightParam.overlap)
  return overlap_;
}
inline void WeightParam::set_overlap(float value) {
  set_has_overlap();
  overlap_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.WeightParam.overlap)
}

// -------------------------------------------------------------------

// OmtParam

// optional int32 img_capability = 1 [default = 7];
inline bool OmtParam::has_img_capability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OmtParam::set_has_img_capability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OmtParam::clear_has_img_capability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OmtParam::clear_img_capability() {
  img_capability_ = 7;
  clear_has_img_capability();
}
inline ::google::protobuf::int32 OmtParam::img_capability() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.img_capability)
  return img_capability_;
}
inline void OmtParam::set_img_capability(::google::protobuf::int32 value) {
  set_has_img_capability();
  img_capability_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.img_capability)
}

// optional int32 lost_age = 2 [default = 2];
inline bool OmtParam::has_lost_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OmtParam::set_has_lost_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OmtParam::clear_has_lost_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OmtParam::clear_lost_age() {
  lost_age_ = 2;
  clear_has_lost_age();
}
inline ::google::protobuf::int32 OmtParam::lost_age() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.lost_age)
  return lost_age_;
}
inline void OmtParam::set_lost_age(::google::protobuf::int32 value) {
  set_has_lost_age();
  lost_age_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.lost_age)
}

// optional int32 reserve_age = 3 [default = 3];
inline bool OmtParam::has_reserve_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OmtParam::set_has_reserve_age() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OmtParam::clear_has_reserve_age() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OmtParam::clear_reserve_age() {
  reserve_age_ = 3;
  clear_has_reserve_age();
}
inline ::google::protobuf::int32 OmtParam::reserve_age() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.reserve_age)
  return reserve_age_;
}
inline void OmtParam::set_reserve_age(::google::protobuf::int32 value) {
  set_has_reserve_age();
  reserve_age_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.reserve_age)
}

// optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
inline bool OmtParam::has_weight_same_camera() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OmtParam::set_has_weight_same_camera() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OmtParam::clear_has_weight_same_camera() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OmtParam::clear_weight_same_camera() {
  if (weight_same_camera_ != NULL) weight_same_camera_->::apollo::perception::camera::omt::WeightParam::Clear();
  clear_has_weight_same_camera();
}
inline const ::apollo::perception::camera::omt::WeightParam& OmtParam::weight_same_camera() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.weight_same_camera)
  return weight_same_camera_ != NULL ? *weight_same_camera_ : *default_instance_->weight_same_camera_;
}
inline ::apollo::perception::camera::omt::WeightParam* OmtParam::mutable_weight_same_camera() {
  set_has_weight_same_camera();
  if (weight_same_camera_ == NULL) weight_same_camera_ = new ::apollo::perception::camera::omt::WeightParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.OmtParam.weight_same_camera)
  return weight_same_camera_;
}
inline ::apollo::perception::camera::omt::WeightParam* OmtParam::release_weight_same_camera() {
  clear_has_weight_same_camera();
  ::apollo::perception::camera::omt::WeightParam* temp = weight_same_camera_;
  weight_same_camera_ = NULL;
  return temp;
}
inline void OmtParam::set_allocated_weight_same_camera(::apollo::perception::camera::omt::WeightParam* weight_same_camera) {
  delete weight_same_camera_;
  weight_same_camera_ = weight_same_camera;
  if (weight_same_camera) {
    set_has_weight_same_camera();
  } else {
    clear_has_weight_same_camera();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.OmtParam.weight_same_camera)
}

// optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
inline bool OmtParam::has_weight_diff_camera() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OmtParam::set_has_weight_diff_camera() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OmtParam::clear_has_weight_diff_camera() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OmtParam::clear_weight_diff_camera() {
  if (weight_diff_camera_ != NULL) weight_diff_camera_->::apollo::perception::camera::omt::WeightParam::Clear();
  clear_has_weight_diff_camera();
}
inline const ::apollo::perception::camera::omt::WeightParam& OmtParam::weight_diff_camera() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.weight_diff_camera)
  return weight_diff_camera_ != NULL ? *weight_diff_camera_ : *default_instance_->weight_diff_camera_;
}
inline ::apollo::perception::camera::omt::WeightParam* OmtParam::mutable_weight_diff_camera() {
  set_has_weight_diff_camera();
  if (weight_diff_camera_ == NULL) weight_diff_camera_ = new ::apollo::perception::camera::omt::WeightParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.OmtParam.weight_diff_camera)
  return weight_diff_camera_;
}
inline ::apollo::perception::camera::omt::WeightParam* OmtParam::release_weight_diff_camera() {
  clear_has_weight_diff_camera();
  ::apollo::perception::camera::omt::WeightParam* temp = weight_diff_camera_;
  weight_diff_camera_ = NULL;
  return temp;
}
inline void OmtParam::set_allocated_weight_diff_camera(::apollo::perception::camera::omt::WeightParam* weight_diff_camera) {
  delete weight_diff_camera_;
  weight_diff_camera_ = weight_diff_camera;
  if (weight_diff_camera) {
    set_has_weight_diff_camera();
  } else {
    clear_has_weight_diff_camera();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.OmtParam.weight_diff_camera)
}

// optional float border = 9 [default = 30];
inline bool OmtParam::has_border() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OmtParam::set_has_border() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OmtParam::clear_has_border() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OmtParam::clear_border() {
  border_ = 30;
  clear_has_border();
}
inline float OmtParam::border() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.border)
  return border_;
}
inline void OmtParam::set_border(float value) {
  set_has_border();
  border_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.border)
}

// optional float target_thresh = 10 [default = 0.65];
inline bool OmtParam::has_target_thresh() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OmtParam::set_has_target_thresh() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OmtParam::clear_has_target_thresh() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OmtParam::clear_target_thresh() {
  target_thresh_ = 0.65f;
  clear_has_target_thresh();
}
inline float OmtParam::target_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.target_thresh)
  return target_thresh_;
}
inline void OmtParam::set_target_thresh(float value) {
  set_has_target_thresh();
  target_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.target_thresh)
}

// optional bool correct_type = 11 [default = false];
inline bool OmtParam::has_correct_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OmtParam::set_has_correct_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OmtParam::clear_has_correct_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OmtParam::clear_correct_type() {
  correct_type_ = false;
  clear_has_correct_type();
}
inline bool OmtParam::correct_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.correct_type)
  return correct_type_;
}
inline void OmtParam::set_correct_type(bool value) {
  set_has_correct_type();
  correct_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.correct_type)
}

// optional .apollo.perception.camera.omt.TargetParam target_param = 12;
inline bool OmtParam::has_target_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OmtParam::set_has_target_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OmtParam::clear_has_target_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OmtParam::clear_target_param() {
  if (target_param_ != NULL) target_param_->::apollo::perception::camera::omt::TargetParam::Clear();
  clear_has_target_param();
}
inline const ::apollo::perception::camera::omt::TargetParam& OmtParam::target_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.target_param)
  return target_param_ != NULL ? *target_param_ : *default_instance_->target_param_;
}
inline ::apollo::perception::camera::omt::TargetParam* OmtParam::mutable_target_param() {
  set_has_target_param();
  if (target_param_ == NULL) target_param_ = new ::apollo::perception::camera::omt::TargetParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.OmtParam.target_param)
  return target_param_;
}
inline ::apollo::perception::camera::omt::TargetParam* OmtParam::release_target_param() {
  clear_has_target_param();
  ::apollo::perception::camera::omt::TargetParam* temp = target_param_;
  target_param_ = NULL;
  return temp;
}
inline void OmtParam::set_allocated_target_param(::apollo::perception::camera::omt::TargetParam* target_param) {
  delete target_param_;
  target_param_ = target_param;
  if (target_param) {
    set_has_target_param();
  } else {
    clear_has_target_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.OmtParam.target_param)
}

// optional float min_init_height_ratio = 13 [default = 17];
inline bool OmtParam::has_min_init_height_ratio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OmtParam::set_has_min_init_height_ratio() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OmtParam::clear_has_min_init_height_ratio() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OmtParam::clear_min_init_height_ratio() {
  min_init_height_ratio_ = 17;
  clear_has_min_init_height_ratio();
}
inline float OmtParam::min_init_height_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.min_init_height_ratio)
  return min_init_height_ratio_;
}
inline void OmtParam::set_min_init_height_ratio(float value) {
  set_has_min_init_height_ratio();
  min_init_height_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.min_init_height_ratio)
}

// optional float target_combine_iou_threshold = 14 [default = 0.5];
inline bool OmtParam::has_target_combine_iou_threshold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OmtParam::set_has_target_combine_iou_threshold() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OmtParam::clear_has_target_combine_iou_threshold() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OmtParam::clear_target_combine_iou_threshold() {
  target_combine_iou_threshold_ = 0.5f;
  clear_has_target_combine_iou_threshold();
}
inline float OmtParam::target_combine_iou_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.target_combine_iou_threshold)
  return target_combine_iou_threshold_;
}
inline void OmtParam::set_target_combine_iou_threshold(float value) {
  set_has_target_combine_iou_threshold();
  target_combine_iou_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.target_combine_iou_threshold)
}

// optional float fusion_target_thresh = 15 [default = 0.45];
inline bool OmtParam::has_fusion_target_thresh() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OmtParam::set_has_fusion_target_thresh() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OmtParam::clear_has_fusion_target_thresh() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OmtParam::clear_fusion_target_thresh() {
  fusion_target_thresh_ = 0.45f;
  clear_has_fusion_target_thresh();
}
inline float OmtParam::fusion_target_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.fusion_target_thresh)
  return fusion_target_thresh_;
}
inline void OmtParam::set_fusion_target_thresh(float value) {
  set_has_fusion_target_thresh();
  fusion_target_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.fusion_target_thresh)
}

// optional float image_displacement = 16 [default = 50];
inline bool OmtParam::has_image_displacement() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OmtParam::set_has_image_displacement() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OmtParam::clear_has_image_displacement() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OmtParam::clear_image_displacement() {
  image_displacement_ = 50;
  clear_has_image_displacement();
}
inline float OmtParam::image_displacement() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.image_displacement)
  return image_displacement_;
}
inline void OmtParam::set_image_displacement(float value) {
  set_has_image_displacement();
  image_displacement_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.image_displacement)
}

// optional float abnormal_movement = 17 [default = 0.3];
inline bool OmtParam::has_abnormal_movement() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OmtParam::set_has_abnormal_movement() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OmtParam::clear_has_abnormal_movement() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OmtParam::clear_abnormal_movement() {
  abnormal_movement_ = 0.3f;
  clear_has_abnormal_movement();
}
inline float OmtParam::abnormal_movement() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.abnormal_movement)
  return abnormal_movement_;
}
inline void OmtParam::set_abnormal_movement(float value) {
  set_has_abnormal_movement();
  abnormal_movement_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.abnormal_movement)
}

// optional double same_ts_eps = 18 [default = 0.05];
inline bool OmtParam::has_same_ts_eps() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OmtParam::set_has_same_ts_eps() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OmtParam::clear_has_same_ts_eps() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OmtParam::clear_same_ts_eps() {
  same_ts_eps_ = 0.05;
  clear_has_same_ts_eps();
}
inline double OmtParam::same_ts_eps() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.same_ts_eps)
  return same_ts_eps_;
}
inline void OmtParam::set_same_ts_eps(double value) {
  set_has_same_ts_eps();
  same_ts_eps_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.same_ts_eps)
}

// optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
inline bool OmtParam::has_reference() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OmtParam::set_has_reference() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OmtParam::clear_has_reference() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OmtParam::clear_reference() {
  if (reference_ != NULL) reference_->::apollo::perception::camera::omt::ReferenceParam::Clear();
  clear_has_reference();
}
inline const ::apollo::perception::camera::omt::ReferenceParam& OmtParam::reference() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.reference)
  return reference_ != NULL ? *reference_ : *default_instance_->reference_;
}
inline ::apollo::perception::camera::omt::ReferenceParam* OmtParam::mutable_reference() {
  set_has_reference();
  if (reference_ == NULL) reference_ = new ::apollo::perception::camera::omt::ReferenceParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.OmtParam.reference)
  return reference_;
}
inline ::apollo::perception::camera::omt::ReferenceParam* OmtParam::release_reference() {
  clear_has_reference();
  ::apollo::perception::camera::omt::ReferenceParam* temp = reference_;
  reference_ = NULL;
  return temp;
}
inline void OmtParam::set_allocated_reference(::apollo::perception::camera::omt::ReferenceParam* reference) {
  delete reference_;
  reference_ = reference;
  if (reference) {
    set_has_reference();
  } else {
    clear_has_reference();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.OmtParam.reference)
}

// optional string type_change_cost = 20;
inline bool OmtParam::has_type_change_cost() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OmtParam::set_has_type_change_cost() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OmtParam::clear_has_type_change_cost() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OmtParam::clear_type_change_cost() {
  if (type_change_cost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_change_cost_->clear();
  }
  clear_has_type_change_cost();
}
inline const ::std::string& OmtParam::type_change_cost() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.omt.OmtParam.type_change_cost)
  return *type_change_cost_;
}
inline void OmtParam::set_type_change_cost(const ::std::string& value) {
  set_has_type_change_cost();
  if (type_change_cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_change_cost_ = new ::std::string;
  }
  type_change_cost_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.omt.OmtParam.type_change_cost)
}
inline void OmtParam::set_type_change_cost(const char* value) {
  set_has_type_change_cost();
  if (type_change_cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_change_cost_ = new ::std::string;
  }
  type_change_cost_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.omt.OmtParam.type_change_cost)
}
inline void OmtParam::set_type_change_cost(const char* value, size_t size) {
  set_has_type_change_cost();
  if (type_change_cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_change_cost_ = new ::std::string;
  }
  type_change_cost_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.omt.OmtParam.type_change_cost)
}
inline ::std::string* OmtParam::mutable_type_change_cost() {
  set_has_type_change_cost();
  if (type_change_cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_change_cost_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.omt.OmtParam.type_change_cost)
  return type_change_cost_;
}
inline ::std::string* OmtParam::release_type_change_cost() {
  clear_has_type_change_cost();
  if (type_change_cost_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_change_cost_;
    type_change_cost_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OmtParam::set_allocated_type_change_cost(::std::string* type_change_cost) {
  if (type_change_cost_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_change_cost_;
  }
  if (type_change_cost) {
    set_has_type_change_cost();
    type_change_cost_ = type_change_cost;
  } else {
    clear_has_type_change_cost();
    type_change_cost_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.omt.OmtParam.type_change_cost)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace omt
}  // namespace camera
}  // namespace perception
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_omt_2eproto__INCLUDED
