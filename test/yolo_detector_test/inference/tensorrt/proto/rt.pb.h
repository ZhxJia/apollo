// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt.proto

#ifndef PROTOBUF_rt_2eproto__INCLUDED
#define PROTOBUF_rt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace inference {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_2eproto();
void protobuf_AssignDesc_rt_2eproto();
void protobuf_ShutdownFile_rt_2eproto();

class BlobShape;
class BlobProto;
class Datum;
class LabelMapItem;
class LabelMap;
class Sampler;
class SampleConstraint;
class BatchSampler;
class EmitConstraint;
class NormalizedBBox;
class BBox3D;
class Annotation;
class AnnotationGroup;
class AnnotatedDatum;
class FillerParameter;
class NetParameter;
class NetState;
class NetStateRule;
class ParamSpec;
class LayerParameter;
class TransformationParameter;
class ResizeParameter;
class SaltPepperParameter;
class NoiseParameter;
class DistortionParameter;
class ExpansionParameter;
class LossParameter;
class AccuracyParameter;
class AnnotatedDataParameter;
class ArgMaxParameter;
class ConcatParameter;
class BatchNormParameter;
class BiasParameter;
class ContrastiveLossParameter;
class ConvolutionParameter;
class CropParameter;
class DataParameter;
class DetectionEvaluateParameter;
class NonMaximumSuppressionParameter;
class SaveOutputParameter;
class DetectionOutputParameter;
class RegionOutputParameter;
class DropoutParameter;
class DummyDataParameter;
class EltwiseParameter;
class ELUParameter;
class EmbedParameter;
class ExpParameter;
class FlattenParameter;
class HDF5DataParameter;
class HDF5OutputParameter;
class HingeLossParameter;
class RepeatedList;
class DatasetParameter;
class ImageDataParameter;
class InfogainLossParameter;
class InnerProductParameter;
class InputParameter;
class LogParameter;
class LRNParameter;
class MemoryDataParameter;
class MultiBoxLossParameter;
class MVNParameter;
class NormalizeParameter;
class ParameterParameter;
class PermuteParameter;
class PoolingParameter;
class PowerParameter;
class PriorBoxParameter;
class PythonParameter;
class RecurrentParameter;
class ReductionParameter;
class ReLUParameter;
class ReshapeParameter;
class ROIPoolingParameter;
class ScaleParameter;
class SigmoidParameter;
class SliceParameter;
class SoftmaxParameter;
class TanHParameter;
class TileParameter;
class ThresholdParameter;
class VideoDataParameter;
class WindowDataParameter;
class SPPParameter;
class V1LayerParameter;
class V0LayerParameter;
class PReLUParameter;
class PaddingParameter;
class YoloLossParameter;
class YoloDumpParameter;
class YoloAnchorsParameter;
class DimensionStatistics;
class YoloTargetParameter;
class RegionProposalParameter;
class RegionParameter;
class AnchorBox;
class ReorgParameter;

enum EmitConstraint_EmitType {
  EmitConstraint_EmitType_CENTER = 0,
  EmitConstraint_EmitType_MIN_OVERLAP = 1
};
bool EmitConstraint_EmitType_IsValid(int value);
const EmitConstraint_EmitType EmitConstraint_EmitType_EmitType_MIN = EmitConstraint_EmitType_CENTER;
const EmitConstraint_EmitType EmitConstraint_EmitType_EmitType_MAX = EmitConstraint_EmitType_MIN_OVERLAP;
const int EmitConstraint_EmitType_EmitType_ARRAYSIZE = EmitConstraint_EmitType_EmitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EmitConstraint_EmitType_descriptor();
inline const ::std::string& EmitConstraint_EmitType_Name(EmitConstraint_EmitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmitConstraint_EmitType_descriptor(), value);
}
inline bool EmitConstraint_EmitType_Parse(
    const ::std::string& name, EmitConstraint_EmitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmitConstraint_EmitType>(
    EmitConstraint_EmitType_descriptor(), name, value);
}
enum AnnotatedDatum_AnnotationType {
  AnnotatedDatum_AnnotationType_BBOX = 0,
  AnnotatedDatum_AnnotationType_BBOX3D = 1,
  AnnotatedDatum_AnnotationType_BBOX3DFR = 2
};
bool AnnotatedDatum_AnnotationType_IsValid(int value);
const AnnotatedDatum_AnnotationType AnnotatedDatum_AnnotationType_AnnotationType_MIN = AnnotatedDatum_AnnotationType_BBOX;
const AnnotatedDatum_AnnotationType AnnotatedDatum_AnnotationType_AnnotationType_MAX = AnnotatedDatum_AnnotationType_BBOX3DFR;
const int AnnotatedDatum_AnnotationType_AnnotationType_ARRAYSIZE = AnnotatedDatum_AnnotationType_AnnotationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AnnotatedDatum_AnnotationType_descriptor();
inline const ::std::string& AnnotatedDatum_AnnotationType_Name(AnnotatedDatum_AnnotationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AnnotatedDatum_AnnotationType_descriptor(), value);
}
inline bool AnnotatedDatum_AnnotationType_Parse(
    const ::std::string& name, AnnotatedDatum_AnnotationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AnnotatedDatum_AnnotationType>(
    AnnotatedDatum_AnnotationType_descriptor(), name, value);
}
enum FillerParameter_VarianceNorm {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2
};
bool FillerParameter_VarianceNorm_IsValid(int value);
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
const int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
inline const ::std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const ::std::string& name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum ParamSpec_DimCheckMode {
  ParamSpec_DimCheckMode_STRICT = 0,
  ParamSpec_DimCheckMode_PERMISSIVE = 1
};
bool ParamSpec_DimCheckMode_IsValid(int value);
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MIN = ParamSpec_DimCheckMode_STRICT;
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MAX = ParamSpec_DimCheckMode_PERMISSIVE;
const int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE = ParamSpec_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor();
inline const ::std::string& ParamSpec_DimCheckMode_Name(ParamSpec_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamSpec_DimCheckMode_descriptor(), value);
}
inline bool ParamSpec_DimCheckMode_Parse(
    const ::std::string& name, ParamSpec_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamSpec_DimCheckMode>(
    ParamSpec_DimCheckMode_descriptor(), name, value);
}
enum ResizeParameter_Resize_mode {
  ResizeParameter_Resize_mode_WARP = 1,
  ResizeParameter_Resize_mode_FIT_SMALL_SIZE = 2,
  ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD = 3
};
bool ResizeParameter_Resize_mode_IsValid(int value);
const ResizeParameter_Resize_mode ResizeParameter_Resize_mode_Resize_mode_MIN = ResizeParameter_Resize_mode_WARP;
const ResizeParameter_Resize_mode ResizeParameter_Resize_mode_Resize_mode_MAX = ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD;
const int ResizeParameter_Resize_mode_Resize_mode_ARRAYSIZE = ResizeParameter_Resize_mode_Resize_mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResizeParameter_Resize_mode_descriptor();
inline const ::std::string& ResizeParameter_Resize_mode_Name(ResizeParameter_Resize_mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResizeParameter_Resize_mode_descriptor(), value);
}
inline bool ResizeParameter_Resize_mode_Parse(
    const ::std::string& name, ResizeParameter_Resize_mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResizeParameter_Resize_mode>(
    ResizeParameter_Resize_mode_descriptor(), name, value);
}
enum ResizeParameter_Pad_mode {
  ResizeParameter_Pad_mode_CONSTANT = 1,
  ResizeParameter_Pad_mode_MIRRORED = 2,
  ResizeParameter_Pad_mode_REPEAT_NEAREST = 3
};
bool ResizeParameter_Pad_mode_IsValid(int value);
const ResizeParameter_Pad_mode ResizeParameter_Pad_mode_Pad_mode_MIN = ResizeParameter_Pad_mode_CONSTANT;
const ResizeParameter_Pad_mode ResizeParameter_Pad_mode_Pad_mode_MAX = ResizeParameter_Pad_mode_REPEAT_NEAREST;
const int ResizeParameter_Pad_mode_Pad_mode_ARRAYSIZE = ResizeParameter_Pad_mode_Pad_mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResizeParameter_Pad_mode_descriptor();
inline const ::std::string& ResizeParameter_Pad_mode_Name(ResizeParameter_Pad_mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResizeParameter_Pad_mode_descriptor(), value);
}
inline bool ResizeParameter_Pad_mode_Parse(
    const ::std::string& name, ResizeParameter_Pad_mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResizeParameter_Pad_mode>(
    ResizeParameter_Pad_mode_descriptor(), name, value);
}
enum ResizeParameter_Interp_mode {
  ResizeParameter_Interp_mode_LINEAR = 1,
  ResizeParameter_Interp_mode_AREA = 2,
  ResizeParameter_Interp_mode_NEAREST = 3,
  ResizeParameter_Interp_mode_CUBIC = 4,
  ResizeParameter_Interp_mode_LANCZOS4 = 5
};
bool ResizeParameter_Interp_mode_IsValid(int value);
const ResizeParameter_Interp_mode ResizeParameter_Interp_mode_Interp_mode_MIN = ResizeParameter_Interp_mode_LINEAR;
const ResizeParameter_Interp_mode ResizeParameter_Interp_mode_Interp_mode_MAX = ResizeParameter_Interp_mode_LANCZOS4;
const int ResizeParameter_Interp_mode_Interp_mode_ARRAYSIZE = ResizeParameter_Interp_mode_Interp_mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResizeParameter_Interp_mode_descriptor();
inline const ::std::string& ResizeParameter_Interp_mode_Name(ResizeParameter_Interp_mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResizeParameter_Interp_mode_descriptor(), value);
}
inline bool ResizeParameter_Interp_mode_Parse(
    const ::std::string& name, ResizeParameter_Interp_mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResizeParameter_Interp_mode>(
    ResizeParameter_Interp_mode_descriptor(), name, value);
}
enum LossParameter_NormalizationMode {
  LossParameter_NormalizationMode_FULL = 0,
  LossParameter_NormalizationMode_VALID = 1,
  LossParameter_NormalizationMode_BATCH_SIZE = 2,
  LossParameter_NormalizationMode_NONE = 3
};
bool LossParameter_NormalizationMode_IsValid(int value);
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MIN = LossParameter_NormalizationMode_FULL;
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MAX = LossParameter_NormalizationMode_NONE;
const int LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE = LossParameter_NormalizationMode_NormalizationMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor();
inline const ::std::string& LossParameter_NormalizationMode_Name(LossParameter_NormalizationMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LossParameter_NormalizationMode_descriptor(), value);
}
inline bool LossParameter_NormalizationMode_Parse(
    const ::std::string& name, LossParameter_NormalizationMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LossParameter_NormalizationMode>(
    LossParameter_NormalizationMode_descriptor(), name, value);
}
enum ConvolutionParameter_Engine {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2
};
bool ConvolutionParameter_Engine_IsValid(int value);
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = ConvolutionParameter_Engine_DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = ConvolutionParameter_Engine_CUDNN;
const int ConvolutionParameter_Engine_Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor();
inline const ::std::string& ConvolutionParameter_Engine_Name(ConvolutionParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionParameter_Engine_descriptor(), value);
}
inline bool ConvolutionParameter_Engine_Parse(
    const ::std::string& name, ConvolutionParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
    ConvolutionParameter_Engine_descriptor(), name, value);
}
enum DataParameter_DB {
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1
};
bool DataParameter_DB_IsValid(int value);
const DataParameter_DB DataParameter_DB_DB_MIN = DataParameter_DB_LEVELDB;
const DataParameter_DB DataParameter_DB_DB_MAX = DataParameter_DB_LMDB;
const int DataParameter_DB_DB_ARRAYSIZE = DataParameter_DB_DB_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor();
inline const ::std::string& DataParameter_DB_Name(DataParameter_DB value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataParameter_DB_descriptor(), value);
}
inline bool DataParameter_DB_Parse(
    const ::std::string& name, DataParameter_DB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataParameter_DB>(
    DataParameter_DB_descriptor(), name, value);
}
enum EltwiseParameter_EltwiseOp {
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2
};
bool EltwiseParameter_EltwiseOp_IsValid(int value);
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MIN = EltwiseParameter_EltwiseOp_PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MAX = EltwiseParameter_EltwiseOp_MAX;
const int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = EltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor();
inline const ::std::string& EltwiseParameter_EltwiseOp_Name(EltwiseParameter_EltwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    EltwiseParameter_EltwiseOp_descriptor(), value);
}
inline bool EltwiseParameter_EltwiseOp_Parse(
    const ::std::string& name, EltwiseParameter_EltwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EltwiseParameter_EltwiseOp>(
    EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum HingeLossParameter_Norm {
  HingeLossParameter_Norm_L1 = 1,
  HingeLossParameter_Norm_L2 = 2
};
bool HingeLossParameter_Norm_IsValid(int value);
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MIN = HingeLossParameter_Norm_L1;
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MAX = HingeLossParameter_Norm_L2;
const int HingeLossParameter_Norm_Norm_ARRAYSIZE = HingeLossParameter_Norm_Norm_MAX + 1;

const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor();
inline const ::std::string& HingeLossParameter_Norm_Name(HingeLossParameter_Norm value) {
  return ::google::protobuf::internal::NameOfEnum(
    HingeLossParameter_Norm_descriptor(), value);
}
inline bool HingeLossParameter_Norm_Parse(
    const ::std::string& name, HingeLossParameter_Norm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HingeLossParameter_Norm>(
    HingeLossParameter_Norm_descriptor(), name, value);
}
enum DatasetParameter_DatasetType {
  DatasetParameter_DatasetType_LIST = 1,
  DatasetParameter_DatasetType_BLOCK = 2
};
bool DatasetParameter_DatasetType_IsValid(int value);
const DatasetParameter_DatasetType DatasetParameter_DatasetType_DatasetType_MIN = DatasetParameter_DatasetType_LIST;
const DatasetParameter_DatasetType DatasetParameter_DatasetType_DatasetType_MAX = DatasetParameter_DatasetType_BLOCK;
const int DatasetParameter_DatasetType_DatasetType_ARRAYSIZE = DatasetParameter_DatasetType_DatasetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DatasetParameter_DatasetType_descriptor();
inline const ::std::string& DatasetParameter_DatasetType_Name(DatasetParameter_DatasetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DatasetParameter_DatasetType_descriptor(), value);
}
inline bool DatasetParameter_DatasetType_Parse(
    const ::std::string& name, DatasetParameter_DatasetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DatasetParameter_DatasetType>(
    DatasetParameter_DatasetType_descriptor(), name, value);
}
enum LRNParameter_NormRegion {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNParameter_NormRegion_IsValid(int value);
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = LRNParameter_NormRegion_ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = LRNParameter_NormRegion_WITHIN_CHANNEL;
const int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor();
inline const ::std::string& LRNParameter_NormRegion_Name(LRNParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_NormRegion_descriptor(), value);
}
inline bool LRNParameter_NormRegion_Parse(
    const ::std::string& name, LRNParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_NormRegion>(
    LRNParameter_NormRegion_descriptor(), name, value);
}
enum LRNParameter_Engine {
  LRNParameter_Engine_DEFAULT = 0,
  LRNParameter_Engine_CAFFE = 1,
  LRNParameter_Engine_CUDNN = 2
};
bool LRNParameter_Engine_IsValid(int value);
const LRNParameter_Engine LRNParameter_Engine_Engine_MIN = LRNParameter_Engine_DEFAULT;
const LRNParameter_Engine LRNParameter_Engine_Engine_MAX = LRNParameter_Engine_CUDNN;
const int LRNParameter_Engine_Engine_ARRAYSIZE = LRNParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor();
inline const ::std::string& LRNParameter_Engine_Name(LRNParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_Engine_descriptor(), value);
}
inline bool LRNParameter_Engine_Parse(
    const ::std::string& name, LRNParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_Engine>(
    LRNParameter_Engine_descriptor(), name, value);
}
enum MultiBoxLossParameter_LocLossType {
  MultiBoxLossParameter_LocLossType_L2 = 0,
  MultiBoxLossParameter_LocLossType_SMOOTH_L1 = 1
};
bool MultiBoxLossParameter_LocLossType_IsValid(int value);
const MultiBoxLossParameter_LocLossType MultiBoxLossParameter_LocLossType_LocLossType_MIN = MultiBoxLossParameter_LocLossType_L2;
const MultiBoxLossParameter_LocLossType MultiBoxLossParameter_LocLossType_LocLossType_MAX = MultiBoxLossParameter_LocLossType_SMOOTH_L1;
const int MultiBoxLossParameter_LocLossType_LocLossType_ARRAYSIZE = MultiBoxLossParameter_LocLossType_LocLossType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MultiBoxLossParameter_LocLossType_descriptor();
inline const ::std::string& MultiBoxLossParameter_LocLossType_Name(MultiBoxLossParameter_LocLossType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MultiBoxLossParameter_LocLossType_descriptor(), value);
}
inline bool MultiBoxLossParameter_LocLossType_Parse(
    const ::std::string& name, MultiBoxLossParameter_LocLossType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MultiBoxLossParameter_LocLossType>(
    MultiBoxLossParameter_LocLossType_descriptor(), name, value);
}
enum MultiBoxLossParameter_ConfLossType {
  MultiBoxLossParameter_ConfLossType_SOFTMAX = 0,
  MultiBoxLossParameter_ConfLossType_LOGISTIC = 1
};
bool MultiBoxLossParameter_ConfLossType_IsValid(int value);
const MultiBoxLossParameter_ConfLossType MultiBoxLossParameter_ConfLossType_ConfLossType_MIN = MultiBoxLossParameter_ConfLossType_SOFTMAX;
const MultiBoxLossParameter_ConfLossType MultiBoxLossParameter_ConfLossType_ConfLossType_MAX = MultiBoxLossParameter_ConfLossType_LOGISTIC;
const int MultiBoxLossParameter_ConfLossType_ConfLossType_ARRAYSIZE = MultiBoxLossParameter_ConfLossType_ConfLossType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MultiBoxLossParameter_ConfLossType_descriptor();
inline const ::std::string& MultiBoxLossParameter_ConfLossType_Name(MultiBoxLossParameter_ConfLossType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MultiBoxLossParameter_ConfLossType_descriptor(), value);
}
inline bool MultiBoxLossParameter_ConfLossType_Parse(
    const ::std::string& name, MultiBoxLossParameter_ConfLossType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MultiBoxLossParameter_ConfLossType>(
    MultiBoxLossParameter_ConfLossType_descriptor(), name, value);
}
enum MultiBoxLossParameter_MatchType {
  MultiBoxLossParameter_MatchType_BIPARTITE = 0,
  MultiBoxLossParameter_MatchType_PER_PREDICTION = 1
};
bool MultiBoxLossParameter_MatchType_IsValid(int value);
const MultiBoxLossParameter_MatchType MultiBoxLossParameter_MatchType_MatchType_MIN = MultiBoxLossParameter_MatchType_BIPARTITE;
const MultiBoxLossParameter_MatchType MultiBoxLossParameter_MatchType_MatchType_MAX = MultiBoxLossParameter_MatchType_PER_PREDICTION;
const int MultiBoxLossParameter_MatchType_MatchType_ARRAYSIZE = MultiBoxLossParameter_MatchType_MatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MultiBoxLossParameter_MatchType_descriptor();
inline const ::std::string& MultiBoxLossParameter_MatchType_Name(MultiBoxLossParameter_MatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MultiBoxLossParameter_MatchType_descriptor(), value);
}
inline bool MultiBoxLossParameter_MatchType_Parse(
    const ::std::string& name, MultiBoxLossParameter_MatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MultiBoxLossParameter_MatchType>(
    MultiBoxLossParameter_MatchType_descriptor(), name, value);
}
enum MultiBoxLossParameter_MiningType {
  MultiBoxLossParameter_MiningType_NONE = 0,
  MultiBoxLossParameter_MiningType_MAX_NEGATIVE = 1,
  MultiBoxLossParameter_MiningType_HARD_EXAMPLE = 2
};
bool MultiBoxLossParameter_MiningType_IsValid(int value);
const MultiBoxLossParameter_MiningType MultiBoxLossParameter_MiningType_MiningType_MIN = MultiBoxLossParameter_MiningType_NONE;
const MultiBoxLossParameter_MiningType MultiBoxLossParameter_MiningType_MiningType_MAX = MultiBoxLossParameter_MiningType_HARD_EXAMPLE;
const int MultiBoxLossParameter_MiningType_MiningType_ARRAYSIZE = MultiBoxLossParameter_MiningType_MiningType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MultiBoxLossParameter_MiningType_descriptor();
inline const ::std::string& MultiBoxLossParameter_MiningType_Name(MultiBoxLossParameter_MiningType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MultiBoxLossParameter_MiningType_descriptor(), value);
}
inline bool MultiBoxLossParameter_MiningType_Parse(
    const ::std::string& name, MultiBoxLossParameter_MiningType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MultiBoxLossParameter_MiningType>(
    MultiBoxLossParameter_MiningType_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2
};
bool PoolingParameter_PoolMethod_IsValid(int value);
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_STOCHASTIC;
const int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
inline const ::std::string& PoolingParameter_PoolMethod_Name(PoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    const ::std::string& name, PoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2
};
bool PoolingParameter_Engine_IsValid(int value);
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
const int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor();
inline const ::std::string& PoolingParameter_Engine_Name(PoolingParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), value);
}
inline bool PoolingParameter_Engine_Parse(
    const ::std::string& name, PoolingParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum PriorBoxParameter_CodeType {
  PriorBoxParameter_CodeType_CORNER = 1,
  PriorBoxParameter_CodeType_CENTER_SIZE = 2,
  PriorBoxParameter_CodeType_CORNER_SIZE = 3
};
bool PriorBoxParameter_CodeType_IsValid(int value);
const PriorBoxParameter_CodeType PriorBoxParameter_CodeType_CodeType_MIN = PriorBoxParameter_CodeType_CORNER;
const PriorBoxParameter_CodeType PriorBoxParameter_CodeType_CodeType_MAX = PriorBoxParameter_CodeType_CORNER_SIZE;
const int PriorBoxParameter_CodeType_CodeType_ARRAYSIZE = PriorBoxParameter_CodeType_CodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PriorBoxParameter_CodeType_descriptor();
inline const ::std::string& PriorBoxParameter_CodeType_Name(PriorBoxParameter_CodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PriorBoxParameter_CodeType_descriptor(), value);
}
inline bool PriorBoxParameter_CodeType_Parse(
    const ::std::string& name, PriorBoxParameter_CodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PriorBoxParameter_CodeType>(
    PriorBoxParameter_CodeType_descriptor(), name, value);
}
enum ReductionParameter_ReductionOp {
  ReductionParameter_ReductionOp_SUM = 1,
  ReductionParameter_ReductionOp_ASUM = 2,
  ReductionParameter_ReductionOp_SUMSQ = 3,
  ReductionParameter_ReductionOp_MEAN = 4
};
bool ReductionParameter_ReductionOp_IsValid(int value);
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MIN = ReductionParameter_ReductionOp_SUM;
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MAX = ReductionParameter_ReductionOp_MEAN;
const int ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE = ReductionParameter_ReductionOp_ReductionOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor();
inline const ::std::string& ReductionParameter_ReductionOp_Name(ReductionParameter_ReductionOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReductionParameter_ReductionOp_descriptor(), value);
}
inline bool ReductionParameter_ReductionOp_Parse(
    const ::std::string& name, ReductionParameter_ReductionOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReductionParameter_ReductionOp>(
    ReductionParameter_ReductionOp_descriptor(), name, value);
}
enum ReLUParameter_Engine {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2
};
bool ReLUParameter_Engine_IsValid(int value);
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = ReLUParameter_Engine_DEFAULT;
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = ReLUParameter_Engine_CUDNN;
const int ReLUParameter_Engine_Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor();
inline const ::std::string& ReLUParameter_Engine_Name(ReLUParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReLUParameter_Engine_descriptor(), value);
}
inline bool ReLUParameter_Engine_Parse(
    const ::std::string& name, ReLUParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReLUParameter_Engine>(
    ReLUParameter_Engine_descriptor(), name, value);
}
enum SigmoidParameter_Engine {
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2
};
bool SigmoidParameter_Engine_IsValid(int value);
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MIN = SigmoidParameter_Engine_DEFAULT;
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MAX = SigmoidParameter_Engine_CUDNN;
const int SigmoidParameter_Engine_Engine_ARRAYSIZE = SigmoidParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor();
inline const ::std::string& SigmoidParameter_Engine_Name(SigmoidParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SigmoidParameter_Engine_descriptor(), value);
}
inline bool SigmoidParameter_Engine_Parse(
    const ::std::string& name, SigmoidParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigmoidParameter_Engine>(
    SigmoidParameter_Engine_descriptor(), name, value);
}
enum SoftmaxParameter_Engine {
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_CAFFE = 1,
  SoftmaxParameter_Engine_CUDNN = 2
};
bool SoftmaxParameter_Engine_IsValid(int value);
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MIN = SoftmaxParameter_Engine_DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MAX = SoftmaxParameter_Engine_CUDNN;
const int SoftmaxParameter_Engine_Engine_ARRAYSIZE = SoftmaxParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor();
inline const ::std::string& SoftmaxParameter_Engine_Name(SoftmaxParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftmaxParameter_Engine_descriptor(), value);
}
inline bool SoftmaxParameter_Engine_Parse(
    const ::std::string& name, SoftmaxParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftmaxParameter_Engine>(
    SoftmaxParameter_Engine_descriptor(), name, value);
}
enum TanHParameter_Engine {
  TanHParameter_Engine_DEFAULT = 0,
  TanHParameter_Engine_CAFFE = 1,
  TanHParameter_Engine_CUDNN = 2
};
bool TanHParameter_Engine_IsValid(int value);
const TanHParameter_Engine TanHParameter_Engine_Engine_MIN = TanHParameter_Engine_DEFAULT;
const TanHParameter_Engine TanHParameter_Engine_Engine_MAX = TanHParameter_Engine_CUDNN;
const int TanHParameter_Engine_Engine_ARRAYSIZE = TanHParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor();
inline const ::std::string& TanHParameter_Engine_Name(TanHParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    TanHParameter_Engine_descriptor(), value);
}
inline bool TanHParameter_Engine_Parse(
    const ::std::string& name, TanHParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TanHParameter_Engine>(
    TanHParameter_Engine_descriptor(), name, value);
}
enum VideoDataParameter_VideoType {
  VideoDataParameter_VideoType_WEBCAM = 0,
  VideoDataParameter_VideoType_VIDEO = 1
};
bool VideoDataParameter_VideoType_IsValid(int value);
const VideoDataParameter_VideoType VideoDataParameter_VideoType_VideoType_MIN = VideoDataParameter_VideoType_WEBCAM;
const VideoDataParameter_VideoType VideoDataParameter_VideoType_VideoType_MAX = VideoDataParameter_VideoType_VIDEO;
const int VideoDataParameter_VideoType_VideoType_ARRAYSIZE = VideoDataParameter_VideoType_VideoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoDataParameter_VideoType_descriptor();
inline const ::std::string& VideoDataParameter_VideoType_Name(VideoDataParameter_VideoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoDataParameter_VideoType_descriptor(), value);
}
inline bool VideoDataParameter_VideoType_Parse(
    const ::std::string& name, VideoDataParameter_VideoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoDataParameter_VideoType>(
    VideoDataParameter_VideoType_descriptor(), name, value);
}
enum SPPParameter_PoolMethod {
  SPPParameter_PoolMethod_MAX = 0,
  SPPParameter_PoolMethod_AVE = 1,
  SPPParameter_PoolMethod_STOCHASTIC = 2
};
bool SPPParameter_PoolMethod_IsValid(int value);
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MIN = SPPParameter_PoolMethod_MAX;
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MAX = SPPParameter_PoolMethod_STOCHASTIC;
const int SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE = SPPParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor();
inline const ::std::string& SPPParameter_PoolMethod_Name(SPPParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_PoolMethod_descriptor(), value);
}
inline bool SPPParameter_PoolMethod_Parse(
    const ::std::string& name, SPPParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_PoolMethod>(
    SPPParameter_PoolMethod_descriptor(), name, value);
}
enum SPPParameter_Engine {
  SPPParameter_Engine_DEFAULT = 0,
  SPPParameter_Engine_CAFFE = 1,
  SPPParameter_Engine_CUDNN = 2
};
bool SPPParameter_Engine_IsValid(int value);
const SPPParameter_Engine SPPParameter_Engine_Engine_MIN = SPPParameter_Engine_DEFAULT;
const SPPParameter_Engine SPPParameter_Engine_Engine_MAX = SPPParameter_Engine_CUDNN;
const int SPPParameter_Engine_Engine_ARRAYSIZE = SPPParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor();
inline const ::std::string& SPPParameter_Engine_Name(SPPParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_Engine_descriptor(), value);
}
inline bool SPPParameter_Engine_Parse(
    const ::std::string& name, SPPParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_Engine>(
    SPPParameter_Engine_descriptor(), name, value);
}
enum V1LayerParameter_LayerType {
  V1LayerParameter_LayerType_NONE = 0,
  V1LayerParameter_LayerType_ABSVAL = 35,
  V1LayerParameter_LayerType_ACCURACY = 1,
  V1LayerParameter_LayerType_ARGMAX = 30,
  V1LayerParameter_LayerType_BNLL = 2,
  V1LayerParameter_LayerType_CONCAT = 3,
  V1LayerParameter_LayerType_CONTRASTIVE_LOSS = 37,
  V1LayerParameter_LayerType_CONVOLUTION = 4,
  V1LayerParameter_LayerType_DATA = 5,
  V1LayerParameter_LayerType_DECONVOLUTION = 39,
  V1LayerParameter_LayerType_DROPOUT = 6,
  V1LayerParameter_LayerType_DUMMY_DATA = 32,
  V1LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  V1LayerParameter_LayerType_ELTWISE = 25,
  V1LayerParameter_LayerType_EXP = 38,
  V1LayerParameter_LayerType_FLATTEN = 8,
  V1LayerParameter_LayerType_HDF5_DATA = 9,
  V1LayerParameter_LayerType_HDF5_OUTPUT = 10,
  V1LayerParameter_LayerType_HINGE_LOSS = 28,
  V1LayerParameter_LayerType_IM2COL = 11,
  V1LayerParameter_LayerType_IMAGE_DATA = 12,
  V1LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  V1LayerParameter_LayerType_INNER_PRODUCT = 14,
  V1LayerParameter_LayerType_LRN = 15,
  V1LayerParameter_LayerType_MEMORY_DATA = 29,
  V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  V1LayerParameter_LayerType_MVN = 34,
  V1LayerParameter_LayerType_POOLING = 17,
  V1LayerParameter_LayerType_POWER = 26,
  V1LayerParameter_LayerType_RELU = 18,
  V1LayerParameter_LayerType_SIGMOID = 19,
  V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  V1LayerParameter_LayerType_SILENCE = 36,
  V1LayerParameter_LayerType_SOFTMAX = 20,
  V1LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  V1LayerParameter_LayerType_SPLIT = 22,
  V1LayerParameter_LayerType_SLICE = 33,
  V1LayerParameter_LayerType_TANH = 23,
  V1LayerParameter_LayerType_WINDOW_DATA = 24,
  V1LayerParameter_LayerType_THRESHOLD = 31
};
bool V1LayerParameter_LayerType_IsValid(int value);
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MIN = V1LayerParameter_LayerType_NONE;
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MAX = V1LayerParameter_LayerType_DECONVOLUTION;
const int V1LayerParameter_LayerType_LayerType_ARRAYSIZE = V1LayerParameter_LayerType_LayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor();
inline const ::std::string& V1LayerParameter_LayerType_Name(V1LayerParameter_LayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_LayerType_descriptor(), value);
}
inline bool V1LayerParameter_LayerType_Parse(
    const ::std::string& name, V1LayerParameter_LayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_LayerType>(
    V1LayerParameter_LayerType_descriptor(), name, value);
}
enum V1LayerParameter_DimCheckMode {
  V1LayerParameter_DimCheckMode_STRICT = 0,
  V1LayerParameter_DimCheckMode_PERMISSIVE = 1
};
bool V1LayerParameter_DimCheckMode_IsValid(int value);
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MIN = V1LayerParameter_DimCheckMode_STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MAX = V1LayerParameter_DimCheckMode_PERMISSIVE;
const int V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE = V1LayerParameter_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor();
inline const ::std::string& V1LayerParameter_DimCheckMode_Name(V1LayerParameter_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_DimCheckMode_descriptor(), value);
}
inline bool V1LayerParameter_DimCheckMode_Parse(
    const ::std::string& name, V1LayerParameter_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_DimCheckMode>(
    V1LayerParameter_DimCheckMode_descriptor(), name, value);
}
enum V0LayerParameter_PoolMethod {
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2
};
bool V0LayerParameter_PoolMethod_IsValid(int value);
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MIN = V0LayerParameter_PoolMethod_MAX;
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MAX = V0LayerParameter_PoolMethod_STOCHASTIC;
const int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE = V0LayerParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor();
inline const ::std::string& V0LayerParameter_PoolMethod_Name(V0LayerParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    V0LayerParameter_PoolMethod_descriptor(), value);
}
inline bool V0LayerParameter_PoolMethod_Parse(
    const ::std::string& name, V0LayerParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V0LayerParameter_PoolMethod>(
    V0LayerParameter_PoolMethod_descriptor(), name, value);
}
enum YoloLossParameter_RegLossType {
  YoloLossParameter_RegLossType_L2 = 0,
  YoloLossParameter_RegLossType_L1 = 1,
  YoloLossParameter_RegLossType_SMOOTH_L1 = 2
};
bool YoloLossParameter_RegLossType_IsValid(int value);
const YoloLossParameter_RegLossType YoloLossParameter_RegLossType_RegLossType_MIN = YoloLossParameter_RegLossType_L2;
const YoloLossParameter_RegLossType YoloLossParameter_RegLossType_RegLossType_MAX = YoloLossParameter_RegLossType_SMOOTH_L1;
const int YoloLossParameter_RegLossType_RegLossType_ARRAYSIZE = YoloLossParameter_RegLossType_RegLossType_MAX + 1;

const ::google::protobuf::EnumDescriptor* YoloLossParameter_RegLossType_descriptor();
inline const ::std::string& YoloLossParameter_RegLossType_Name(YoloLossParameter_RegLossType value) {
  return ::google::protobuf::internal::NameOfEnum(
    YoloLossParameter_RegLossType_descriptor(), value);
}
inline bool YoloLossParameter_RegLossType_Parse(
    const ::std::string& name, YoloLossParameter_RegLossType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YoloLossParameter_RegLossType>(
    YoloLossParameter_RegLossType_descriptor(), name, value);
}
enum Phase {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = TRAIN;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class BlobShape : public ::google::protobuf::Message {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShape& default_instance();

  void Swap(BlobShape* other);

  // implements Message ----------------------------------------------

  BlobShape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  inline int dim_size() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 1;
  inline ::google::protobuf::int64 dim(int index) const;
  inline void set_dim(int index, ::google::protobuf::int64 value);
  inline void add_dim(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.BlobShape)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static BlobShape* default_instance_;
};
// -------------------------------------------------------------------

class BlobProto : public ::google::protobuf::Message {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  void Swap(BlobProto* other);

  // implements Message ----------------------------------------------

  BlobProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.BlobShape shape = 7;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 7;
  inline const ::apollo::perception::inference::BlobShape& shape() const;
  inline ::apollo::perception::inference::BlobShape* mutable_shape();
  inline ::apollo::perception::inference::BlobShape* release_shape();
  inline void set_allocated_shape(::apollo::perception::inference::BlobShape* shape);

  // repeated float data = 5 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  inline int diff_size() const;
  inline void clear_diff();
  static const int kDiffFieldNumber = 6;
  inline float diff(int index) const;
  inline void set_diff(int index, float value);
  inline void add_diff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      diff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 8 [packed = true];
  inline int double_data_size() const;
  inline void clear_double_data();
  static const int kDoubleDataFieldNumber = 8;
  inline double double_data(int index) const;
  inline void set_double_data(int index, double value);
  inline void add_double_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 9 [packed = true];
  inline int double_diff_size() const;
  inline void clear_double_diff();
  static const int kDoubleDiffFieldNumber = 9;
  inline double double_diff(int index) const;
  inline void set_double_diff(int index, double value);
  inline void add_double_diff(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_diff() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_diff();

  // optional int32 num = 1 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.BlobProto)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::inference::BlobShape* shape_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_diff_;
  mutable int _double_diff_cached_byte_size_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static BlobProto* default_instance_;
};
// -------------------------------------------------------------------

class Datum : public ::google::protobuf::Message {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  void Swap(Datum* other);

  // implements Message ----------------------------------------------

  Datum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channels = 1;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 1;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int32 label = 5;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 5;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // repeated float float_data = 6;
  inline int float_data_size() const;
  inline void clear_float_data();
  static const int kFloatDataFieldNumber = 6;
  inline float float_data(int index) const;
  inline void set_float_data(int index, float value);
  inline void add_float_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bool encoded = 7 [default = false];
  inline bool has_encoded() const;
  inline void clear_encoded();
  static const int kEncodedFieldNumber = 7;
  inline bool encoded() const;
  inline void set_encoded(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.Datum)
 private:
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_encoded();
  inline void clear_has_encoded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::std::string* data_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 label_;
  ::google::protobuf::RepeatedField< float > float_data_;
  bool encoded_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static Datum* default_instance_;
};
// -------------------------------------------------------------------

class LabelMapItem : public ::google::protobuf::Message {
 public:
  LabelMapItem();
  virtual ~LabelMapItem();

  LabelMapItem(const LabelMapItem& from);

  inline LabelMapItem& operator=(const LabelMapItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelMapItem& default_instance();

  void Swap(LabelMapItem* other);

  // implements Message ----------------------------------------------

  LabelMapItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelMapItem& from);
  void MergeFrom(const LabelMapItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // optional string display_name = 3;
  inline bool has_display_name() const;
  inline void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  inline const ::std::string& display_name() const;
  inline void set_display_name(const ::std::string& value);
  inline void set_display_name(const char* value);
  inline void set_display_name(const char* value, size_t size);
  inline ::std::string* mutable_display_name();
  inline ::std::string* release_display_name();
  inline void set_allocated_display_name(::std::string* display_name);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.LabelMapItem)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_display_name();
  inline void clear_has_display_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* display_name_;
  ::google::protobuf::int32 label_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static LabelMapItem* default_instance_;
};
// -------------------------------------------------------------------

class LabelMap : public ::google::protobuf::Message {
 public:
  LabelMap();
  virtual ~LabelMap();

  LabelMap(const LabelMap& from);

  inline LabelMap& operator=(const LabelMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelMap& default_instance();

  void Swap(LabelMap* other);

  // implements Message ----------------------------------------------

  LabelMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelMap& from);
  void MergeFrom(const LabelMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.inference.LabelMapItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::apollo::perception::inference::LabelMapItem& item(int index) const;
  inline ::apollo::perception::inference::LabelMapItem* mutable_item(int index);
  inline ::apollo::perception::inference::LabelMapItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::LabelMapItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::LabelMapItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.LabelMap)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::LabelMapItem > item_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static LabelMap* default_instance_;
};
// -------------------------------------------------------------------

class Sampler : public ::google::protobuf::Message {
 public:
  Sampler();
  virtual ~Sampler();

  Sampler(const Sampler& from);

  inline Sampler& operator=(const Sampler& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sampler& default_instance();

  void Swap(Sampler* other);

  // implements Message ----------------------------------------------

  Sampler* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sampler& from);
  void MergeFrom(const Sampler& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min_scale = 1 [default = 1];
  inline bool has_min_scale() const;
  inline void clear_min_scale();
  static const int kMinScaleFieldNumber = 1;
  inline float min_scale() const;
  inline void set_min_scale(float value);

  // optional float max_scale = 2 [default = 1];
  inline bool has_max_scale() const;
  inline void clear_max_scale();
  static const int kMaxScaleFieldNumber = 2;
  inline float max_scale() const;
  inline void set_max_scale(float value);

  // optional float min_aspect_ratio = 3 [default = 1];
  inline bool has_min_aspect_ratio() const;
  inline void clear_min_aspect_ratio();
  static const int kMinAspectRatioFieldNumber = 3;
  inline float min_aspect_ratio() const;
  inline void set_min_aspect_ratio(float value);

  // optional float max_aspect_ratio = 4 [default = 1];
  inline bool has_max_aspect_ratio() const;
  inline void clear_max_aspect_ratio();
  static const int kMaxAspectRatioFieldNumber = 4;
  inline float max_aspect_ratio() const;
  inline void set_max_aspect_ratio(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.Sampler)
 private:
  inline void set_has_min_scale();
  inline void clear_has_min_scale();
  inline void set_has_max_scale();
  inline void clear_has_max_scale();
  inline void set_has_min_aspect_ratio();
  inline void clear_has_min_aspect_ratio();
  inline void set_has_max_aspect_ratio();
  inline void clear_has_max_aspect_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float min_scale_;
  float max_scale_;
  float min_aspect_ratio_;
  float max_aspect_ratio_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static Sampler* default_instance_;
};
// -------------------------------------------------------------------

class SampleConstraint : public ::google::protobuf::Message {
 public:
  SampleConstraint();
  virtual ~SampleConstraint();

  SampleConstraint(const SampleConstraint& from);

  inline SampleConstraint& operator=(const SampleConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleConstraint& default_instance();

  void Swap(SampleConstraint* other);

  // implements Message ----------------------------------------------

  SampleConstraint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleConstraint& from);
  void MergeFrom(const SampleConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min_jaccard_overlap = 1;
  inline bool has_min_jaccard_overlap() const;
  inline void clear_min_jaccard_overlap();
  static const int kMinJaccardOverlapFieldNumber = 1;
  inline float min_jaccard_overlap() const;
  inline void set_min_jaccard_overlap(float value);

  // optional float max_jaccard_overlap = 2;
  inline bool has_max_jaccard_overlap() const;
  inline void clear_max_jaccard_overlap();
  static const int kMaxJaccardOverlapFieldNumber = 2;
  inline float max_jaccard_overlap() const;
  inline void set_max_jaccard_overlap(float value);

  // optional float min_sample_coverage = 3;
  inline bool has_min_sample_coverage() const;
  inline void clear_min_sample_coverage();
  static const int kMinSampleCoverageFieldNumber = 3;
  inline float min_sample_coverage() const;
  inline void set_min_sample_coverage(float value);

  // optional float max_sample_coverage = 4;
  inline bool has_max_sample_coverage() const;
  inline void clear_max_sample_coverage();
  static const int kMaxSampleCoverageFieldNumber = 4;
  inline float max_sample_coverage() const;
  inline void set_max_sample_coverage(float value);

  // optional float min_object_coverage = 5;
  inline bool has_min_object_coverage() const;
  inline void clear_min_object_coverage();
  static const int kMinObjectCoverageFieldNumber = 5;
  inline float min_object_coverage() const;
  inline void set_min_object_coverage(float value);

  // optional float max_object_coverage = 6;
  inline bool has_max_object_coverage() const;
  inline void clear_max_object_coverage();
  static const int kMaxObjectCoverageFieldNumber = 6;
  inline float max_object_coverage() const;
  inline void set_max_object_coverage(float value);

  // repeated int32 balance_type = 7;
  inline int balance_type_size() const;
  inline void clear_balance_type();
  static const int kBalanceTypeFieldNumber = 7;
  inline ::google::protobuf::int32 balance_type(int index) const;
  inline void set_balance_type(int index, ::google::protobuf::int32 value);
  inline void add_balance_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      balance_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_balance_type();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SampleConstraint)
 private:
  inline void set_has_min_jaccard_overlap();
  inline void clear_has_min_jaccard_overlap();
  inline void set_has_max_jaccard_overlap();
  inline void clear_has_max_jaccard_overlap();
  inline void set_has_min_sample_coverage();
  inline void clear_has_min_sample_coverage();
  inline void set_has_max_sample_coverage();
  inline void clear_has_max_sample_coverage();
  inline void set_has_min_object_coverage();
  inline void clear_has_min_object_coverage();
  inline void set_has_max_object_coverage();
  inline void clear_has_max_object_coverage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float min_jaccard_overlap_;
  float max_jaccard_overlap_;
  float min_sample_coverage_;
  float max_sample_coverage_;
  float min_object_coverage_;
  float max_object_coverage_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > balance_type_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static SampleConstraint* default_instance_;
};
// -------------------------------------------------------------------

class BatchSampler : public ::google::protobuf::Message {
 public:
  BatchSampler();
  virtual ~BatchSampler();

  BatchSampler(const BatchSampler& from);

  inline BatchSampler& operator=(const BatchSampler& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchSampler& default_instance();

  void Swap(BatchSampler* other);

  // implements Message ----------------------------------------------

  BatchSampler* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchSampler& from);
  void MergeFrom(const BatchSampler& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_original_image = 1 [default = true];
  inline bool has_use_original_image() const;
  inline void clear_use_original_image();
  static const int kUseOriginalImageFieldNumber = 1;
  inline bool use_original_image() const;
  inline void set_use_original_image(bool value);

  // optional .apollo.perception.inference.Sampler sampler = 2;
  inline bool has_sampler() const;
  inline void clear_sampler();
  static const int kSamplerFieldNumber = 2;
  inline const ::apollo::perception::inference::Sampler& sampler() const;
  inline ::apollo::perception::inference::Sampler* mutable_sampler();
  inline ::apollo::perception::inference::Sampler* release_sampler();
  inline void set_allocated_sampler(::apollo::perception::inference::Sampler* sampler);

  // optional .apollo.perception.inference.SampleConstraint sample_constraint = 3;
  inline bool has_sample_constraint() const;
  inline void clear_sample_constraint();
  static const int kSampleConstraintFieldNumber = 3;
  inline const ::apollo::perception::inference::SampleConstraint& sample_constraint() const;
  inline ::apollo::perception::inference::SampleConstraint* mutable_sample_constraint();
  inline ::apollo::perception::inference::SampleConstraint* release_sample_constraint();
  inline void set_allocated_sample_constraint(::apollo::perception::inference::SampleConstraint* sample_constraint);

  // optional uint32 max_sample = 4;
  inline bool has_max_sample() const;
  inline void clear_max_sample();
  static const int kMaxSampleFieldNumber = 4;
  inline ::google::protobuf::uint32 max_sample() const;
  inline void set_max_sample(::google::protobuf::uint32 value);

  // optional uint32 max_trials = 5 [default = 100];
  inline bool has_max_trials() const;
  inline void clear_max_trials();
  static const int kMaxTrialsFieldNumber = 5;
  inline ::google::protobuf::uint32 max_trials() const;
  inline void set_max_trials(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.BatchSampler)
 private:
  inline void set_has_use_original_image();
  inline void clear_has_use_original_image();
  inline void set_has_sampler();
  inline void clear_has_sampler();
  inline void set_has_sample_constraint();
  inline void clear_has_sample_constraint();
  inline void set_has_max_sample();
  inline void clear_has_max_sample();
  inline void set_has_max_trials();
  inline void clear_has_max_trials();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::inference::Sampler* sampler_;
  bool use_original_image_;
  ::google::protobuf::uint32 max_sample_;
  ::apollo::perception::inference::SampleConstraint* sample_constraint_;
  ::google::protobuf::uint32 max_trials_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static BatchSampler* default_instance_;
};
// -------------------------------------------------------------------

class EmitConstraint : public ::google::protobuf::Message {
 public:
  EmitConstraint();
  virtual ~EmitConstraint();

  EmitConstraint(const EmitConstraint& from);

  inline EmitConstraint& operator=(const EmitConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmitConstraint& default_instance();

  void Swap(EmitConstraint* other);

  // implements Message ----------------------------------------------

  EmitConstraint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmitConstraint& from);
  void MergeFrom(const EmitConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EmitConstraint_EmitType EmitType;
  static const EmitType CENTER = EmitConstraint_EmitType_CENTER;
  static const EmitType MIN_OVERLAP = EmitConstraint_EmitType_MIN_OVERLAP;
  static inline bool EmitType_IsValid(int value) {
    return EmitConstraint_EmitType_IsValid(value);
  }
  static const EmitType EmitType_MIN =
    EmitConstraint_EmitType_EmitType_MIN;
  static const EmitType EmitType_MAX =
    EmitConstraint_EmitType_EmitType_MAX;
  static const int EmitType_ARRAYSIZE =
    EmitConstraint_EmitType_EmitType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EmitType_descriptor() {
    return EmitConstraint_EmitType_descriptor();
  }
  static inline const ::std::string& EmitType_Name(EmitType value) {
    return EmitConstraint_EmitType_Name(value);
  }
  static inline bool EmitType_Parse(const ::std::string& name,
      EmitType* value) {
    return EmitConstraint_EmitType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
  inline bool has_emit_type() const;
  inline void clear_emit_type();
  static const int kEmitTypeFieldNumber = 1;
  inline ::apollo::perception::inference::EmitConstraint_EmitType emit_type() const;
  inline void set_emit_type(::apollo::perception::inference::EmitConstraint_EmitType value);

  // optional float emit_overlap = 2;
  inline bool has_emit_overlap() const;
  inline void clear_emit_overlap();
  static const int kEmitOverlapFieldNumber = 2;
  inline float emit_overlap() const;
  inline void set_emit_overlap(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.EmitConstraint)
 private:
  inline void set_has_emit_type();
  inline void clear_has_emit_type();
  inline void set_has_emit_overlap();
  inline void clear_has_emit_overlap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int emit_type_;
  float emit_overlap_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static EmitConstraint* default_instance_;
};
// -------------------------------------------------------------------

class NormalizedBBox : public ::google::protobuf::Message {
 public:
  NormalizedBBox();
  virtual ~NormalizedBBox();

  NormalizedBBox(const NormalizedBBox& from);

  inline NormalizedBBox& operator=(const NormalizedBBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalizedBBox& default_instance();

  void Swap(NormalizedBBox* other);

  // implements Message ----------------------------------------------

  NormalizedBBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalizedBBox& from);
  void MergeFrom(const NormalizedBBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float xmin = 1;
  inline bool has_xmin() const;
  inline void clear_xmin();
  static const int kXminFieldNumber = 1;
  inline float xmin() const;
  inline void set_xmin(float value);

  // optional float ymin = 2;
  inline bool has_ymin() const;
  inline void clear_ymin();
  static const int kYminFieldNumber = 2;
  inline float ymin() const;
  inline void set_ymin(float value);

  // optional float xmax = 3;
  inline bool has_xmax() const;
  inline void clear_xmax();
  static const int kXmaxFieldNumber = 3;
  inline float xmax() const;
  inline void set_xmax(float value);

  // optional float ymax = 4;
  inline bool has_ymax() const;
  inline void clear_ymax();
  static const int kYmaxFieldNumber = 4;
  inline float ymax() const;
  inline void set_ymax(float value);

  // optional int32 label = 5;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 5;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // optional bool difficult = 6;
  inline bool has_difficult() const;
  inline void clear_difficult();
  static const int kDifficultFieldNumber = 6;
  inline bool difficult() const;
  inline void set_difficult(bool value);

  // optional float score = 7;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 7;
  inline float score() const;
  inline void set_score(float value);

  // optional float size = 8;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 8;
  inline float size() const;
  inline void set_size(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NormalizedBBox)
 private:
  inline void set_has_xmin();
  inline void clear_has_xmin();
  inline void set_has_ymin();
  inline void clear_has_ymin();
  inline void set_has_xmax();
  inline void clear_has_xmax();
  inline void set_has_ymax();
  inline void clear_has_ymax();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_difficult();
  inline void clear_has_difficult();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float xmin_;
  float ymin_;
  float xmax_;
  float ymax_;
  ::google::protobuf::int32 label_;
  bool difficult_;
  float score_;
  float size_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static NormalizedBBox* default_instance_;
};
// -------------------------------------------------------------------

class BBox3D : public ::google::protobuf::Message {
 public:
  BBox3D();
  virtual ~BBox3D();

  BBox3D(const BBox3D& from);

  inline BBox3D& operator=(const BBox3D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BBox3D& default_instance();

  void Swap(BBox3D* other);

  // implements Message ----------------------------------------------

  BBox3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BBox3D& from);
  void MergeFrom(const BBox3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float h = 1 [default = 0];
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 1;
  inline float h() const;
  inline void set_h(float value);

  // optional float w = 2 [default = 0];
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 2;
  inline float w() const;
  inline void set_w(float value);

  // optional float l = 3 [default = 0];
  inline bool has_l() const;
  inline void clear_l();
  static const int kLFieldNumber = 3;
  inline float l() const;
  inline void set_l(float value);

  // optional float x = 4 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 5 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 6 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 6;
  inline float z() const;
  inline void set_z(float value);

  // optional float alpha = 7 [default = 0];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 7;
  inline float alpha() const;
  inline void set_alpha(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.BBox3D)
 private:
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_l();
  inline void clear_has_l();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_alpha();
  inline void clear_has_alpha();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float h_;
  float w_;
  float l_;
  float x_;
  float y_;
  float z_;
  float alpha_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static BBox3D* default_instance_;
};
// -------------------------------------------------------------------

class Annotation : public ::google::protobuf::Message {
 public:
  Annotation();
  virtual ~Annotation();

  Annotation(const Annotation& from);

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotation& default_instance();

  void Swap(Annotation* other);

  // implements Message ----------------------------------------------

  Annotation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 instance_id = 1 [default = 0];
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::int32 instance_id() const;
  inline void set_instance_id(::google::protobuf::int32 value);

  // optional .apollo.perception.inference.NormalizedBBox bbox = 2;
  inline bool has_bbox() const;
  inline void clear_bbox();
  static const int kBboxFieldNumber = 2;
  inline const ::apollo::perception::inference::NormalizedBBox& bbox() const;
  inline ::apollo::perception::inference::NormalizedBBox* mutable_bbox();
  inline ::apollo::perception::inference::NormalizedBBox* release_bbox();
  inline void set_allocated_bbox(::apollo::perception::inference::NormalizedBBox* bbox);

  // optional .apollo.perception.inference.BBox3D bbox3d = 3;
  inline bool has_bbox3d() const;
  inline void clear_bbox3d();
  static const int kBbox3DFieldNumber = 3;
  inline const ::apollo::perception::inference::BBox3D& bbox3d() const;
  inline ::apollo::perception::inference::BBox3D* mutable_bbox3d();
  inline ::apollo::perception::inference::BBox3D* release_bbox3d();
  inline void set_allocated_bbox3d(::apollo::perception::inference::BBox3D* bbox3d);

  // optional .apollo.perception.inference.NormalizedBBox front_bbox = 4;
  inline bool has_front_bbox() const;
  inline void clear_front_bbox();
  static const int kFrontBboxFieldNumber = 4;
  inline const ::apollo::perception::inference::NormalizedBBox& front_bbox() const;
  inline ::apollo::perception::inference::NormalizedBBox* mutable_front_bbox();
  inline ::apollo::perception::inference::NormalizedBBox* release_front_bbox();
  inline void set_allocated_front_bbox(::apollo::perception::inference::NormalizedBBox* front_bbox);

  // optional .apollo.perception.inference.NormalizedBBox rear_bbox = 5;
  inline bool has_rear_bbox() const;
  inline void clear_rear_bbox();
  static const int kRearBboxFieldNumber = 5;
  inline const ::apollo::perception::inference::NormalizedBBox& rear_bbox() const;
  inline ::apollo::perception::inference::NormalizedBBox* mutable_rear_bbox();
  inline ::apollo::perception::inference::NormalizedBBox* release_rear_bbox();
  inline void set_allocated_rear_bbox(::apollo::perception::inference::NormalizedBBox* rear_bbox);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.Annotation)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_bbox();
  inline void clear_has_bbox();
  inline void set_has_bbox3d();
  inline void clear_has_bbox3d();
  inline void set_has_front_bbox();
  inline void clear_has_front_bbox();
  inline void set_has_rear_bbox();
  inline void clear_has_rear_bbox();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::inference::NormalizedBBox* bbox_;
  ::apollo::perception::inference::BBox3D* bbox3d_;
  ::apollo::perception::inference::NormalizedBBox* front_bbox_;
  ::apollo::perception::inference::NormalizedBBox* rear_bbox_;
  ::google::protobuf::int32 instance_id_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static Annotation* default_instance_;
};
// -------------------------------------------------------------------

class AnnotationGroup : public ::google::protobuf::Message {
 public:
  AnnotationGroup();
  virtual ~AnnotationGroup();

  AnnotationGroup(const AnnotationGroup& from);

  inline AnnotationGroup& operator=(const AnnotationGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotationGroup& default_instance();

  void Swap(AnnotationGroup* other);

  // implements Message ----------------------------------------------

  AnnotationGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotationGroup& from);
  void MergeFrom(const AnnotationGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 group_label = 1;
  inline bool has_group_label() const;
  inline void clear_group_label();
  static const int kGroupLabelFieldNumber = 1;
  inline ::google::protobuf::int32 group_label() const;
  inline void set_group_label(::google::protobuf::int32 value);

  // repeated .apollo.perception.inference.Annotation annotation = 2;
  inline int annotation_size() const;
  inline void clear_annotation();
  static const int kAnnotationFieldNumber = 2;
  inline const ::apollo::perception::inference::Annotation& annotation(int index) const;
  inline ::apollo::perception::inference::Annotation* mutable_annotation(int index);
  inline ::apollo::perception::inference::Annotation* add_annotation();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::Annotation >&
      annotation() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::Annotation >*
      mutable_annotation();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.AnnotationGroup)
 private:
  inline void set_has_group_label();
  inline void clear_has_group_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::Annotation > annotation_;
  ::google::protobuf::int32 group_label_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static AnnotationGroup* default_instance_;
};
// -------------------------------------------------------------------

class AnnotatedDatum : public ::google::protobuf::Message {
 public:
  AnnotatedDatum();
  virtual ~AnnotatedDatum();

  AnnotatedDatum(const AnnotatedDatum& from);

  inline AnnotatedDatum& operator=(const AnnotatedDatum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotatedDatum& default_instance();

  void Swap(AnnotatedDatum* other);

  // implements Message ----------------------------------------------

  AnnotatedDatum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotatedDatum& from);
  void MergeFrom(const AnnotatedDatum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AnnotatedDatum_AnnotationType AnnotationType;
  static const AnnotationType BBOX = AnnotatedDatum_AnnotationType_BBOX;
  static const AnnotationType BBOX3D = AnnotatedDatum_AnnotationType_BBOX3D;
  static const AnnotationType BBOX3DFR = AnnotatedDatum_AnnotationType_BBOX3DFR;
  static inline bool AnnotationType_IsValid(int value) {
    return AnnotatedDatum_AnnotationType_IsValid(value);
  }
  static const AnnotationType AnnotationType_MIN =
    AnnotatedDatum_AnnotationType_AnnotationType_MIN;
  static const AnnotationType AnnotationType_MAX =
    AnnotatedDatum_AnnotationType_AnnotationType_MAX;
  static const int AnnotationType_ARRAYSIZE =
    AnnotatedDatum_AnnotationType_AnnotationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AnnotationType_descriptor() {
    return AnnotatedDatum_AnnotationType_descriptor();
  }
  static inline const ::std::string& AnnotationType_Name(AnnotationType value) {
    return AnnotatedDatum_AnnotationType_Name(value);
  }
  static inline bool AnnotationType_Parse(const ::std::string& name,
      AnnotationType* value) {
    return AnnotatedDatum_AnnotationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.Datum datum = 1;
  inline bool has_datum() const;
  inline void clear_datum();
  static const int kDatumFieldNumber = 1;
  inline const ::apollo::perception::inference::Datum& datum() const;
  inline ::apollo::perception::inference::Datum* mutable_datum();
  inline ::apollo::perception::inference::Datum* release_datum();
  inline void set_allocated_datum(::apollo::perception::inference::Datum* datum);

  // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::apollo::perception::inference::AnnotatedDatum_AnnotationType type() const;
  inline void set_type(::apollo::perception::inference::AnnotatedDatum_AnnotationType value);

  // repeated .apollo.perception.inference.AnnotationGroup annotation_group = 3;
  inline int annotation_group_size() const;
  inline void clear_annotation_group();
  static const int kAnnotationGroupFieldNumber = 3;
  inline const ::apollo::perception::inference::AnnotationGroup& annotation_group(int index) const;
  inline ::apollo::perception::inference::AnnotationGroup* mutable_annotation_group(int index);
  inline ::apollo::perception::inference::AnnotationGroup* add_annotation_group();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnnotationGroup >&
      annotation_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnnotationGroup >*
      mutable_annotation_group();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.AnnotatedDatum)
 private:
  inline void set_has_datum();
  inline void clear_has_datum();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::inference::Datum* datum_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnnotationGroup > annotation_group_;
  int type_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static AnnotatedDatum* default_instance_;
};
// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  void Swap(FillerParameter* other);

  // implements Message ----------------------------------------------

  FillerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static const VarianceNorm FAN_IN = FillerParameter_VarianceNorm_FAN_IN;
  static const VarianceNorm FAN_OUT = FillerParameter_VarianceNorm_FAN_OUT;
  static const VarianceNorm AVERAGE = FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static const VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static const VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static const int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  static inline const ::std::string& VarianceNorm_Name(VarianceNorm value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(const ::std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float value = 2 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value() const;
  inline void set_value(float value);

  // optional float min = 3 [default = 0];
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 3;
  inline float min() const;
  inline void set_min(float value);

  // optional float max = 4 [default = 1];
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 4;
  inline float max() const;
  inline void set_max(float value);

  // optional float mean = 5 [default = 0];
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 5;
  inline float mean() const;
  inline void set_mean(float value);

  // optional float std = 6 [default = 1];
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 6;
  inline float std() const;
  inline void set_std(float value);

  // optional int32 sparse = 7 [default = -1];
  inline bool has_sparse() const;
  inline void clear_sparse();
  static const int kSparseFieldNumber = 7;
  inline ::google::protobuf::int32 sparse() const;
  inline void set_sparse(::google::protobuf::int32 value);

  // optional .apollo.perception.inference.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  inline bool has_variance_norm() const;
  inline void clear_variance_norm();
  static const int kVarianceNormFieldNumber = 8;
  inline ::apollo::perception::inference::FillerParameter_VarianceNorm variance_norm() const;
  inline void set_variance_norm(::apollo::perception::inference::FillerParameter_VarianceNorm value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.FillerParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_sparse();
  inline void clear_has_sparse();
  inline void set_has_variance_norm();
  inline void clear_has_variance_norm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_type_;
  ::std::string* type_;
  float value_;
  float min_;
  float max_;
  float mean_;
  float std_;
  ::google::protobuf::int32 sparse_;
  int variance_norm_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static FillerParameter* default_instance_;
};
// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  NetParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string input = 3;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline const ::std::string& input(int index) const;
  inline ::std::string* mutable_input(int index);
  inline void set_input(int index, const ::std::string& value);
  inline void set_input(int index, const char* value);
  inline void set_input(int index, const char* value, size_t size);
  inline ::std::string* add_input();
  inline void add_input(const ::std::string& value);
  inline void add_input(const char* value);
  inline void add_input(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated .apollo.perception.inference.BlobShape input_shape = 8;
  inline int input_shape_size() const;
  inline void clear_input_shape();
  static const int kInputShapeFieldNumber = 8;
  inline const ::apollo::perception::inference::BlobShape& input_shape(int index) const;
  inline ::apollo::perception::inference::BlobShape* mutable_input_shape(int index);
  inline ::apollo::perception::inference::BlobShape* add_input_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape >&
      input_shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape >*
      mutable_input_shape();

  // repeated int32 input_dim = 4;
  inline int input_dim_size() const;
  inline void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  inline ::google::protobuf::int32 input_dim(int index) const;
  inline void set_input_dim(int index, ::google::protobuf::int32 value);
  inline void add_input_dim(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // optional bool force_backward = 5 [default = false];
  inline bool has_force_backward() const;
  inline void clear_force_backward();
  static const int kForceBackwardFieldNumber = 5;
  inline bool force_backward() const;
  inline void set_force_backward(bool value);

  // optional .apollo.perception.inference.NetState state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline const ::apollo::perception::inference::NetState& state() const;
  inline ::apollo::perception::inference::NetState* mutable_state();
  inline ::apollo::perception::inference::NetState* release_state();
  inline void set_allocated_state(::apollo::perception::inference::NetState* state);

  // optional bool debug_info = 7 [default = false];
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 7;
  inline bool debug_info() const;
  inline void set_debug_info(bool value);

  // repeated .apollo.perception.inference.LayerParameter layer = 100;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 100;
  inline const ::apollo::perception::inference::LayerParameter& layer(int index) const;
  inline ::apollo::perception::inference::LayerParameter* mutable_layer(int index);
  inline ::apollo::perception::inference::LayerParameter* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::LayerParameter >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::LayerParameter >*
      mutable_layer();

  // repeated .apollo.perception.inference.V1LayerParameter layers = 2;
  inline int layers_size() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 2;
  inline const ::apollo::perception::inference::V1LayerParameter& layers(int index) const;
  inline ::apollo::perception::inference::V1LayerParameter* mutable_layers(int index);
  inline ::apollo::perception::inference::V1LayerParameter* add_layers();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::V1LayerParameter >&
      layers() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::V1LayerParameter >*
      mutable_layers();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NetParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_force_backward();
  inline void clear_has_force_backward();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape > input_shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::apollo::perception::inference::NetState* state_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::LayerParameter > layer_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::V1LayerParameter > layers_;
  bool force_backward_;
  bool debug_info_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static NetParameter* default_instance_;
};
// -------------------------------------------------------------------

class NetState : public ::google::protobuf::Message {
 public:
  NetState();
  virtual ~NetState();

  NetState(const NetState& from);

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetState& default_instance();

  void Swap(NetState* other);

  // implements Message ----------------------------------------------

  NetState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetState& from);
  void MergeFrom(const NetState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.Phase phase = 1 [default = TEST];
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 1;
  inline ::apollo::perception::inference::Phase phase() const;
  inline void set_phase(::apollo::perception::inference::Phase value);

  // optional int32 level = 2 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated string stage = 3;
  inline int stage_size() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 3;
  inline const ::std::string& stage(int index) const;
  inline ::std::string* mutable_stage(int index);
  inline void set_stage(int index, const ::std::string& value);
  inline void set_stage(int index, const char* value);
  inline void set_stage(int index, const char* value, size_t size);
  inline ::std::string* add_stage();
  inline void add_stage(const ::std::string& value);
  inline void add_stage(const char* value);
  inline void add_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NetState)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int phase_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static NetState* default_instance_;
};
// -------------------------------------------------------------------

class NetStateRule : public ::google::protobuf::Message {
 public:
  NetStateRule();
  virtual ~NetStateRule();

  NetStateRule(const NetStateRule& from);

  inline NetStateRule& operator=(const NetStateRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetStateRule& default_instance();

  void Swap(NetStateRule* other);

  // implements Message ----------------------------------------------

  NetStateRule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetStateRule& from);
  void MergeFrom(const NetStateRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.Phase phase = 1;
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 1;
  inline ::apollo::perception::inference::Phase phase() const;
  inline void set_phase(::apollo::perception::inference::Phase value);

  // optional int32 min_level = 2;
  inline bool has_min_level() const;
  inline void clear_min_level();
  static const int kMinLevelFieldNumber = 2;
  inline ::google::protobuf::int32 min_level() const;
  inline void set_min_level(::google::protobuf::int32 value);

  // optional int32 max_level = 3;
  inline bool has_max_level() const;
  inline void clear_max_level();
  static const int kMaxLevelFieldNumber = 3;
  inline ::google::protobuf::int32 max_level() const;
  inline void set_max_level(::google::protobuf::int32 value);

  // repeated string stage = 4;
  inline int stage_size() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 4;
  inline const ::std::string& stage(int index) const;
  inline ::std::string* mutable_stage(int index);
  inline void set_stage(int index, const ::std::string& value);
  inline void set_stage(int index, const char* value);
  inline void set_stage(int index, const char* value, size_t size);
  inline ::std::string* add_stage();
  inline void add_stage(const ::std::string& value);
  inline void add_stage(const char* value);
  inline void add_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // repeated string not_stage = 5;
  inline int not_stage_size() const;
  inline void clear_not_stage();
  static const int kNotStageFieldNumber = 5;
  inline const ::std::string& not_stage(int index) const;
  inline ::std::string* mutable_not_stage(int index);
  inline void set_not_stage(int index, const ::std::string& value);
  inline void set_not_stage(int index, const char* value);
  inline void set_not_stage(int index, const char* value, size_t size);
  inline ::std::string* add_not_stage();
  inline void add_not_stage(const ::std::string& value);
  inline void add_not_stage(const char* value);
  inline void add_not_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& not_stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_not_stage();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NetStateRule)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_min_level();
  inline void clear_has_min_level();
  inline void set_has_max_level();
  inline void clear_has_max_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int phase_;
  ::google::protobuf::int32 min_level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::RepeatedPtrField< ::std::string> not_stage_;
  ::google::protobuf::int32 max_level_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static NetStateRule* default_instance_;
};
// -------------------------------------------------------------------

class ParamSpec : public ::google::protobuf::Message {
 public:
  ParamSpec();
  virtual ~ParamSpec();

  ParamSpec(const ParamSpec& from);

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamSpec& default_instance();

  void Swap(ParamSpec* other);

  // implements Message ----------------------------------------------

  ParamSpec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamSpec& from);
  void MergeFrom(const ParamSpec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParamSpec_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT = ParamSpec_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE = ParamSpec_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return ParamSpec_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    ParamSpec_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    ParamSpec_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return ParamSpec_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return ParamSpec_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return ParamSpec_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .apollo.perception.inference.ParamSpec.DimCheckMode share_mode = 2;
  inline bool has_share_mode() const;
  inline void clear_share_mode();
  static const int kShareModeFieldNumber = 2;
  inline ::apollo::perception::inference::ParamSpec_DimCheckMode share_mode() const;
  inline void set_share_mode(::apollo::perception::inference::ParamSpec_DimCheckMode value);

  // optional float lr_mult = 3 [default = 1];
  inline bool has_lr_mult() const;
  inline void clear_lr_mult();
  static const int kLrMultFieldNumber = 3;
  inline float lr_mult() const;
  inline void set_lr_mult(float value);

  // optional float decay_mult = 4 [default = 1];
  inline bool has_decay_mult() const;
  inline void clear_decay_mult();
  static const int kDecayMultFieldNumber = 4;
  inline float decay_mult() const;
  inline void set_decay_mult(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ParamSpec)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_share_mode();
  inline void clear_has_share_mode();
  inline void set_has_lr_mult();
  inline void clear_has_lr_mult();
  inline void set_has_decay_mult();
  inline void clear_has_decay_mult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int share_mode_;
  float lr_mult_;
  float decay_mult_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ParamSpec* default_instance_;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated string bottom = 3;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 3;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 4;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 4;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional .apollo.perception.inference.Phase phase = 10;
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 10;
  inline ::apollo::perception::inference::Phase phase() const;
  inline void set_phase(::apollo::perception::inference::Phase value);

  // repeated float loss_weight = 5;
  inline int loss_weight_size() const;
  inline void clear_loss_weight();
  static const int kLossWeightFieldNumber = 5;
  inline float loss_weight(int index) const;
  inline void set_loss_weight(int index, float value);
  inline void add_loss_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated .apollo.perception.inference.ParamSpec param = 6;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 6;
  inline const ::apollo::perception::inference::ParamSpec& param(int index) const;
  inline ::apollo::perception::inference::ParamSpec* mutable_param(int index);
  inline ::apollo::perception::inference::ParamSpec* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::ParamSpec >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::ParamSpec >*
      mutable_param();

  // repeated .apollo.perception.inference.BlobProto blobs = 7;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 7;
  inline const ::apollo::perception::inference::BlobProto& blobs(int index) const;
  inline ::apollo::perception::inference::BlobProto* mutable_blobs(int index);
  inline ::apollo::perception::inference::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto >*
      mutable_blobs();

  // repeated bool propagate_down = 11;
  inline int propagate_down_size() const;
  inline void clear_propagate_down();
  static const int kPropagateDownFieldNumber = 11;
  inline bool propagate_down(int index) const;
  inline void set_propagate_down(int index, bool value);
  inline void add_propagate_down(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      propagate_down() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_propagate_down();

  // repeated .apollo.perception.inference.NetStateRule include = 8;
  inline int include_size() const;
  inline void clear_include();
  static const int kIncludeFieldNumber = 8;
  inline const ::apollo::perception::inference::NetStateRule& include(int index) const;
  inline ::apollo::perception::inference::NetStateRule* mutable_include(int index);
  inline ::apollo::perception::inference::NetStateRule* add_include();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
      include() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
      mutable_include();

  // repeated .apollo.perception.inference.NetStateRule exclude = 9;
  inline int exclude_size() const;
  inline void clear_exclude();
  static const int kExcludeFieldNumber = 9;
  inline const ::apollo::perception::inference::NetStateRule& exclude(int index) const;
  inline ::apollo::perception::inference::NetStateRule* mutable_exclude(int index);
  inline ::apollo::perception::inference::NetStateRule* add_exclude();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
      exclude() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
      mutable_exclude();

  // optional .apollo.perception.inference.TransformationParameter transform_param = 100;
  inline bool has_transform_param() const;
  inline void clear_transform_param();
  static const int kTransformParamFieldNumber = 100;
  inline const ::apollo::perception::inference::TransformationParameter& transform_param() const;
  inline ::apollo::perception::inference::TransformationParameter* mutable_transform_param();
  inline ::apollo::perception::inference::TransformationParameter* release_transform_param();
  inline void set_allocated_transform_param(::apollo::perception::inference::TransformationParameter* transform_param);

  // optional .apollo.perception.inference.LossParameter loss_param = 101;
  inline bool has_loss_param() const;
  inline void clear_loss_param();
  static const int kLossParamFieldNumber = 101;
  inline const ::apollo::perception::inference::LossParameter& loss_param() const;
  inline ::apollo::perception::inference::LossParameter* mutable_loss_param();
  inline ::apollo::perception::inference::LossParameter* release_loss_param();
  inline void set_allocated_loss_param(::apollo::perception::inference::LossParameter* loss_param);

  // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 102;
  inline bool has_accuracy_param() const;
  inline void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 102;
  inline const ::apollo::perception::inference::AccuracyParameter& accuracy_param() const;
  inline ::apollo::perception::inference::AccuracyParameter* mutable_accuracy_param();
  inline ::apollo::perception::inference::AccuracyParameter* release_accuracy_param();
  inline void set_allocated_accuracy_param(::apollo::perception::inference::AccuracyParameter* accuracy_param);

  // optional .apollo.perception.inference.AnnotatedDataParameter annotated_data_param = 200;
  inline bool has_annotated_data_param() const;
  inline void clear_annotated_data_param();
  static const int kAnnotatedDataParamFieldNumber = 200;
  inline const ::apollo::perception::inference::AnnotatedDataParameter& annotated_data_param() const;
  inline ::apollo::perception::inference::AnnotatedDataParameter* mutable_annotated_data_param();
  inline ::apollo::perception::inference::AnnotatedDataParameter* release_annotated_data_param();
  inline void set_allocated_annotated_data_param(::apollo::perception::inference::AnnotatedDataParameter* annotated_data_param);

  // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 103;
  inline bool has_argmax_param() const;
  inline void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 103;
  inline const ::apollo::perception::inference::ArgMaxParameter& argmax_param() const;
  inline ::apollo::perception::inference::ArgMaxParameter* mutable_argmax_param();
  inline ::apollo::perception::inference::ArgMaxParameter* release_argmax_param();
  inline void set_allocated_argmax_param(::apollo::perception::inference::ArgMaxParameter* argmax_param);

  // optional .apollo.perception.inference.BatchNormParameter batch_norm_param = 139;
  inline bool has_batch_norm_param() const;
  inline void clear_batch_norm_param();
  static const int kBatchNormParamFieldNumber = 139;
  inline const ::apollo::perception::inference::BatchNormParameter& batch_norm_param() const;
  inline ::apollo::perception::inference::BatchNormParameter* mutable_batch_norm_param();
  inline ::apollo::perception::inference::BatchNormParameter* release_batch_norm_param();
  inline void set_allocated_batch_norm_param(::apollo::perception::inference::BatchNormParameter* batch_norm_param);

  // optional .apollo.perception.inference.BiasParameter bias_param = 141;
  inline bool has_bias_param() const;
  inline void clear_bias_param();
  static const int kBiasParamFieldNumber = 141;
  inline const ::apollo::perception::inference::BiasParameter& bias_param() const;
  inline ::apollo::perception::inference::BiasParameter* mutable_bias_param();
  inline ::apollo::perception::inference::BiasParameter* release_bias_param();
  inline void set_allocated_bias_param(::apollo::perception::inference::BiasParameter* bias_param);

  // optional .apollo.perception.inference.ConcatParameter concat_param = 104;
  inline bool has_concat_param() const;
  inline void clear_concat_param();
  static const int kConcatParamFieldNumber = 104;
  inline const ::apollo::perception::inference::ConcatParameter& concat_param() const;
  inline ::apollo::perception::inference::ConcatParameter* mutable_concat_param();
  inline ::apollo::perception::inference::ConcatParameter* release_concat_param();
  inline void set_allocated_concat_param(::apollo::perception::inference::ConcatParameter* concat_param);

  // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 105;
  inline bool has_contrastive_loss_param() const;
  inline void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 105;
  inline const ::apollo::perception::inference::ContrastiveLossParameter& contrastive_loss_param() const;
  inline ::apollo::perception::inference::ContrastiveLossParameter* mutable_contrastive_loss_param();
  inline ::apollo::perception::inference::ContrastiveLossParameter* release_contrastive_loss_param();
  inline void set_allocated_contrastive_loss_param(::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param);

  // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 106;
  inline bool has_convolution_param() const;
  inline void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 106;
  inline const ::apollo::perception::inference::ConvolutionParameter& convolution_param() const;
  inline ::apollo::perception::inference::ConvolutionParameter* mutable_convolution_param();
  inline ::apollo::perception::inference::ConvolutionParameter* release_convolution_param();
  inline void set_allocated_convolution_param(::apollo::perception::inference::ConvolutionParameter* convolution_param);

  // optional .apollo.perception.inference.CropParameter crop_param = 144;
  inline bool has_crop_param() const;
  inline void clear_crop_param();
  static const int kCropParamFieldNumber = 144;
  inline const ::apollo::perception::inference::CropParameter& crop_param() const;
  inline ::apollo::perception::inference::CropParameter* mutable_crop_param();
  inline ::apollo::perception::inference::CropParameter* release_crop_param();
  inline void set_allocated_crop_param(::apollo::perception::inference::CropParameter* crop_param);

  // optional .apollo.perception.inference.DataParameter data_param = 107;
  inline bool has_data_param() const;
  inline void clear_data_param();
  static const int kDataParamFieldNumber = 107;
  inline const ::apollo::perception::inference::DataParameter& data_param() const;
  inline ::apollo::perception::inference::DataParameter* mutable_data_param();
  inline ::apollo::perception::inference::DataParameter* release_data_param();
  inline void set_allocated_data_param(::apollo::perception::inference::DataParameter* data_param);

  // optional .apollo.perception.inference.DetectionEvaluateParameter detection_evaluate_param = 205;
  inline bool has_detection_evaluate_param() const;
  inline void clear_detection_evaluate_param();
  static const int kDetectionEvaluateParamFieldNumber = 205;
  inline const ::apollo::perception::inference::DetectionEvaluateParameter& detection_evaluate_param() const;
  inline ::apollo::perception::inference::DetectionEvaluateParameter* mutable_detection_evaluate_param();
  inline ::apollo::perception::inference::DetectionEvaluateParameter* release_detection_evaluate_param();
  inline void set_allocated_detection_evaluate_param(::apollo::perception::inference::DetectionEvaluateParameter* detection_evaluate_param);

  // optional .apollo.perception.inference.DetectionOutputParameter detection_output_param = 204;
  inline bool has_detection_output_param() const;
  inline void clear_detection_output_param();
  static const int kDetectionOutputParamFieldNumber = 204;
  inline const ::apollo::perception::inference::DetectionOutputParameter& detection_output_param() const;
  inline ::apollo::perception::inference::DetectionOutputParameter* mutable_detection_output_param();
  inline ::apollo::perception::inference::DetectionOutputParameter* release_detection_output_param();
  inline void set_allocated_detection_output_param(::apollo::perception::inference::DetectionOutputParameter* detection_output_param);

  // optional .apollo.perception.inference.DropoutParameter dropout_param = 108;
  inline bool has_dropout_param() const;
  inline void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 108;
  inline const ::apollo::perception::inference::DropoutParameter& dropout_param() const;
  inline ::apollo::perception::inference::DropoutParameter* mutable_dropout_param();
  inline ::apollo::perception::inference::DropoutParameter* release_dropout_param();
  inline void set_allocated_dropout_param(::apollo::perception::inference::DropoutParameter* dropout_param);

  // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 109;
  inline bool has_dummy_data_param() const;
  inline void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 109;
  inline const ::apollo::perception::inference::DummyDataParameter& dummy_data_param() const;
  inline ::apollo::perception::inference::DummyDataParameter* mutable_dummy_data_param();
  inline ::apollo::perception::inference::DummyDataParameter* release_dummy_data_param();
  inline void set_allocated_dummy_data_param(::apollo::perception::inference::DummyDataParameter* dummy_data_param);

  // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 110;
  inline bool has_eltwise_param() const;
  inline void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 110;
  inline const ::apollo::perception::inference::EltwiseParameter& eltwise_param() const;
  inline ::apollo::perception::inference::EltwiseParameter* mutable_eltwise_param();
  inline ::apollo::perception::inference::EltwiseParameter* release_eltwise_param();
  inline void set_allocated_eltwise_param(::apollo::perception::inference::EltwiseParameter* eltwise_param);

  // optional .apollo.perception.inference.ELUParameter elu_param = 140;
  inline bool has_elu_param() const;
  inline void clear_elu_param();
  static const int kEluParamFieldNumber = 140;
  inline const ::apollo::perception::inference::ELUParameter& elu_param() const;
  inline ::apollo::perception::inference::ELUParameter* mutable_elu_param();
  inline ::apollo::perception::inference::ELUParameter* release_elu_param();
  inline void set_allocated_elu_param(::apollo::perception::inference::ELUParameter* elu_param);

  // optional .apollo.perception.inference.EmbedParameter embed_param = 137;
  inline bool has_embed_param() const;
  inline void clear_embed_param();
  static const int kEmbedParamFieldNumber = 137;
  inline const ::apollo::perception::inference::EmbedParameter& embed_param() const;
  inline ::apollo::perception::inference::EmbedParameter* mutable_embed_param();
  inline ::apollo::perception::inference::EmbedParameter* release_embed_param();
  inline void set_allocated_embed_param(::apollo::perception::inference::EmbedParameter* embed_param);

  // optional .apollo.perception.inference.ExpParameter exp_param = 111;
  inline bool has_exp_param() const;
  inline void clear_exp_param();
  static const int kExpParamFieldNumber = 111;
  inline const ::apollo::perception::inference::ExpParameter& exp_param() const;
  inline ::apollo::perception::inference::ExpParameter* mutable_exp_param();
  inline ::apollo::perception::inference::ExpParameter* release_exp_param();
  inline void set_allocated_exp_param(::apollo::perception::inference::ExpParameter* exp_param);

  // optional .apollo.perception.inference.FlattenParameter flatten_param = 135;
  inline bool has_flatten_param() const;
  inline void clear_flatten_param();
  static const int kFlattenParamFieldNumber = 135;
  inline const ::apollo::perception::inference::FlattenParameter& flatten_param() const;
  inline ::apollo::perception::inference::FlattenParameter* mutable_flatten_param();
  inline ::apollo::perception::inference::FlattenParameter* release_flatten_param();
  inline void set_allocated_flatten_param(::apollo::perception::inference::FlattenParameter* flatten_param);

  // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 112;
  inline bool has_hdf5_data_param() const;
  inline void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 112;
  inline const ::apollo::perception::inference::HDF5DataParameter& hdf5_data_param() const;
  inline ::apollo::perception::inference::HDF5DataParameter* mutable_hdf5_data_param();
  inline ::apollo::perception::inference::HDF5DataParameter* release_hdf5_data_param();
  inline void set_allocated_hdf5_data_param(::apollo::perception::inference::HDF5DataParameter* hdf5_data_param);

  // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 113;
  inline bool has_hdf5_output_param() const;
  inline void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 113;
  inline const ::apollo::perception::inference::HDF5OutputParameter& hdf5_output_param() const;
  inline ::apollo::perception::inference::HDF5OutputParameter* mutable_hdf5_output_param();
  inline ::apollo::perception::inference::HDF5OutputParameter* release_hdf5_output_param();
  inline void set_allocated_hdf5_output_param(::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param);

  // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 114;
  inline bool has_hinge_loss_param() const;
  inline void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 114;
  inline const ::apollo::perception::inference::HingeLossParameter& hinge_loss_param() const;
  inline ::apollo::perception::inference::HingeLossParameter* mutable_hinge_loss_param();
  inline ::apollo::perception::inference::HingeLossParameter* release_hinge_loss_param();
  inline void set_allocated_hinge_loss_param(::apollo::perception::inference::HingeLossParameter* hinge_loss_param);

  // optional .apollo.perception.inference.ImageDataParameter image_data_param = 115;
  inline bool has_image_data_param() const;
  inline void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 115;
  inline const ::apollo::perception::inference::ImageDataParameter& image_data_param() const;
  inline ::apollo::perception::inference::ImageDataParameter* mutable_image_data_param();
  inline ::apollo::perception::inference::ImageDataParameter* release_image_data_param();
  inline void set_allocated_image_data_param(::apollo::perception::inference::ImageDataParameter* image_data_param);

  // repeated .apollo.perception.inference.ImageDataParameter yolo_data_param = 1707111;
  inline int yolo_data_param_size() const;
  inline void clear_yolo_data_param();
  static const int kYoloDataParamFieldNumber = 1707111;
  inline const ::apollo::perception::inference::ImageDataParameter& yolo_data_param(int index) const;
  inline ::apollo::perception::inference::ImageDataParameter* mutable_yolo_data_param(int index);
  inline ::apollo::perception::inference::ImageDataParameter* add_yolo_data_param();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::ImageDataParameter >&
      yolo_data_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::ImageDataParameter >*
      mutable_yolo_data_param();

  // repeated float data_prob_param = 1707112;
  inline int data_prob_param_size() const;
  inline void clear_data_prob_param();
  static const int kDataProbParamFieldNumber = 1707112;
  inline float data_prob_param(int index) const;
  inline void set_data_prob_param(int index, float value);
  inline void add_data_prob_param(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data_prob_param() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data_prob_param();

  // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 116;
  inline bool has_infogain_loss_param() const;
  inline void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 116;
  inline const ::apollo::perception::inference::InfogainLossParameter& infogain_loss_param() const;
  inline ::apollo::perception::inference::InfogainLossParameter* mutable_infogain_loss_param();
  inline ::apollo::perception::inference::InfogainLossParameter* release_infogain_loss_param();
  inline void set_allocated_infogain_loss_param(::apollo::perception::inference::InfogainLossParameter* infogain_loss_param);

  // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 117;
  inline bool has_inner_product_param() const;
  inline void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 117;
  inline const ::apollo::perception::inference::InnerProductParameter& inner_product_param() const;
  inline ::apollo::perception::inference::InnerProductParameter* mutable_inner_product_param();
  inline ::apollo::perception::inference::InnerProductParameter* release_inner_product_param();
  inline void set_allocated_inner_product_param(::apollo::perception::inference::InnerProductParameter* inner_product_param);

  // optional .apollo.perception.inference.InputParameter input_param = 143;
  inline bool has_input_param() const;
  inline void clear_input_param();
  static const int kInputParamFieldNumber = 143;
  inline const ::apollo::perception::inference::InputParameter& input_param() const;
  inline ::apollo::perception::inference::InputParameter* mutable_input_param();
  inline ::apollo::perception::inference::InputParameter* release_input_param();
  inline void set_allocated_input_param(::apollo::perception::inference::InputParameter* input_param);

  // optional .apollo.perception.inference.LogParameter log_param = 134;
  inline bool has_log_param() const;
  inline void clear_log_param();
  static const int kLogParamFieldNumber = 134;
  inline const ::apollo::perception::inference::LogParameter& log_param() const;
  inline ::apollo::perception::inference::LogParameter* mutable_log_param();
  inline ::apollo::perception::inference::LogParameter* release_log_param();
  inline void set_allocated_log_param(::apollo::perception::inference::LogParameter* log_param);

  // optional .apollo.perception.inference.LRNParameter lrn_param = 118;
  inline bool has_lrn_param() const;
  inline void clear_lrn_param();
  static const int kLrnParamFieldNumber = 118;
  inline const ::apollo::perception::inference::LRNParameter& lrn_param() const;
  inline ::apollo::perception::inference::LRNParameter* mutable_lrn_param();
  inline ::apollo::perception::inference::LRNParameter* release_lrn_param();
  inline void set_allocated_lrn_param(::apollo::perception::inference::LRNParameter* lrn_param);

  // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 119;
  inline bool has_memory_data_param() const;
  inline void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 119;
  inline const ::apollo::perception::inference::MemoryDataParameter& memory_data_param() const;
  inline ::apollo::perception::inference::MemoryDataParameter* mutable_memory_data_param();
  inline ::apollo::perception::inference::MemoryDataParameter* release_memory_data_param();
  inline void set_allocated_memory_data_param(::apollo::perception::inference::MemoryDataParameter* memory_data_param);

  // optional .apollo.perception.inference.MultiBoxLossParameter multibox_loss_param = 201;
  inline bool has_multibox_loss_param() const;
  inline void clear_multibox_loss_param();
  static const int kMultiboxLossParamFieldNumber = 201;
  inline const ::apollo::perception::inference::MultiBoxLossParameter& multibox_loss_param() const;
  inline ::apollo::perception::inference::MultiBoxLossParameter* mutable_multibox_loss_param();
  inline ::apollo::perception::inference::MultiBoxLossParameter* release_multibox_loss_param();
  inline void set_allocated_multibox_loss_param(::apollo::perception::inference::MultiBoxLossParameter* multibox_loss_param);

  // optional .apollo.perception.inference.RegionParameter region_param = 300;
  inline bool has_region_param() const;
  inline void clear_region_param();
  static const int kRegionParamFieldNumber = 300;
  inline const ::apollo::perception::inference::RegionParameter& region_param() const;
  inline ::apollo::perception::inference::RegionParameter* mutable_region_param();
  inline ::apollo::perception::inference::RegionParameter* release_region_param();
  inline void set_allocated_region_param(::apollo::perception::inference::RegionParameter* region_param);

  // optional .apollo.perception.inference.RegionOutputParameter region_output_param = 310;
  inline bool has_region_output_param() const;
  inline void clear_region_output_param();
  static const int kRegionOutputParamFieldNumber = 310;
  inline const ::apollo::perception::inference::RegionOutputParameter& region_output_param() const;
  inline ::apollo::perception::inference::RegionOutputParameter* mutable_region_output_param();
  inline ::apollo::perception::inference::RegionOutputParameter* release_region_output_param();
  inline void set_allocated_region_output_param(::apollo::perception::inference::RegionOutputParameter* region_output_param);

  // optional .apollo.perception.inference.RegionProposalParameter region_proposal_param = 320;
  inline bool has_region_proposal_param() const;
  inline void clear_region_proposal_param();
  static const int kRegionProposalParamFieldNumber = 320;
  inline const ::apollo::perception::inference::RegionProposalParameter& region_proposal_param() const;
  inline ::apollo::perception::inference::RegionProposalParameter* mutable_region_proposal_param();
  inline ::apollo::perception::inference::RegionProposalParameter* release_region_proposal_param();
  inline void set_allocated_region_proposal_param(::apollo::perception::inference::RegionProposalParameter* region_proposal_param);

  // optional .apollo.perception.inference.YoloTargetParameter yolo_target_param = 204801;
  inline bool has_yolo_target_param() const;
  inline void clear_yolo_target_param();
  static const int kYoloTargetParamFieldNumber = 204801;
  inline const ::apollo::perception::inference::YoloTargetParameter& yolo_target_param() const;
  inline ::apollo::perception::inference::YoloTargetParameter* mutable_yolo_target_param();
  inline ::apollo::perception::inference::YoloTargetParameter* release_yolo_target_param();
  inline void set_allocated_yolo_target_param(::apollo::perception::inference::YoloTargetParameter* yolo_target_param);

  // optional .apollo.perception.inference.YoloAnchorsParameter yolo_anchors_param = 204802;
  inline bool has_yolo_anchors_param() const;
  inline void clear_yolo_anchors_param();
  static const int kYoloAnchorsParamFieldNumber = 204802;
  inline const ::apollo::perception::inference::YoloAnchorsParameter& yolo_anchors_param() const;
  inline ::apollo::perception::inference::YoloAnchorsParameter* mutable_yolo_anchors_param();
  inline ::apollo::perception::inference::YoloAnchorsParameter* release_yolo_anchors_param();
  inline void set_allocated_yolo_anchors_param(::apollo::perception::inference::YoloAnchorsParameter* yolo_anchors_param);

  // optional .apollo.perception.inference.YoloLossParameter yolo_loss_param = 204803;
  inline bool has_yolo_loss_param() const;
  inline void clear_yolo_loss_param();
  static const int kYoloLossParamFieldNumber = 204803;
  inline const ::apollo::perception::inference::YoloLossParameter& yolo_loss_param() const;
  inline ::apollo::perception::inference::YoloLossParameter* mutable_yolo_loss_param();
  inline ::apollo::perception::inference::YoloLossParameter* release_yolo_loss_param();
  inline void set_allocated_yolo_loss_param(::apollo::perception::inference::YoloLossParameter* yolo_loss_param);

  // optional .apollo.perception.inference.YoloDumpParameter yolo_dump_param = 204804;
  inline bool has_yolo_dump_param() const;
  inline void clear_yolo_dump_param();
  static const int kYoloDumpParamFieldNumber = 204804;
  inline const ::apollo::perception::inference::YoloDumpParameter& yolo_dump_param() const;
  inline ::apollo::perception::inference::YoloDumpParameter* mutable_yolo_dump_param();
  inline ::apollo::perception::inference::YoloDumpParameter* release_yolo_dump_param();
  inline void set_allocated_yolo_dump_param(::apollo::perception::inference::YoloDumpParameter* yolo_dump_param);

  // optional .apollo.perception.inference.PaddingParameter padding_param = 1001;
  inline bool has_padding_param() const;
  inline void clear_padding_param();
  static const int kPaddingParamFieldNumber = 1001;
  inline const ::apollo::perception::inference::PaddingParameter& padding_param() const;
  inline ::apollo::perception::inference::PaddingParameter* mutable_padding_param();
  inline ::apollo::perception::inference::PaddingParameter* release_padding_param();
  inline void set_allocated_padding_param(::apollo::perception::inference::PaddingParameter* padding_param);

  // optional .apollo.perception.inference.ReorgParameter reorg_param = 301;
  inline bool has_reorg_param() const;
  inline void clear_reorg_param();
  static const int kReorgParamFieldNumber = 301;
  inline const ::apollo::perception::inference::ReorgParameter& reorg_param() const;
  inline ::apollo::perception::inference::ReorgParameter* mutable_reorg_param();
  inline ::apollo::perception::inference::ReorgParameter* release_reorg_param();
  inline void set_allocated_reorg_param(::apollo::perception::inference::ReorgParameter* reorg_param);

  // optional .apollo.perception.inference.MVNParameter mvn_param = 120;
  inline bool has_mvn_param() const;
  inline void clear_mvn_param();
  static const int kMvnParamFieldNumber = 120;
  inline const ::apollo::perception::inference::MVNParameter& mvn_param() const;
  inline ::apollo::perception::inference::MVNParameter* mutable_mvn_param();
  inline ::apollo::perception::inference::MVNParameter* release_mvn_param();
  inline void set_allocated_mvn_param(::apollo::perception::inference::MVNParameter* mvn_param);

  // optional .apollo.perception.inference.NormalizeParameter norm_param = 206;
  inline bool has_norm_param() const;
  inline void clear_norm_param();
  static const int kNormParamFieldNumber = 206;
  inline const ::apollo::perception::inference::NormalizeParameter& norm_param() const;
  inline ::apollo::perception::inference::NormalizeParameter* mutable_norm_param();
  inline ::apollo::perception::inference::NormalizeParameter* release_norm_param();
  inline void set_allocated_norm_param(::apollo::perception::inference::NormalizeParameter* norm_param);

  // optional .apollo.perception.inference.ParameterParameter parameter_param = 145;
  inline bool has_parameter_param() const;
  inline void clear_parameter_param();
  static const int kParameterParamFieldNumber = 145;
  inline const ::apollo::perception::inference::ParameterParameter& parameter_param() const;
  inline ::apollo::perception::inference::ParameterParameter* mutable_parameter_param();
  inline ::apollo::perception::inference::ParameterParameter* release_parameter_param();
  inline void set_allocated_parameter_param(::apollo::perception::inference::ParameterParameter* parameter_param);

  // optional .apollo.perception.inference.PermuteParameter permute_param = 202;
  inline bool has_permute_param() const;
  inline void clear_permute_param();
  static const int kPermuteParamFieldNumber = 202;
  inline const ::apollo::perception::inference::PermuteParameter& permute_param() const;
  inline ::apollo::perception::inference::PermuteParameter* mutable_permute_param();
  inline ::apollo::perception::inference::PermuteParameter* release_permute_param();
  inline void set_allocated_permute_param(::apollo::perception::inference::PermuteParameter* permute_param);

  // optional .apollo.perception.inference.PoolingParameter pooling_param = 121;
  inline bool has_pooling_param() const;
  inline void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 121;
  inline const ::apollo::perception::inference::PoolingParameter& pooling_param() const;
  inline ::apollo::perception::inference::PoolingParameter* mutable_pooling_param();
  inline ::apollo::perception::inference::PoolingParameter* release_pooling_param();
  inline void set_allocated_pooling_param(::apollo::perception::inference::PoolingParameter* pooling_param);

  // optional .apollo.perception.inference.PowerParameter power_param = 122;
  inline bool has_power_param() const;
  inline void clear_power_param();
  static const int kPowerParamFieldNumber = 122;
  inline const ::apollo::perception::inference::PowerParameter& power_param() const;
  inline ::apollo::perception::inference::PowerParameter* mutable_power_param();
  inline ::apollo::perception::inference::PowerParameter* release_power_param();
  inline void set_allocated_power_param(::apollo::perception::inference::PowerParameter* power_param);

  // optional .apollo.perception.inference.PReLUParameter prelu_param = 131;
  inline bool has_prelu_param() const;
  inline void clear_prelu_param();
  static const int kPreluParamFieldNumber = 131;
  inline const ::apollo::perception::inference::PReLUParameter& prelu_param() const;
  inline ::apollo::perception::inference::PReLUParameter* mutable_prelu_param();
  inline ::apollo::perception::inference::PReLUParameter* release_prelu_param();
  inline void set_allocated_prelu_param(::apollo::perception::inference::PReLUParameter* prelu_param);

  // optional .apollo.perception.inference.PriorBoxParameter prior_box_param = 203;
  inline bool has_prior_box_param() const;
  inline void clear_prior_box_param();
  static const int kPriorBoxParamFieldNumber = 203;
  inline const ::apollo::perception::inference::PriorBoxParameter& prior_box_param() const;
  inline ::apollo::perception::inference::PriorBoxParameter* mutable_prior_box_param();
  inline ::apollo::perception::inference::PriorBoxParameter* release_prior_box_param();
  inline void set_allocated_prior_box_param(::apollo::perception::inference::PriorBoxParameter* prior_box_param);

  // optional .apollo.perception.inference.PythonParameter python_param = 130;
  inline bool has_python_param() const;
  inline void clear_python_param();
  static const int kPythonParamFieldNumber = 130;
  inline const ::apollo::perception::inference::PythonParameter& python_param() const;
  inline ::apollo::perception::inference::PythonParameter* mutable_python_param();
  inline ::apollo::perception::inference::PythonParameter* release_python_param();
  inline void set_allocated_python_param(::apollo::perception::inference::PythonParameter* python_param);

  // optional .apollo.perception.inference.RecurrentParameter recurrent_param = 146;
  inline bool has_recurrent_param() const;
  inline void clear_recurrent_param();
  static const int kRecurrentParamFieldNumber = 146;
  inline const ::apollo::perception::inference::RecurrentParameter& recurrent_param() const;
  inline ::apollo::perception::inference::RecurrentParameter* mutable_recurrent_param();
  inline ::apollo::perception::inference::RecurrentParameter* release_recurrent_param();
  inline void set_allocated_recurrent_param(::apollo::perception::inference::RecurrentParameter* recurrent_param);

  // optional .apollo.perception.inference.ReductionParameter reduction_param = 136;
  inline bool has_reduction_param() const;
  inline void clear_reduction_param();
  static const int kReductionParamFieldNumber = 136;
  inline const ::apollo::perception::inference::ReductionParameter& reduction_param() const;
  inline ::apollo::perception::inference::ReductionParameter* mutable_reduction_param();
  inline ::apollo::perception::inference::ReductionParameter* release_reduction_param();
  inline void set_allocated_reduction_param(::apollo::perception::inference::ReductionParameter* reduction_param);

  // optional .apollo.perception.inference.ReLUParameter relu_param = 123;
  inline bool has_relu_param() const;
  inline void clear_relu_param();
  static const int kReluParamFieldNumber = 123;
  inline const ::apollo::perception::inference::ReLUParameter& relu_param() const;
  inline ::apollo::perception::inference::ReLUParameter* mutable_relu_param();
  inline ::apollo::perception::inference::ReLUParameter* release_relu_param();
  inline void set_allocated_relu_param(::apollo::perception::inference::ReLUParameter* relu_param);

  // optional .apollo.perception.inference.ReshapeParameter reshape_param = 133;
  inline bool has_reshape_param() const;
  inline void clear_reshape_param();
  static const int kReshapeParamFieldNumber = 133;
  inline const ::apollo::perception::inference::ReshapeParameter& reshape_param() const;
  inline ::apollo::perception::inference::ReshapeParameter* mutable_reshape_param();
  inline ::apollo::perception::inference::ReshapeParameter* release_reshape_param();
  inline void set_allocated_reshape_param(::apollo::perception::inference::ReshapeParameter* reshape_param);

  // optional .apollo.perception.inference.ROIPoolingParameter roi_pooling_param = 8266711;
  inline bool has_roi_pooling_param() const;
  inline void clear_roi_pooling_param();
  static const int kRoiPoolingParamFieldNumber = 8266711;
  inline const ::apollo::perception::inference::ROIPoolingParameter& roi_pooling_param() const;
  inline ::apollo::perception::inference::ROIPoolingParameter* mutable_roi_pooling_param();
  inline ::apollo::perception::inference::ROIPoolingParameter* release_roi_pooling_param();
  inline void set_allocated_roi_pooling_param(::apollo::perception::inference::ROIPoolingParameter* roi_pooling_param);

  // optional .apollo.perception.inference.ScaleParameter scale_param = 142;
  inline bool has_scale_param() const;
  inline void clear_scale_param();
  static const int kScaleParamFieldNumber = 142;
  inline const ::apollo::perception::inference::ScaleParameter& scale_param() const;
  inline ::apollo::perception::inference::ScaleParameter* mutable_scale_param();
  inline ::apollo::perception::inference::ScaleParameter* release_scale_param();
  inline void set_allocated_scale_param(::apollo::perception::inference::ScaleParameter* scale_param);

  // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 124;
  inline bool has_sigmoid_param() const;
  inline void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 124;
  inline const ::apollo::perception::inference::SigmoidParameter& sigmoid_param() const;
  inline ::apollo::perception::inference::SigmoidParameter* mutable_sigmoid_param();
  inline ::apollo::perception::inference::SigmoidParameter* release_sigmoid_param();
  inline void set_allocated_sigmoid_param(::apollo::perception::inference::SigmoidParameter* sigmoid_param);

  // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 125;
  inline bool has_softmax_param() const;
  inline void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 125;
  inline const ::apollo::perception::inference::SoftmaxParameter& softmax_param() const;
  inline ::apollo::perception::inference::SoftmaxParameter* mutable_softmax_param();
  inline ::apollo::perception::inference::SoftmaxParameter* release_softmax_param();
  inline void set_allocated_softmax_param(::apollo::perception::inference::SoftmaxParameter* softmax_param);

  // optional .apollo.perception.inference.SPPParameter spp_param = 132;
  inline bool has_spp_param() const;
  inline void clear_spp_param();
  static const int kSppParamFieldNumber = 132;
  inline const ::apollo::perception::inference::SPPParameter& spp_param() const;
  inline ::apollo::perception::inference::SPPParameter* mutable_spp_param();
  inline ::apollo::perception::inference::SPPParameter* release_spp_param();
  inline void set_allocated_spp_param(::apollo::perception::inference::SPPParameter* spp_param);

  // optional .apollo.perception.inference.SliceParameter slice_param = 126;
  inline bool has_slice_param() const;
  inline void clear_slice_param();
  static const int kSliceParamFieldNumber = 126;
  inline const ::apollo::perception::inference::SliceParameter& slice_param() const;
  inline ::apollo::perception::inference::SliceParameter* mutable_slice_param();
  inline ::apollo::perception::inference::SliceParameter* release_slice_param();
  inline void set_allocated_slice_param(::apollo::perception::inference::SliceParameter* slice_param);

  // optional .apollo.perception.inference.TanHParameter tanh_param = 127;
  inline bool has_tanh_param() const;
  inline void clear_tanh_param();
  static const int kTanhParamFieldNumber = 127;
  inline const ::apollo::perception::inference::TanHParameter& tanh_param() const;
  inline ::apollo::perception::inference::TanHParameter* mutable_tanh_param();
  inline ::apollo::perception::inference::TanHParameter* release_tanh_param();
  inline void set_allocated_tanh_param(::apollo::perception::inference::TanHParameter* tanh_param);

  // optional .apollo.perception.inference.ThresholdParameter threshold_param = 128;
  inline bool has_threshold_param() const;
  inline void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 128;
  inline const ::apollo::perception::inference::ThresholdParameter& threshold_param() const;
  inline ::apollo::perception::inference::ThresholdParameter* mutable_threshold_param();
  inline ::apollo::perception::inference::ThresholdParameter* release_threshold_param();
  inline void set_allocated_threshold_param(::apollo::perception::inference::ThresholdParameter* threshold_param);

  // optional .apollo.perception.inference.TileParameter tile_param = 138;
  inline bool has_tile_param() const;
  inline void clear_tile_param();
  static const int kTileParamFieldNumber = 138;
  inline const ::apollo::perception::inference::TileParameter& tile_param() const;
  inline ::apollo::perception::inference::TileParameter* mutable_tile_param();
  inline ::apollo::perception::inference::TileParameter* release_tile_param();
  inline void set_allocated_tile_param(::apollo::perception::inference::TileParameter* tile_param);

  // optional .apollo.perception.inference.VideoDataParameter video_data_param = 207;
  inline bool has_video_data_param() const;
  inline void clear_video_data_param();
  static const int kVideoDataParamFieldNumber = 207;
  inline const ::apollo::perception::inference::VideoDataParameter& video_data_param() const;
  inline ::apollo::perception::inference::VideoDataParameter* mutable_video_data_param();
  inline ::apollo::perception::inference::VideoDataParameter* release_video_data_param();
  inline void set_allocated_video_data_param(::apollo::perception::inference::VideoDataParameter* video_data_param);

  // optional .apollo.perception.inference.WindowDataParameter window_data_param = 129;
  inline bool has_window_data_param() const;
  inline void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 129;
  inline const ::apollo::perception::inference::WindowDataParameter& window_data_param() const;
  inline ::apollo::perception::inference::WindowDataParameter* mutable_window_data_param();
  inline ::apollo::perception::inference::WindowDataParameter* release_window_data_param();
  inline void set_allocated_window_data_param(::apollo::perception::inference::WindowDataParameter* window_data_param);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_transform_param();
  inline void clear_has_transform_param();
  inline void set_has_loss_param();
  inline void clear_has_loss_param();
  inline void set_has_accuracy_param();
  inline void clear_has_accuracy_param();
  inline void set_has_annotated_data_param();
  inline void clear_has_annotated_data_param();
  inline void set_has_argmax_param();
  inline void clear_has_argmax_param();
  inline void set_has_batch_norm_param();
  inline void clear_has_batch_norm_param();
  inline void set_has_bias_param();
  inline void clear_has_bias_param();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();
  inline void set_has_contrastive_loss_param();
  inline void clear_has_contrastive_loss_param();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_crop_param();
  inline void clear_has_crop_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_detection_evaluate_param();
  inline void clear_has_detection_evaluate_param();
  inline void set_has_detection_output_param();
  inline void clear_has_detection_output_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_dummy_data_param();
  inline void clear_has_dummy_data_param();
  inline void set_has_eltwise_param();
  inline void clear_has_eltwise_param();
  inline void set_has_elu_param();
  inline void clear_has_elu_param();
  inline void set_has_embed_param();
  inline void clear_has_embed_param();
  inline void set_has_exp_param();
  inline void clear_has_exp_param();
  inline void set_has_flatten_param();
  inline void clear_has_flatten_param();
  inline void set_has_hdf5_data_param();
  inline void clear_has_hdf5_data_param();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();
  inline void set_has_hinge_loss_param();
  inline void clear_has_hinge_loss_param();
  inline void set_has_image_data_param();
  inline void clear_has_image_data_param();
  inline void set_has_infogain_loss_param();
  inline void clear_has_infogain_loss_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_input_param();
  inline void clear_has_input_param();
  inline void set_has_log_param();
  inline void clear_has_log_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_memory_data_param();
  inline void clear_has_memory_data_param();
  inline void set_has_multibox_loss_param();
  inline void clear_has_multibox_loss_param();
  inline void set_has_region_param();
  inline void clear_has_region_param();
  inline void set_has_region_output_param();
  inline void clear_has_region_output_param();
  inline void set_has_region_proposal_param();
  inline void clear_has_region_proposal_param();
  inline void set_has_yolo_target_param();
  inline void clear_has_yolo_target_param();
  inline void set_has_yolo_anchors_param();
  inline void clear_has_yolo_anchors_param();
  inline void set_has_yolo_loss_param();
  inline void clear_has_yolo_loss_param();
  inline void set_has_yolo_dump_param();
  inline void clear_has_yolo_dump_param();
  inline void set_has_padding_param();
  inline void clear_has_padding_param();
  inline void set_has_reorg_param();
  inline void clear_has_reorg_param();
  inline void set_has_mvn_param();
  inline void clear_has_mvn_param();
  inline void set_has_norm_param();
  inline void clear_has_norm_param();
  inline void set_has_parameter_param();
  inline void clear_has_parameter_param();
  inline void set_has_permute_param();
  inline void clear_has_permute_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_power_param();
  inline void clear_has_power_param();
  inline void set_has_prelu_param();
  inline void clear_has_prelu_param();
  inline void set_has_prior_box_param();
  inline void clear_has_prior_box_param();
  inline void set_has_python_param();
  inline void clear_has_python_param();
  inline void set_has_recurrent_param();
  inline void clear_has_recurrent_param();
  inline void set_has_reduction_param();
  inline void clear_has_reduction_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_reshape_param();
  inline void clear_has_reshape_param();
  inline void set_has_roi_pooling_param();
  inline void clear_has_roi_pooling_param();
  inline void set_has_scale_param();
  inline void clear_has_scale_param();
  inline void set_has_sigmoid_param();
  inline void clear_has_sigmoid_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();
  inline void set_has_spp_param();
  inline void clear_has_spp_param();
  inline void set_has_slice_param();
  inline void clear_has_slice_param();
  inline void set_has_tanh_param();
  inline void clear_has_tanh_param();
  inline void set_has_threshold_param();
  inline void clear_has_threshold_param();
  inline void set_has_tile_param();
  inline void clear_has_tile_param();
  inline void set_has_video_data_param();
  inline void clear_has_video_data_param();
  inline void set_has_window_data_param();
  inline void clear_has_window_data_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::ParamSpec > param_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto > blobs_;
  ::google::protobuf::RepeatedField< bool > propagate_down_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule > exclude_;
  ::apollo::perception::inference::TransformationParameter* transform_param_;
  ::apollo::perception::inference::LossParameter* loss_param_;
  ::apollo::perception::inference::AccuracyParameter* accuracy_param_;
  ::apollo::perception::inference::AnnotatedDataParameter* annotated_data_param_;
  ::apollo::perception::inference::ArgMaxParameter* argmax_param_;
  ::apollo::perception::inference::BatchNormParameter* batch_norm_param_;
  ::apollo::perception::inference::BiasParameter* bias_param_;
  ::apollo::perception::inference::ConcatParameter* concat_param_;
  ::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param_;
  ::apollo::perception::inference::ConvolutionParameter* convolution_param_;
  ::apollo::perception::inference::CropParameter* crop_param_;
  ::apollo::perception::inference::DataParameter* data_param_;
  ::apollo::perception::inference::DetectionEvaluateParameter* detection_evaluate_param_;
  ::apollo::perception::inference::DetectionOutputParameter* detection_output_param_;
  ::apollo::perception::inference::DropoutParameter* dropout_param_;
  ::apollo::perception::inference::DummyDataParameter* dummy_data_param_;
  ::apollo::perception::inference::EltwiseParameter* eltwise_param_;
  ::apollo::perception::inference::ELUParameter* elu_param_;
  ::apollo::perception::inference::EmbedParameter* embed_param_;
  ::apollo::perception::inference::ExpParameter* exp_param_;
  ::apollo::perception::inference::FlattenParameter* flatten_param_;
  ::apollo::perception::inference::HDF5DataParameter* hdf5_data_param_;
  ::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param_;
  ::apollo::perception::inference::HingeLossParameter* hinge_loss_param_;
  ::apollo::perception::inference::ImageDataParameter* image_data_param_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::ImageDataParameter > yolo_data_param_;
  ::google::protobuf::RepeatedField< float > data_prob_param_;
  ::apollo::perception::inference::InfogainLossParameter* infogain_loss_param_;
  ::apollo::perception::inference::InnerProductParameter* inner_product_param_;
  ::apollo::perception::inference::InputParameter* input_param_;
  ::apollo::perception::inference::LogParameter* log_param_;
  ::apollo::perception::inference::LRNParameter* lrn_param_;
  ::apollo::perception::inference::MemoryDataParameter* memory_data_param_;
  ::apollo::perception::inference::MultiBoxLossParameter* multibox_loss_param_;
  ::apollo::perception::inference::RegionParameter* region_param_;
  ::apollo::perception::inference::RegionOutputParameter* region_output_param_;
  ::apollo::perception::inference::RegionProposalParameter* region_proposal_param_;
  ::apollo::perception::inference::YoloTargetParameter* yolo_target_param_;
  ::apollo::perception::inference::YoloAnchorsParameter* yolo_anchors_param_;
  ::apollo::perception::inference::YoloLossParameter* yolo_loss_param_;
  ::apollo::perception::inference::YoloDumpParameter* yolo_dump_param_;
  ::apollo::perception::inference::PaddingParameter* padding_param_;
  ::apollo::perception::inference::ReorgParameter* reorg_param_;
  ::apollo::perception::inference::MVNParameter* mvn_param_;
  ::apollo::perception::inference::NormalizeParameter* norm_param_;
  ::apollo::perception::inference::ParameterParameter* parameter_param_;
  ::apollo::perception::inference::PermuteParameter* permute_param_;
  ::apollo::perception::inference::PoolingParameter* pooling_param_;
  ::apollo::perception::inference::PowerParameter* power_param_;
  ::apollo::perception::inference::PReLUParameter* prelu_param_;
  ::apollo::perception::inference::PriorBoxParameter* prior_box_param_;
  ::apollo::perception::inference::PythonParameter* python_param_;
  ::apollo::perception::inference::RecurrentParameter* recurrent_param_;
  ::apollo::perception::inference::ReductionParameter* reduction_param_;
  ::apollo::perception::inference::ReLUParameter* relu_param_;
  ::apollo::perception::inference::ReshapeParameter* reshape_param_;
  ::apollo::perception::inference::ROIPoolingParameter* roi_pooling_param_;
  ::apollo::perception::inference::ScaleParameter* scale_param_;
  ::apollo::perception::inference::SigmoidParameter* sigmoid_param_;
  ::apollo::perception::inference::SoftmaxParameter* softmax_param_;
  ::apollo::perception::inference::SPPParameter* spp_param_;
  ::apollo::perception::inference::SliceParameter* slice_param_;
  ::apollo::perception::inference::TanHParameter* tanh_param_;
  ::apollo::perception::inference::ThresholdParameter* threshold_param_;
  ::apollo::perception::inference::TileParameter* tile_param_;
  ::apollo::perception::inference::VideoDataParameter* video_data_param_;
  ::apollo::perception::inference::WindowDataParameter* window_data_param_;
  int phase_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class TransformationParameter : public ::google::protobuf::Message {
 public:
  TransformationParameter();
  virtual ~TransformationParameter();

  TransformationParameter(const TransformationParameter& from);

  inline TransformationParameter& operator=(const TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationParameter& default_instance();

  void Swap(TransformationParameter* other);

  // implements Message ----------------------------------------------

  TransformationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformationParameter& from);
  void MergeFrom(const TransformationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale = 1 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 1;
  inline float scale() const;
  inline void set_scale(float value);

  // optional bool mirror = 2 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional uint32 crop_size = 3 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional uint32 crop_h = 11 [default = 0];
  inline bool has_crop_h() const;
  inline void clear_crop_h();
  static const int kCropHFieldNumber = 11;
  inline ::google::protobuf::uint32 crop_h() const;
  inline void set_crop_h(::google::protobuf::uint32 value);

  // optional uint32 crop_w = 12 [default = 0];
  inline bool has_crop_w() const;
  inline void clear_crop_w();
  static const int kCropWFieldNumber = 12;
  inline ::google::protobuf::uint32 crop_w() const;
  inline void set_crop_w(::google::protobuf::uint32 value);

  // optional string mean_file = 4;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 4;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // repeated float mean_value = 5;
  inline int mean_value_size() const;
  inline void clear_mean_value();
  static const int kMeanValueFieldNumber = 5;
  inline float mean_value(int index) const;
  inline void set_mean_value(int index, float value);
  inline void add_mean_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional bool force_color = 6 [default = false];
  inline bool has_force_color() const;
  inline void clear_force_color();
  static const int kForceColorFieldNumber = 6;
  inline bool force_color() const;
  inline void set_force_color(bool value);

  // optional bool force_gray = 7 [default = false];
  inline bool has_force_gray() const;
  inline void clear_force_gray();
  static const int kForceGrayFieldNumber = 7;
  inline bool force_gray() const;
  inline void set_force_gray(bool value);

  // optional .apollo.perception.inference.ResizeParameter resize_param = 8;
  inline bool has_resize_param() const;
  inline void clear_resize_param();
  static const int kResizeParamFieldNumber = 8;
  inline const ::apollo::perception::inference::ResizeParameter& resize_param() const;
  inline ::apollo::perception::inference::ResizeParameter* mutable_resize_param();
  inline ::apollo::perception::inference::ResizeParameter* release_resize_param();
  inline void set_allocated_resize_param(::apollo::perception::inference::ResizeParameter* resize_param);

  // optional .apollo.perception.inference.NoiseParameter noise_param = 9;
  inline bool has_noise_param() const;
  inline void clear_noise_param();
  static const int kNoiseParamFieldNumber = 9;
  inline const ::apollo::perception::inference::NoiseParameter& noise_param() const;
  inline ::apollo::perception::inference::NoiseParameter* mutable_noise_param();
  inline ::apollo::perception::inference::NoiseParameter* release_noise_param();
  inline void set_allocated_noise_param(::apollo::perception::inference::NoiseParameter* noise_param);

  // optional .apollo.perception.inference.DistortionParameter distort_param = 13;
  inline bool has_distort_param() const;
  inline void clear_distort_param();
  static const int kDistortParamFieldNumber = 13;
  inline const ::apollo::perception::inference::DistortionParameter& distort_param() const;
  inline ::apollo::perception::inference::DistortionParameter* mutable_distort_param();
  inline ::apollo::perception::inference::DistortionParameter* release_distort_param();
  inline void set_allocated_distort_param(::apollo::perception::inference::DistortionParameter* distort_param);

  // optional .apollo.perception.inference.ExpansionParameter expand_param = 14;
  inline bool has_expand_param() const;
  inline void clear_expand_param();
  static const int kExpandParamFieldNumber = 14;
  inline const ::apollo::perception::inference::ExpansionParameter& expand_param() const;
  inline ::apollo::perception::inference::ExpansionParameter* mutable_expand_param();
  inline ::apollo::perception::inference::ExpansionParameter* release_expand_param();
  inline void set_allocated_expand_param(::apollo::perception::inference::ExpansionParameter* expand_param);

  // optional float jitter = 15;
  inline bool has_jitter() const;
  inline void clear_jitter();
  static const int kJitterFieldNumber = 15;
  inline float jitter() const;
  inline void set_jitter(float value);

  // optional .apollo.perception.inference.EmitConstraint emit_constraint = 10;
  inline bool has_emit_constraint() const;
  inline void clear_emit_constraint();
  static const int kEmitConstraintFieldNumber = 10;
  inline const ::apollo::perception::inference::EmitConstraint& emit_constraint() const;
  inline ::apollo::perception::inference::EmitConstraint* mutable_emit_constraint();
  inline ::apollo::perception::inference::EmitConstraint* release_emit_constraint();
  inline void set_allocated_emit_constraint(::apollo::perception::inference::EmitConstraint* emit_constraint);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.TransformationParameter)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_crop_h();
  inline void clear_has_crop_h();
  inline void set_has_crop_w();
  inline void clear_has_crop_w();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_force_color();
  inline void clear_has_force_color();
  inline void set_has_force_gray();
  inline void clear_has_force_gray();
  inline void set_has_resize_param();
  inline void clear_has_resize_param();
  inline void set_has_noise_param();
  inline void clear_has_noise_param();
  inline void set_has_distort_param();
  inline void clear_has_distort_param();
  inline void set_has_expand_param();
  inline void clear_has_expand_param();
  inline void set_has_jitter();
  inline void clear_has_jitter();
  inline void set_has_emit_constraint();
  inline void clear_has_emit_constraint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float scale_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::uint32 crop_h_;
  ::google::protobuf::uint32 crop_w_;
  ::std::string* mean_file_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  bool mirror_;
  bool force_color_;
  bool force_gray_;
  float jitter_;
  ::apollo::perception::inference::ResizeParameter* resize_param_;
  ::apollo::perception::inference::NoiseParameter* noise_param_;
  ::apollo::perception::inference::DistortionParameter* distort_param_;
  ::apollo::perception::inference::ExpansionParameter* expand_param_;
  ::apollo::perception::inference::EmitConstraint* emit_constraint_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static TransformationParameter* default_instance_;
};
// -------------------------------------------------------------------

class ResizeParameter : public ::google::protobuf::Message {
 public:
  ResizeParameter();
  virtual ~ResizeParameter();

  ResizeParameter(const ResizeParameter& from);

  inline ResizeParameter& operator=(const ResizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResizeParameter& default_instance();

  void Swap(ResizeParameter* other);

  // implements Message ----------------------------------------------

  ResizeParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResizeParameter& from);
  void MergeFrom(const ResizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResizeParameter_Resize_mode Resize_mode;
  static const Resize_mode WARP = ResizeParameter_Resize_mode_WARP;
  static const Resize_mode FIT_SMALL_SIZE = ResizeParameter_Resize_mode_FIT_SMALL_SIZE;
  static const Resize_mode FIT_LARGE_SIZE_AND_PAD = ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD;
  static inline bool Resize_mode_IsValid(int value) {
    return ResizeParameter_Resize_mode_IsValid(value);
  }
  static const Resize_mode Resize_mode_MIN =
    ResizeParameter_Resize_mode_Resize_mode_MIN;
  static const Resize_mode Resize_mode_MAX =
    ResizeParameter_Resize_mode_Resize_mode_MAX;
  static const int Resize_mode_ARRAYSIZE =
    ResizeParameter_Resize_mode_Resize_mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Resize_mode_descriptor() {
    return ResizeParameter_Resize_mode_descriptor();
  }
  static inline const ::std::string& Resize_mode_Name(Resize_mode value) {
    return ResizeParameter_Resize_mode_Name(value);
  }
  static inline bool Resize_mode_Parse(const ::std::string& name,
      Resize_mode* value) {
    return ResizeParameter_Resize_mode_Parse(name, value);
  }

  typedef ResizeParameter_Pad_mode Pad_mode;
  static const Pad_mode CONSTANT = ResizeParameter_Pad_mode_CONSTANT;
  static const Pad_mode MIRRORED = ResizeParameter_Pad_mode_MIRRORED;
  static const Pad_mode REPEAT_NEAREST = ResizeParameter_Pad_mode_REPEAT_NEAREST;
  static inline bool Pad_mode_IsValid(int value) {
    return ResizeParameter_Pad_mode_IsValid(value);
  }
  static const Pad_mode Pad_mode_MIN =
    ResizeParameter_Pad_mode_Pad_mode_MIN;
  static const Pad_mode Pad_mode_MAX =
    ResizeParameter_Pad_mode_Pad_mode_MAX;
  static const int Pad_mode_ARRAYSIZE =
    ResizeParameter_Pad_mode_Pad_mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pad_mode_descriptor() {
    return ResizeParameter_Pad_mode_descriptor();
  }
  static inline const ::std::string& Pad_mode_Name(Pad_mode value) {
    return ResizeParameter_Pad_mode_Name(value);
  }
  static inline bool Pad_mode_Parse(const ::std::string& name,
      Pad_mode* value) {
    return ResizeParameter_Pad_mode_Parse(name, value);
  }

  typedef ResizeParameter_Interp_mode Interp_mode;
  static const Interp_mode LINEAR = ResizeParameter_Interp_mode_LINEAR;
  static const Interp_mode AREA = ResizeParameter_Interp_mode_AREA;
  static const Interp_mode NEAREST = ResizeParameter_Interp_mode_NEAREST;
  static const Interp_mode CUBIC = ResizeParameter_Interp_mode_CUBIC;
  static const Interp_mode LANCZOS4 = ResizeParameter_Interp_mode_LANCZOS4;
  static inline bool Interp_mode_IsValid(int value) {
    return ResizeParameter_Interp_mode_IsValid(value);
  }
  static const Interp_mode Interp_mode_MIN =
    ResizeParameter_Interp_mode_Interp_mode_MIN;
  static const Interp_mode Interp_mode_MAX =
    ResizeParameter_Interp_mode_Interp_mode_MAX;
  static const int Interp_mode_ARRAYSIZE =
    ResizeParameter_Interp_mode_Interp_mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Interp_mode_descriptor() {
    return ResizeParameter_Interp_mode_descriptor();
  }
  static inline const ::std::string& Interp_mode_Name(Interp_mode value) {
    return ResizeParameter_Interp_mode_Name(value);
  }
  static inline bool Interp_mode_Parse(const ::std::string& name,
      Interp_mode* value) {
    return ResizeParameter_Interp_mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float prob = 1 [default = 1];
  inline bool has_prob() const;
  inline void clear_prob();
  static const int kProbFieldNumber = 1;
  inline float prob() const;
  inline void set_prob(float value);

  // optional .apollo.perception.inference.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
  inline bool has_resize_mode() const;
  inline void clear_resize_mode();
  static const int kResizeModeFieldNumber = 2;
  inline ::apollo::perception::inference::ResizeParameter_Resize_mode resize_mode() const;
  inline void set_resize_mode(::apollo::perception::inference::ResizeParameter_Resize_mode value);

  // optional uint32 height = 3 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 height_scale = 8 [default = 0];
  inline bool has_height_scale() const;
  inline void clear_height_scale();
  static const int kHeightScaleFieldNumber = 8;
  inline ::google::protobuf::uint32 height_scale() const;
  inline void set_height_scale(::google::protobuf::uint32 value);

  // optional uint32 width_scale = 9 [default = 0];
  inline bool has_width_scale() const;
  inline void clear_width_scale();
  static const int kWidthScaleFieldNumber = 9;
  inline ::google::protobuf::uint32 width_scale() const;
  inline void set_width_scale(::google::protobuf::uint32 value);

  // optional .apollo.perception.inference.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
  inline bool has_pad_mode() const;
  inline void clear_pad_mode();
  static const int kPadModeFieldNumber = 5;
  inline ::apollo::perception::inference::ResizeParameter_Pad_mode pad_mode() const;
  inline void set_pad_mode(::apollo::perception::inference::ResizeParameter_Pad_mode value);

  // repeated float pad_value = 6;
  inline int pad_value_size() const;
  inline void clear_pad_value();
  static const int kPadValueFieldNumber = 6;
  inline float pad_value(int index) const;
  inline void set_pad_value(int index, float value);
  inline void add_pad_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      pad_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_pad_value();

  // repeated .apollo.perception.inference.ResizeParameter.Interp_mode interp_mode = 7;
  inline int interp_mode_size() const;
  inline void clear_interp_mode();
  static const int kInterpModeFieldNumber = 7;
  inline ::apollo::perception::inference::ResizeParameter_Interp_mode interp_mode(int index) const;
  inline void set_interp_mode(int index, ::apollo::perception::inference::ResizeParameter_Interp_mode value);
  inline void add_interp_mode(::apollo::perception::inference::ResizeParameter_Interp_mode value);
  inline const ::google::protobuf::RepeatedField<int>& interp_mode() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_interp_mode();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ResizeParameter)
 private:
  inline void set_has_prob();
  inline void clear_has_prob();
  inline void set_has_resize_mode();
  inline void clear_has_resize_mode();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height_scale();
  inline void clear_has_height_scale();
  inline void set_has_width_scale();
  inline void clear_has_width_scale();
  inline void set_has_pad_mode();
  inline void clear_has_pad_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float prob_;
  int resize_mode_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_scale_;
  ::google::protobuf::uint32 width_scale_;
  ::google::protobuf::RepeatedField< float > pad_value_;
  ::google::protobuf::RepeatedField<int> interp_mode_;
  int pad_mode_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ResizeParameter* default_instance_;
};
// -------------------------------------------------------------------

class SaltPepperParameter : public ::google::protobuf::Message {
 public:
  SaltPepperParameter();
  virtual ~SaltPepperParameter();

  SaltPepperParameter(const SaltPepperParameter& from);

  inline SaltPepperParameter& operator=(const SaltPepperParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaltPepperParameter& default_instance();

  void Swap(SaltPepperParameter* other);

  // implements Message ----------------------------------------------

  SaltPepperParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaltPepperParameter& from);
  void MergeFrom(const SaltPepperParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float fraction = 1 [default = 0];
  inline bool has_fraction() const;
  inline void clear_fraction();
  static const int kFractionFieldNumber = 1;
  inline float fraction() const;
  inline void set_fraction(float value);

  // repeated float value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value(int index) const;
  inline void set_value(int index, float value);
  inline void add_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SaltPepperParameter)
 private:
  inline void set_has_fraction();
  inline void clear_has_fraction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > value_;
  float fraction_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static SaltPepperParameter* default_instance_;
};
// -------------------------------------------------------------------

class NoiseParameter : public ::google::protobuf::Message {
 public:
  NoiseParameter();
  virtual ~NoiseParameter();

  NoiseParameter(const NoiseParameter& from);

  inline NoiseParameter& operator=(const NoiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoiseParameter& default_instance();

  void Swap(NoiseParameter* other);

  // implements Message ----------------------------------------------

  NoiseParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoiseParameter& from);
  void MergeFrom(const NoiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float prob = 1 [default = 0];
  inline bool has_prob() const;
  inline void clear_prob();
  static const int kProbFieldNumber = 1;
  inline float prob() const;
  inline void set_prob(float value);

  // optional bool hist_eq = 2 [default = false];
  inline bool has_hist_eq() const;
  inline void clear_hist_eq();
  static const int kHistEqFieldNumber = 2;
  inline bool hist_eq() const;
  inline void set_hist_eq(bool value);

  // optional bool inverse = 3 [default = false];
  inline bool has_inverse() const;
  inline void clear_inverse();
  static const int kInverseFieldNumber = 3;
  inline bool inverse() const;
  inline void set_inverse(bool value);

  // optional bool decolorize = 4 [default = false];
  inline bool has_decolorize() const;
  inline void clear_decolorize();
  static const int kDecolorizeFieldNumber = 4;
  inline bool decolorize() const;
  inline void set_decolorize(bool value);

  // optional bool gauss_blur = 5 [default = false];
  inline bool has_gauss_blur() const;
  inline void clear_gauss_blur();
  static const int kGaussBlurFieldNumber = 5;
  inline bool gauss_blur() const;
  inline void set_gauss_blur(bool value);

  // optional float jpeg = 6 [default = -1];
  inline bool has_jpeg() const;
  inline void clear_jpeg();
  static const int kJpegFieldNumber = 6;
  inline float jpeg() const;
  inline void set_jpeg(float value);

  // optional bool posterize = 7 [default = false];
  inline bool has_posterize() const;
  inline void clear_posterize();
  static const int kPosterizeFieldNumber = 7;
  inline bool posterize() const;
  inline void set_posterize(bool value);

  // optional bool erode = 8 [default = false];
  inline bool has_erode() const;
  inline void clear_erode();
  static const int kErodeFieldNumber = 8;
  inline bool erode() const;
  inline void set_erode(bool value);

  // optional bool saltpepper = 9 [default = false];
  inline bool has_saltpepper() const;
  inline void clear_saltpepper();
  static const int kSaltpepperFieldNumber = 9;
  inline bool saltpepper() const;
  inline void set_saltpepper(bool value);

  // optional .apollo.perception.inference.SaltPepperParameter saltpepper_param = 10;
  inline bool has_saltpepper_param() const;
  inline void clear_saltpepper_param();
  static const int kSaltpepperParamFieldNumber = 10;
  inline const ::apollo::perception::inference::SaltPepperParameter& saltpepper_param() const;
  inline ::apollo::perception::inference::SaltPepperParameter* mutable_saltpepper_param();
  inline ::apollo::perception::inference::SaltPepperParameter* release_saltpepper_param();
  inline void set_allocated_saltpepper_param(::apollo::perception::inference::SaltPepperParameter* saltpepper_param);

  // optional bool clahe = 11 [default = false];
  inline bool has_clahe() const;
  inline void clear_clahe();
  static const int kClaheFieldNumber = 11;
  inline bool clahe() const;
  inline void set_clahe(bool value);

  // optional bool convert_to_hsv = 12 [default = false];
  inline bool has_convert_to_hsv() const;
  inline void clear_convert_to_hsv();
  static const int kConvertToHsvFieldNumber = 12;
  inline bool convert_to_hsv() const;
  inline void set_convert_to_hsv(bool value);

  // optional bool convert_to_lab = 13 [default = false];
  inline bool has_convert_to_lab() const;
  inline void clear_convert_to_lab();
  static const int kConvertToLabFieldNumber = 13;
  inline bool convert_to_lab() const;
  inline void set_convert_to_lab(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NoiseParameter)
 private:
  inline void set_has_prob();
  inline void clear_has_prob();
  inline void set_has_hist_eq();
  inline void clear_has_hist_eq();
  inline void set_has_inverse();
  inline void clear_has_inverse();
  inline void set_has_decolorize();
  inline void clear_has_decolorize();
  inline void set_has_gauss_blur();
  inline void clear_has_gauss_blur();
  inline void set_has_jpeg();
  inline void clear_has_jpeg();
  inline void set_has_posterize();
  inline void clear_has_posterize();
  inline void set_has_erode();
  inline void clear_has_erode();
  inline void set_has_saltpepper();
  inline void clear_has_saltpepper();
  inline void set_has_saltpepper_param();
  inline void clear_has_saltpepper_param();
  inline void set_has_clahe();
  inline void clear_has_clahe();
  inline void set_has_convert_to_hsv();
  inline void clear_has_convert_to_hsv();
  inline void set_has_convert_to_lab();
  inline void clear_has_convert_to_lab();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float prob_;
  bool hist_eq_;
  bool inverse_;
  bool decolorize_;
  bool gauss_blur_;
  float jpeg_;
  bool posterize_;
  bool erode_;
  bool saltpepper_;
  bool clahe_;
  ::apollo::perception::inference::SaltPepperParameter* saltpepper_param_;
  bool convert_to_hsv_;
  bool convert_to_lab_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static NoiseParameter* default_instance_;
};
// -------------------------------------------------------------------

class DistortionParameter : public ::google::protobuf::Message {
 public:
  DistortionParameter();
  virtual ~DistortionParameter();

  DistortionParameter(const DistortionParameter& from);

  inline DistortionParameter& operator=(const DistortionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DistortionParameter& default_instance();

  void Swap(DistortionParameter* other);

  // implements Message ----------------------------------------------

  DistortionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DistortionParameter& from);
  void MergeFrom(const DistortionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float brightness_prob = 1 [default = 0];
  inline bool has_brightness_prob() const;
  inline void clear_brightness_prob();
  static const int kBrightnessProbFieldNumber = 1;
  inline float brightness_prob() const;
  inline void set_brightness_prob(float value);

  // optional float brightness_delta = 2 [default = 0];
  inline bool has_brightness_delta() const;
  inline void clear_brightness_delta();
  static const int kBrightnessDeltaFieldNumber = 2;
  inline float brightness_delta() const;
  inline void set_brightness_delta(float value);

  // optional float contrast_prob = 3 [default = 0];
  inline bool has_contrast_prob() const;
  inline void clear_contrast_prob();
  static const int kContrastProbFieldNumber = 3;
  inline float contrast_prob() const;
  inline void set_contrast_prob(float value);

  // optional float contrast_lower = 4 [default = 0];
  inline bool has_contrast_lower() const;
  inline void clear_contrast_lower();
  static const int kContrastLowerFieldNumber = 4;
  inline float contrast_lower() const;
  inline void set_contrast_lower(float value);

  // optional float contrast_upper = 5 [default = 0];
  inline bool has_contrast_upper() const;
  inline void clear_contrast_upper();
  static const int kContrastUpperFieldNumber = 5;
  inline float contrast_upper() const;
  inline void set_contrast_upper(float value);

  // optional float hue_prob = 6 [default = 0];
  inline bool has_hue_prob() const;
  inline void clear_hue_prob();
  static const int kHueProbFieldNumber = 6;
  inline float hue_prob() const;
  inline void set_hue_prob(float value);

  // optional float hue_delta = 7 [default = 0];
  inline bool has_hue_delta() const;
  inline void clear_hue_delta();
  static const int kHueDeltaFieldNumber = 7;
  inline float hue_delta() const;
  inline void set_hue_delta(float value);

  // optional float saturation_prob = 8 [default = 0];
  inline bool has_saturation_prob() const;
  inline void clear_saturation_prob();
  static const int kSaturationProbFieldNumber = 8;
  inline float saturation_prob() const;
  inline void set_saturation_prob(float value);

  // optional float saturation_lower = 9 [default = 0];
  inline bool has_saturation_lower() const;
  inline void clear_saturation_lower();
  static const int kSaturationLowerFieldNumber = 9;
  inline float saturation_lower() const;
  inline void set_saturation_lower(float value);

  // optional float saturation_upper = 10 [default = 0];
  inline bool has_saturation_upper() const;
  inline void clear_saturation_upper();
  static const int kSaturationUpperFieldNumber = 10;
  inline float saturation_upper() const;
  inline void set_saturation_upper(float value);

  // optional float random_order_prob = 11 [default = 0];
  inline bool has_random_order_prob() const;
  inline void clear_random_order_prob();
  static const int kRandomOrderProbFieldNumber = 11;
  inline float random_order_prob() const;
  inline void set_random_order_prob(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DistortionParameter)
 private:
  inline void set_has_brightness_prob();
  inline void clear_has_brightness_prob();
  inline void set_has_brightness_delta();
  inline void clear_has_brightness_delta();
  inline void set_has_contrast_prob();
  inline void clear_has_contrast_prob();
  inline void set_has_contrast_lower();
  inline void clear_has_contrast_lower();
  inline void set_has_contrast_upper();
  inline void clear_has_contrast_upper();
  inline void set_has_hue_prob();
  inline void clear_has_hue_prob();
  inline void set_has_hue_delta();
  inline void clear_has_hue_delta();
  inline void set_has_saturation_prob();
  inline void clear_has_saturation_prob();
  inline void set_has_saturation_lower();
  inline void clear_has_saturation_lower();
  inline void set_has_saturation_upper();
  inline void clear_has_saturation_upper();
  inline void set_has_random_order_prob();
  inline void clear_has_random_order_prob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float brightness_prob_;
  float brightness_delta_;
  float contrast_prob_;
  float contrast_lower_;
  float contrast_upper_;
  float hue_prob_;
  float hue_delta_;
  float saturation_prob_;
  float saturation_lower_;
  float saturation_upper_;
  float random_order_prob_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static DistortionParameter* default_instance_;
};
// -------------------------------------------------------------------

class ExpansionParameter : public ::google::protobuf::Message {
 public:
  ExpansionParameter();
  virtual ~ExpansionParameter();

  ExpansionParameter(const ExpansionParameter& from);

  inline ExpansionParameter& operator=(const ExpansionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpansionParameter& default_instance();

  void Swap(ExpansionParameter* other);

  // implements Message ----------------------------------------------

  ExpansionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpansionParameter& from);
  void MergeFrom(const ExpansionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float prob = 1 [default = 1];
  inline bool has_prob() const;
  inline void clear_prob();
  static const int kProbFieldNumber = 1;
  inline float prob() const;
  inline void set_prob(float value);

  // optional float max_expand_ratio = 2 [default = 1];
  inline bool has_max_expand_ratio() const;
  inline void clear_max_expand_ratio();
  static const int kMaxExpandRatioFieldNumber = 2;
  inline float max_expand_ratio() const;
  inline void set_max_expand_ratio(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ExpansionParameter)
 private:
  inline void set_has_prob();
  inline void clear_has_prob();
  inline void set_has_max_expand_ratio();
  inline void clear_has_max_expand_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float prob_;
  float max_expand_ratio_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ExpansionParameter* default_instance_;
};
// -------------------------------------------------------------------

class LossParameter : public ::google::protobuf::Message {
 public:
  LossParameter();
  virtual ~LossParameter();

  LossParameter(const LossParameter& from);

  inline LossParameter& operator=(const LossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LossParameter& default_instance();

  void Swap(LossParameter* other);

  // implements Message ----------------------------------------------

  LossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LossParameter& from);
  void MergeFrom(const LossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LossParameter_NormalizationMode NormalizationMode;
  static const NormalizationMode FULL = LossParameter_NormalizationMode_FULL;
  static const NormalizationMode VALID = LossParameter_NormalizationMode_VALID;
  static const NormalizationMode BATCH_SIZE = LossParameter_NormalizationMode_BATCH_SIZE;
  static const NormalizationMode NONE = LossParameter_NormalizationMode_NONE;
  static inline bool NormalizationMode_IsValid(int value) {
    return LossParameter_NormalizationMode_IsValid(value);
  }
  static const NormalizationMode NormalizationMode_MIN =
    LossParameter_NormalizationMode_NormalizationMode_MIN;
  static const NormalizationMode NormalizationMode_MAX =
    LossParameter_NormalizationMode_NormalizationMode_MAX;
  static const int NormalizationMode_ARRAYSIZE =
    LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormalizationMode_descriptor() {
    return LossParameter_NormalizationMode_descriptor();
  }
  static inline const ::std::string& NormalizationMode_Name(NormalizationMode value) {
    return LossParameter_NormalizationMode_Name(value);
  }
  static inline bool NormalizationMode_Parse(const ::std::string& name,
      NormalizationMode* value) {
    return LossParameter_NormalizationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 1;
  inline bool has_ignore_label() const;
  inline void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 1;
  inline ::google::protobuf::int32 ignore_label() const;
  inline void set_ignore_label(::google::protobuf::int32 value);

  // optional .apollo.perception.inference.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  inline bool has_normalization() const;
  inline void clear_normalization();
  static const int kNormalizationFieldNumber = 3;
  inline ::apollo::perception::inference::LossParameter_NormalizationMode normalization() const;
  inline void set_normalization(::apollo::perception::inference::LossParameter_NormalizationMode value);

  // optional bool normalize = 2;
  inline bool has_normalize() const;
  inline void clear_normalize();
  static const int kNormalizeFieldNumber = 2;
  inline bool normalize() const;
  inline void set_normalize(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.LossParameter)
 private:
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();
  inline void set_has_normalization();
  inline void clear_has_normalization();
  inline void set_has_normalize();
  inline void clear_has_normalize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  int normalization_;
  bool normalize_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static LossParameter* default_instance_;
};
// -------------------------------------------------------------------

class AccuracyParameter : public ::google::protobuf::Message {
 public:
  AccuracyParameter();
  virtual ~AccuracyParameter();

  AccuracyParameter(const AccuracyParameter& from);

  inline AccuracyParameter& operator=(const AccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccuracyParameter& default_instance();

  void Swap(AccuracyParameter* other);

  // implements Message ----------------------------------------------

  AccuracyParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccuracyParameter& from);
  void MergeFrom(const AccuracyParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 top_k = 1 [default = 1];
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 1;
  inline ::google::protobuf::uint32 top_k() const;
  inline void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 ignore_label = 3;
  inline bool has_ignore_label() const;
  inline void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 3;
  inline ::google::protobuf::int32 ignore_label() const;
  inline void set_ignore_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.AccuracyParameter)
 private:
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 top_k_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 ignore_label_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static AccuracyParameter* default_instance_;
};
// -------------------------------------------------------------------

class AnnotatedDataParameter : public ::google::protobuf::Message {
 public:
  AnnotatedDataParameter();
  virtual ~AnnotatedDataParameter();

  AnnotatedDataParameter(const AnnotatedDataParameter& from);

  inline AnnotatedDataParameter& operator=(const AnnotatedDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotatedDataParameter& default_instance();

  void Swap(AnnotatedDataParameter* other);

  // implements Message ----------------------------------------------

  AnnotatedDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotatedDataParameter& from);
  void MergeFrom(const AnnotatedDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.inference.BatchSampler batch_sampler = 1;
  inline int batch_sampler_size() const;
  inline void clear_batch_sampler();
  static const int kBatchSamplerFieldNumber = 1;
  inline const ::apollo::perception::inference::BatchSampler& batch_sampler(int index) const;
  inline ::apollo::perception::inference::BatchSampler* mutable_batch_sampler(int index);
  inline ::apollo::perception::inference::BatchSampler* add_batch_sampler();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BatchSampler >&
      batch_sampler() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BatchSampler >*
      mutable_batch_sampler();

  // optional string label_map_file = 2;
  inline bool has_label_map_file() const;
  inline void clear_label_map_file();
  static const int kLabelMapFileFieldNumber = 2;
  inline const ::std::string& label_map_file() const;
  inline void set_label_map_file(const ::std::string& value);
  inline void set_label_map_file(const char* value);
  inline void set_label_map_file(const char* value, size_t size);
  inline ::std::string* mutable_label_map_file();
  inline ::std::string* release_label_map_file();
  inline void set_allocated_label_map_file(::std::string* label_map_file);

  // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType anno_type = 3 [default = BBOX];
  inline bool has_anno_type() const;
  inline void clear_anno_type();
  static const int kAnnoTypeFieldNumber = 3;
  inline ::apollo::perception::inference::AnnotatedDatum_AnnotationType anno_type() const;
  inline void set_anno_type(::apollo::perception::inference::AnnotatedDatum_AnnotationType value);

  // optional int32 num_classes = 10 [default = 3];
  inline bool has_num_classes() const;
  inline void clear_num_classes();
  static const int kNumClassesFieldNumber = 10;
  inline ::google::protobuf::int32 num_classes() const;
  inline void set_num_classes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.AnnotatedDataParameter)
 private:
  inline void set_has_label_map_file();
  inline void clear_has_label_map_file();
  inline void set_has_anno_type();
  inline void clear_has_anno_type();
  inline void set_has_num_classes();
  inline void clear_has_num_classes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BatchSampler > batch_sampler_;
  ::std::string* label_map_file_;
  int anno_type_;
  ::google::protobuf::int32 num_classes_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static AnnotatedDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class ArgMaxParameter : public ::google::protobuf::Message {
 public:
  ArgMaxParameter();
  virtual ~ArgMaxParameter();

  ArgMaxParameter(const ArgMaxParameter& from);

  inline ArgMaxParameter& operator=(const ArgMaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgMaxParameter& default_instance();

  void Swap(ArgMaxParameter* other);

  // implements Message ----------------------------------------------

  ArgMaxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArgMaxParameter& from);
  void MergeFrom(const ArgMaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool out_max_val = 1 [default = false];
  inline bool has_out_max_val() const;
  inline void clear_out_max_val();
  static const int kOutMaxValFieldNumber = 1;
  inline bool out_max_val() const;
  inline void set_out_max_val(bool value);

  // optional uint32 top_k = 2 [default = 1];
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 2;
  inline ::google::protobuf::uint32 top_k() const;
  inline void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 3;
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 3;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ArgMaxParameter)
 private:
  inline void set_has_out_max_val();
  inline void clear_has_out_max_val();
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool out_max_val_;
  ::google::protobuf::uint32 top_k_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ArgMaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConcatParameter : public ::google::protobuf::Message {
 public:
  ConcatParameter();
  virtual ~ConcatParameter();

  ConcatParameter(const ConcatParameter& from);

  inline ConcatParameter& operator=(const ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatParameter& default_instance();

  void Swap(ConcatParameter* other);

  // implements Message ----------------------------------------------

  ConcatParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConcatParameter& from);
  void MergeFrom(const ConcatParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional uint32 concat_dim = 1 [default = 1];
  inline bool has_concat_dim() const;
  inline void clear_concat_dim();
  static const int kConcatDimFieldNumber = 1;
  inline ::google::protobuf::uint32 concat_dim() const;
  inline void set_concat_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ConcatParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_concat_dim();
  inline void clear_has_concat_dim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 concat_dim_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ConcatParameter* default_instance_;
};
// -------------------------------------------------------------------

class BatchNormParameter : public ::google::protobuf::Message {
 public:
  BatchNormParameter();
  virtual ~BatchNormParameter();

  BatchNormParameter(const BatchNormParameter& from);

  inline BatchNormParameter& operator=(const BatchNormParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchNormParameter& default_instance();

  void Swap(BatchNormParameter* other);

  // implements Message ----------------------------------------------

  BatchNormParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchNormParameter& from);
  void MergeFrom(const BatchNormParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_global_stats = 1;
  inline bool has_use_global_stats() const;
  inline void clear_use_global_stats();
  static const int kUseGlobalStatsFieldNumber = 1;
  inline bool use_global_stats() const;
  inline void set_use_global_stats(bool value);

  // optional float moving_average_fraction = 2 [default = 0.999];
  inline bool has_moving_average_fraction() const;
  inline void clear_moving_average_fraction();
  static const int kMovingAverageFractionFieldNumber = 2;
  inline float moving_average_fraction() const;
  inline void set_moving_average_fraction(float value);

  // optional float eps = 3 [default = 1e-05];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 3;
  inline float eps() const;
  inline void set_eps(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.BatchNormParameter)
 private:
  inline void set_has_use_global_stats();
  inline void clear_has_use_global_stats();
  inline void set_has_moving_average_fraction();
  inline void clear_has_moving_average_fraction();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool use_global_stats_;
  float moving_average_fraction_;
  float eps_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static BatchNormParameter* default_instance_;
};
// -------------------------------------------------------------------

class BiasParameter : public ::google::protobuf::Message {
 public:
  BiasParameter();
  virtual ~BiasParameter();

  BiasParameter(const BiasParameter& from);

  inline BiasParameter& operator=(const BiasParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BiasParameter& default_instance();

  void Swap(BiasParameter* other);

  // implements Message ----------------------------------------------

  BiasParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BiasParameter& from);
  void MergeFrom(const BiasParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  inline bool has_num_axes() const;
  inline void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  inline ::google::protobuf::int32 num_axes() const;
  inline void set_num_axes(::google::protobuf::int32 value);

  // optional .apollo.perception.inference.FillerParameter filler = 3;
  inline bool has_filler() const;
  inline void clear_filler();
  static const int kFillerFieldNumber = 3;
  inline const ::apollo::perception::inference::FillerParameter& filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_filler();
  inline ::apollo::perception::inference::FillerParameter* release_filler();
  inline void set_allocated_filler(::apollo::perception::inference::FillerParameter* filler);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.BiasParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();
  inline void set_has_filler();
  inline void clear_has_filler();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  ::apollo::perception::inference::FillerParameter* filler_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static BiasParameter* default_instance_;
};
// -------------------------------------------------------------------

class ContrastiveLossParameter : public ::google::protobuf::Message {
 public:
  ContrastiveLossParameter();
  virtual ~ContrastiveLossParameter();

  ContrastiveLossParameter(const ContrastiveLossParameter& from);

  inline ContrastiveLossParameter& operator=(const ContrastiveLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContrastiveLossParameter& default_instance();

  void Swap(ContrastiveLossParameter* other);

  // implements Message ----------------------------------------------

  ContrastiveLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContrastiveLossParameter& from);
  void MergeFrom(const ContrastiveLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float margin = 1 [default = 1];
  inline bool has_margin() const;
  inline void clear_margin();
  static const int kMarginFieldNumber = 1;
  inline float margin() const;
  inline void set_margin(float value);

  // optional bool legacy_version = 2 [default = false];
  inline bool has_legacy_version() const;
  inline void clear_legacy_version();
  static const int kLegacyVersionFieldNumber = 2;
  inline bool legacy_version() const;
  inline void set_legacy_version(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ContrastiveLossParameter)
 private:
  inline void set_has_margin();
  inline void clear_has_margin();
  inline void set_has_legacy_version();
  inline void clear_has_legacy_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float margin_;
  bool legacy_version_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ContrastiveLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  void Swap(ConvolutionParameter* other);

  // implements Message ----------------------------------------------

  ConvolutionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ConvolutionParameter_Engine Engine;
  static const Engine DEFAULT = ConvolutionParameter_Engine_DEFAULT;
  static const Engine CAFFE = ConvolutionParameter_Engine_CAFFE;
  static const Engine CUDNN = ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ConvolutionParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ConvolutionParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ConvolutionParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // repeated uint32 pad = 3;
  inline int pad_size() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 3;
  inline ::google::protobuf::uint32 pad(int index) const;
  inline void set_pad(int index, ::google::protobuf::uint32 value);
  inline void add_pad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 kernel_size = 4;
  inline int kernel_size_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 kernel_size(int index) const;
  inline void set_kernel_size(int index, ::google::protobuf::uint32 value);
  inline void add_kernel_size(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_size();

  // repeated uint32 stride = 6;
  inline int stride_size() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 6;
  inline ::google::protobuf::uint32 stride(int index) const;
  inline void set_stride(int index, ::google::protobuf::uint32 value);
  inline void add_stride(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 dilation = 18;
  inline int dilation_size() const;
  inline void clear_dilation();
  static const int kDilationFieldNumber = 18;
  inline ::google::protobuf::uint32 dilation(int index) const;
  inline void set_dilation(int index, ::google::protobuf::uint32 value);
  inline void add_dilation(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dilation() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dilation();

  // optional uint32 pad_h = 9 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 11;
  inline bool has_kernel_h() const;
  inline void clear_kernel_h();
  static const int kKernelHFieldNumber = 11;
  inline ::google::protobuf::uint32 kernel_h() const;
  inline void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 12;
  inline bool has_kernel_w() const;
  inline void clear_kernel_w();
  static const int kKernelWFieldNumber = 12;
  inline ::google::protobuf::uint32 kernel_w() const;
  inline void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 13;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 13;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 14;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 14;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // optional uint32 group = 5 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional .apollo.perception.inference.FillerParameter weight_filler = 7;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  inline const ::apollo::perception::inference::FillerParameter& weight_filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_weight_filler();
  inline ::apollo::perception::inference::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler);

  // optional .apollo.perception.inference.FillerParameter bias_filler = 8;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  inline const ::apollo::perception::inference::FillerParameter& bias_filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_bias_filler();
  inline ::apollo::perception::inference::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler);

  // optional .apollo.perception.inference.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 15;
  inline ::apollo::perception::inference::ConvolutionParameter_Engine engine() const;
  inline void set_engine(::apollo::perception::inference::ConvolutionParameter_Engine value);

  // optional int32 axis = 16 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 16;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional bool force_nd_im2col = 17 [default = false];
  inline bool has_force_nd_im2col() const;
  inline void clear_force_nd_im2col();
  static const int kForceNdIm2ColFieldNumber = 17;
  inline bool force_nd_im2col() const;
  inline void set_force_nd_im2col(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ConvolutionParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_force_nd_im2col();
  inline void clear_has_force_nd_im2col();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_size_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dilation_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  bool bias_term_;
  bool force_nd_im2col_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::apollo::perception::inference::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 group_;
  int engine_;
  ::apollo::perception::inference::FillerParameter* bias_filler_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ConvolutionParameter* default_instance_;
};
// -------------------------------------------------------------------

class CropParameter : public ::google::protobuf::Message {
 public:
  CropParameter();
  virtual ~CropParameter();

  CropParameter(const CropParameter& from);

  inline CropParameter& operator=(const CropParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CropParameter& default_instance();

  void Swap(CropParameter* other);

  // implements Message ----------------------------------------------

  CropParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CropParameter& from);
  void MergeFrom(const CropParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 2];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // repeated uint32 offset = 2;
  inline int offset_size() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint32 offset(int index) const;
  inline void set_offset(int index, ::google::protobuf::uint32 value);
  inline void add_offset(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.CropParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static CropParameter* default_instance_;
};
// -------------------------------------------------------------------

class DataParameter : public ::google::protobuf::Message {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataParameter& default_instance();

  void Swap(DataParameter* other);

  // implements Message ----------------------------------------------

  DataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataParameter_DB DB;
  static const DB LEVELDB = DataParameter_DB_LEVELDB;
  static const DB LMDB = DataParameter_DB_LMDB;
  static inline bool DB_IsValid(int value) {
    return DataParameter_DB_IsValid(value);
  }
  static const DB DB_MIN =
    DataParameter_DB_DB_MIN;
  static const DB DB_MAX =
    DataParameter_DB_DB_MAX;
  static const int DB_ARRAYSIZE =
    DataParameter_DB_DB_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DB_descriptor() {
    return DataParameter_DB_descriptor();
  }
  static inline const ::std::string& DB_Name(DB value) {
    return DataParameter_DB_Name(value);
  }
  static inline bool DB_Parse(const ::std::string& name,
      DB* value) {
    return DataParameter_DB_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional .apollo.perception.inference.DataParameter.DB backend = 8 [default = LEVELDB];
  inline bool has_backend() const;
  inline void clear_backend();
  static const int kBackendFieldNumber = 8;
  inline ::apollo::perception::inference::DataParameter_DB backend() const;
  inline void set_backend(::apollo::perception::inference::DataParameter_DB value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string mean_file = 3;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional bool force_encoded_color = 9 [default = false];
  inline bool has_force_encoded_color() const;
  inline void clear_force_encoded_color();
  static const int kForceEncodedColorFieldNumber = 9;
  inline bool force_encoded_color() const;
  inline void set_force_encoded_color(bool value);

  // optional uint32 prefetch = 10 [default = 4];
  inline bool has_prefetch() const;
  inline void clear_prefetch();
  static const int kPrefetchFieldNumber = 10;
  inline ::google::protobuf::uint32 prefetch() const;
  inline void set_prefetch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_backend();
  inline void clear_has_backend();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_force_encoded_color();
  inline void clear_has_force_encoded_color();
  inline void set_has_prefetch();
  inline void clear_has_prefetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 rand_skip_;
  int backend_;
  float scale_;
  ::std::string* mean_file_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  bool force_encoded_color_;
  ::google::protobuf::uint32 prefetch_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class DetectionEvaluateParameter : public ::google::protobuf::Message {
 public:
  DetectionEvaluateParameter();
  virtual ~DetectionEvaluateParameter();

  DetectionEvaluateParameter(const DetectionEvaluateParameter& from);

  inline DetectionEvaluateParameter& operator=(const DetectionEvaluateParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionEvaluateParameter& default_instance();

  void Swap(DetectionEvaluateParameter* other);

  // implements Message ----------------------------------------------

  DetectionEvaluateParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectionEvaluateParameter& from);
  void MergeFrom(const DetectionEvaluateParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_classes = 1;
  inline bool has_num_classes() const;
  inline void clear_num_classes();
  static const int kNumClassesFieldNumber = 1;
  inline ::google::protobuf::uint32 num_classes() const;
  inline void set_num_classes(::google::protobuf::uint32 value);

  // optional uint32 background_label_id = 2 [default = 0];
  inline bool has_background_label_id() const;
  inline void clear_background_label_id();
  static const int kBackgroundLabelIdFieldNumber = 2;
  inline ::google::protobuf::uint32 background_label_id() const;
  inline void set_background_label_id(::google::protobuf::uint32 value);

  // optional float overlap_threshold = 3 [default = 0.5];
  inline bool has_overlap_threshold() const;
  inline void clear_overlap_threshold();
  static const int kOverlapThresholdFieldNumber = 3;
  inline float overlap_threshold() const;
  inline void set_overlap_threshold(float value);

  // optional bool evaluate_difficult_gt = 4 [default = true];
  inline bool has_evaluate_difficult_gt() const;
  inline void clear_evaluate_difficult_gt();
  static const int kEvaluateDifficultGtFieldNumber = 4;
  inline bool evaluate_difficult_gt() const;
  inline void set_evaluate_difficult_gt(bool value);

  // optional string name_size_file = 5;
  inline bool has_name_size_file() const;
  inline void clear_name_size_file();
  static const int kNameSizeFileFieldNumber = 5;
  inline const ::std::string& name_size_file() const;
  inline void set_name_size_file(const ::std::string& value);
  inline void set_name_size_file(const char* value);
  inline void set_name_size_file(const char* value, size_t size);
  inline ::std::string* mutable_name_size_file();
  inline ::std::string* release_name_size_file();
  inline void set_allocated_name_size_file(::std::string* name_size_file);

  // optional .apollo.perception.inference.ResizeParameter resize_param = 6;
  inline bool has_resize_param() const;
  inline void clear_resize_param();
  static const int kResizeParamFieldNumber = 6;
  inline const ::apollo::perception::inference::ResizeParameter& resize_param() const;
  inline ::apollo::perception::inference::ResizeParameter* mutable_resize_param();
  inline ::apollo::perception::inference::ResizeParameter* release_resize_param();
  inline void set_allocated_resize_param(::apollo::perception::inference::ResizeParameter* resize_param);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DetectionEvaluateParameter)
 private:
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_background_label_id();
  inline void clear_has_background_label_id();
  inline void set_has_overlap_threshold();
  inline void clear_has_overlap_threshold();
  inline void set_has_evaluate_difficult_gt();
  inline void clear_has_evaluate_difficult_gt();
  inline void set_has_name_size_file();
  inline void clear_has_name_size_file();
  inline void set_has_resize_param();
  inline void clear_has_resize_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_classes_;
  ::google::protobuf::uint32 background_label_id_;
  float overlap_threshold_;
  bool evaluate_difficult_gt_;
  ::std::string* name_size_file_;
  ::apollo::perception::inference::ResizeParameter* resize_param_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static DetectionEvaluateParameter* default_instance_;
};
// -------------------------------------------------------------------

class NonMaximumSuppressionParameter : public ::google::protobuf::Message {
 public:
  NonMaximumSuppressionParameter();
  virtual ~NonMaximumSuppressionParameter();

  NonMaximumSuppressionParameter(const NonMaximumSuppressionParameter& from);

  inline NonMaximumSuppressionParameter& operator=(const NonMaximumSuppressionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NonMaximumSuppressionParameter& default_instance();

  void Swap(NonMaximumSuppressionParameter* other);

  // implements Message ----------------------------------------------

  NonMaximumSuppressionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NonMaximumSuppressionParameter& from);
  void MergeFrom(const NonMaximumSuppressionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float nms_threshold = 1 [default = 0.3];
  inline bool has_nms_threshold() const;
  inline void clear_nms_threshold();
  static const int kNmsThresholdFieldNumber = 1;
  inline float nms_threshold() const;
  inline void set_nms_threshold(float value);

  // optional int32 top_k = 2;
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 2;
  inline ::google::protobuf::int32 top_k() const;
  inline void set_top_k(::google::protobuf::int32 value);

  // optional float eta = 3 [default = 1];
  inline bool has_eta() const;
  inline void clear_eta();
  static const int kEtaFieldNumber = 3;
  inline float eta() const;
  inline void set_eta(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NonMaximumSuppressionParameter)
 private:
  inline void set_has_nms_threshold();
  inline void clear_has_nms_threshold();
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_eta();
  inline void clear_has_eta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float nms_threshold_;
  ::google::protobuf::int32 top_k_;
  float eta_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static NonMaximumSuppressionParameter* default_instance_;
};
// -------------------------------------------------------------------

class SaveOutputParameter : public ::google::protobuf::Message {
 public:
  SaveOutputParameter();
  virtual ~SaveOutputParameter();

  SaveOutputParameter(const SaveOutputParameter& from);

  inline SaveOutputParameter& operator=(const SaveOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveOutputParameter& default_instance();

  void Swap(SaveOutputParameter* other);

  // implements Message ----------------------------------------------

  SaveOutputParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveOutputParameter& from);
  void MergeFrom(const SaveOutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string output_directory = 1;
  inline bool has_output_directory() const;
  inline void clear_output_directory();
  static const int kOutputDirectoryFieldNumber = 1;
  inline const ::std::string& output_directory() const;
  inline void set_output_directory(const ::std::string& value);
  inline void set_output_directory(const char* value);
  inline void set_output_directory(const char* value, size_t size);
  inline ::std::string* mutable_output_directory();
  inline ::std::string* release_output_directory();
  inline void set_allocated_output_directory(::std::string* output_directory);

  // optional string output_name_prefix = 2;
  inline bool has_output_name_prefix() const;
  inline void clear_output_name_prefix();
  static const int kOutputNamePrefixFieldNumber = 2;
  inline const ::std::string& output_name_prefix() const;
  inline void set_output_name_prefix(const ::std::string& value);
  inline void set_output_name_prefix(const char* value);
  inline void set_output_name_prefix(const char* value, size_t size);
  inline ::std::string* mutable_output_name_prefix();
  inline ::std::string* release_output_name_prefix();
  inline void set_allocated_output_name_prefix(::std::string* output_name_prefix);

  // optional string output_format = 3;
  inline bool has_output_format() const;
  inline void clear_output_format();
  static const int kOutputFormatFieldNumber = 3;
  inline const ::std::string& output_format() const;
  inline void set_output_format(const ::std::string& value);
  inline void set_output_format(const char* value);
  inline void set_output_format(const char* value, size_t size);
  inline ::std::string* mutable_output_format();
  inline ::std::string* release_output_format();
  inline void set_allocated_output_format(::std::string* output_format);

  // optional string label_map_file = 4;
  inline bool has_label_map_file() const;
  inline void clear_label_map_file();
  static const int kLabelMapFileFieldNumber = 4;
  inline const ::std::string& label_map_file() const;
  inline void set_label_map_file(const ::std::string& value);
  inline void set_label_map_file(const char* value);
  inline void set_label_map_file(const char* value, size_t size);
  inline ::std::string* mutable_label_map_file();
  inline ::std::string* release_label_map_file();
  inline void set_allocated_label_map_file(::std::string* label_map_file);

  // optional string name_size_file = 5;
  inline bool has_name_size_file() const;
  inline void clear_name_size_file();
  static const int kNameSizeFileFieldNumber = 5;
  inline const ::std::string& name_size_file() const;
  inline void set_name_size_file(const ::std::string& value);
  inline void set_name_size_file(const char* value);
  inline void set_name_size_file(const char* value, size_t size);
  inline ::std::string* mutable_name_size_file();
  inline ::std::string* release_name_size_file();
  inline void set_allocated_name_size_file(::std::string* name_size_file);

  // optional uint32 num_test_image = 6;
  inline bool has_num_test_image() const;
  inline void clear_num_test_image();
  static const int kNumTestImageFieldNumber = 6;
  inline ::google::protobuf::uint32 num_test_image() const;
  inline void set_num_test_image(::google::protobuf::uint32 value);

  // optional .apollo.perception.inference.ResizeParameter resize_param = 7;
  inline bool has_resize_param() const;
  inline void clear_resize_param();
  static const int kResizeParamFieldNumber = 7;
  inline const ::apollo::perception::inference::ResizeParameter& resize_param() const;
  inline ::apollo::perception::inference::ResizeParameter* mutable_resize_param();
  inline ::apollo::perception::inference::ResizeParameter* release_resize_param();
  inline void set_allocated_resize_param(::apollo::perception::inference::ResizeParameter* resize_param);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SaveOutputParameter)
 private:
  inline void set_has_output_directory();
  inline void clear_has_output_directory();
  inline void set_has_output_name_prefix();
  inline void clear_has_output_name_prefix();
  inline void set_has_output_format();
  inline void clear_has_output_format();
  inline void set_has_label_map_file();
  inline void clear_has_label_map_file();
  inline void set_has_name_size_file();
  inline void clear_has_name_size_file();
  inline void set_has_num_test_image();
  inline void clear_has_num_test_image();
  inline void set_has_resize_param();
  inline void clear_has_resize_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* output_directory_;
  ::std::string* output_name_prefix_;
  ::std::string* output_format_;
  ::std::string* label_map_file_;
  ::std::string* name_size_file_;
  ::apollo::perception::inference::ResizeParameter* resize_param_;
  ::google::protobuf::uint32 num_test_image_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static SaveOutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class DetectionOutputParameter : public ::google::protobuf::Message {
 public:
  DetectionOutputParameter();
  virtual ~DetectionOutputParameter();

  DetectionOutputParameter(const DetectionOutputParameter& from);

  inline DetectionOutputParameter& operator=(const DetectionOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionOutputParameter& default_instance();

  void Swap(DetectionOutputParameter* other);

  // implements Message ----------------------------------------------

  DetectionOutputParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectionOutputParameter& from);
  void MergeFrom(const DetectionOutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_classes = 1;
  inline bool has_num_classes() const;
  inline void clear_num_classes();
  static const int kNumClassesFieldNumber = 1;
  inline ::google::protobuf::uint32 num_classes() const;
  inline void set_num_classes(::google::protobuf::uint32 value);

  // optional bool share_location = 2 [default = true];
  inline bool has_share_location() const;
  inline void clear_share_location();
  static const int kShareLocationFieldNumber = 2;
  inline bool share_location() const;
  inline void set_share_location(bool value);

  // optional int32 background_label_id = 3 [default = 0];
  inline bool has_background_label_id() const;
  inline void clear_background_label_id();
  static const int kBackgroundLabelIdFieldNumber = 3;
  inline ::google::protobuf::int32 background_label_id() const;
  inline void set_background_label_id(::google::protobuf::int32 value);

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 4;
  inline bool has_nms_param() const;
  inline void clear_nms_param();
  static const int kNmsParamFieldNumber = 4;
  inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param() const;
  inline ::apollo::perception::inference::NonMaximumSuppressionParameter* mutable_nms_param();
  inline ::apollo::perception::inference::NonMaximumSuppressionParameter* release_nms_param();
  inline void set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param);

  // optional .apollo.perception.inference.SaveOutputParameter save_output_param = 5;
  inline bool has_save_output_param() const;
  inline void clear_save_output_param();
  static const int kSaveOutputParamFieldNumber = 5;
  inline const ::apollo::perception::inference::SaveOutputParameter& save_output_param() const;
  inline ::apollo::perception::inference::SaveOutputParameter* mutable_save_output_param();
  inline ::apollo::perception::inference::SaveOutputParameter* release_save_output_param();
  inline void set_allocated_save_output_param(::apollo::perception::inference::SaveOutputParameter* save_output_param);

  // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
  inline bool has_code_type() const;
  inline void clear_code_type();
  static const int kCodeTypeFieldNumber = 6;
  inline ::apollo::perception::inference::PriorBoxParameter_CodeType code_type() const;
  inline void set_code_type(::apollo::perception::inference::PriorBoxParameter_CodeType value);

  // optional bool variance_encoded_in_target = 8 [default = false];
  inline bool has_variance_encoded_in_target() const;
  inline void clear_variance_encoded_in_target();
  static const int kVarianceEncodedInTargetFieldNumber = 8;
  inline bool variance_encoded_in_target() const;
  inline void set_variance_encoded_in_target(bool value);

  // optional int32 keep_top_k = 7 [default = -1];
  inline bool has_keep_top_k() const;
  inline void clear_keep_top_k();
  static const int kKeepTopKFieldNumber = 7;
  inline ::google::protobuf::int32 keep_top_k() const;
  inline void set_keep_top_k(::google::protobuf::int32 value);

  // optional float confidence_threshold = 9;
  inline bool has_confidence_threshold() const;
  inline void clear_confidence_threshold();
  static const int kConfidenceThresholdFieldNumber = 9;
  inline float confidence_threshold() const;
  inline void set_confidence_threshold(float value);

  // optional bool visualize = 10 [default = false];
  inline bool has_visualize() const;
  inline void clear_visualize();
  static const int kVisualizeFieldNumber = 10;
  inline bool visualize() const;
  inline void set_visualize(bool value);

  // optional float visualize_threshold = 11;
  inline bool has_visualize_threshold() const;
  inline void clear_visualize_threshold();
  static const int kVisualizeThresholdFieldNumber = 11;
  inline float visualize_threshold() const;
  inline void set_visualize_threshold(float value);

  // optional string save_file = 12;
  inline bool has_save_file() const;
  inline void clear_save_file();
  static const int kSaveFileFieldNumber = 12;
  inline const ::std::string& save_file() const;
  inline void set_save_file(const ::std::string& value);
  inline void set_save_file(const char* value);
  inline void set_save_file(const char* value, size_t size);
  inline ::std::string* mutable_save_file();
  inline ::std::string* release_save_file();
  inline void set_allocated_save_file(::std::string* save_file);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DetectionOutputParameter)
 private:
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_share_location();
  inline void clear_has_share_location();
  inline void set_has_background_label_id();
  inline void clear_has_background_label_id();
  inline void set_has_nms_param();
  inline void clear_has_nms_param();
  inline void set_has_save_output_param();
  inline void clear_has_save_output_param();
  inline void set_has_code_type();
  inline void clear_has_code_type();
  inline void set_has_variance_encoded_in_target();
  inline void clear_has_variance_encoded_in_target();
  inline void set_has_keep_top_k();
  inline void clear_has_keep_top_k();
  inline void set_has_confidence_threshold();
  inline void clear_has_confidence_threshold();
  inline void set_has_visualize();
  inline void clear_has_visualize();
  inline void set_has_visualize_threshold();
  inline void clear_has_visualize_threshold();
  inline void set_has_save_file();
  inline void clear_has_save_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_classes_;
  ::google::protobuf::int32 background_label_id_;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param_;
  ::apollo::perception::inference::SaveOutputParameter* save_output_param_;
  int code_type_;
  bool share_location_;
  bool variance_encoded_in_target_;
  bool visualize_;
  ::google::protobuf::int32 keep_top_k_;
  float confidence_threshold_;
  ::std::string* save_file_;
  float visualize_threshold_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static DetectionOutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class RegionOutputParameter : public ::google::protobuf::Message {
 public:
  RegionOutputParameter();
  virtual ~RegionOutputParameter();

  RegionOutputParameter(const RegionOutputParameter& from);

  inline RegionOutputParameter& operator=(const RegionOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionOutputParameter& default_instance();

  void Swap(RegionOutputParameter* other);

  // implements Message ----------------------------------------------

  RegionOutputParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionOutputParameter& from);
  void MergeFrom(const RegionOutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_classes = 1;
  inline bool has_num_classes() const;
  inline void clear_num_classes();
  static const int kNumClassesFieldNumber = 1;
  inline ::google::protobuf::uint32 num_classes() const;
  inline void set_num_classes(::google::protobuf::uint32 value);

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 2;
  inline bool has_nms_param() const;
  inline void clear_nms_param();
  static const int kNmsParamFieldNumber = 2;
  inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param() const;
  inline ::apollo::perception::inference::NonMaximumSuppressionParameter* mutable_nms_param();
  inline ::apollo::perception::inference::NonMaximumSuppressionParameter* release_nms_param();
  inline void set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param);

  // optional int32 keep_top_k = 3 [default = -1];
  inline bool has_keep_top_k() const;
  inline void clear_keep_top_k();
  static const int kKeepTopKFieldNumber = 3;
  inline ::google::protobuf::int32 keep_top_k() const;
  inline void set_keep_top_k(::google::protobuf::int32 value);

  // optional float confidence_threshold = 4;
  inline bool has_confidence_threshold() const;
  inline void clear_confidence_threshold();
  static const int kConfidenceThresholdFieldNumber = 4;
  inline float confidence_threshold() const;
  inline void set_confidence_threshold(float value);

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 5;
  inline int anchorbox_size() const;
  inline void clear_anchorbox();
  static const int kAnchorboxFieldNumber = 5;
  inline const ::apollo::perception::inference::AnchorBox& anchorbox(int index) const;
  inline ::apollo::perception::inference::AnchorBox* mutable_anchorbox(int index);
  inline ::apollo::perception::inference::AnchorBox* add_anchorbox();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >&
      anchorbox() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >*
      mutable_anchorbox();

  // optional int32 nms_type = 6;
  inline bool has_nms_type() const;
  inline void clear_nms_type();
  static const int kNmsTypeFieldNumber = 6;
  inline ::google::protobuf::int32 nms_type() const;
  inline void set_nms_type(::google::protobuf::int32 value);

  // optional float nms_sigma = 7;
  inline bool has_nms_sigma() const;
  inline void clear_nms_sigma();
  static const int kNmsSigmaFieldNumber = 7;
  inline float nms_sigma() const;
  inline void set_nms_sigma(float value);

  // optional bool is_rpn = 8 [default = false];
  inline bool has_is_rpn() const;
  inline void clear_is_rpn();
  static const int kIsRpnFieldNumber = 8;
  inline bool is_rpn() const;
  inline void set_is_rpn(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.RegionOutputParameter)
 private:
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_nms_param();
  inline void clear_has_nms_param();
  inline void set_has_keep_top_k();
  inline void clear_has_keep_top_k();
  inline void set_has_confidence_threshold();
  inline void clear_has_confidence_threshold();
  inline void set_has_nms_type();
  inline void clear_has_nms_type();
  inline void set_has_nms_sigma();
  inline void clear_has_nms_sigma();
  inline void set_has_is_rpn();
  inline void clear_has_is_rpn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param_;
  ::google::protobuf::uint32 num_classes_;
  ::google::protobuf::int32 keep_top_k_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox > anchorbox_;
  float confidence_threshold_;
  ::google::protobuf::int32 nms_type_;
  float nms_sigma_;
  bool is_rpn_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static RegionOutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class DropoutParameter : public ::google::protobuf::Message {
 public:
  DropoutParameter();
  virtual ~DropoutParameter();

  DropoutParameter(const DropoutParameter& from);

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropoutParameter& default_instance();

  void Swap(DropoutParameter* other);

  // implements Message ----------------------------------------------

  DropoutParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropoutParameter& from);
  void MergeFrom(const DropoutParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float dropout_ratio = 1 [default = 0.5];
  inline bool has_dropout_ratio() const;
  inline void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 1;
  inline float dropout_ratio() const;
  inline void set_dropout_ratio(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DropoutParameter)
 private:
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float dropout_ratio_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static DropoutParameter* default_instance_;
};
// -------------------------------------------------------------------

class DummyDataParameter : public ::google::protobuf::Message {
 public:
  DummyDataParameter();
  virtual ~DummyDataParameter();

  DummyDataParameter(const DummyDataParameter& from);

  inline DummyDataParameter& operator=(const DummyDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DummyDataParameter& default_instance();

  void Swap(DummyDataParameter* other);

  // implements Message ----------------------------------------------

  DummyDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DummyDataParameter& from);
  void MergeFrom(const DummyDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.inference.FillerParameter data_filler = 1;
  inline int data_filler_size() const;
  inline void clear_data_filler();
  static const int kDataFillerFieldNumber = 1;
  inline const ::apollo::perception::inference::FillerParameter& data_filler(int index) const;
  inline ::apollo::perception::inference::FillerParameter* mutable_data_filler(int index);
  inline ::apollo::perception::inference::FillerParameter* add_data_filler();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::FillerParameter >&
      data_filler() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::FillerParameter >*
      mutable_data_filler();

  // repeated .apollo.perception.inference.BlobShape shape = 6;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 6;
  inline const ::apollo::perception::inference::BlobShape& shape(int index) const;
  inline ::apollo::perception::inference::BlobShape* mutable_shape(int index);
  inline ::apollo::perception::inference::BlobShape* add_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape >&
      shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape >*
      mutable_shape();

  // repeated uint32 num = 2;
  inline int num_size() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num(int index) const;
  inline void set_num(int index, ::google::protobuf::uint32 value);
  inline void add_num(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_num();

  // repeated uint32 channels = 3;
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 3;
  inline ::google::protobuf::uint32 channels(int index) const;
  inline void set_channels(int index, ::google::protobuf::uint32 value);
  inline void add_channels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channels();

  // repeated uint32 height = 4;
  inline int height_size() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::uint32 height(int index) const;
  inline void set_height(int index, ::google::protobuf::uint32 value);
  inline void add_height(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      height() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_height();

  // repeated uint32 width = 5;
  inline int width_size() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline ::google::protobuf::uint32 width(int index) const;
  inline void set_width(int index, ::google::protobuf::uint32 value);
  inline void add_width(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      width() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_width();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DummyDataParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::FillerParameter > data_filler_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape > shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > width_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static DummyDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class EltwiseParameter : public ::google::protobuf::Message {
 public:
  EltwiseParameter();
  virtual ~EltwiseParameter();

  EltwiseParameter(const EltwiseParameter& from);

  inline EltwiseParameter& operator=(const EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EltwiseParameter& default_instance();

  void Swap(EltwiseParameter* other);

  // implements Message ----------------------------------------------

  EltwiseParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EltwiseParameter& from);
  void MergeFrom(const EltwiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EltwiseParameter_EltwiseOp EltwiseOp;
  static const EltwiseOp PROD = EltwiseParameter_EltwiseOp_PROD;
  static const EltwiseOp SUM = EltwiseParameter_EltwiseOp_SUM;
  static const EltwiseOp MAX = EltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static const EltwiseOp EltwiseOp_MIN =
    EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static const EltwiseOp EltwiseOp_MAX =
    EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static const int EltwiseOp_ARRAYSIZE =
    EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EltwiseOp_descriptor() {
    return EltwiseParameter_EltwiseOp_descriptor();
  }
  static inline const ::std::string& EltwiseOp_Name(EltwiseOp value) {
    return EltwiseParameter_EltwiseOp_Name(value);
  }
  static inline bool EltwiseOp_Parse(const ::std::string& name,
      EltwiseOp* value) {
    return EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::apollo::perception::inference::EltwiseParameter_EltwiseOp operation() const;
  inline void set_operation(::apollo::perception::inference::EltwiseParameter_EltwiseOp value);

  // repeated float coeff = 2;
  inline int coeff_size() const;
  inline void clear_coeff();
  static const int kCoeffFieldNumber = 2;
  inline float coeff(int index) const;
  inline void set_coeff(int index, float value);
  inline void add_coeff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional bool stable_prod_grad = 3 [default = true];
  inline bool has_stable_prod_grad() const;
  inline void clear_stable_prod_grad();
  static const int kStableProdGradFieldNumber = 3;
  inline bool stable_prod_grad() const;
  inline void set_stable_prod_grad(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.EltwiseParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_stable_prod_grad();
  inline void clear_has_stable_prod_grad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > coeff_;
  int operation_;
  bool stable_prod_grad_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static EltwiseParameter* default_instance_;
};
// -------------------------------------------------------------------

class ELUParameter : public ::google::protobuf::Message {
 public:
  ELUParameter();
  virtual ~ELUParameter();

  ELUParameter(const ELUParameter& from);

  inline ELUParameter& operator=(const ELUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ELUParameter& default_instance();

  void Swap(ELUParameter* other);

  // implements Message ----------------------------------------------

  ELUParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ELUParameter& from);
  void MergeFrom(const ELUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float alpha = 1 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 1;
  inline float alpha() const;
  inline void set_alpha(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ELUParameter)
 private:
  inline void set_has_alpha();
  inline void clear_has_alpha();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float alpha_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ELUParameter* default_instance_;
};
// -------------------------------------------------------------------

class EmbedParameter : public ::google::protobuf::Message {
 public:
  EmbedParameter();
  virtual ~EmbedParameter();

  EmbedParameter(const EmbedParameter& from);

  inline EmbedParameter& operator=(const EmbedParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmbedParameter& default_instance();

  void Swap(EmbedParameter* other);

  // implements Message ----------------------------------------------

  EmbedParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmbedParameter& from);
  void MergeFrom(const EmbedParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 input_dim = 2;
  inline bool has_input_dim() const;
  inline void clear_input_dim();
  static const int kInputDimFieldNumber = 2;
  inline ::google::protobuf::uint32 input_dim() const;
  inline void set_input_dim(::google::protobuf::uint32 value);

  // optional bool bias_term = 3 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 3;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .apollo.perception.inference.FillerParameter weight_filler = 4;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 4;
  inline const ::apollo::perception::inference::FillerParameter& weight_filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_weight_filler();
  inline ::apollo::perception::inference::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler);

  // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  inline const ::apollo::perception::inference::FillerParameter& bias_filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_bias_filler();
  inline ::apollo::perception::inference::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.EmbedParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_input_dim();
  inline void clear_has_input_dim();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 input_dim_;
  ::apollo::perception::inference::FillerParameter* weight_filler_;
  ::apollo::perception::inference::FillerParameter* bias_filler_;
  bool bias_term_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static EmbedParameter* default_instance_;
};
// -------------------------------------------------------------------

class ExpParameter : public ::google::protobuf::Message {
 public:
  ExpParameter();
  virtual ~ExpParameter();

  ExpParameter(const ExpParameter& from);

  inline ExpParameter& operator=(const ExpParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpParameter& default_instance();

  void Swap(ExpParameter* other);

  // implements Message ----------------------------------------------

  ExpParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpParameter& from);
  void MergeFrom(const ExpParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float base = 1 [default = -1];
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline float base() const;
  inline void set_base(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ExpParameter)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float base_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ExpParameter* default_instance_;
};
// -------------------------------------------------------------------

class FlattenParameter : public ::google::protobuf::Message {
 public:
  FlattenParameter();
  virtual ~FlattenParameter();

  FlattenParameter(const FlattenParameter& from);

  inline FlattenParameter& operator=(const FlattenParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlattenParameter& default_instance();

  void Swap(FlattenParameter* other);

  // implements Message ----------------------------------------------

  FlattenParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlattenParameter& from);
  void MergeFrom(const FlattenParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 end_axis = 2 [default = -1];
  inline bool has_end_axis() const;
  inline void clear_end_axis();
  static const int kEndAxisFieldNumber = 2;
  inline ::google::protobuf::int32 end_axis() const;
  inline void set_end_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.FlattenParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_end_axis();
  inline void clear_has_end_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 end_axis_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static FlattenParameter* default_instance_;
};
// -------------------------------------------------------------------

class HDF5DataParameter : public ::google::protobuf::Message {
 public:
  HDF5DataParameter();
  virtual ~HDF5DataParameter();

  HDF5DataParameter(const HDF5DataParameter& from);

  inline HDF5DataParameter& operator=(const HDF5DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5DataParameter& default_instance();

  void Swap(HDF5DataParameter* other);

  // implements Message ----------------------------------------------

  HDF5DataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDF5DataParameter& from);
  void MergeFrom(const HDF5DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 2;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional bool shuffle = 3 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 3;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.HDF5DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  bool shuffle_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static HDF5DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class HDF5OutputParameter : public ::google::protobuf::Message {
 public:
  HDF5OutputParameter();
  virtual ~HDF5OutputParameter();

  HDF5OutputParameter(const HDF5OutputParameter& from);

  inline HDF5OutputParameter& operator=(const HDF5OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5OutputParameter& default_instance();

  void Swap(HDF5OutputParameter* other);

  // implements Message ----------------------------------------------

  HDF5OutputParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDF5OutputParameter& from);
  void MergeFrom(const HDF5OutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.HDF5OutputParameter)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* file_name_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static HDF5OutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class HingeLossParameter : public ::google::protobuf::Message {
 public:
  HingeLossParameter();
  virtual ~HingeLossParameter();

  HingeLossParameter(const HingeLossParameter& from);

  inline HingeLossParameter& operator=(const HingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HingeLossParameter& default_instance();

  void Swap(HingeLossParameter* other);

  // implements Message ----------------------------------------------

  HingeLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HingeLossParameter& from);
  void MergeFrom(const HingeLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HingeLossParameter_Norm Norm;
  static const Norm L1 = HingeLossParameter_Norm_L1;
  static const Norm L2 = HingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return HingeLossParameter_Norm_IsValid(value);
  }
  static const Norm Norm_MIN =
    HingeLossParameter_Norm_Norm_MIN;
  static const Norm Norm_MAX =
    HingeLossParameter_Norm_Norm_MAX;
  static const int Norm_ARRAYSIZE =
    HingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Norm_descriptor() {
    return HingeLossParameter_Norm_descriptor();
  }
  static inline const ::std::string& Norm_Name(Norm value) {
    return HingeLossParameter_Norm_Name(value);
  }
  static inline bool Norm_Parse(const ::std::string& name,
      Norm* value) {
    return HingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.HingeLossParameter.Norm norm = 1 [default = L1];
  inline bool has_norm() const;
  inline void clear_norm();
  static const int kNormFieldNumber = 1;
  inline ::apollo::perception::inference::HingeLossParameter_Norm norm() const;
  inline void set_norm(::apollo::perception::inference::HingeLossParameter_Norm value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.HingeLossParameter)
 private:
  inline void set_has_norm();
  inline void clear_has_norm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int norm_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static HingeLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class RepeatedList : public ::google::protobuf::Message {
 public:
  RepeatedList();
  virtual ~RepeatedList();

  RepeatedList(const RepeatedList& from);

  inline RepeatedList& operator=(const RepeatedList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RepeatedList& default_instance();

  void Swap(RepeatedList* other);

  // implements Message ----------------------------------------------

  RepeatedList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RepeatedList& from);
  void MergeFrom(const RepeatedList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string list_path = 1;
  inline bool has_list_path() const;
  inline void clear_list_path();
  static const int kListPathFieldNumber = 1;
  inline const ::std::string& list_path() const;
  inline void set_list_path(const ::std::string& value);
  inline void set_list_path(const char* value);
  inline void set_list_path(const char* value, size_t size);
  inline ::std::string* mutable_list_path();
  inline ::std::string* release_list_path();
  inline void set_allocated_list_path(::std::string* list_path);

  // optional uint32 num_repeat = 2 [default = 1];
  inline bool has_num_repeat() const;
  inline void clear_num_repeat();
  static const int kNumRepeatFieldNumber = 2;
  inline ::google::protobuf::uint32 num_repeat() const;
  inline void set_num_repeat(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.RepeatedList)
 private:
  inline void set_has_list_path();
  inline void clear_has_list_path();
  inline void set_has_num_repeat();
  inline void clear_has_num_repeat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* list_path_;
  ::google::protobuf::uint32 num_repeat_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static RepeatedList* default_instance_;
};
// -------------------------------------------------------------------

class DatasetParameter : public ::google::protobuf::Message {
 public:
  DatasetParameter();
  virtual ~DatasetParameter();

  DatasetParameter(const DatasetParameter& from);

  inline DatasetParameter& operator=(const DatasetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetParameter& default_instance();

  void Swap(DatasetParameter* other);

  // implements Message ----------------------------------------------

  DatasetParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatasetParameter& from);
  void MergeFrom(const DatasetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DatasetParameter_DatasetType DatasetType;
  static const DatasetType LIST = DatasetParameter_DatasetType_LIST;
  static const DatasetType BLOCK = DatasetParameter_DatasetType_BLOCK;
  static inline bool DatasetType_IsValid(int value) {
    return DatasetParameter_DatasetType_IsValid(value);
  }
  static const DatasetType DatasetType_MIN =
    DatasetParameter_DatasetType_DatasetType_MIN;
  static const DatasetType DatasetType_MAX =
    DatasetParameter_DatasetType_DatasetType_MAX;
  static const int DatasetType_ARRAYSIZE =
    DatasetParameter_DatasetType_DatasetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DatasetType_descriptor() {
    return DatasetParameter_DatasetType_descriptor();
  }
  static inline const ::std::string& DatasetType_Name(DatasetType value) {
    return DatasetParameter_DatasetType_Name(value);
  }
  static inline bool DatasetType_Parse(const ::std::string& name,
      DatasetType* value) {
    return DatasetParameter_DatasetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional string root_folder = 2;
  inline bool has_root_folder() const;
  inline void clear_root_folder();
  static const int kRootFolderFieldNumber = 2;
  inline const ::std::string& root_folder() const;
  inline void set_root_folder(const ::std::string& value);
  inline void set_root_folder(const char* value);
  inline void set_root_folder(const char* value, size_t size);
  inline ::std::string* mutable_root_folder();
  inline ::std::string* release_root_folder();
  inline void set_allocated_root_folder(::std::string* root_folder);

  // optional float weight = 3 [default = 1];
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 3;
  inline float weight() const;
  inline void set_weight(float value);

  // optional .apollo.perception.inference.DatasetParameter.DatasetType type = 4 [default = LIST];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::apollo::perception::inference::DatasetParameter_DatasetType type() const;
  inline void set_type(::apollo::perception::inference::DatasetParameter_DatasetType value);

  // optional bool shuffle = 5 [default = true];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 5;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // repeated .apollo.perception.inference.RepeatedList repeated_list = 6;
  inline int repeated_list_size() const;
  inline void clear_repeated_list();
  static const int kRepeatedListFieldNumber = 6;
  inline const ::apollo::perception::inference::RepeatedList& repeated_list(int index) const;
  inline ::apollo::perception::inference::RepeatedList* mutable_repeated_list(int index);
  inline ::apollo::perception::inference::RepeatedList* add_repeated_list();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::RepeatedList >&
      repeated_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::RepeatedList >*
      mutable_repeated_list();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DatasetParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::std::string* root_folder_;
  float weight_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::RepeatedList > repeated_list_;
  bool shuffle_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static DatasetParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageDataParameter : public ::google::protobuf::Message {
 public:
  ImageDataParameter();
  virtual ~ImageDataParameter();

  ImageDataParameter(const ImageDataParameter& from);

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDataParameter& default_instance();

  void Swap(ImageDataParameter* other);

  // implements Message ----------------------------------------------

  ImageDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageDataParameter& from);
  void MergeFrom(const ImageDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 4 [default = 1];
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 8 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // optional uint32 new_height = 9 [default = 0];
  inline bool has_new_height() const;
  inline void clear_new_height();
  static const int kNewHeightFieldNumber = 9;
  inline ::google::protobuf::uint32 new_height() const;
  inline void set_new_height(::google::protobuf::uint32 value);

  // optional uint32 new_width = 10 [default = 0];
  inline bool has_new_width() const;
  inline void clear_new_width();
  static const int kNewWidthFieldNumber = 10;
  inline ::google::protobuf::uint32 new_width() const;
  inline void set_new_width(::google::protobuf::uint32 value);

  // optional bool is_color = 11 [default = true];
  inline bool has_is_color() const;
  inline void clear_is_color();
  static const int kIsColorFieldNumber = 11;
  inline bool is_color() const;
  inline void set_is_color(bool value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string mean_file = 3;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional string root_folder = 12 [default = ""];
  inline bool has_root_folder() const;
  inline void clear_root_folder();
  static const int kRootFolderFieldNumber = 12;
  inline const ::std::string& root_folder() const;
  inline void set_root_folder(const ::std::string& value);
  inline void set_root_folder(const char* value);
  inline void set_root_folder(const char* value, size_t size);
  inline ::std::string* mutable_root_folder();
  inline ::std::string* release_root_folder();
  inline void set_allocated_root_folder(::std::string* root_folder);

  // optional uint32 prefetch = 20 [default = 4];
  inline bool has_prefetch() const;
  inline void clear_prefetch();
  static const int kPrefetchFieldNumber = 20;
  inline ::google::protobuf::uint32 prefetch() const;
  inline void set_prefetch(::google::protobuf::uint32 value);

  // repeated .apollo.perception.inference.DatasetParameter image_set = 100;
  inline int image_set_size() const;
  inline void clear_image_set();
  static const int kImageSetFieldNumber = 100;
  inline const ::apollo::perception::inference::DatasetParameter& image_set(int index) const;
  inline ::apollo::perception::inference::DatasetParameter* mutable_image_set(int index);
  inline ::apollo::perception::inference::DatasetParameter* add_image_set();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::DatasetParameter >&
      image_set() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::DatasetParameter >*
      mutable_image_set();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ImageDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_new_height();
  inline void clear_has_new_height();
  inline void set_has_new_width();
  inline void clear_has_new_width();
  inline void set_has_is_color();
  inline void clear_has_is_color();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();
  inline void set_has_prefetch();
  inline void clear_has_prefetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 new_height_;
  ::google::protobuf::uint32 new_width_;
  bool shuffle_;
  bool is_color_;
  bool mirror_;
  float scale_;
  ::std::string* mean_file_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::uint32 prefetch_;
  ::std::string* root_folder_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::DatasetParameter > image_set_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ImageDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class InfogainLossParameter : public ::google::protobuf::Message {
 public:
  InfogainLossParameter();
  virtual ~InfogainLossParameter();

  InfogainLossParameter(const InfogainLossParameter& from);

  inline InfogainLossParameter& operator=(const InfogainLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfogainLossParameter& default_instance();

  void Swap(InfogainLossParameter* other);

  // implements Message ----------------------------------------------

  InfogainLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfogainLossParameter& from);
  void MergeFrom(const InfogainLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.InfogainLossParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static InfogainLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class InnerProductParameter : public ::google::protobuf::Message {
 public:
  InnerProductParameter();
  virtual ~InnerProductParameter();

  InnerProductParameter(const InnerProductParameter& from);

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductParameter& default_instance();

  void Swap(InnerProductParameter* other);

  // implements Message ----------------------------------------------

  InnerProductParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerProductParameter& from);
  void MergeFrom(const InnerProductParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .apollo.perception.inference.FillerParameter weight_filler = 3;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  inline const ::apollo::perception::inference::FillerParameter& weight_filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_weight_filler();
  inline ::apollo::perception::inference::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler);

  // optional .apollo.perception.inference.FillerParameter bias_filler = 4;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  inline const ::apollo::perception::inference::FillerParameter& bias_filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_bias_filler();
  inline ::apollo::perception::inference::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler);

  // optional int32 axis = 5 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 5;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional bool transpose = 6 [default = false];
  inline bool has_transpose() const;
  inline void clear_transpose();
  static const int kTransposeFieldNumber = 6;
  inline bool transpose() const;
  inline void set_transpose(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.InnerProductParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_transpose();
  inline void clear_has_transpose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::inference::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  bool transpose_;
  ::apollo::perception::inference::FillerParameter* bias_filler_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static InnerProductParameter* default_instance_;
};
// -------------------------------------------------------------------

class InputParameter : public ::google::protobuf::Message {
 public:
  InputParameter();
  virtual ~InputParameter();

  InputParameter(const InputParameter& from);

  inline InputParameter& operator=(const InputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputParameter& default_instance();

  void Swap(InputParameter* other);

  // implements Message ----------------------------------------------

  InputParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InputParameter& from);
  void MergeFrom(const InputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.inference.BlobShape shape = 1;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::apollo::perception::inference::BlobShape& shape(int index) const;
  inline ::apollo::perception::inference::BlobShape* mutable_shape(int index);
  inline ::apollo::perception::inference::BlobShape* add_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape >&
      shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape >*
      mutable_shape();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.InputParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape > shape_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static InputParameter* default_instance_;
};
// -------------------------------------------------------------------

class LogParameter : public ::google::protobuf::Message {
 public:
  LogParameter();
  virtual ~LogParameter();

  LogParameter(const LogParameter& from);

  inline LogParameter& operator=(const LogParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogParameter& default_instance();

  void Swap(LogParameter* other);

  // implements Message ----------------------------------------------

  LogParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogParameter& from);
  void MergeFrom(const LogParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float base = 1 [default = -1];
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline float base() const;
  inline void set_base(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.LogParameter)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float base_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static LogParameter* default_instance_;
};
// -------------------------------------------------------------------

class LRNParameter : public ::google::protobuf::Message {
 public:
  LRNParameter();
  virtual ~LRNParameter();

  LRNParameter(const LRNParameter& from);

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LRNParameter& default_instance();

  void Swap(LRNParameter* other);

  // implements Message ----------------------------------------------

  LRNParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LRNParameter& from);
  void MergeFrom(const LRNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LRNParameter_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS = LRNParameter_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL = LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNParameter_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    LRNParameter_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    LRNParameter_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNParameter_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return LRNParameter_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return LRNParameter_NormRegion_Parse(name, value);
  }

  typedef LRNParameter_Engine Engine;
  static const Engine DEFAULT = LRNParameter_Engine_DEFAULT;
  static const Engine CAFFE = LRNParameter_Engine_CAFFE;
  static const Engine CUDNN = LRNParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return LRNParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    LRNParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    LRNParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    LRNParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return LRNParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return LRNParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return LRNParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 local_size = 1 [default = 5];
  inline bool has_local_size() const;
  inline void clear_local_size();
  static const int kLocalSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 local_size() const;
  inline void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 3;
  inline float beta() const;
  inline void set_beta(float value);

  // optional .apollo.perception.inference.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  inline bool has_norm_region() const;
  inline void clear_norm_region();
  static const int kNormRegionFieldNumber = 4;
  inline ::apollo::perception::inference::LRNParameter_NormRegion norm_region() const;
  inline void set_norm_region(::apollo::perception::inference::LRNParameter_NormRegion value);

  // optional float k = 5 [default = 1];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 5;
  inline float k() const;
  inline void set_k(float value);

  // optional .apollo.perception.inference.LRNParameter.Engine engine = 6 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 6;
  inline ::apollo::perception::inference::LRNParameter_Engine engine() const;
  inline void set_engine(::apollo::perception::inference::LRNParameter_Engine value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.LRNParameter)
 private:
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_norm_region();
  inline void clear_has_norm_region();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  int norm_region_;
  float k_;
  int engine_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static LRNParameter* default_instance_;
};
// -------------------------------------------------------------------

class MemoryDataParameter : public ::google::protobuf::Message {
 public:
  MemoryDataParameter();
  virtual ~MemoryDataParameter();

  MemoryDataParameter(const MemoryDataParameter& from);

  inline MemoryDataParameter& operator=(const MemoryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryDataParameter& default_instance();

  void Swap(MemoryDataParameter* other);

  // implements Message ----------------------------------------------

  MemoryDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryDataParameter& from);
  void MergeFrom(const MemoryDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 batch_size = 1;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 channels = 2;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::uint32 channels() const;
  inline void set_channels(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.MemoryDataParameter)
 private:
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static MemoryDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class MultiBoxLossParameter : public ::google::protobuf::Message {
 public:
  MultiBoxLossParameter();
  virtual ~MultiBoxLossParameter();

  MultiBoxLossParameter(const MultiBoxLossParameter& from);

  inline MultiBoxLossParameter& operator=(const MultiBoxLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiBoxLossParameter& default_instance();

  void Swap(MultiBoxLossParameter* other);

  // implements Message ----------------------------------------------

  MultiBoxLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiBoxLossParameter& from);
  void MergeFrom(const MultiBoxLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MultiBoxLossParameter_LocLossType LocLossType;
  static const LocLossType L2 = MultiBoxLossParameter_LocLossType_L2;
  static const LocLossType SMOOTH_L1 = MultiBoxLossParameter_LocLossType_SMOOTH_L1;
  static inline bool LocLossType_IsValid(int value) {
    return MultiBoxLossParameter_LocLossType_IsValid(value);
  }
  static const LocLossType LocLossType_MIN =
    MultiBoxLossParameter_LocLossType_LocLossType_MIN;
  static const LocLossType LocLossType_MAX =
    MultiBoxLossParameter_LocLossType_LocLossType_MAX;
  static const int LocLossType_ARRAYSIZE =
    MultiBoxLossParameter_LocLossType_LocLossType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LocLossType_descriptor() {
    return MultiBoxLossParameter_LocLossType_descriptor();
  }
  static inline const ::std::string& LocLossType_Name(LocLossType value) {
    return MultiBoxLossParameter_LocLossType_Name(value);
  }
  static inline bool LocLossType_Parse(const ::std::string& name,
      LocLossType* value) {
    return MultiBoxLossParameter_LocLossType_Parse(name, value);
  }

  typedef MultiBoxLossParameter_ConfLossType ConfLossType;
  static const ConfLossType SOFTMAX = MultiBoxLossParameter_ConfLossType_SOFTMAX;
  static const ConfLossType LOGISTIC = MultiBoxLossParameter_ConfLossType_LOGISTIC;
  static inline bool ConfLossType_IsValid(int value) {
    return MultiBoxLossParameter_ConfLossType_IsValid(value);
  }
  static const ConfLossType ConfLossType_MIN =
    MultiBoxLossParameter_ConfLossType_ConfLossType_MIN;
  static const ConfLossType ConfLossType_MAX =
    MultiBoxLossParameter_ConfLossType_ConfLossType_MAX;
  static const int ConfLossType_ARRAYSIZE =
    MultiBoxLossParameter_ConfLossType_ConfLossType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConfLossType_descriptor() {
    return MultiBoxLossParameter_ConfLossType_descriptor();
  }
  static inline const ::std::string& ConfLossType_Name(ConfLossType value) {
    return MultiBoxLossParameter_ConfLossType_Name(value);
  }
  static inline bool ConfLossType_Parse(const ::std::string& name,
      ConfLossType* value) {
    return MultiBoxLossParameter_ConfLossType_Parse(name, value);
  }

  typedef MultiBoxLossParameter_MatchType MatchType;
  static const MatchType BIPARTITE = MultiBoxLossParameter_MatchType_BIPARTITE;
  static const MatchType PER_PREDICTION = MultiBoxLossParameter_MatchType_PER_PREDICTION;
  static inline bool MatchType_IsValid(int value) {
    return MultiBoxLossParameter_MatchType_IsValid(value);
  }
  static const MatchType MatchType_MIN =
    MultiBoxLossParameter_MatchType_MatchType_MIN;
  static const MatchType MatchType_MAX =
    MultiBoxLossParameter_MatchType_MatchType_MAX;
  static const int MatchType_ARRAYSIZE =
    MultiBoxLossParameter_MatchType_MatchType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MatchType_descriptor() {
    return MultiBoxLossParameter_MatchType_descriptor();
  }
  static inline const ::std::string& MatchType_Name(MatchType value) {
    return MultiBoxLossParameter_MatchType_Name(value);
  }
  static inline bool MatchType_Parse(const ::std::string& name,
      MatchType* value) {
    return MultiBoxLossParameter_MatchType_Parse(name, value);
  }

  typedef MultiBoxLossParameter_MiningType MiningType;
  static const MiningType NONE = MultiBoxLossParameter_MiningType_NONE;
  static const MiningType MAX_NEGATIVE = MultiBoxLossParameter_MiningType_MAX_NEGATIVE;
  static const MiningType HARD_EXAMPLE = MultiBoxLossParameter_MiningType_HARD_EXAMPLE;
  static inline bool MiningType_IsValid(int value) {
    return MultiBoxLossParameter_MiningType_IsValid(value);
  }
  static const MiningType MiningType_MIN =
    MultiBoxLossParameter_MiningType_MiningType_MIN;
  static const MiningType MiningType_MAX =
    MultiBoxLossParameter_MiningType_MiningType_MAX;
  static const int MiningType_ARRAYSIZE =
    MultiBoxLossParameter_MiningType_MiningType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MiningType_descriptor() {
    return MultiBoxLossParameter_MiningType_descriptor();
  }
  static inline const ::std::string& MiningType_Name(MiningType value) {
    return MultiBoxLossParameter_MiningType_Name(value);
  }
  static inline bool MiningType_Parse(const ::std::string& name,
      MiningType* value) {
    return MultiBoxLossParameter_MiningType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
  inline bool has_loc_loss_type() const;
  inline void clear_loc_loss_type();
  static const int kLocLossTypeFieldNumber = 1;
  inline ::apollo::perception::inference::MultiBoxLossParameter_LocLossType loc_loss_type() const;
  inline void set_loc_loss_type(::apollo::perception::inference::MultiBoxLossParameter_LocLossType value);

  // optional .apollo.perception.inference.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
  inline bool has_conf_loss_type() const;
  inline void clear_conf_loss_type();
  static const int kConfLossTypeFieldNumber = 2;
  inline ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType conf_loss_type() const;
  inline void set_conf_loss_type(::apollo::perception::inference::MultiBoxLossParameter_ConfLossType value);

  // optional float loc_weight = 3 [default = 1];
  inline bool has_loc_weight() const;
  inline void clear_loc_weight();
  static const int kLocWeightFieldNumber = 3;
  inline float loc_weight() const;
  inline void set_loc_weight(float value);

  // optional uint32 num_classes = 4;
  inline bool has_num_classes() const;
  inline void clear_num_classes();
  static const int kNumClassesFieldNumber = 4;
  inline ::google::protobuf::uint32 num_classes() const;
  inline void set_num_classes(::google::protobuf::uint32 value);

  // optional bool share_location = 5 [default = true];
  inline bool has_share_location() const;
  inline void clear_share_location();
  static const int kShareLocationFieldNumber = 5;
  inline bool share_location() const;
  inline void set_share_location(bool value);

  // optional .apollo.perception.inference.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
  inline bool has_match_type() const;
  inline void clear_match_type();
  static const int kMatchTypeFieldNumber = 6;
  inline ::apollo::perception::inference::MultiBoxLossParameter_MatchType match_type() const;
  inline void set_match_type(::apollo::perception::inference::MultiBoxLossParameter_MatchType value);

  // optional float overlap_threshold = 7 [default = 0.5];
  inline bool has_overlap_threshold() const;
  inline void clear_overlap_threshold();
  static const int kOverlapThresholdFieldNumber = 7;
  inline float overlap_threshold() const;
  inline void set_overlap_threshold(float value);

  // optional bool use_prior_for_matching = 8 [default = true];
  inline bool has_use_prior_for_matching() const;
  inline void clear_use_prior_for_matching();
  static const int kUsePriorForMatchingFieldNumber = 8;
  inline bool use_prior_for_matching() const;
  inline void set_use_prior_for_matching(bool value);

  // optional uint32 background_label_id = 9 [default = 0];
  inline bool has_background_label_id() const;
  inline void clear_background_label_id();
  static const int kBackgroundLabelIdFieldNumber = 9;
  inline ::google::protobuf::uint32 background_label_id() const;
  inline void set_background_label_id(::google::protobuf::uint32 value);

  // optional bool use_difficult_gt = 10 [default = true];
  inline bool has_use_difficult_gt() const;
  inline void clear_use_difficult_gt();
  static const int kUseDifficultGtFieldNumber = 10;
  inline bool use_difficult_gt() const;
  inline void set_use_difficult_gt(bool value);

  // optional bool do_neg_mining = 11;
  inline bool has_do_neg_mining() const;
  inline void clear_do_neg_mining();
  static const int kDoNegMiningFieldNumber = 11;
  inline bool do_neg_mining() const;
  inline void set_do_neg_mining(bool value);

  // optional float neg_pos_ratio = 12 [default = 3];
  inline bool has_neg_pos_ratio() const;
  inline void clear_neg_pos_ratio();
  static const int kNegPosRatioFieldNumber = 12;
  inline float neg_pos_ratio() const;
  inline void set_neg_pos_ratio(float value);

  // optional float neg_overlap = 13 [default = 0.5];
  inline bool has_neg_overlap() const;
  inline void clear_neg_overlap();
  static const int kNegOverlapFieldNumber = 13;
  inline float neg_overlap() const;
  inline void set_neg_overlap(float value);

  // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
  inline bool has_code_type() const;
  inline void clear_code_type();
  static const int kCodeTypeFieldNumber = 14;
  inline ::apollo::perception::inference::PriorBoxParameter_CodeType code_type() const;
  inline void set_code_type(::apollo::perception::inference::PriorBoxParameter_CodeType value);

  // optional bool encode_variance_in_target = 16 [default = false];
  inline bool has_encode_variance_in_target() const;
  inline void clear_encode_variance_in_target();
  static const int kEncodeVarianceInTargetFieldNumber = 16;
  inline bool encode_variance_in_target() const;
  inline void set_encode_variance_in_target(bool value);

  // optional bool map_object_to_agnostic = 17 [default = false];
  inline bool has_map_object_to_agnostic() const;
  inline void clear_map_object_to_agnostic();
  static const int kMapObjectToAgnosticFieldNumber = 17;
  inline bool map_object_to_agnostic() const;
  inline void set_map_object_to_agnostic(bool value);

  // optional bool ignore_cross_boundary_bbox = 18 [default = false];
  inline bool has_ignore_cross_boundary_bbox() const;
  inline void clear_ignore_cross_boundary_bbox();
  static const int kIgnoreCrossBoundaryBboxFieldNumber = 18;
  inline bool ignore_cross_boundary_bbox() const;
  inline void set_ignore_cross_boundary_bbox(bool value);

  // optional bool bp_inside = 19 [default = false];
  inline bool has_bp_inside() const;
  inline void clear_bp_inside();
  static const int kBpInsideFieldNumber = 19;
  inline bool bp_inside() const;
  inline void set_bp_inside(bool value);

  // optional .apollo.perception.inference.MultiBoxLossParameter.MiningType mining_type = 20 [default = MAX_NEGATIVE];
  inline bool has_mining_type() const;
  inline void clear_mining_type();
  static const int kMiningTypeFieldNumber = 20;
  inline ::apollo::perception::inference::MultiBoxLossParameter_MiningType mining_type() const;
  inline void set_mining_type(::apollo::perception::inference::MultiBoxLossParameter_MiningType value);

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 21;
  inline bool has_nms_param() const;
  inline void clear_nms_param();
  static const int kNmsParamFieldNumber = 21;
  inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param() const;
  inline ::apollo::perception::inference::NonMaximumSuppressionParameter* mutable_nms_param();
  inline ::apollo::perception::inference::NonMaximumSuppressionParameter* release_nms_param();
  inline void set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param);

  // optional int32 sample_size = 22 [default = 64];
  inline bool has_sample_size() const;
  inline void clear_sample_size();
  static const int kSampleSizeFieldNumber = 22;
  inline ::google::protobuf::int32 sample_size() const;
  inline void set_sample_size(::google::protobuf::int32 value);

  // optional bool use_prior_for_nms = 23 [default = false];
  inline bool has_use_prior_for_nms() const;
  inline void clear_use_prior_for_nms();
  static const int kUsePriorForNmsFieldNumber = 23;
  inline bool use_prior_for_nms() const;
  inline void set_use_prior_for_nms(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.MultiBoxLossParameter)
 private:
  inline void set_has_loc_loss_type();
  inline void clear_has_loc_loss_type();
  inline void set_has_conf_loss_type();
  inline void clear_has_conf_loss_type();
  inline void set_has_loc_weight();
  inline void clear_has_loc_weight();
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_share_location();
  inline void clear_has_share_location();
  inline void set_has_match_type();
  inline void clear_has_match_type();
  inline void set_has_overlap_threshold();
  inline void clear_has_overlap_threshold();
  inline void set_has_use_prior_for_matching();
  inline void clear_has_use_prior_for_matching();
  inline void set_has_background_label_id();
  inline void clear_has_background_label_id();
  inline void set_has_use_difficult_gt();
  inline void clear_has_use_difficult_gt();
  inline void set_has_do_neg_mining();
  inline void clear_has_do_neg_mining();
  inline void set_has_neg_pos_ratio();
  inline void clear_has_neg_pos_ratio();
  inline void set_has_neg_overlap();
  inline void clear_has_neg_overlap();
  inline void set_has_code_type();
  inline void clear_has_code_type();
  inline void set_has_encode_variance_in_target();
  inline void clear_has_encode_variance_in_target();
  inline void set_has_map_object_to_agnostic();
  inline void clear_has_map_object_to_agnostic();
  inline void set_has_ignore_cross_boundary_bbox();
  inline void clear_has_ignore_cross_boundary_bbox();
  inline void set_has_bp_inside();
  inline void clear_has_bp_inside();
  inline void set_has_mining_type();
  inline void clear_has_mining_type();
  inline void set_has_nms_param();
  inline void clear_has_nms_param();
  inline void set_has_sample_size();
  inline void clear_has_sample_size();
  inline void set_has_use_prior_for_nms();
  inline void clear_has_use_prior_for_nms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int loc_loss_type_;
  int conf_loss_type_;
  float loc_weight_;
  ::google::protobuf::uint32 num_classes_;
  int match_type_;
  float overlap_threshold_;
  bool share_location_;
  bool use_prior_for_matching_;
  bool use_difficult_gt_;
  bool do_neg_mining_;
  ::google::protobuf::uint32 background_label_id_;
  float neg_pos_ratio_;
  float neg_overlap_;
  int code_type_;
  bool encode_variance_in_target_;
  bool map_object_to_agnostic_;
  bool ignore_cross_boundary_bbox_;
  bool bp_inside_;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param_;
  int mining_type_;
  ::google::protobuf::int32 sample_size_;
  bool use_prior_for_nms_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static MultiBoxLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class MVNParameter : public ::google::protobuf::Message {
 public:
  MVNParameter();
  virtual ~MVNParameter();

  MVNParameter(const MVNParameter& from);

  inline MVNParameter& operator=(const MVNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVNParameter& default_instance();

  void Swap(MVNParameter* other);

  // implements Message ----------------------------------------------

  MVNParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVNParameter& from);
  void MergeFrom(const MVNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool normalize_variance = 1 [default = true];
  inline bool has_normalize_variance() const;
  inline void clear_normalize_variance();
  static const int kNormalizeVarianceFieldNumber = 1;
  inline bool normalize_variance() const;
  inline void set_normalize_variance(bool value);

  // optional bool across_channels = 2 [default = false];
  inline bool has_across_channels() const;
  inline void clear_across_channels();
  static const int kAcrossChannelsFieldNumber = 2;
  inline bool across_channels() const;
  inline void set_across_channels(bool value);

  // optional float eps = 3 [default = 1e-09];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 3;
  inline float eps() const;
  inline void set_eps(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.MVNParameter)
 private:
  inline void set_has_normalize_variance();
  inline void clear_has_normalize_variance();
  inline void set_has_across_channels();
  inline void clear_has_across_channels();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool normalize_variance_;
  bool across_channels_;
  float eps_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static MVNParameter* default_instance_;
};
// -------------------------------------------------------------------

class NormalizeParameter : public ::google::protobuf::Message {
 public:
  NormalizeParameter();
  virtual ~NormalizeParameter();

  NormalizeParameter(const NormalizeParameter& from);

  inline NormalizeParameter& operator=(const NormalizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalizeParameter& default_instance();

  void Swap(NormalizeParameter* other);

  // implements Message ----------------------------------------------

  NormalizeParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalizeParameter& from);
  void MergeFrom(const NormalizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool across_spatial = 1 [default = true];
  inline bool has_across_spatial() const;
  inline void clear_across_spatial();
  static const int kAcrossSpatialFieldNumber = 1;
  inline bool across_spatial() const;
  inline void set_across_spatial(bool value);

  // optional .apollo.perception.inference.FillerParameter scale_filler = 2;
  inline bool has_scale_filler() const;
  inline void clear_scale_filler();
  static const int kScaleFillerFieldNumber = 2;
  inline const ::apollo::perception::inference::FillerParameter& scale_filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_scale_filler();
  inline ::apollo::perception::inference::FillerParameter* release_scale_filler();
  inline void set_allocated_scale_filler(::apollo::perception::inference::FillerParameter* scale_filler);

  // optional bool channel_shared = 3 [default = true];
  inline bool has_channel_shared() const;
  inline void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 3;
  inline bool channel_shared() const;
  inline void set_channel_shared(bool value);

  // optional float eps = 4 [default = 1e-10];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 4;
  inline float eps() const;
  inline void set_eps(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.NormalizeParameter)
 private:
  inline void set_has_across_spatial();
  inline void clear_has_across_spatial();
  inline void set_has_scale_filler();
  inline void clear_has_scale_filler();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::inference::FillerParameter* scale_filler_;
  bool across_spatial_;
  bool channel_shared_;
  float eps_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static NormalizeParameter* default_instance_;
};
// -------------------------------------------------------------------

class ParameterParameter : public ::google::protobuf::Message {
 public:
  ParameterParameter();
  virtual ~ParameterParameter();

  ParameterParameter(const ParameterParameter& from);

  inline ParameterParameter& operator=(const ParameterParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterParameter& default_instance();

  void Swap(ParameterParameter* other);

  // implements Message ----------------------------------------------

  ParameterParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParameterParameter& from);
  void MergeFrom(const ParameterParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.BlobShape shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::apollo::perception::inference::BlobShape& shape() const;
  inline ::apollo::perception::inference::BlobShape* mutable_shape();
  inline ::apollo::perception::inference::BlobShape* release_shape();
  inline void set_allocated_shape(::apollo::perception::inference::BlobShape* shape);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ParameterParameter)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::inference::BlobShape* shape_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ParameterParameter* default_instance_;
};
// -------------------------------------------------------------------

class PermuteParameter : public ::google::protobuf::Message {
 public:
  PermuteParameter();
  virtual ~PermuteParameter();

  PermuteParameter(const PermuteParameter& from);

  inline PermuteParameter& operator=(const PermuteParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PermuteParameter& default_instance();

  void Swap(PermuteParameter* other);

  // implements Message ----------------------------------------------

  PermuteParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PermuteParameter& from);
  void MergeFrom(const PermuteParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 order = 1;
  inline int order_size() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 1;
  inline ::google::protobuf::uint32 order(int index) const;
  inline void set_order(int index, ::google::protobuf::uint32 value);
  inline void add_order(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      order() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_order();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PermuteParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > order_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static PermuteParameter* default_instance_;
};
// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  void Swap(PoolingParameter* other);

  // implements Message ----------------------------------------------

  PoolingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX = PoolingParameter_PoolMethod_MAX;
  static const PoolMethod AVE = PoolingParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC = PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    PoolingParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    PoolingParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return PoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  typedef PoolingParameter_Engine Engine;
  static const Engine DEFAULT = PoolingParameter_Engine_DEFAULT;
  static const Engine CAFFE = PoolingParameter_Engine_CAFFE;
  static const Engine CUDNN = PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    PoolingParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    PoolingParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return PoolingParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 1;
  inline ::apollo::perception::inference::PoolingParameter_PoolMethod pool() const;
  inline void set_pool(::apollo::perception::inference::PoolingParameter_PoolMethod value);

  // optional uint32 pad = 4 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 4;
  inline ::google::protobuf::uint32 pad() const;
  inline void set_pad(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 2;
  inline bool has_kernel_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 kernel_size() const;
  inline void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 5;
  inline bool has_kernel_h() const;
  inline void clear_kernel_h();
  static const int kKernelHFieldNumber = 5;
  inline ::google::protobuf::uint32 kernel_h() const;
  inline void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 6;
  inline bool has_kernel_w() const;
  inline void clear_kernel_w();
  static const int kKernelWFieldNumber = 6;
  inline ::google::protobuf::uint32 kernel_w() const;
  inline void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride = 3 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 3;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 7;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 7;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 8;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 8;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // optional .apollo.perception.inference.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 11;
  inline ::apollo::perception::inference::PoolingParameter_Engine engine() const;
  inline void set_engine(::apollo::perception::inference::PoolingParameter_Engine value);

  // optional bool global_pooling = 12 [default = false];
  inline bool has_global_pooling() const;
  inline void clear_global_pooling();
  static const int kGlobalPoolingFieldNumber = 12;
  inline bool global_pooling() const;
  inline void set_global_pooling(bool value);

  // optional bool cmp_out_shape_floor_as_conv = 13 [default = false];
  inline bool has_cmp_out_shape_floor_as_conv() const;
  inline void clear_cmp_out_shape_floor_as_conv();
  static const int kCmpOutShapeFloorAsConvFieldNumber = 13;
  inline bool cmp_out_shape_floor_as_conv() const;
  inline void set_cmp_out_shape_floor_as_conv(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PoolingParameter)
 private:
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_global_pooling();
  inline void clear_has_global_pooling();
  inline void set_has_cmp_out_shape_floor_as_conv();
  inline void clear_has_cmp_out_shape_floor_as_conv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int pool_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  bool global_pooling_;
  bool cmp_out_shape_floor_as_conv_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static PoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class PowerParameter : public ::google::protobuf::Message {
 public:
  PowerParameter();
  virtual ~PowerParameter();

  PowerParameter(const PowerParameter& from);

  inline PowerParameter& operator=(const PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PowerParameter& default_instance();

  void Swap(PowerParameter* other);

  // implements Message ----------------------------------------------

  PowerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PowerParameter& from);
  void MergeFrom(const PowerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float power = 1 [default = 1];
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 1;
  inline float power() const;
  inline void set_power(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PowerParameter)
 private:
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float power_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static PowerParameter* default_instance_;
};
// -------------------------------------------------------------------

class PriorBoxParameter : public ::google::protobuf::Message {
 public:
  PriorBoxParameter();
  virtual ~PriorBoxParameter();

  PriorBoxParameter(const PriorBoxParameter& from);

  inline PriorBoxParameter& operator=(const PriorBoxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PriorBoxParameter& default_instance();

  void Swap(PriorBoxParameter* other);

  // implements Message ----------------------------------------------

  PriorBoxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PriorBoxParameter& from);
  void MergeFrom(const PriorBoxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PriorBoxParameter_CodeType CodeType;
  static const CodeType CORNER = PriorBoxParameter_CodeType_CORNER;
  static const CodeType CENTER_SIZE = PriorBoxParameter_CodeType_CENTER_SIZE;
  static const CodeType CORNER_SIZE = PriorBoxParameter_CodeType_CORNER_SIZE;
  static inline bool CodeType_IsValid(int value) {
    return PriorBoxParameter_CodeType_IsValid(value);
  }
  static const CodeType CodeType_MIN =
    PriorBoxParameter_CodeType_CodeType_MIN;
  static const CodeType CodeType_MAX =
    PriorBoxParameter_CodeType_CodeType_MAX;
  static const int CodeType_ARRAYSIZE =
    PriorBoxParameter_CodeType_CodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CodeType_descriptor() {
    return PriorBoxParameter_CodeType_descriptor();
  }
  static inline const ::std::string& CodeType_Name(CodeType value) {
    return PriorBoxParameter_CodeType_Name(value);
  }
  static inline bool CodeType_Parse(const ::std::string& name,
      CodeType* value) {
    return PriorBoxParameter_CodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float min_size = 1;
  inline int min_size_size() const;
  inline void clear_min_size();
  static const int kMinSizeFieldNumber = 1;
  inline float min_size(int index) const;
  inline void set_min_size(int index, float value);
  inline void add_min_size(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      min_size() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_min_size();

  // repeated float max_size = 2;
  inline int max_size_size() const;
  inline void clear_max_size();
  static const int kMaxSizeFieldNumber = 2;
  inline float max_size(int index) const;
  inline void set_max_size(int index, float value);
  inline void add_max_size(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      max_size() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_max_size();

  // repeated float aspect_ratio = 3;
  inline int aspect_ratio_size() const;
  inline void clear_aspect_ratio();
  static const int kAspectRatioFieldNumber = 3;
  inline float aspect_ratio(int index) const;
  inline void set_aspect_ratio(int index, float value);
  inline void add_aspect_ratio(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      aspect_ratio() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_aspect_ratio();

  // optional bool flip = 4 [default = true];
  inline bool has_flip() const;
  inline void clear_flip();
  static const int kFlipFieldNumber = 4;
  inline bool flip() const;
  inline void set_flip(bool value);

  // optional bool clip = 5 [default = false];
  inline bool has_clip() const;
  inline void clear_clip();
  static const int kClipFieldNumber = 5;
  inline bool clip() const;
  inline void set_clip(bool value);

  // repeated float variance = 6;
  inline int variance_size() const;
  inline void clear_variance();
  static const int kVarianceFieldNumber = 6;
  inline float variance(int index) const;
  inline void set_variance(int index, float value);
  inline void add_variance(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      variance() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_variance();

  // optional uint32 img_size = 7;
  inline bool has_img_size() const;
  inline void clear_img_size();
  static const int kImgSizeFieldNumber = 7;
  inline ::google::protobuf::uint32 img_size() const;
  inline void set_img_size(::google::protobuf::uint32 value);

  // optional uint32 img_h = 8;
  inline bool has_img_h() const;
  inline void clear_img_h();
  static const int kImgHFieldNumber = 8;
  inline ::google::protobuf::uint32 img_h() const;
  inline void set_img_h(::google::protobuf::uint32 value);

  // optional uint32 img_w = 9;
  inline bool has_img_w() const;
  inline void clear_img_w();
  static const int kImgWFieldNumber = 9;
  inline ::google::protobuf::uint32 img_w() const;
  inline void set_img_w(::google::protobuf::uint32 value);

  // optional float step = 10;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 10;
  inline float step() const;
  inline void set_step(float value);

  // optional float step_h = 11;
  inline bool has_step_h() const;
  inline void clear_step_h();
  static const int kStepHFieldNumber = 11;
  inline float step_h() const;
  inline void set_step_h(float value);

  // optional float step_w = 12;
  inline bool has_step_w() const;
  inline void clear_step_w();
  static const int kStepWFieldNumber = 12;
  inline float step_w() const;
  inline void set_step_w(float value);

  // optional float offset = 13 [default = 0.5];
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 13;
  inline float offset() const;
  inline void set_offset(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PriorBoxParameter)
 private:
  inline void set_has_flip();
  inline void clear_has_flip();
  inline void set_has_clip();
  inline void clear_has_clip();
  inline void set_has_img_size();
  inline void clear_has_img_size();
  inline void set_has_img_h();
  inline void clear_has_img_h();
  inline void set_has_img_w();
  inline void clear_has_img_w();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_step_h();
  inline void clear_has_step_h();
  inline void set_has_step_w();
  inline void clear_has_step_w();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > min_size_;
  ::google::protobuf::RepeatedField< float > max_size_;
  ::google::protobuf::RepeatedField< float > aspect_ratio_;
  bool flip_;
  bool clip_;
  ::google::protobuf::uint32 img_size_;
  ::google::protobuf::RepeatedField< float > variance_;
  ::google::protobuf::uint32 img_h_;
  ::google::protobuf::uint32 img_w_;
  float step_;
  float step_h_;
  float step_w_;
  float offset_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static PriorBoxParameter* default_instance_;
};
// -------------------------------------------------------------------

class PythonParameter : public ::google::protobuf::Message {
 public:
  PythonParameter();
  virtual ~PythonParameter();

  PythonParameter(const PythonParameter& from);

  inline PythonParameter& operator=(const PythonParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PythonParameter& default_instance();

  void Swap(PythonParameter* other);

  // implements Message ----------------------------------------------

  PythonParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PythonParameter& from);
  void MergeFrom(const PythonParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string module = 1;
  inline bool has_module() const;
  inline void clear_module();
  static const int kModuleFieldNumber = 1;
  inline const ::std::string& module() const;
  inline void set_module(const ::std::string& value);
  inline void set_module(const char* value);
  inline void set_module(const char* value, size_t size);
  inline ::std::string* mutable_module();
  inline ::std::string* release_module();
  inline void set_allocated_module(::std::string* module);

  // optional string layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // optional string param_str = 3 [default = ""];
  inline bool has_param_str() const;
  inline void clear_param_str();
  static const int kParamStrFieldNumber = 3;
  inline const ::std::string& param_str() const;
  inline void set_param_str(const ::std::string& value);
  inline void set_param_str(const char* value);
  inline void set_param_str(const char* value, size_t size);
  inline ::std::string* mutable_param_str();
  inline ::std::string* release_param_str();
  inline void set_allocated_param_str(::std::string* param_str);

  // optional bool share_in_parallel = 4 [default = false];
  inline bool has_share_in_parallel() const;
  inline void clear_share_in_parallel();
  static const int kShareInParallelFieldNumber = 4;
  inline bool share_in_parallel() const;
  inline void set_share_in_parallel(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PythonParameter)
 private:
  inline void set_has_module();
  inline void clear_has_module();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_param_str();
  inline void clear_has_param_str();
  inline void set_has_share_in_parallel();
  inline void clear_has_share_in_parallel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* module_;
  ::std::string* layer_;
  ::std::string* param_str_;
  bool share_in_parallel_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static PythonParameter* default_instance_;
};
// -------------------------------------------------------------------

class RecurrentParameter : public ::google::protobuf::Message {
 public:
  RecurrentParameter();
  virtual ~RecurrentParameter();

  RecurrentParameter(const RecurrentParameter& from);

  inline RecurrentParameter& operator=(const RecurrentParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecurrentParameter& default_instance();

  void Swap(RecurrentParameter* other);

  // implements Message ----------------------------------------------

  RecurrentParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecurrentParameter& from);
  void MergeFrom(const RecurrentParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1 [default = 0];
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional .apollo.perception.inference.FillerParameter weight_filler = 2;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 2;
  inline const ::apollo::perception::inference::FillerParameter& weight_filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_weight_filler();
  inline ::apollo::perception::inference::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler);

  // optional .apollo.perception.inference.FillerParameter bias_filler = 3;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 3;
  inline const ::apollo::perception::inference::FillerParameter& bias_filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_bias_filler();
  inline ::apollo::perception::inference::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler);

  // optional bool debug_info = 4 [default = false];
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 4;
  inline bool debug_info() const;
  inline void set_debug_info(bool value);

  // optional bool expose_hidden = 5 [default = false];
  inline bool has_expose_hidden() const;
  inline void clear_expose_hidden();
  static const int kExposeHiddenFieldNumber = 5;
  inline bool expose_hidden() const;
  inline void set_expose_hidden(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.RecurrentParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();
  inline void set_has_expose_hidden();
  inline void clear_has_expose_hidden();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::inference::FillerParameter* weight_filler_;
  ::apollo::perception::inference::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  bool debug_info_;
  bool expose_hidden_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static RecurrentParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReductionParameter : public ::google::protobuf::Message {
 public:
  ReductionParameter();
  virtual ~ReductionParameter();

  ReductionParameter(const ReductionParameter& from);

  inline ReductionParameter& operator=(const ReductionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReductionParameter& default_instance();

  void Swap(ReductionParameter* other);

  // implements Message ----------------------------------------------

  ReductionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReductionParameter& from);
  void MergeFrom(const ReductionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReductionParameter_ReductionOp ReductionOp;
  static const ReductionOp SUM = ReductionParameter_ReductionOp_SUM;
  static const ReductionOp ASUM = ReductionParameter_ReductionOp_ASUM;
  static const ReductionOp SUMSQ = ReductionParameter_ReductionOp_SUMSQ;
  static const ReductionOp MEAN = ReductionParameter_ReductionOp_MEAN;
  static inline bool ReductionOp_IsValid(int value) {
    return ReductionParameter_ReductionOp_IsValid(value);
  }
  static const ReductionOp ReductionOp_MIN =
    ReductionParameter_ReductionOp_ReductionOp_MIN;
  static const ReductionOp ReductionOp_MAX =
    ReductionParameter_ReductionOp_ReductionOp_MAX;
  static const int ReductionOp_ARRAYSIZE =
    ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReductionOp_descriptor() {
    return ReductionParameter_ReductionOp_descriptor();
  }
  static inline const ::std::string& ReductionOp_Name(ReductionOp value) {
    return ReductionParameter_ReductionOp_Name(value);
  }
  static inline bool ReductionOp_Parse(const ::std::string& name,
      ReductionOp* value) {
    return ReductionParameter_ReductionOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::apollo::perception::inference::ReductionParameter_ReductionOp operation() const;
  inline void set_operation(::apollo::perception::inference::ReductionParameter_ReductionOp value);

  // optional int32 axis = 2 [default = 0];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional float coeff = 3 [default = 1];
  inline bool has_coeff() const;
  inline void clear_coeff();
  static const int kCoeffFieldNumber = 3;
  inline float coeff() const;
  inline void set_coeff(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ReductionParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_coeff();
  inline void clear_has_coeff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int operation_;
  ::google::protobuf::int32 axis_;
  float coeff_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ReductionParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReLUParameter : public ::google::protobuf::Message {
 public:
  ReLUParameter();
  virtual ~ReLUParameter();

  ReLUParameter(const ReLUParameter& from);

  inline ReLUParameter& operator=(const ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUParameter& default_instance();

  void Swap(ReLUParameter* other);

  // implements Message ----------------------------------------------

  ReLUParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReLUParameter& from);
  void MergeFrom(const ReLUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReLUParameter_Engine Engine;
  static const Engine DEFAULT = ReLUParameter_Engine_DEFAULT;
  static const Engine CAFFE = ReLUParameter_Engine_CAFFE;
  static const Engine CUDNN = ReLUParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ReLUParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ReLUParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ReLUParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ReLUParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ReLUParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ReLUParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float negative_slope = 1 [default = 0];
  inline bool has_negative_slope() const;
  inline void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 1;
  inline float negative_slope() const;
  inline void set_negative_slope(float value);

  // optional .apollo.perception.inference.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 2;
  inline ::apollo::perception::inference::ReLUParameter_Engine engine() const;
  inline void set_engine(::apollo::perception::inference::ReLUParameter_Engine value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ReLUParameter)
 private:
  inline void set_has_negative_slope();
  inline void clear_has_negative_slope();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float negative_slope_;
  int engine_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ReLUParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReshapeParameter : public ::google::protobuf::Message {
 public:
  ReshapeParameter();
  virtual ~ReshapeParameter();

  ReshapeParameter(const ReshapeParameter& from);

  inline ReshapeParameter& operator=(const ReshapeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReshapeParameter& default_instance();

  void Swap(ReshapeParameter* other);

  // implements Message ----------------------------------------------

  ReshapeParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReshapeParameter& from);
  void MergeFrom(const ReshapeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.BlobShape shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::apollo::perception::inference::BlobShape& shape() const;
  inline ::apollo::perception::inference::BlobShape* mutable_shape();
  inline ::apollo::perception::inference::BlobShape* release_shape();
  inline void set_allocated_shape(::apollo::perception::inference::BlobShape* shape);

  // optional int32 axis = 2 [default = 0];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 3 [default = -1];
  inline bool has_num_axes() const;
  inline void clear_num_axes();
  static const int kNumAxesFieldNumber = 3;
  inline ::google::protobuf::int32 num_axes() const;
  inline void set_num_axes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ReshapeParameter)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::inference::BlobShape* shape_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ReshapeParameter* default_instance_;
};
// -------------------------------------------------------------------

class ROIPoolingParameter : public ::google::protobuf::Message {
 public:
  ROIPoolingParameter();
  virtual ~ROIPoolingParameter();

  ROIPoolingParameter(const ROIPoolingParameter& from);

  inline ROIPoolingParameter& operator=(const ROIPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROIPoolingParameter& default_instance();

  void Swap(ROIPoolingParameter* other);

  // implements Message ----------------------------------------------

  ROIPoolingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ROIPoolingParameter& from);
  void MergeFrom(const ROIPoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pooled_h = 1 [default = 0];
  inline bool has_pooled_h() const;
  inline void clear_pooled_h();
  static const int kPooledHFieldNumber = 1;
  inline ::google::protobuf::uint32 pooled_h() const;
  inline void set_pooled_h(::google::protobuf::uint32 value);

  // optional uint32 pooled_w = 2 [default = 0];
  inline bool has_pooled_w() const;
  inline void clear_pooled_w();
  static const int kPooledWFieldNumber = 2;
  inline ::google::protobuf::uint32 pooled_w() const;
  inline void set_pooled_w(::google::protobuf::uint32 value);

  // optional float spatial_scale = 3 [default = 1];
  inline bool has_spatial_scale() const;
  inline void clear_spatial_scale();
  static const int kSpatialScaleFieldNumber = 3;
  inline float spatial_scale() const;
  inline void set_spatial_scale(float value);

  // optional bool use_floor = 10 [default = false];
  inline bool has_use_floor() const;
  inline void clear_use_floor();
  static const int kUseFloorFieldNumber = 10;
  inline bool use_floor() const;
  inline void set_use_floor(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ROIPoolingParameter)
 private:
  inline void set_has_pooled_h();
  inline void clear_has_pooled_h();
  inline void set_has_pooled_w();
  inline void clear_has_pooled_w();
  inline void set_has_spatial_scale();
  inline void clear_has_spatial_scale();
  inline void set_has_use_floor();
  inline void clear_has_use_floor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pooled_h_;
  ::google::protobuf::uint32 pooled_w_;
  float spatial_scale_;
  bool use_floor_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ROIPoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class ScaleParameter : public ::google::protobuf::Message {
 public:
  ScaleParameter();
  virtual ~ScaleParameter();

  ScaleParameter(const ScaleParameter& from);

  inline ScaleParameter& operator=(const ScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScaleParameter& default_instance();

  void Swap(ScaleParameter* other);

  // implements Message ----------------------------------------------

  ScaleParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScaleParameter& from);
  void MergeFrom(const ScaleParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  inline bool has_num_axes() const;
  inline void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  inline ::google::protobuf::int32 num_axes() const;
  inline void set_num_axes(::google::protobuf::int32 value);

  // optional .apollo.perception.inference.FillerParameter filler = 3;
  inline bool has_filler() const;
  inline void clear_filler();
  static const int kFillerFieldNumber = 3;
  inline const ::apollo::perception::inference::FillerParameter& filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_filler();
  inline ::apollo::perception::inference::FillerParameter* release_filler();
  inline void set_allocated_filler(::apollo::perception::inference::FillerParameter* filler);

  // optional bool bias_term = 4 [default = false];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 4;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  inline const ::apollo::perception::inference::FillerParameter& bias_filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_bias_filler();
  inline ::apollo::perception::inference::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ScaleParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();
  inline void set_has_filler();
  inline void clear_has_filler();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  ::apollo::perception::inference::FillerParameter* filler_;
  ::apollo::perception::inference::FillerParameter* bias_filler_;
  bool bias_term_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ScaleParameter* default_instance_;
};
// -------------------------------------------------------------------

class SigmoidParameter : public ::google::protobuf::Message {
 public:
  SigmoidParameter();
  virtual ~SigmoidParameter();

  SigmoidParameter(const SigmoidParameter& from);

  inline SigmoidParameter& operator=(const SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigmoidParameter& default_instance();

  void Swap(SigmoidParameter* other);

  // implements Message ----------------------------------------------

  SigmoidParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SigmoidParameter& from);
  void MergeFrom(const SigmoidParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SigmoidParameter_Engine Engine;
  static const Engine DEFAULT = SigmoidParameter_Engine_DEFAULT;
  static const Engine CAFFE = SigmoidParameter_Engine_CAFFE;
  static const Engine CUDNN = SigmoidParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SigmoidParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SigmoidParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SigmoidParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SigmoidParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SigmoidParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SigmoidParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SigmoidParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 1;
  inline ::apollo::perception::inference::SigmoidParameter_Engine engine() const;
  inline void set_engine(::apollo::perception::inference::SigmoidParameter_Engine value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SigmoidParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int engine_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static SigmoidParameter* default_instance_;
};
// -------------------------------------------------------------------

class SliceParameter : public ::google::protobuf::Message {
 public:
  SliceParameter();
  virtual ~SliceParameter();

  SliceParameter(const SliceParameter& from);

  inline SliceParameter& operator=(const SliceParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SliceParameter& default_instance();

  void Swap(SliceParameter* other);

  // implements Message ----------------------------------------------

  SliceParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SliceParameter& from);
  void MergeFrom(const SliceParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 3 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 3;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // repeated uint32 slice_point = 2;
  inline int slice_point_size() const;
  inline void clear_slice_point();
  static const int kSlicePointFieldNumber = 2;
  inline ::google::protobuf::uint32 slice_point(int index) const;
  inline void set_slice_point(int index, ::google::protobuf::uint32 value);
  inline void add_slice_point(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      slice_point() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_slice_point();

  // optional uint32 slice_dim = 1 [default = 1];
  inline bool has_slice_dim() const;
  inline void clear_slice_dim();
  static const int kSliceDimFieldNumber = 1;
  inline ::google::protobuf::uint32 slice_dim() const;
  inline void set_slice_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SliceParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_slice_dim();
  inline void clear_has_slice_dim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > slice_point_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 slice_dim_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static SliceParameter* default_instance_;
};
// -------------------------------------------------------------------

class SoftmaxParameter : public ::google::protobuf::Message {
 public:
  SoftmaxParameter();
  virtual ~SoftmaxParameter();

  SoftmaxParameter(const SoftmaxParameter& from);

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxParameter& default_instance();

  void Swap(SoftmaxParameter* other);

  // implements Message ----------------------------------------------

  SoftmaxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftmaxParameter& from);
  void MergeFrom(const SoftmaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SoftmaxParameter_Engine Engine;
  static const Engine DEFAULT = SoftmaxParameter_Engine_DEFAULT;
  static const Engine CAFFE = SoftmaxParameter_Engine_CAFFE;
  static const Engine CUDNN = SoftmaxParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SoftmaxParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SoftmaxParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SoftmaxParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SoftmaxParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SoftmaxParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SoftmaxParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SoftmaxParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 1;
  inline ::apollo::perception::inference::SoftmaxParameter_Engine engine() const;
  inline void set_engine(::apollo::perception::inference::SoftmaxParameter_Engine value);

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SoftmaxParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int engine_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static SoftmaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class TanHParameter : public ::google::protobuf::Message {
 public:
  TanHParameter();
  virtual ~TanHParameter();

  TanHParameter(const TanHParameter& from);

  inline TanHParameter& operator=(const TanHParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TanHParameter& default_instance();

  void Swap(TanHParameter* other);

  // implements Message ----------------------------------------------

  TanHParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TanHParameter& from);
  void MergeFrom(const TanHParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TanHParameter_Engine Engine;
  static const Engine DEFAULT = TanHParameter_Engine_DEFAULT;
  static const Engine CAFFE = TanHParameter_Engine_CAFFE;
  static const Engine CUDNN = TanHParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return TanHParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    TanHParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    TanHParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    TanHParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return TanHParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return TanHParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return TanHParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.TanHParameter.Engine engine = 1 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 1;
  inline ::apollo::perception::inference::TanHParameter_Engine engine() const;
  inline void set_engine(::apollo::perception::inference::TanHParameter_Engine value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.TanHParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int engine_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static TanHParameter* default_instance_;
};
// -------------------------------------------------------------------

class TileParameter : public ::google::protobuf::Message {
 public:
  TileParameter();
  virtual ~TileParameter();

  TileParameter(const TileParameter& from);

  inline TileParameter& operator=(const TileParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TileParameter& default_instance();

  void Swap(TileParameter* other);

  // implements Message ----------------------------------------------

  TileParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TileParameter& from);
  void MergeFrom(const TileParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 tiles = 2;
  inline bool has_tiles() const;
  inline void clear_tiles();
  static const int kTilesFieldNumber = 2;
  inline ::google::protobuf::int32 tiles() const;
  inline void set_tiles(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.TileParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_tiles();
  inline void clear_has_tiles();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 tiles_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static TileParameter* default_instance_;
};
// -------------------------------------------------------------------

class ThresholdParameter : public ::google::protobuf::Message {
 public:
  ThresholdParameter();
  virtual ~ThresholdParameter();

  ThresholdParameter(const ThresholdParameter& from);

  inline ThresholdParameter& operator=(const ThresholdParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThresholdParameter& default_instance();

  void Swap(ThresholdParameter* other);

  // implements Message ----------------------------------------------

  ThresholdParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThresholdParameter& from);
  void MergeFrom(const ThresholdParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float threshold = 1 [default = 0];
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  inline float threshold() const;
  inline void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ThresholdParameter)
 private:
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float threshold_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ThresholdParameter* default_instance_;
};
// -------------------------------------------------------------------

class VideoDataParameter : public ::google::protobuf::Message {
 public:
  VideoDataParameter();
  virtual ~VideoDataParameter();

  VideoDataParameter(const VideoDataParameter& from);

  inline VideoDataParameter& operator=(const VideoDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoDataParameter& default_instance();

  void Swap(VideoDataParameter* other);

  // implements Message ----------------------------------------------

  VideoDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoDataParameter& from);
  void MergeFrom(const VideoDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VideoDataParameter_VideoType VideoType;
  static const VideoType WEBCAM = VideoDataParameter_VideoType_WEBCAM;
  static const VideoType VIDEO = VideoDataParameter_VideoType_VIDEO;
  static inline bool VideoType_IsValid(int value) {
    return VideoDataParameter_VideoType_IsValid(value);
  }
  static const VideoType VideoType_MIN =
    VideoDataParameter_VideoType_VideoType_MIN;
  static const VideoType VideoType_MAX =
    VideoDataParameter_VideoType_VideoType_MAX;
  static const int VideoType_ARRAYSIZE =
    VideoDataParameter_VideoType_VideoType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VideoType_descriptor() {
    return VideoDataParameter_VideoType_descriptor();
  }
  static inline const ::std::string& VideoType_Name(VideoType value) {
    return VideoDataParameter_VideoType_Name(value);
  }
  static inline bool VideoType_Parse(const ::std::string& name,
      VideoType* value) {
    return VideoDataParameter_VideoType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.VideoDataParameter.VideoType video_type = 1 [default = WEBCAM];
  inline bool has_video_type() const;
  inline void clear_video_type();
  static const int kVideoTypeFieldNumber = 1;
  inline ::apollo::perception::inference::VideoDataParameter_VideoType video_type() const;
  inline void set_video_type(::apollo::perception::inference::VideoDataParameter_VideoType value);

  // optional int32 device_id = 2 [default = 0];
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 2;
  inline ::google::protobuf::int32 device_id() const;
  inline void set_device_id(::google::protobuf::int32 value);

  // optional string video_file = 3;
  inline bool has_video_file() const;
  inline void clear_video_file();
  static const int kVideoFileFieldNumber = 3;
  inline const ::std::string& video_file() const;
  inline void set_video_file(const ::std::string& value);
  inline void set_video_file(const char* value);
  inline void set_video_file(const char* value, size_t size);
  inline ::std::string* mutable_video_file();
  inline ::std::string* release_video_file();
  inline void set_allocated_video_file(::std::string* video_file);

  // optional uint32 skip_frames = 4 [default = 0];
  inline bool has_skip_frames() const;
  inline void clear_skip_frames();
  static const int kSkipFramesFieldNumber = 4;
  inline ::google::protobuf::uint32 skip_frames() const;
  inline void set_skip_frames(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.VideoDataParameter)
 private:
  inline void set_has_video_type();
  inline void clear_has_video_type();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_video_file();
  inline void clear_has_video_file();
  inline void set_has_skip_frames();
  inline void clear_has_skip_frames();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int video_type_;
  ::google::protobuf::int32 device_id_;
  ::std::string* video_file_;
  ::google::protobuf::uint32 skip_frames_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static VideoDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class WindowDataParameter : public ::google::protobuf::Message {
 public:
  WindowDataParameter();
  virtual ~WindowDataParameter();

  WindowDataParameter(const WindowDataParameter& from);

  inline WindowDataParameter& operator=(const WindowDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WindowDataParameter& default_instance();

  void Swap(WindowDataParameter* other);

  // implements Message ----------------------------------------------

  WindowDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WindowDataParameter& from);
  void MergeFrom(const WindowDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string mean_file = 3;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional float fg_threshold = 7 [default = 0.5];
  inline bool has_fg_threshold() const;
  inline void clear_fg_threshold();
  static const int kFgThresholdFieldNumber = 7;
  inline float fg_threshold() const;
  inline void set_fg_threshold(float value);

  // optional float bg_threshold = 8 [default = 0.5];
  inline bool has_bg_threshold() const;
  inline void clear_bg_threshold();
  static const int kBgThresholdFieldNumber = 8;
  inline float bg_threshold() const;
  inline void set_bg_threshold(float value);

  // optional float fg_fraction = 9 [default = 0.25];
  inline bool has_fg_fraction() const;
  inline void clear_fg_fraction();
  static const int kFgFractionFieldNumber = 9;
  inline float fg_fraction() const;
  inline void set_fg_fraction(float value);

  // optional uint32 context_pad = 10 [default = 0];
  inline bool has_context_pad() const;
  inline void clear_context_pad();
  static const int kContextPadFieldNumber = 10;
  inline ::google::protobuf::uint32 context_pad() const;
  inline void set_context_pad(::google::protobuf::uint32 value);

  // optional string crop_mode = 11 [default = "warp"];
  inline bool has_crop_mode() const;
  inline void clear_crop_mode();
  static const int kCropModeFieldNumber = 11;
  inline const ::std::string& crop_mode() const;
  inline void set_crop_mode(const ::std::string& value);
  inline void set_crop_mode(const char* value);
  inline void set_crop_mode(const char* value, size_t size);
  inline ::std::string* mutable_crop_mode();
  inline ::std::string* release_crop_mode();
  inline void set_allocated_crop_mode(::std::string* crop_mode);

  // optional bool cache_images = 12 [default = false];
  inline bool has_cache_images() const;
  inline void clear_cache_images();
  static const int kCacheImagesFieldNumber = 12;
  inline bool cache_images() const;
  inline void set_cache_images(bool value);

  // optional string root_folder = 13 [default = ""];
  inline bool has_root_folder() const;
  inline void clear_root_folder();
  static const int kRootFolderFieldNumber = 13;
  inline const ::std::string& root_folder() const;
  inline void set_root_folder(const ::std::string& value);
  inline void set_root_folder(const char* value);
  inline void set_root_folder(const char* value, size_t size);
  inline ::std::string* mutable_root_folder();
  inline ::std::string* release_root_folder();
  inline void set_allocated_root_folder(::std::string* root_folder);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.WindowDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_fg_threshold();
  inline void clear_has_fg_threshold();
  inline void set_has_bg_threshold();
  inline void clear_has_bg_threshold();
  inline void set_has_fg_fraction();
  inline void clear_has_fg_fraction();
  inline void set_has_context_pad();
  inline void clear_has_context_pad();
  inline void set_has_crop_mode();
  inline void clear_has_crop_mode();
  inline void set_has_cache_images();
  inline void clear_has_cache_images();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::std::string* mean_file_;
  float scale_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  float fg_threshold_;
  float bg_threshold_;
  float fg_fraction_;
  bool mirror_;
  bool cache_images_;
  ::google::protobuf::uint32 context_pad_;
  static ::std::string* _default_crop_mode_;
  ::std::string* crop_mode_;
  ::std::string* root_folder_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static WindowDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class SPPParameter : public ::google::protobuf::Message {
 public:
  SPPParameter();
  virtual ~SPPParameter();

  SPPParameter(const SPPParameter& from);

  inline SPPParameter& operator=(const SPPParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPPParameter& default_instance();

  void Swap(SPPParameter* other);

  // implements Message ----------------------------------------------

  SPPParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPPParameter& from);
  void MergeFrom(const SPPParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SPPParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX = SPPParameter_PoolMethod_MAX;
  static const PoolMethod AVE = SPPParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC = SPPParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return SPPParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    SPPParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    SPPParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return SPPParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return SPPParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return SPPParameter_PoolMethod_Parse(name, value);
  }

  typedef SPPParameter_Engine Engine;
  static const Engine DEFAULT = SPPParameter_Engine_DEFAULT;
  static const Engine CAFFE = SPPParameter_Engine_CAFFE;
  static const Engine CUDNN = SPPParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SPPParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SPPParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SPPParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SPPParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SPPParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SPPParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SPPParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 pyramid_height = 1;
  inline bool has_pyramid_height() const;
  inline void clear_pyramid_height();
  static const int kPyramidHeightFieldNumber = 1;
  inline ::google::protobuf::uint32 pyramid_height() const;
  inline void set_pyramid_height(::google::protobuf::uint32 value);

  // optional .apollo.perception.inference.SPPParameter.PoolMethod pool = 2 [default = MAX];
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 2;
  inline ::apollo::perception::inference::SPPParameter_PoolMethod pool() const;
  inline void set_pool(::apollo::perception::inference::SPPParameter_PoolMethod value);

  // optional .apollo.perception.inference.SPPParameter.Engine engine = 6 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 6;
  inline ::apollo::perception::inference::SPPParameter_Engine engine() const;
  inline void set_engine(::apollo::perception::inference::SPPParameter_Engine value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.SPPParameter)
 private:
  inline void set_has_pyramid_height();
  inline void clear_has_pyramid_height();
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pyramid_height_;
  int pool_;
  int engine_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static SPPParameter* default_instance_;
};
// -------------------------------------------------------------------

class V1LayerParameter : public ::google::protobuf::Message {
 public:
  V1LayerParameter();
  virtual ~V1LayerParameter();

  V1LayerParameter(const V1LayerParameter& from);

  inline V1LayerParameter& operator=(const V1LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V1LayerParameter& default_instance();

  void Swap(V1LayerParameter* other);

  // implements Message ----------------------------------------------

  V1LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const V1LayerParameter& from);
  void MergeFrom(const V1LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef V1LayerParameter_LayerType LayerType;
  static const LayerType NONE = V1LayerParameter_LayerType_NONE;
  static const LayerType ABSVAL = V1LayerParameter_LayerType_ABSVAL;
  static const LayerType ACCURACY = V1LayerParameter_LayerType_ACCURACY;
  static const LayerType ARGMAX = V1LayerParameter_LayerType_ARGMAX;
  static const LayerType BNLL = V1LayerParameter_LayerType_BNLL;
  static const LayerType CONCAT = V1LayerParameter_LayerType_CONCAT;
  static const LayerType CONTRASTIVE_LOSS = V1LayerParameter_LayerType_CONTRASTIVE_LOSS;
  static const LayerType CONVOLUTION = V1LayerParameter_LayerType_CONVOLUTION;
  static const LayerType DATA = V1LayerParameter_LayerType_DATA;
  static const LayerType DECONVOLUTION = V1LayerParameter_LayerType_DECONVOLUTION;
  static const LayerType DROPOUT = V1LayerParameter_LayerType_DROPOUT;
  static const LayerType DUMMY_DATA = V1LayerParameter_LayerType_DUMMY_DATA;
  static const LayerType EUCLIDEAN_LOSS = V1LayerParameter_LayerType_EUCLIDEAN_LOSS;
  static const LayerType ELTWISE = V1LayerParameter_LayerType_ELTWISE;
  static const LayerType EXP = V1LayerParameter_LayerType_EXP;
  static const LayerType FLATTEN = V1LayerParameter_LayerType_FLATTEN;
  static const LayerType HDF5_DATA = V1LayerParameter_LayerType_HDF5_DATA;
  static const LayerType HDF5_OUTPUT = V1LayerParameter_LayerType_HDF5_OUTPUT;
  static const LayerType HINGE_LOSS = V1LayerParameter_LayerType_HINGE_LOSS;
  static const LayerType IM2COL = V1LayerParameter_LayerType_IM2COL;
  static const LayerType IMAGE_DATA = V1LayerParameter_LayerType_IMAGE_DATA;
  static const LayerType INFOGAIN_LOSS = V1LayerParameter_LayerType_INFOGAIN_LOSS;
  static const LayerType INNER_PRODUCT = V1LayerParameter_LayerType_INNER_PRODUCT;
  static const LayerType LRN = V1LayerParameter_LayerType_LRN;
  static const LayerType MEMORY_DATA = V1LayerParameter_LayerType_MEMORY_DATA;
  static const LayerType MULTINOMIAL_LOGISTIC_LOSS = V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS;
  static const LayerType MVN = V1LayerParameter_LayerType_MVN;
  static const LayerType POOLING = V1LayerParameter_LayerType_POOLING;
  static const LayerType POWER = V1LayerParameter_LayerType_POWER;
  static const LayerType RELU = V1LayerParameter_LayerType_RELU;
  static const LayerType SIGMOID = V1LayerParameter_LayerType_SIGMOID;
  static const LayerType SIGMOID_CROSS_ENTROPY_LOSS = V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS;
  static const LayerType SILENCE = V1LayerParameter_LayerType_SILENCE;
  static const LayerType SOFTMAX = V1LayerParameter_LayerType_SOFTMAX;
  static const LayerType SOFTMAX_LOSS = V1LayerParameter_LayerType_SOFTMAX_LOSS;
  static const LayerType SPLIT = V1LayerParameter_LayerType_SPLIT;
  static const LayerType SLICE = V1LayerParameter_LayerType_SLICE;
  static const LayerType TANH = V1LayerParameter_LayerType_TANH;
  static const LayerType WINDOW_DATA = V1LayerParameter_LayerType_WINDOW_DATA;
  static const LayerType THRESHOLD = V1LayerParameter_LayerType_THRESHOLD;
  static inline bool LayerType_IsValid(int value) {
    return V1LayerParameter_LayerType_IsValid(value);
  }
  static const LayerType LayerType_MIN =
    V1LayerParameter_LayerType_LayerType_MIN;
  static const LayerType LayerType_MAX =
    V1LayerParameter_LayerType_LayerType_MAX;
  static const int LayerType_ARRAYSIZE =
    V1LayerParameter_LayerType_LayerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LayerType_descriptor() {
    return V1LayerParameter_LayerType_descriptor();
  }
  static inline const ::std::string& LayerType_Name(LayerType value) {
    return V1LayerParameter_LayerType_Name(value);
  }
  static inline bool LayerType_Parse(const ::std::string& name,
      LayerType* value) {
    return V1LayerParameter_LayerType_Parse(name, value);
  }

  typedef V1LayerParameter_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT = V1LayerParameter_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE = V1LayerParameter_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return V1LayerParameter_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    V1LayerParameter_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    V1LayerParameter_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return V1LayerParameter_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return V1LayerParameter_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return V1LayerParameter_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string bottom = 2;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 2;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 3;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 3;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .apollo.perception.inference.NetStateRule include = 32;
  inline int include_size() const;
  inline void clear_include();
  static const int kIncludeFieldNumber = 32;
  inline const ::apollo::perception::inference::NetStateRule& include(int index) const;
  inline ::apollo::perception::inference::NetStateRule* mutable_include(int index);
  inline ::apollo::perception::inference::NetStateRule* add_include();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
      include() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
      mutable_include();

  // repeated .apollo.perception.inference.NetStateRule exclude = 33;
  inline int exclude_size() const;
  inline void clear_exclude();
  static const int kExcludeFieldNumber = 33;
  inline const ::apollo::perception::inference::NetStateRule& exclude(int index) const;
  inline ::apollo::perception::inference::NetStateRule* mutable_exclude(int index);
  inline ::apollo::perception::inference::NetStateRule* add_exclude();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
      exclude() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
      mutable_exclude();

  // optional .apollo.perception.inference.V1LayerParameter.LayerType type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::apollo::perception::inference::V1LayerParameter_LayerType type() const;
  inline void set_type(::apollo::perception::inference::V1LayerParameter_LayerType value);

  // repeated .apollo.perception.inference.BlobProto blobs = 6;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 6;
  inline const ::apollo::perception::inference::BlobProto& blobs(int index) const;
  inline ::apollo::perception::inference::BlobProto* mutable_blobs(int index);
  inline ::apollo::perception::inference::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto >*
      mutable_blobs();

  // repeated string param = 1001;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 1001;
  inline const ::std::string& param(int index) const;
  inline ::std::string* mutable_param(int index);
  inline void set_param(int index, const ::std::string& value);
  inline void set_param(int index, const char* value);
  inline void set_param(int index, const char* value, size_t size);
  inline ::std::string* add_param();
  inline void add_param(const ::std::string& value);
  inline void add_param(const char* value);
  inline void add_param(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& param() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_param();

  // repeated .apollo.perception.inference.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  inline int blob_share_mode_size() const;
  inline void clear_blob_share_mode();
  static const int kBlobShareModeFieldNumber = 1002;
  inline ::apollo::perception::inference::V1LayerParameter_DimCheckMode blob_share_mode(int index) const;
  inline void set_blob_share_mode(int index, ::apollo::perception::inference::V1LayerParameter_DimCheckMode value);
  inline void add_blob_share_mode(::apollo::perception::inference::V1LayerParameter_DimCheckMode value);
  inline const ::google::protobuf::RepeatedField<int>& blob_share_mode() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_blob_share_mode();

  // repeated float blobs_lr = 7;
  inline int blobs_lr_size() const;
  inline void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 7;
  inline float blobs_lr(int index) const;
  inline void set_blobs_lr(int index, float value);
  inline void add_blobs_lr(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 8;
  inline int weight_decay_size() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 8;
  inline float weight_decay(int index) const;
  inline void set_weight_decay(int index, float value);
  inline void add_weight_decay(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // repeated float loss_weight = 35;
  inline int loss_weight_size() const;
  inline void clear_loss_weight();
  static const int kLossWeightFieldNumber = 35;
  inline float loss_weight(int index) const;
  inline void set_loss_weight(int index, float value);
  inline void add_loss_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 27;
  inline bool has_accuracy_param() const;
  inline void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 27;
  inline const ::apollo::perception::inference::AccuracyParameter& accuracy_param() const;
  inline ::apollo::perception::inference::AccuracyParameter* mutable_accuracy_param();
  inline ::apollo::perception::inference::AccuracyParameter* release_accuracy_param();
  inline void set_allocated_accuracy_param(::apollo::perception::inference::AccuracyParameter* accuracy_param);

  // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 23;
  inline bool has_argmax_param() const;
  inline void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 23;
  inline const ::apollo::perception::inference::ArgMaxParameter& argmax_param() const;
  inline ::apollo::perception::inference::ArgMaxParameter* mutable_argmax_param();
  inline ::apollo::perception::inference::ArgMaxParameter* release_argmax_param();
  inline void set_allocated_argmax_param(::apollo::perception::inference::ArgMaxParameter* argmax_param);

  // optional .apollo.perception.inference.ConcatParameter concat_param = 9;
  inline bool has_concat_param() const;
  inline void clear_concat_param();
  static const int kConcatParamFieldNumber = 9;
  inline const ::apollo::perception::inference::ConcatParameter& concat_param() const;
  inline ::apollo::perception::inference::ConcatParameter* mutable_concat_param();
  inline ::apollo::perception::inference::ConcatParameter* release_concat_param();
  inline void set_allocated_concat_param(::apollo::perception::inference::ConcatParameter* concat_param);

  // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 40;
  inline bool has_contrastive_loss_param() const;
  inline void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 40;
  inline const ::apollo::perception::inference::ContrastiveLossParameter& contrastive_loss_param() const;
  inline ::apollo::perception::inference::ContrastiveLossParameter* mutable_contrastive_loss_param();
  inline ::apollo::perception::inference::ContrastiveLossParameter* release_contrastive_loss_param();
  inline void set_allocated_contrastive_loss_param(::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param);

  // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 10;
  inline bool has_convolution_param() const;
  inline void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 10;
  inline const ::apollo::perception::inference::ConvolutionParameter& convolution_param() const;
  inline ::apollo::perception::inference::ConvolutionParameter* mutable_convolution_param();
  inline ::apollo::perception::inference::ConvolutionParameter* release_convolution_param();
  inline void set_allocated_convolution_param(::apollo::perception::inference::ConvolutionParameter* convolution_param);

  // optional .apollo.perception.inference.DataParameter data_param = 11;
  inline bool has_data_param() const;
  inline void clear_data_param();
  static const int kDataParamFieldNumber = 11;
  inline const ::apollo::perception::inference::DataParameter& data_param() const;
  inline ::apollo::perception::inference::DataParameter* mutable_data_param();
  inline ::apollo::perception::inference::DataParameter* release_data_param();
  inline void set_allocated_data_param(::apollo::perception::inference::DataParameter* data_param);

  // optional .apollo.perception.inference.DropoutParameter dropout_param = 12;
  inline bool has_dropout_param() const;
  inline void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 12;
  inline const ::apollo::perception::inference::DropoutParameter& dropout_param() const;
  inline ::apollo::perception::inference::DropoutParameter* mutable_dropout_param();
  inline ::apollo::perception::inference::DropoutParameter* release_dropout_param();
  inline void set_allocated_dropout_param(::apollo::perception::inference::DropoutParameter* dropout_param);

  // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 26;
  inline bool has_dummy_data_param() const;
  inline void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 26;
  inline const ::apollo::perception::inference::DummyDataParameter& dummy_data_param() const;
  inline ::apollo::perception::inference::DummyDataParameter* mutable_dummy_data_param();
  inline ::apollo::perception::inference::DummyDataParameter* release_dummy_data_param();
  inline void set_allocated_dummy_data_param(::apollo::perception::inference::DummyDataParameter* dummy_data_param);

  // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 24;
  inline bool has_eltwise_param() const;
  inline void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 24;
  inline const ::apollo::perception::inference::EltwiseParameter& eltwise_param() const;
  inline ::apollo::perception::inference::EltwiseParameter* mutable_eltwise_param();
  inline ::apollo::perception::inference::EltwiseParameter* release_eltwise_param();
  inline void set_allocated_eltwise_param(::apollo::perception::inference::EltwiseParameter* eltwise_param);

  // optional .apollo.perception.inference.ExpParameter exp_param = 41;
  inline bool has_exp_param() const;
  inline void clear_exp_param();
  static const int kExpParamFieldNumber = 41;
  inline const ::apollo::perception::inference::ExpParameter& exp_param() const;
  inline ::apollo::perception::inference::ExpParameter* mutable_exp_param();
  inline ::apollo::perception::inference::ExpParameter* release_exp_param();
  inline void set_allocated_exp_param(::apollo::perception::inference::ExpParameter* exp_param);

  // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 13;
  inline bool has_hdf5_data_param() const;
  inline void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 13;
  inline const ::apollo::perception::inference::HDF5DataParameter& hdf5_data_param() const;
  inline ::apollo::perception::inference::HDF5DataParameter* mutable_hdf5_data_param();
  inline ::apollo::perception::inference::HDF5DataParameter* release_hdf5_data_param();
  inline void set_allocated_hdf5_data_param(::apollo::perception::inference::HDF5DataParameter* hdf5_data_param);

  // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 14;
  inline bool has_hdf5_output_param() const;
  inline void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 14;
  inline const ::apollo::perception::inference::HDF5OutputParameter& hdf5_output_param() const;
  inline ::apollo::perception::inference::HDF5OutputParameter* mutable_hdf5_output_param();
  inline ::apollo::perception::inference::HDF5OutputParameter* release_hdf5_output_param();
  inline void set_allocated_hdf5_output_param(::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param);

  // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 29;
  inline bool has_hinge_loss_param() const;
  inline void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 29;
  inline const ::apollo::perception::inference::HingeLossParameter& hinge_loss_param() const;
  inline ::apollo::perception::inference::HingeLossParameter* mutable_hinge_loss_param();
  inline ::apollo::perception::inference::HingeLossParameter* release_hinge_loss_param();
  inline void set_allocated_hinge_loss_param(::apollo::perception::inference::HingeLossParameter* hinge_loss_param);

  // optional .apollo.perception.inference.ImageDataParameter image_data_param = 15;
  inline bool has_image_data_param() const;
  inline void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 15;
  inline const ::apollo::perception::inference::ImageDataParameter& image_data_param() const;
  inline ::apollo::perception::inference::ImageDataParameter* mutable_image_data_param();
  inline ::apollo::perception::inference::ImageDataParameter* release_image_data_param();
  inline void set_allocated_image_data_param(::apollo::perception::inference::ImageDataParameter* image_data_param);

  // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 16;
  inline bool has_infogain_loss_param() const;
  inline void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 16;
  inline const ::apollo::perception::inference::InfogainLossParameter& infogain_loss_param() const;
  inline ::apollo::perception::inference::InfogainLossParameter* mutable_infogain_loss_param();
  inline ::apollo::perception::inference::InfogainLossParameter* release_infogain_loss_param();
  inline void set_allocated_infogain_loss_param(::apollo::perception::inference::InfogainLossParameter* infogain_loss_param);

  // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 17;
  inline bool has_inner_product_param() const;
  inline void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 17;
  inline const ::apollo::perception::inference::InnerProductParameter& inner_product_param() const;
  inline ::apollo::perception::inference::InnerProductParameter* mutable_inner_product_param();
  inline ::apollo::perception::inference::InnerProductParameter* release_inner_product_param();
  inline void set_allocated_inner_product_param(::apollo::perception::inference::InnerProductParameter* inner_product_param);

  // optional .apollo.perception.inference.LRNParameter lrn_param = 18;
  inline bool has_lrn_param() const;
  inline void clear_lrn_param();
  static const int kLrnParamFieldNumber = 18;
  inline const ::apollo::perception::inference::LRNParameter& lrn_param() const;
  inline ::apollo::perception::inference::LRNParameter* mutable_lrn_param();
  inline ::apollo::perception::inference::LRNParameter* release_lrn_param();
  inline void set_allocated_lrn_param(::apollo::perception::inference::LRNParameter* lrn_param);

  // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 22;
  inline bool has_memory_data_param() const;
  inline void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 22;
  inline const ::apollo::perception::inference::MemoryDataParameter& memory_data_param() const;
  inline ::apollo::perception::inference::MemoryDataParameter* mutable_memory_data_param();
  inline ::apollo::perception::inference::MemoryDataParameter* release_memory_data_param();
  inline void set_allocated_memory_data_param(::apollo::perception::inference::MemoryDataParameter* memory_data_param);

  // optional .apollo.perception.inference.MVNParameter mvn_param = 34;
  inline bool has_mvn_param() const;
  inline void clear_mvn_param();
  static const int kMvnParamFieldNumber = 34;
  inline const ::apollo::perception::inference::MVNParameter& mvn_param() const;
  inline ::apollo::perception::inference::MVNParameter* mutable_mvn_param();
  inline ::apollo::perception::inference::MVNParameter* release_mvn_param();
  inline void set_allocated_mvn_param(::apollo::perception::inference::MVNParameter* mvn_param);

  // optional .apollo.perception.inference.PoolingParameter pooling_param = 19;
  inline bool has_pooling_param() const;
  inline void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 19;
  inline const ::apollo::perception::inference::PoolingParameter& pooling_param() const;
  inline ::apollo::perception::inference::PoolingParameter* mutable_pooling_param();
  inline ::apollo::perception::inference::PoolingParameter* release_pooling_param();
  inline void set_allocated_pooling_param(::apollo::perception::inference::PoolingParameter* pooling_param);

  // optional .apollo.perception.inference.PowerParameter power_param = 21;
  inline bool has_power_param() const;
  inline void clear_power_param();
  static const int kPowerParamFieldNumber = 21;
  inline const ::apollo::perception::inference::PowerParameter& power_param() const;
  inline ::apollo::perception::inference::PowerParameter* mutable_power_param();
  inline ::apollo::perception::inference::PowerParameter* release_power_param();
  inline void set_allocated_power_param(::apollo::perception::inference::PowerParameter* power_param);

  // optional .apollo.perception.inference.ReLUParameter relu_param = 30;
  inline bool has_relu_param() const;
  inline void clear_relu_param();
  static const int kReluParamFieldNumber = 30;
  inline const ::apollo::perception::inference::ReLUParameter& relu_param() const;
  inline ::apollo::perception::inference::ReLUParameter* mutable_relu_param();
  inline ::apollo::perception::inference::ReLUParameter* release_relu_param();
  inline void set_allocated_relu_param(::apollo::perception::inference::ReLUParameter* relu_param);

  // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 38;
  inline bool has_sigmoid_param() const;
  inline void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 38;
  inline const ::apollo::perception::inference::SigmoidParameter& sigmoid_param() const;
  inline ::apollo::perception::inference::SigmoidParameter* mutable_sigmoid_param();
  inline ::apollo::perception::inference::SigmoidParameter* release_sigmoid_param();
  inline void set_allocated_sigmoid_param(::apollo::perception::inference::SigmoidParameter* sigmoid_param);

  // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 39;
  inline bool has_softmax_param() const;
  inline void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 39;
  inline const ::apollo::perception::inference::SoftmaxParameter& softmax_param() const;
  inline ::apollo::perception::inference::SoftmaxParameter* mutable_softmax_param();
  inline ::apollo::perception::inference::SoftmaxParameter* release_softmax_param();
  inline void set_allocated_softmax_param(::apollo::perception::inference::SoftmaxParameter* softmax_param);

  // optional .apollo.perception.inference.SliceParameter slice_param = 31;
  inline bool has_slice_param() const;
  inline void clear_slice_param();
  static const int kSliceParamFieldNumber = 31;
  inline const ::apollo::perception::inference::SliceParameter& slice_param() const;
  inline ::apollo::perception::inference::SliceParameter* mutable_slice_param();
  inline ::apollo::perception::inference::SliceParameter* release_slice_param();
  inline void set_allocated_slice_param(::apollo::perception::inference::SliceParameter* slice_param);

  // optional .apollo.perception.inference.TanHParameter tanh_param = 37;
  inline bool has_tanh_param() const;
  inline void clear_tanh_param();
  static const int kTanhParamFieldNumber = 37;
  inline const ::apollo::perception::inference::TanHParameter& tanh_param() const;
  inline ::apollo::perception::inference::TanHParameter* mutable_tanh_param();
  inline ::apollo::perception::inference::TanHParameter* release_tanh_param();
  inline void set_allocated_tanh_param(::apollo::perception::inference::TanHParameter* tanh_param);

  // optional .apollo.perception.inference.ThresholdParameter threshold_param = 25;
  inline bool has_threshold_param() const;
  inline void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 25;
  inline const ::apollo::perception::inference::ThresholdParameter& threshold_param() const;
  inline ::apollo::perception::inference::ThresholdParameter* mutable_threshold_param();
  inline ::apollo::perception::inference::ThresholdParameter* release_threshold_param();
  inline void set_allocated_threshold_param(::apollo::perception::inference::ThresholdParameter* threshold_param);

  // optional .apollo.perception.inference.WindowDataParameter window_data_param = 20;
  inline bool has_window_data_param() const;
  inline void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 20;
  inline const ::apollo::perception::inference::WindowDataParameter& window_data_param() const;
  inline ::apollo::perception::inference::WindowDataParameter* mutable_window_data_param();
  inline ::apollo::perception::inference::WindowDataParameter* release_window_data_param();
  inline void set_allocated_window_data_param(::apollo::perception::inference::WindowDataParameter* window_data_param);

  // optional .apollo.perception.inference.TransformationParameter transform_param = 36;
  inline bool has_transform_param() const;
  inline void clear_transform_param();
  static const int kTransformParamFieldNumber = 36;
  inline const ::apollo::perception::inference::TransformationParameter& transform_param() const;
  inline ::apollo::perception::inference::TransformationParameter* mutable_transform_param();
  inline ::apollo::perception::inference::TransformationParameter* release_transform_param();
  inline void set_allocated_transform_param(::apollo::perception::inference::TransformationParameter* transform_param);

  // optional .apollo.perception.inference.LossParameter loss_param = 42;
  inline bool has_loss_param() const;
  inline void clear_loss_param();
  static const int kLossParamFieldNumber = 42;
  inline const ::apollo::perception::inference::LossParameter& loss_param() const;
  inline ::apollo::perception::inference::LossParameter* mutable_loss_param();
  inline ::apollo::perception::inference::LossParameter* release_loss_param();
  inline void set_allocated_loss_param(::apollo::perception::inference::LossParameter* loss_param);

  // optional .apollo.perception.inference.V0LayerParameter layer = 1;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 1;
  inline const ::apollo::perception::inference::V0LayerParameter& layer() const;
  inline ::apollo::perception::inference::V0LayerParameter* mutable_layer();
  inline ::apollo::perception::inference::V0LayerParameter* release_layer();
  inline void set_allocated_layer(::apollo::perception::inference::V0LayerParameter* layer);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.V1LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_accuracy_param();
  inline void clear_has_accuracy_param();
  inline void set_has_argmax_param();
  inline void clear_has_argmax_param();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();
  inline void set_has_contrastive_loss_param();
  inline void clear_has_contrastive_loss_param();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_dummy_data_param();
  inline void clear_has_dummy_data_param();
  inline void set_has_eltwise_param();
  inline void clear_has_eltwise_param();
  inline void set_has_exp_param();
  inline void clear_has_exp_param();
  inline void set_has_hdf5_data_param();
  inline void clear_has_hdf5_data_param();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();
  inline void set_has_hinge_loss_param();
  inline void clear_has_hinge_loss_param();
  inline void set_has_image_data_param();
  inline void clear_has_image_data_param();
  inline void set_has_infogain_loss_param();
  inline void clear_has_infogain_loss_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_memory_data_param();
  inline void clear_has_memory_data_param();
  inline void set_has_mvn_param();
  inline void clear_has_mvn_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_power_param();
  inline void clear_has_power_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_sigmoid_param();
  inline void clear_has_sigmoid_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();
  inline void set_has_slice_param();
  inline void clear_has_slice_param();
  inline void set_has_tanh_param();
  inline void clear_has_tanh_param();
  inline void set_has_threshold_param();
  inline void clear_has_threshold_param();
  inline void set_has_window_data_param();
  inline void clear_has_window_data_param();
  inline void set_has_transform_param();
  inline void clear_has_transform_param();
  inline void set_has_loss_param();
  inline void clear_has_loss_param();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule > exclude_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto > blobs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> param_;
  ::google::protobuf::RepeatedField<int> blob_share_mode_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::apollo::perception::inference::AccuracyParameter* accuracy_param_;
  ::apollo::perception::inference::ArgMaxParameter* argmax_param_;
  ::apollo::perception::inference::ConcatParameter* concat_param_;
  ::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param_;
  ::apollo::perception::inference::ConvolutionParameter* convolution_param_;
  ::apollo::perception::inference::DataParameter* data_param_;
  ::apollo::perception::inference::DropoutParameter* dropout_param_;
  ::apollo::perception::inference::DummyDataParameter* dummy_data_param_;
  ::apollo::perception::inference::EltwiseParameter* eltwise_param_;
  ::apollo::perception::inference::ExpParameter* exp_param_;
  ::apollo::perception::inference::HDF5DataParameter* hdf5_data_param_;
  ::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param_;
  ::apollo::perception::inference::HingeLossParameter* hinge_loss_param_;
  ::apollo::perception::inference::ImageDataParameter* image_data_param_;
  ::apollo::perception::inference::InfogainLossParameter* infogain_loss_param_;
  ::apollo::perception::inference::InnerProductParameter* inner_product_param_;
  ::apollo::perception::inference::LRNParameter* lrn_param_;
  ::apollo::perception::inference::MemoryDataParameter* memory_data_param_;
  ::apollo::perception::inference::MVNParameter* mvn_param_;
  ::apollo::perception::inference::PoolingParameter* pooling_param_;
  ::apollo::perception::inference::PowerParameter* power_param_;
  ::apollo::perception::inference::ReLUParameter* relu_param_;
  ::apollo::perception::inference::SigmoidParameter* sigmoid_param_;
  ::apollo::perception::inference::SoftmaxParameter* softmax_param_;
  ::apollo::perception::inference::SliceParameter* slice_param_;
  ::apollo::perception::inference::TanHParameter* tanh_param_;
  ::apollo::perception::inference::ThresholdParameter* threshold_param_;
  ::apollo::perception::inference::WindowDataParameter* window_data_param_;
  ::apollo::perception::inference::TransformationParameter* transform_param_;
  ::apollo::perception::inference::LossParameter* loss_param_;
  ::apollo::perception::inference::V0LayerParameter* layer_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static V1LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class V0LayerParameter : public ::google::protobuf::Message {
 public:
  V0LayerParameter();
  virtual ~V0LayerParameter();

  V0LayerParameter(const V0LayerParameter& from);

  inline V0LayerParameter& operator=(const V0LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V0LayerParameter& default_instance();

  void Swap(V0LayerParameter* other);

  // implements Message ----------------------------------------------

  V0LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const V0LayerParameter& from);
  void MergeFrom(const V0LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef V0LayerParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX = V0LayerParameter_PoolMethod_MAX;
  static const PoolMethod AVE = V0LayerParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC = V0LayerParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return V0LayerParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    V0LayerParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    V0LayerParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return V0LayerParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return V0LayerParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return V0LayerParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional uint32 num_output = 3;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 3;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool biasterm = 4 [default = true];
  inline bool has_biasterm() const;
  inline void clear_biasterm();
  static const int kBiastermFieldNumber = 4;
  inline bool biasterm() const;
  inline void set_biasterm(bool value);

  // optional .apollo.perception.inference.FillerParameter weight_filler = 5;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 5;
  inline const ::apollo::perception::inference::FillerParameter& weight_filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_weight_filler();
  inline ::apollo::perception::inference::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler);

  // optional .apollo.perception.inference.FillerParameter bias_filler = 6;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 6;
  inline const ::apollo::perception::inference::FillerParameter& bias_filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_bias_filler();
  inline ::apollo::perception::inference::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler);

  // optional uint32 pad = 7 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 7;
  inline ::google::protobuf::uint32 pad() const;
  inline void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernelsize = 8;
  inline bool has_kernelsize() const;
  inline void clear_kernelsize();
  static const int kKernelsizeFieldNumber = 8;
  inline ::google::protobuf::uint32 kernelsize() const;
  inline void set_kernelsize(::google::protobuf::uint32 value);

  // optional uint32 group = 9 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 9;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional uint32 stride = 10 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 10;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // optional .apollo.perception.inference.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 11;
  inline ::apollo::perception::inference::V0LayerParameter_PoolMethod pool() const;
  inline void set_pool(::apollo::perception::inference::V0LayerParameter_PoolMethod value);

  // optional float dropout_ratio = 12 [default = 0.5];
  inline bool has_dropout_ratio() const;
  inline void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 12;
  inline float dropout_ratio() const;
  inline void set_dropout_ratio(float value);

  // optional uint32 local_size = 13 [default = 5];
  inline bool has_local_size() const;
  inline void clear_local_size();
  static const int kLocalSizeFieldNumber = 13;
  inline ::google::protobuf::uint32 local_size() const;
  inline void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 14 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 14;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 15 [default = 0.75];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 15;
  inline float beta() const;
  inline void set_beta(float value);

  // optional float k = 22 [default = 1];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 22;
  inline float k() const;
  inline void set_k(float value);

  // optional string source = 16;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 16;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional float scale = 17 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 17;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string meanfile = 18;
  inline bool has_meanfile() const;
  inline void clear_meanfile();
  static const int kMeanfileFieldNumber = 18;
  inline const ::std::string& meanfile() const;
  inline void set_meanfile(const ::std::string& value);
  inline void set_meanfile(const char* value);
  inline void set_meanfile(const char* value, size_t size);
  inline ::std::string* mutable_meanfile();
  inline ::std::string* release_meanfile();
  inline void set_allocated_meanfile(::std::string* meanfile);

  // optional uint32 batchsize = 19;
  inline bool has_batchsize() const;
  inline void clear_batchsize();
  static const int kBatchsizeFieldNumber = 19;
  inline ::google::protobuf::uint32 batchsize() const;
  inline void set_batchsize(::google::protobuf::uint32 value);

  // optional uint32 cropsize = 20 [default = 0];
  inline bool has_cropsize() const;
  inline void clear_cropsize();
  static const int kCropsizeFieldNumber = 20;
  inline ::google::protobuf::uint32 cropsize() const;
  inline void set_cropsize(::google::protobuf::uint32 value);

  // optional bool mirror = 21 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 21;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // repeated .apollo.perception.inference.BlobProto blobs = 50;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 50;
  inline const ::apollo::perception::inference::BlobProto& blobs(int index) const;
  inline ::apollo::perception::inference::BlobProto* mutable_blobs(int index);
  inline ::apollo::perception::inference::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto >*
      mutable_blobs();

  // repeated float blobs_lr = 51;
  inline int blobs_lr_size() const;
  inline void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 51;
  inline float blobs_lr(int index) const;
  inline void set_blobs_lr(int index, float value);
  inline void add_blobs_lr(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 52;
  inline int weight_decay_size() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 52;
  inline float weight_decay(int index) const;
  inline void set_weight_decay(int index, float value);
  inline void add_weight_decay(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // optional uint32 rand_skip = 53 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 53;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional float det_fg_threshold = 54 [default = 0.5];
  inline bool has_det_fg_threshold() const;
  inline void clear_det_fg_threshold();
  static const int kDetFgThresholdFieldNumber = 54;
  inline float det_fg_threshold() const;
  inline void set_det_fg_threshold(float value);

  // optional float det_bg_threshold = 55 [default = 0.5];
  inline bool has_det_bg_threshold() const;
  inline void clear_det_bg_threshold();
  static const int kDetBgThresholdFieldNumber = 55;
  inline float det_bg_threshold() const;
  inline void set_det_bg_threshold(float value);

  // optional float det_fg_fraction = 56 [default = 0.25];
  inline bool has_det_fg_fraction() const;
  inline void clear_det_fg_fraction();
  static const int kDetFgFractionFieldNumber = 56;
  inline float det_fg_fraction() const;
  inline void set_det_fg_fraction(float value);

  // optional uint32 det_context_pad = 58 [default = 0];
  inline bool has_det_context_pad() const;
  inline void clear_det_context_pad();
  static const int kDetContextPadFieldNumber = 58;
  inline ::google::protobuf::uint32 det_context_pad() const;
  inline void set_det_context_pad(::google::protobuf::uint32 value);

  // optional string det_crop_mode = 59 [default = "warp"];
  inline bool has_det_crop_mode() const;
  inline void clear_det_crop_mode();
  static const int kDetCropModeFieldNumber = 59;
  inline const ::std::string& det_crop_mode() const;
  inline void set_det_crop_mode(const ::std::string& value);
  inline void set_det_crop_mode(const char* value);
  inline void set_det_crop_mode(const char* value, size_t size);
  inline ::std::string* mutable_det_crop_mode();
  inline ::std::string* release_det_crop_mode();
  inline void set_allocated_det_crop_mode(::std::string* det_crop_mode);

  // optional int32 new_num = 60 [default = 0];
  inline bool has_new_num() const;
  inline void clear_new_num();
  static const int kNewNumFieldNumber = 60;
  inline ::google::protobuf::int32 new_num() const;
  inline void set_new_num(::google::protobuf::int32 value);

  // optional int32 new_channels = 61 [default = 0];
  inline bool has_new_channels() const;
  inline void clear_new_channels();
  static const int kNewChannelsFieldNumber = 61;
  inline ::google::protobuf::int32 new_channels() const;
  inline void set_new_channels(::google::protobuf::int32 value);

  // optional int32 new_height = 62 [default = 0];
  inline bool has_new_height() const;
  inline void clear_new_height();
  static const int kNewHeightFieldNumber = 62;
  inline ::google::protobuf::int32 new_height() const;
  inline void set_new_height(::google::protobuf::int32 value);

  // optional int32 new_width = 63 [default = 0];
  inline bool has_new_width() const;
  inline void clear_new_width();
  static const int kNewWidthFieldNumber = 63;
  inline ::google::protobuf::int32 new_width() const;
  inline void set_new_width(::google::protobuf::int32 value);

  // optional bool shuffle_images = 64 [default = false];
  inline bool has_shuffle_images() const;
  inline void clear_shuffle_images();
  static const int kShuffleImagesFieldNumber = 64;
  inline bool shuffle_images() const;
  inline void set_shuffle_images(bool value);

  // optional uint32 concat_dim = 65 [default = 1];
  inline bool has_concat_dim() const;
  inline void clear_concat_dim();
  static const int kConcatDimFieldNumber = 65;
  inline ::google::protobuf::uint32 concat_dim() const;
  inline void set_concat_dim(::google::protobuf::uint32 value);

  // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 1001;
  inline bool has_hdf5_output_param() const;
  inline void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 1001;
  inline const ::apollo::perception::inference::HDF5OutputParameter& hdf5_output_param() const;
  inline ::apollo::perception::inference::HDF5OutputParameter* mutable_hdf5_output_param();
  inline ::apollo::perception::inference::HDF5OutputParameter* release_hdf5_output_param();
  inline void set_allocated_hdf5_output_param(::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.V0LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_biasterm();
  inline void clear_has_biasterm();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_kernelsize();
  inline void clear_has_kernelsize();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_meanfile();
  inline void clear_has_meanfile();
  inline void set_has_batchsize();
  inline void clear_has_batchsize();
  inline void set_has_cropsize();
  inline void clear_has_cropsize();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_det_fg_threshold();
  inline void clear_has_det_fg_threshold();
  inline void set_has_det_bg_threshold();
  inline void clear_has_det_bg_threshold();
  inline void set_has_det_fg_fraction();
  inline void clear_has_det_fg_fraction();
  inline void set_has_det_context_pad();
  inline void clear_has_det_context_pad();
  inline void set_has_det_crop_mode();
  inline void clear_has_det_crop_mode();
  inline void set_has_new_num();
  inline void clear_has_new_num();
  inline void set_has_new_channels();
  inline void clear_has_new_channels();
  inline void set_has_new_height();
  inline void clear_has_new_height();
  inline void set_has_new_width();
  inline void clear_has_new_width();
  inline void set_has_shuffle_images();
  inline void clear_has_shuffle_images();
  inline void set_has_concat_dim();
  inline void clear_has_concat_dim();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::std::string* name_;
  ::std::string* type_;
  ::apollo::perception::inference::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_;
  ::apollo::perception::inference::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 kernelsize_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 stride_;
  int pool_;
  float dropout_ratio_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  ::std::string* source_;
  float k_;
  float scale_;
  ::std::string* meanfile_;
  ::google::protobuf::uint32 batchsize_;
  bool biasterm_;
  bool mirror_;
  bool shuffle_images_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto > blobs_;
  ::google::protobuf::uint32 cropsize_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  float det_fg_threshold_;
  float det_bg_threshold_;
  float det_fg_fraction_;
  ::google::protobuf::uint32 det_context_pad_;
  static ::std::string* _default_det_crop_mode_;
  ::std::string* det_crop_mode_;
  ::google::protobuf::int32 new_num_;
  ::google::protobuf::int32 new_channels_;
  ::google::protobuf::int32 new_height_;
  ::google::protobuf::int32 new_width_;
  ::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param_;
  ::google::protobuf::uint32 concat_dim_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static V0LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class PReLUParameter : public ::google::protobuf::Message {
 public:
  PReLUParameter();
  virtual ~PReLUParameter();

  PReLUParameter(const PReLUParameter& from);

  inline PReLUParameter& operator=(const PReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PReLUParameter& default_instance();

  void Swap(PReLUParameter* other);

  // implements Message ----------------------------------------------

  PReLUParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PReLUParameter& from);
  void MergeFrom(const PReLUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.FillerParameter filler = 1;
  inline bool has_filler() const;
  inline void clear_filler();
  static const int kFillerFieldNumber = 1;
  inline const ::apollo::perception::inference::FillerParameter& filler() const;
  inline ::apollo::perception::inference::FillerParameter* mutable_filler();
  inline ::apollo::perception::inference::FillerParameter* release_filler();
  inline void set_allocated_filler(::apollo::perception::inference::FillerParameter* filler);

  // optional bool channel_shared = 2 [default = false];
  inline bool has_channel_shared() const;
  inline void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 2;
  inline bool channel_shared() const;
  inline void set_channel_shared(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PReLUParameter)
 private:
  inline void set_has_filler();
  inline void clear_has_filler();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::inference::FillerParameter* filler_;
  bool channel_shared_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static PReLUParameter* default_instance_;
};
// -------------------------------------------------------------------

class PaddingParameter : public ::google::protobuf::Message {
 public:
  PaddingParameter();
  virtual ~PaddingParameter();

  PaddingParameter(const PaddingParameter& from);

  inline PaddingParameter& operator=(const PaddingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaddingParameter& default_instance();

  void Swap(PaddingParameter* other);

  // implements Message ----------------------------------------------

  PaddingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaddingParameter& from);
  void MergeFrom(const PaddingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pad_t = 1 [default = 0];
  inline bool has_pad_t() const;
  inline void clear_pad_t();
  static const int kPadTFieldNumber = 1;
  inline ::google::protobuf::uint32 pad_t() const;
  inline void set_pad_t(::google::protobuf::uint32 value);

  // optional uint32 pad_b = 2 [default = 0];
  inline bool has_pad_b() const;
  inline void clear_pad_b();
  static const int kPadBFieldNumber = 2;
  inline ::google::protobuf::uint32 pad_b() const;
  inline void set_pad_b(::google::protobuf::uint32 value);

  // optional uint32 pad_l = 3 [default = 0];
  inline bool has_pad_l() const;
  inline void clear_pad_l();
  static const int kPadLFieldNumber = 3;
  inline ::google::protobuf::uint32 pad_l() const;
  inline void set_pad_l(::google::protobuf::uint32 value);

  // optional uint32 pad_r = 4 [default = 0];
  inline bool has_pad_r() const;
  inline void clear_pad_r();
  static const int kPadRFieldNumber = 4;
  inline ::google::protobuf::uint32 pad_r() const;
  inline void set_pad_r(::google::protobuf::uint32 value);

  // optional float val = 5 [default = 0];
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 5;
  inline float val() const;
  inline void set_val(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.PaddingParameter)
 private:
  inline void set_has_pad_t();
  inline void clear_has_pad_t();
  inline void set_has_pad_b();
  inline void clear_has_pad_b();
  inline void set_has_pad_l();
  inline void clear_has_pad_l();
  inline void set_has_pad_r();
  inline void clear_has_pad_r();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pad_t_;
  ::google::protobuf::uint32 pad_b_;
  ::google::protobuf::uint32 pad_l_;
  ::google::protobuf::uint32 pad_r_;
  float val_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static PaddingParameter* default_instance_;
};
// -------------------------------------------------------------------

class YoloLossParameter : public ::google::protobuf::Message {
 public:
  YoloLossParameter();
  virtual ~YoloLossParameter();

  YoloLossParameter(const YoloLossParameter& from);

  inline YoloLossParameter& operator=(const YoloLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YoloLossParameter& default_instance();

  void Swap(YoloLossParameter* other);

  // implements Message ----------------------------------------------

  YoloLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YoloLossParameter& from);
  void MergeFrom(const YoloLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef YoloLossParameter_RegLossType RegLossType;
  static const RegLossType L2 = YoloLossParameter_RegLossType_L2;
  static const RegLossType L1 = YoloLossParameter_RegLossType_L1;
  static const RegLossType SMOOTH_L1 = YoloLossParameter_RegLossType_SMOOTH_L1;
  static inline bool RegLossType_IsValid(int value) {
    return YoloLossParameter_RegLossType_IsValid(value);
  }
  static const RegLossType RegLossType_MIN =
    YoloLossParameter_RegLossType_RegLossType_MIN;
  static const RegLossType RegLossType_MAX =
    YoloLossParameter_RegLossType_RegLossType_MAX;
  static const int RegLossType_ARRAYSIZE =
    YoloLossParameter_RegLossType_RegLossType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RegLossType_descriptor() {
    return YoloLossParameter_RegLossType_descriptor();
  }
  static inline const ::std::string& RegLossType_Name(RegLossType value) {
    return YoloLossParameter_RegLossType_Name(value);
  }
  static inline bool RegLossType_Parse(const ::std::string& name,
      RegLossType* value) {
    return YoloLossParameter_RegLossType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.inference.YoloLossParameter.RegLossType reg_loss_type = 1 [default = SMOOTH_L1];
  inline bool has_reg_loss_type() const;
  inline void clear_reg_loss_type();
  static const int kRegLossTypeFieldNumber = 1;
  inline ::apollo::perception::inference::YoloLossParameter_RegLossType reg_loss_type() const;
  inline void set_reg_loss_type(::apollo::perception::inference::YoloLossParameter_RegLossType value);

  // optional int32 target_axis = 2 [default = -1];
  inline bool has_target_axis() const;
  inline void clear_target_axis();
  static const int kTargetAxisFieldNumber = 2;
  inline ::google::protobuf::int32 target_axis() const;
  inline void set_target_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.YoloLossParameter)
 private:
  inline void set_has_reg_loss_type();
  inline void clear_has_reg_loss_type();
  inline void set_has_target_axis();
  inline void clear_has_target_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int reg_loss_type_;
  ::google::protobuf::int32 target_axis_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static YoloLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class YoloDumpParameter : public ::google::protobuf::Message {
 public:
  YoloDumpParameter();
  virtual ~YoloDumpParameter();

  YoloDumpParameter(const YoloDumpParameter& from);

  inline YoloDumpParameter& operator=(const YoloDumpParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YoloDumpParameter& default_instance();

  void Swap(YoloDumpParameter* other);

  // implements Message ----------------------------------------------

  YoloDumpParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YoloDumpParameter& from);
  void MergeFrom(const YoloDumpParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dump_dir = 1;
  inline bool has_dump_dir() const;
  inline void clear_dump_dir();
  static const int kDumpDirFieldNumber = 1;
  inline const ::std::string& dump_dir() const;
  inline void set_dump_dir(const ::std::string& value);
  inline void set_dump_dir(const char* value);
  inline void set_dump_dir(const char* value, size_t size);
  inline ::std::string* mutable_dump_dir();
  inline ::std::string* release_dump_dir();
  inline void set_allocated_dump_dir(::std::string* dump_dir);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.YoloDumpParameter)
 private:
  inline void set_has_dump_dir();
  inline void clear_has_dump_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dump_dir_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static YoloDumpParameter* default_instance_;
};
// -------------------------------------------------------------------

class YoloAnchorsParameter : public ::google::protobuf::Message {
 public:
  YoloAnchorsParameter();
  virtual ~YoloAnchorsParameter();

  YoloAnchorsParameter(const YoloAnchorsParameter& from);

  inline YoloAnchorsParameter& operator=(const YoloAnchorsParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YoloAnchorsParameter& default_instance();

  void Swap(YoloAnchorsParameter* other);

  // implements Message ----------------------------------------------

  YoloAnchorsParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YoloAnchorsParameter& from);
  void MergeFrom(const YoloAnchorsParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string anchors_file = 1;
  inline bool has_anchors_file() const;
  inline void clear_anchors_file();
  static const int kAnchorsFileFieldNumber = 1;
  inline const ::std::string& anchors_file() const;
  inline void set_anchors_file(const ::std::string& value);
  inline void set_anchors_file(const char* value);
  inline void set_anchors_file(const char* value, size_t size);
  inline ::std::string* mutable_anchors_file();
  inline ::std::string* release_anchors_file();
  inline void set_allocated_anchors_file(::std::string* anchors_file);

  // optional int32 ref_w = 2 [default = 1];
  inline bool has_ref_w() const;
  inline void clear_ref_w();
  static const int kRefWFieldNumber = 2;
  inline ::google::protobuf::int32 ref_w() const;
  inline void set_ref_w(::google::protobuf::int32 value);

  // optional int32 ref_h = 3 [default = 1];
  inline bool has_ref_h() const;
  inline void clear_ref_h();
  static const int kRefHFieldNumber = 3;
  inline ::google::protobuf::int32 ref_h() const;
  inline void set_ref_h(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.YoloAnchorsParameter)
 private:
  inline void set_has_anchors_file();
  inline void clear_has_anchors_file();
  inline void set_has_ref_w();
  inline void clear_has_ref_w();
  inline void set_has_ref_h();
  inline void clear_has_ref_h();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* anchors_file_;
  ::google::protobuf::int32 ref_w_;
  ::google::protobuf::int32 ref_h_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static YoloAnchorsParameter* default_instance_;
};
// -------------------------------------------------------------------

class DimensionStatistics : public ::google::protobuf::Message {
 public:
  DimensionStatistics();
  virtual ~DimensionStatistics();

  DimensionStatistics(const DimensionStatistics& from);

  inline DimensionStatistics& operator=(const DimensionStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DimensionStatistics& default_instance();

  void Swap(DimensionStatistics* other);

  // implements Message ----------------------------------------------

  DimensionStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DimensionStatistics& from);
  void MergeFrom(const DimensionStatistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float mean_h = 1 [default = 0];
  inline bool has_mean_h() const;
  inline void clear_mean_h();
  static const int kMeanHFieldNumber = 1;
  inline float mean_h() const;
  inline void set_mean_h(float value);

  // optional float mean_w = 2 [default = 0];
  inline bool has_mean_w() const;
  inline void clear_mean_w();
  static const int kMeanWFieldNumber = 2;
  inline float mean_w() const;
  inline void set_mean_w(float value);

  // optional float mean_l = 3 [default = 0];
  inline bool has_mean_l() const;
  inline void clear_mean_l();
  static const int kMeanLFieldNumber = 3;
  inline float mean_l() const;
  inline void set_mean_l(float value);

  // optional float std_h = 4 [default = 1];
  inline bool has_std_h() const;
  inline void clear_std_h();
  static const int kStdHFieldNumber = 4;
  inline float std_h() const;
  inline void set_std_h(float value);

  // optional float std_w = 5 [default = 1];
  inline bool has_std_w() const;
  inline void clear_std_w();
  static const int kStdWFieldNumber = 5;
  inline float std_w() const;
  inline void set_std_w(float value);

  // optional float std_l = 6 [default = 1];
  inline bool has_std_l() const;
  inline void clear_std_l();
  static const int kStdLFieldNumber = 6;
  inline float std_l() const;
  inline void set_std_l(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.DimensionStatistics)
 private:
  inline void set_has_mean_h();
  inline void clear_has_mean_h();
  inline void set_has_mean_w();
  inline void clear_has_mean_w();
  inline void set_has_mean_l();
  inline void clear_has_mean_l();
  inline void set_has_std_h();
  inline void clear_has_std_h();
  inline void set_has_std_w();
  inline void clear_has_std_w();
  inline void set_has_std_l();
  inline void clear_has_std_l();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float mean_h_;
  float mean_w_;
  float mean_l_;
  float std_h_;
  float std_w_;
  float std_l_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static DimensionStatistics* default_instance_;
};
// -------------------------------------------------------------------

class YoloTargetParameter : public ::google::protobuf::Message {
 public:
  YoloTargetParameter();
  virtual ~YoloTargetParameter();

  YoloTargetParameter(const YoloTargetParameter& from);

  inline YoloTargetParameter& operator=(const YoloTargetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YoloTargetParameter& default_instance();

  void Swap(YoloTargetParameter* other);

  // implements Message ----------------------------------------------

  YoloTargetParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YoloTargetParameter& from);
  void MergeFrom(const YoloTargetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float neg_rois_ratio = 1 [default = 1];
  inline bool has_neg_rois_ratio() const;
  inline void clear_neg_rois_ratio();
  static const int kNegRoisRatioFieldNumber = 1;
  inline float neg_rois_ratio() const;
  inline void set_neg_rois_ratio(float value);

  // optional float ign_threshold = 2 [default = 0.6];
  inline bool has_ign_threshold() const;
  inline void clear_ign_threshold();
  static const int kIgnThresholdFieldNumber = 2;
  inline float ign_threshold() const;
  inline void set_ign_threshold(float value);

  // optional float neg_threshold = 3 [default = 0.1];
  inline bool has_neg_threshold() const;
  inline void clear_neg_threshold();
  static const int kNegThresholdFieldNumber = 3;
  inline float neg_threshold() const;
  inline void set_neg_threshold(float value);

  // optional float min_height = 4 [default = 0.05];
  inline bool has_min_height() const;
  inline void clear_min_height();
  static const int kMinHeightFieldNumber = 4;
  inline float min_height() const;
  inline void set_min_height(float value);

  // optional bool bias_match = 5 [default = true];
  inline bool has_bias_match() const;
  inline void clear_bias_match();
  static const int kBiasMatchFieldNumber = 5;
  inline bool bias_match() const;
  inline void set_bias_match(bool value);

  // optional bool rescore = 6 [default = true];
  inline bool has_rescore() const;
  inline void clear_rescore();
  static const int kRescoreFieldNumber = 6;
  inline bool rescore() const;
  inline void set_rescore(bool value);

  // optional int32 ori_cyc = 7 [default = 1];
  inline bool has_ori_cyc() const;
  inline void clear_ori_cyc();
  static const int kOriCycFieldNumber = 7;
  inline ::google::protobuf::int32 ori_cyc() const;
  inline void set_ori_cyc(::google::protobuf::int32 value);

  // optional float obj_weight = 8 [default = 10];
  inline bool has_obj_weight() const;
  inline void clear_obj_weight();
  static const int kObjWeightFieldNumber = 8;
  inline float obj_weight() const;
  inline void set_obj_weight(float value);

  // optional float noobj_weight = 9 [default = 1];
  inline bool has_noobj_weight() const;
  inline void clear_noobj_weight();
  static const int kNoobjWeightFieldNumber = 9;
  inline float noobj_weight() const;
  inline void set_noobj_weight(float value);

  // optional int32 num_classes = 10 [default = 0];
  inline bool has_num_classes() const;
  inline void clear_num_classes();
  static const int kNumClassesFieldNumber = 10;
  inline ::google::protobuf::int32 num_classes() const;
  inline void set_num_classes(::google::protobuf::int32 value);

  // repeated .apollo.perception.inference.DimensionStatistics dimension_statistics = 11;
  inline int dimension_statistics_size() const;
  inline void clear_dimension_statistics();
  static const int kDimensionStatisticsFieldNumber = 11;
  inline const ::apollo::perception::inference::DimensionStatistics& dimension_statistics(int index) const;
  inline ::apollo::perception::inference::DimensionStatistics* mutable_dimension_statistics(int index);
  inline ::apollo::perception::inference::DimensionStatistics* add_dimension_statistics();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::DimensionStatistics >&
      dimension_statistics() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::DimensionStatistics >*
      mutable_dimension_statistics();

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.YoloTargetParameter)
 private:
  inline void set_has_neg_rois_ratio();
  inline void clear_has_neg_rois_ratio();
  inline void set_has_ign_threshold();
  inline void clear_has_ign_threshold();
  inline void set_has_neg_threshold();
  inline void clear_has_neg_threshold();
  inline void set_has_min_height();
  inline void clear_has_min_height();
  inline void set_has_bias_match();
  inline void clear_has_bias_match();
  inline void set_has_rescore();
  inline void clear_has_rescore();
  inline void set_has_ori_cyc();
  inline void clear_has_ori_cyc();
  inline void set_has_obj_weight();
  inline void clear_has_obj_weight();
  inline void set_has_noobj_weight();
  inline void clear_has_noobj_weight();
  inline void set_has_num_classes();
  inline void clear_has_num_classes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float neg_rois_ratio_;
  float ign_threshold_;
  float neg_threshold_;
  float min_height_;
  bool bias_match_;
  bool rescore_;
  ::google::protobuf::int32 ori_cyc_;
  float obj_weight_;
  float noobj_weight_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::DimensionStatistics > dimension_statistics_;
  ::google::protobuf::int32 num_classes_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static YoloTargetParameter* default_instance_;
};
// -------------------------------------------------------------------

class RegionProposalParameter : public ::google::protobuf::Message {
 public:
  RegionProposalParameter();
  virtual ~RegionProposalParameter();

  RegionProposalParameter(const RegionProposalParameter& from);

  inline RegionProposalParameter& operator=(const RegionProposalParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionProposalParameter& default_instance();

  void Swap(RegionProposalParameter* other);

  // implements Message ----------------------------------------------

  RegionProposalParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionProposalParameter& from);
  void MergeFrom(const RegionProposalParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
  inline int anchorbox_size() const;
  inline void clear_anchorbox();
  static const int kAnchorboxFieldNumber = 1;
  inline const ::apollo::perception::inference::AnchorBox& anchorbox(int index) const;
  inline ::apollo::perception::inference::AnchorBox* mutable_anchorbox(int index);
  inline ::apollo::perception::inference::AnchorBox* add_anchorbox();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >&
      anchorbox() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >*
      mutable_anchorbox();

  // repeated float thresholds = 2;
  inline int thresholds_size() const;
  inline void clear_thresholds();
  static const int kThresholdsFieldNumber = 2;
  inline float thresholds(int index) const;
  inline void set_thresholds(int index, float value);
  inline void add_thresholds(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      thresholds() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_thresholds();

  // optional float orientation_scale = 14 [default = 0];
  inline bool has_orientation_scale() const;
  inline void clear_orientation_scale();
  static const int kOrientationScaleFieldNumber = 14;
  inline float orientation_scale() const;
  inline void set_orientation_scale(float value);

  // optional uint32 object_scale = 3;
  inline bool has_object_scale() const;
  inline void clear_object_scale();
  static const int kObjectScaleFieldNumber = 3;
  inline ::google::protobuf::uint32 object_scale() const;
  inline void set_object_scale(::google::protobuf::uint32 value);

  // optional uint32 noobject_scale = 4;
  inline bool has_noobject_scale() const;
  inline void clear_noobject_scale();
  static const int kNoobjectScaleFieldNumber = 4;
  inline ::google::protobuf::uint32 noobject_scale() const;
  inline void set_noobject_scale(::google::protobuf::uint32 value);

  // optional uint32 class_scale = 5;
  inline bool has_class_scale() const;
  inline void clear_class_scale();
  static const int kClassScaleFieldNumber = 5;
  inline ::google::protobuf::uint32 class_scale() const;
  inline void set_class_scale(::google::protobuf::uint32 value);

  // optional uint32 coord_scale = 6;
  inline bool has_coord_scale() const;
  inline void clear_coord_scale();
  static const int kCoordScaleFieldNumber = 6;
  inline ::google::protobuf::uint32 coord_scale() const;
  inline void set_coord_scale(::google::protobuf::uint32 value);

  // optional float jitter = 7;
  inline bool has_jitter() const;
  inline void clear_jitter();
  static const int kJitterFieldNumber = 7;
  inline float jitter() const;
  inline void set_jitter(float value);

  // optional float bias = 8;
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 8;
  inline float bias() const;
  inline void set_bias(float value);

  // optional bool rescore = 9;
  inline bool has_rescore() const;
  inline void clear_rescore();
  static const int kRescoreFieldNumber = 9;
  inline bool rescore() const;
  inline void set_rescore(bool value);

  // optional uint32 num_classes = 10;
  inline bool has_num_classes() const;
  inline void clear_num_classes();
  static const int kNumClassesFieldNumber = 10;
  inline ::google::protobuf::uint32 num_classes() const;
  inline void set_num_classes(::google::protobuf::uint32 value);

  // optional bool bias_match = 11;
  inline bool has_bias_match() const;
  inline void clear_bias_match();
  static const int kBiasMatchFieldNumber = 11;
  inline bool bias_match() const;
  inline void set_bias_match(bool value);

  // optional float threshold = 12;
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 12;
  inline float threshold() const;
  inline void set_threshold(float value);

  // optional uint32 tricky_iter = 13 [default = 400];
  inline bool has_tricky_iter() const;
  inline void clear_tricky_iter();
  static const int kTrickyIterFieldNumber = 13;
  inline ::google::protobuf::uint32 tricky_iter() const;
  inline void set_tricky_iter(::google::protobuf::uint32 value);

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 15;
  inline bool has_nms_param() const;
  inline void clear_nms_param();
  static const int kNmsParamFieldNumber = 15;
  inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param() const;
  inline ::apollo::perception::inference::NonMaximumSuppressionParameter* mutable_nms_param();
  inline ::apollo::perception::inference::NonMaximumSuppressionParameter* release_nms_param();
  inline void set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param);

  // optional int32 keep_top_k = 16 [default = -1];
  inline bool has_keep_top_k() const;
  inline void clear_keep_top_k();
  static const int kKeepTopKFieldNumber = 16;
  inline ::google::protobuf::int32 keep_top_k() const;
  inline void set_keep_top_k(::google::protobuf::int32 value);

  // optional float pos_threshold = 17;
  inline bool has_pos_threshold() const;
  inline void clear_pos_threshold();
  static const int kPosThresholdFieldNumber = 17;
  inline float pos_threshold() const;
  inline void set_pos_threshold(float value);

  // optional float neg_threshold = 18;
  inline bool has_neg_threshold() const;
  inline void clear_neg_threshold();
  static const int kNegThresholdFieldNumber = 18;
  inline float neg_threshold() const;
  inline void set_neg_threshold(float value);

  // optional int32 neg_ratio = 19 [default = 3];
  inline bool has_neg_ratio() const;
  inline void clear_neg_ratio();
  static const int kNegRatioFieldNumber = 19;
  inline ::google::protobuf::int32 neg_ratio() const;
  inline void set_neg_ratio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.RegionProposalParameter)
 private:
  inline void set_has_orientation_scale();
  inline void clear_has_orientation_scale();
  inline void set_has_object_scale();
  inline void clear_has_object_scale();
  inline void set_has_noobject_scale();
  inline void clear_has_noobject_scale();
  inline void set_has_class_scale();
  inline void clear_has_class_scale();
  inline void set_has_coord_scale();
  inline void clear_has_coord_scale();
  inline void set_has_jitter();
  inline void clear_has_jitter();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_rescore();
  inline void clear_has_rescore();
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_bias_match();
  inline void clear_has_bias_match();
  inline void set_has_threshold();
  inline void clear_has_threshold();
  inline void set_has_tricky_iter();
  inline void clear_has_tricky_iter();
  inline void set_has_nms_param();
  inline void clear_has_nms_param();
  inline void set_has_keep_top_k();
  inline void clear_has_keep_top_k();
  inline void set_has_pos_threshold();
  inline void clear_has_pos_threshold();
  inline void set_has_neg_threshold();
  inline void clear_has_neg_threshold();
  inline void set_has_neg_ratio();
  inline void clear_has_neg_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox > anchorbox_;
  ::google::protobuf::RepeatedField< float > thresholds_;
  float orientation_scale_;
  ::google::protobuf::uint32 object_scale_;
  ::google::protobuf::uint32 noobject_scale_;
  ::google::protobuf::uint32 class_scale_;
  ::google::protobuf::uint32 coord_scale_;
  float jitter_;
  float bias_;
  ::google::protobuf::uint32 num_classes_;
  bool rescore_;
  bool bias_match_;
  float threshold_;
  ::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param_;
  ::google::protobuf::uint32 tricky_iter_;
  ::google::protobuf::int32 keep_top_k_;
  float pos_threshold_;
  float neg_threshold_;
  ::google::protobuf::int32 neg_ratio_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static RegionProposalParameter* default_instance_;
};
// -------------------------------------------------------------------

class RegionParameter : public ::google::protobuf::Message {
 public:
  RegionParameter();
  virtual ~RegionParameter();

  RegionParameter(const RegionParameter& from);

  inline RegionParameter& operator=(const RegionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionParameter& default_instance();

  void Swap(RegionParameter* other);

  // implements Message ----------------------------------------------

  RegionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionParameter& from);
  void MergeFrom(const RegionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
  inline int anchorbox_size() const;
  inline void clear_anchorbox();
  static const int kAnchorboxFieldNumber = 1;
  inline const ::apollo::perception::inference::AnchorBox& anchorbox(int index) const;
  inline ::apollo::perception::inference::AnchorBox* mutable_anchorbox(int index);
  inline ::apollo::perception::inference::AnchorBox* add_anchorbox();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >&
      anchorbox() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >*
      mutable_anchorbox();

  // repeated float thresholds = 2;
  inline int thresholds_size() const;
  inline void clear_thresholds();
  static const int kThresholdsFieldNumber = 2;
  inline float thresholds(int index) const;
  inline void set_thresholds(int index, float value);
  inline void add_thresholds(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      thresholds() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_thresholds();

  // optional float orientation_scale = 14 [default = 0];
  inline bool has_orientation_scale() const;
  inline void clear_orientation_scale();
  static const int kOrientationScaleFieldNumber = 14;
  inline float orientation_scale() const;
  inline void set_orientation_scale(float value);

  // optional float dimension_scale = 15 [default = 0];
  inline bool has_dimension_scale() const;
  inline void clear_dimension_scale();
  static const int kDimensionScaleFieldNumber = 15;
  inline float dimension_scale() const;
  inline void set_dimension_scale(float value);

  // optional float front_scale = 19 [default = 0];
  inline bool has_front_scale() const;
  inline void clear_front_scale();
  static const int kFrontScaleFieldNumber = 19;
  inline float front_scale() const;
  inline void set_front_scale(float value);

  // optional float rear_scale = 20 [default = 0];
  inline bool has_rear_scale() const;
  inline void clear_rear_scale();
  static const int kRearScaleFieldNumber = 20;
  inline float rear_scale() const;
  inline void set_rear_scale(float value);

  // optional uint32 object_scale = 3;
  inline bool has_object_scale() const;
  inline void clear_object_scale();
  static const int kObjectScaleFieldNumber = 3;
  inline ::google::protobuf::uint32 object_scale() const;
  inline void set_object_scale(::google::protobuf::uint32 value);

  // optional uint32 noobject_scale = 4;
  inline bool has_noobject_scale() const;
  inline void clear_noobject_scale();
  static const int kNoobjectScaleFieldNumber = 4;
  inline ::google::protobuf::uint32 noobject_scale() const;
  inline void set_noobject_scale(::google::protobuf::uint32 value);

  // optional float class_scale = 5;
  inline bool has_class_scale() const;
  inline void clear_class_scale();
  static const int kClassScaleFieldNumber = 5;
  inline float class_scale() const;
  inline void set_class_scale(float value);

  // optional uint32 coord_scale = 6;
  inline bool has_coord_scale() const;
  inline void clear_coord_scale();
  static const int kCoordScaleFieldNumber = 6;
  inline ::google::protobuf::uint32 coord_scale() const;
  inline void set_coord_scale(::google::protobuf::uint32 value);

  // optional float jitter = 7;
  inline bool has_jitter() const;
  inline void clear_jitter();
  static const int kJitterFieldNumber = 7;
  inline float jitter() const;
  inline void set_jitter(float value);

  // optional float bias = 8;
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 8;
  inline float bias() const;
  inline void set_bias(float value);

  // optional bool rescore = 9;
  inline bool has_rescore() const;
  inline void clear_rescore();
  static const int kRescoreFieldNumber = 9;
  inline bool rescore() const;
  inline void set_rescore(bool value);

  // optional uint32 num_classes = 10;
  inline bool has_num_classes() const;
  inline void clear_num_classes();
  static const int kNumClassesFieldNumber = 10;
  inline ::google::protobuf::uint32 num_classes() const;
  inline void set_num_classes(::google::protobuf::uint32 value);

  // optional bool bias_match = 11;
  inline bool has_bias_match() const;
  inline void clear_bias_match();
  static const int kBiasMatchFieldNumber = 11;
  inline bool bias_match() const;
  inline void set_bias_match(bool value);

  // optional float threshold = 12;
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 12;
  inline float threshold() const;
  inline void set_threshold(float value);

  // optional uint32 tricky_iter = 13 [default = 400];
  inline bool has_tricky_iter() const;
  inline void clear_tricky_iter();
  static const int kTrickyIterFieldNumber = 13;
  inline ::google::protobuf::uint32 tricky_iter() const;
  inline void set_tricky_iter(::google::protobuf::uint32 value);

  // optional bool use_l1_loss = 16 [default = false];
  inline bool has_use_l1_loss() const;
  inline void clear_use_l1_loss();
  static const int kUseL1LossFieldNumber = 16;
  inline bool use_l1_loss() const;
  inline void set_use_l1_loss(bool value);

  // optional bool use_twice_softmax = 17 [default = false];
  inline bool has_use_twice_softmax() const;
  inline void clear_use_twice_softmax();
  static const int kUseTwiceSoftmaxFieldNumber = 17;
  inline bool use_twice_softmax() const;
  inline void set_use_twice_softmax(bool value);

  // optional bool is_anchor_normalized = 18 [default = false];
  inline bool has_is_anchor_normalized() const;
  inline void clear_is_anchor_normalized();
  static const int kIsAnchorNormalizedFieldNumber = 18;
  inline bool is_anchor_normalized() const;
  inline void set_is_anchor_normalized(bool value);

  // repeated bool ori_enable = 21;
  inline int ori_enable_size() const;
  inline void clear_ori_enable();
  static const int kOriEnableFieldNumber = 21;
  inline bool ori_enable(int index) const;
  inline void set_ori_enable(int index, bool value);
  inline void add_ori_enable(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      ori_enable() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_ori_enable();

  // optional string anchorfile = 22 [default = "anchor.txt"];
  inline bool has_anchorfile() const;
  inline void clear_anchorfile();
  static const int kAnchorfileFieldNumber = 22;
  inline const ::std::string& anchorfile() const;
  inline void set_anchorfile(const ::std::string& value);
  inline void set_anchorfile(const char* value);
  inline void set_anchorfile(const char* value, size_t size);
  inline ::std::string* mutable_anchorfile();
  inline ::std::string* release_anchorfile();
  inline void set_allocated_anchorfile(::std::string* anchorfile);

  // optional bool use_side_box_v2 = 23 [default = false];
  inline bool has_use_side_box_v2() const;
  inline void clear_use_side_box_v2();
  static const int kUseSideBoxV2FieldNumber = 23;
  inline bool use_side_box_v2() const;
  inline void set_use_side_box_v2(bool value);

  // optional bool use_side_box_v3 = 24 [default = false];
  inline bool has_use_side_box_v3() const;
  inline void clear_use_side_box_v3();
  static const int kUseSideBoxV3FieldNumber = 24;
  inline bool use_side_box_v3() const;
  inline void set_use_side_box_v3(bool value);

  // optional int32 ori_cycle = 25 [default = 1];
  inline bool has_ori_cycle() const;
  inline void clear_ori_cycle();
  static const int kOriCycleFieldNumber = 25;
  inline ::google::protobuf::int32 ori_cycle() const;
  inline void set_ori_cycle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.RegionParameter)
 private:
  inline void set_has_orientation_scale();
  inline void clear_has_orientation_scale();
  inline void set_has_dimension_scale();
  inline void clear_has_dimension_scale();
  inline void set_has_front_scale();
  inline void clear_has_front_scale();
  inline void set_has_rear_scale();
  inline void clear_has_rear_scale();
  inline void set_has_object_scale();
  inline void clear_has_object_scale();
  inline void set_has_noobject_scale();
  inline void clear_has_noobject_scale();
  inline void set_has_class_scale();
  inline void clear_has_class_scale();
  inline void set_has_coord_scale();
  inline void clear_has_coord_scale();
  inline void set_has_jitter();
  inline void clear_has_jitter();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_rescore();
  inline void clear_has_rescore();
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_bias_match();
  inline void clear_has_bias_match();
  inline void set_has_threshold();
  inline void clear_has_threshold();
  inline void set_has_tricky_iter();
  inline void clear_has_tricky_iter();
  inline void set_has_use_l1_loss();
  inline void clear_has_use_l1_loss();
  inline void set_has_use_twice_softmax();
  inline void clear_has_use_twice_softmax();
  inline void set_has_is_anchor_normalized();
  inline void clear_has_is_anchor_normalized();
  inline void set_has_anchorfile();
  inline void clear_has_anchorfile();
  inline void set_has_use_side_box_v2();
  inline void clear_has_use_side_box_v2();
  inline void set_has_use_side_box_v3();
  inline void clear_has_use_side_box_v3();
  inline void set_has_ori_cycle();
  inline void clear_has_ori_cycle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox > anchorbox_;
  ::google::protobuf::RepeatedField< float > thresholds_;
  float orientation_scale_;
  float dimension_scale_;
  float front_scale_;
  float rear_scale_;
  ::google::protobuf::uint32 object_scale_;
  ::google::protobuf::uint32 noobject_scale_;
  float class_scale_;
  ::google::protobuf::uint32 coord_scale_;
  float jitter_;
  float bias_;
  ::google::protobuf::uint32 num_classes_;
  float threshold_;
  bool rescore_;
  bool bias_match_;
  bool use_l1_loss_;
  bool use_twice_softmax_;
  ::google::protobuf::uint32 tricky_iter_;
  ::google::protobuf::RepeatedField< bool > ori_enable_;
  static ::std::string* _default_anchorfile_;
  ::std::string* anchorfile_;
  bool is_anchor_normalized_;
  bool use_side_box_v2_;
  bool use_side_box_v3_;
  ::google::protobuf::int32 ori_cycle_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static RegionParameter* default_instance_;
};
// -------------------------------------------------------------------

class AnchorBox : public ::google::protobuf::Message {
 public:
  AnchorBox();
  virtual ~AnchorBox();

  AnchorBox(const AnchorBox& from);

  inline AnchorBox& operator=(const AnchorBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnchorBox& default_instance();

  void Swap(AnchorBox* other);

  // implements Message ----------------------------------------------

  AnchorBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnchorBox& from);
  void MergeFrom(const AnchorBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float w = 1;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 1;
  inline float w() const;
  inline void set_w(float value);

  // optional float h = 2;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 2;
  inline float h() const;
  inline void set_h(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.AnchorBox)
 private:
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float w_;
  float h_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static AnchorBox* default_instance_;
};
// -------------------------------------------------------------------

class ReorgParameter : public ::google::protobuf::Message {
 public:
  ReorgParameter();
  virtual ~ReorgParameter();

  ReorgParameter(const ReorgParameter& from);

  inline ReorgParameter& operator=(const ReorgParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReorgParameter& default_instance();

  void Swap(ReorgParameter* other);

  // implements Message ----------------------------------------------

  ReorgParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReorgParameter& from);
  void MergeFrom(const ReorgParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stride = 1;
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 1;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.inference.ReorgParameter)
 private:
  inline void set_has_stride();
  inline void clear_has_stride();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 stride_;
  friend void  protobuf_AddDesc_rt_2eproto();
  friend void protobuf_AssignDesc_rt_2eproto();
  friend void protobuf_ShutdownFile_rt_2eproto();

  void InitAsDefaultInstance();
  static ReorgParameter* default_instance_;
};
// ===================================================================


// ===================================================================

// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::dim_size() const {
  return dim_.size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobShape.dim)
  return dim_.Get(index);
}
inline void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobShape.dim)
}
inline void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.BlobShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.BlobShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.BlobShape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// BlobProto

// optional .apollo.perception.inference.BlobShape shape = 7;
inline bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::apollo::perception::inference::BlobShape::Clear();
  clear_has_shape();
}
inline const ::apollo::perception::inference::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::apollo::perception::inference::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::apollo::perception::inference::BlobShape;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.BlobProto.shape)
  return shape_;
}
inline ::apollo::perception::inference::BlobShape* BlobProto::release_shape() {
  clear_has_shape();
  ::apollo::perception::inference::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void BlobProto::set_allocated_shape(::apollo::perception::inference::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::data_size() const {
  return data_.size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.data)
  return data_.Get(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.data)
}
inline void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.BlobProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.BlobProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::diff_size() const {
  return diff_.size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.diff)
  return diff_.Get(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.diff)
}
inline void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.BlobProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.BlobProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.BlobProto.diff)
  return &diff_;
}

// repeated double double_data = 8 [packed = true];
inline int BlobProto::double_data_size() const {
  return double_data_.size();
}
inline void BlobProto::clear_double_data() {
  double_data_.Clear();
}
inline double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.double_data)
  return double_data_.Get(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.double_data)
}
inline void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.BlobProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.BlobProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.BlobProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9 [packed = true];
inline int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
inline void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
inline double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.double_diff)
  return double_diff_.Get(index);
}
inline void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.double_diff)
}
inline void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.BlobProto.double_diff)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.BlobProto.double_diff)
  return double_diff_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.BlobProto.double_diff)
  return &double_diff_;
}

// optional int32 num = 1 [default = 0];
inline bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.num)
  return num_;
}
inline void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.channels)
  return channels_;
}
inline void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.height)
  return height_;
}
inline void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BlobProto.width)
  return width_;
}
inline void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BlobProto.width)
}

// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.channels)
  return channels_;
}
inline void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.height)
  return height_;
}
inline void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.height)
}

// optional int32 width = 3;
inline bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.width)
  return width_;
}
inline void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.width)
}

// optional bytes data = 4;
inline bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Datum::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.data)
  return *data_;
}
inline void Datum::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.data)
}
inline void Datum::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.Datum.data)
}
inline void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.Datum.data)
}
inline ::std::string* Datum::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.Datum.data)
  return data_;
}
inline ::std::string* Datum::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Datum::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.label)
  return label_;
}
inline void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.label)
}

// repeated float float_data = 6;
inline int Datum::float_data_size() const {
  return float_data_.size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.float_data)
  return float_data_.Get(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.float_data)
}
inline void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.Datum.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.Datum.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
inline bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
inline bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Datum.encoded)
  return encoded_;
}
inline void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Datum.encoded)
}

// -------------------------------------------------------------------

// LabelMapItem

// optional string name = 1;
inline bool LabelMapItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelMapItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelMapItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelMapItem::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LabelMapItem::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LabelMapItem.name)
  return *name_;
}
inline void LabelMapItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LabelMapItem.name)
}
inline void LabelMapItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.LabelMapItem.name)
}
inline void LabelMapItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.LabelMapItem.name)
}
inline ::std::string* LabelMapItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LabelMapItem.name)
  return name_;
}
inline ::std::string* LabelMapItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LabelMapItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LabelMapItem.name)
}

// optional int32 label = 2;
inline bool LabelMapItem::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelMapItem::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelMapItem::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelMapItem::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 LabelMapItem::label() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LabelMapItem.label)
  return label_;
}
inline void LabelMapItem::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LabelMapItem.label)
}

// optional string display_name = 3;
inline bool LabelMapItem::has_display_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelMapItem::set_has_display_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelMapItem::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelMapItem::clear_display_name() {
  if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_->clear();
  }
  clear_has_display_name();
}
inline const ::std::string& LabelMapItem::display_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LabelMapItem.display_name)
  return *display_name_;
}
inline void LabelMapItem::set_display_name(const ::std::string& value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LabelMapItem.display_name)
}
inline void LabelMapItem::set_display_name(const char* value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.LabelMapItem.display_name)
}
inline void LabelMapItem::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.LabelMapItem.display_name)
}
inline ::std::string* LabelMapItem::mutable_display_name() {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LabelMapItem.display_name)
  return display_name_;
}
inline ::std::string* LabelMapItem::release_display_name() {
  clear_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = display_name_;
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LabelMapItem::set_allocated_display_name(::std::string* display_name) {
  if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete display_name_;
  }
  if (display_name) {
    set_has_display_name();
    display_name_ = display_name;
  } else {
    clear_has_display_name();
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LabelMapItem.display_name)
}

// -------------------------------------------------------------------

// LabelMap

// repeated .apollo.perception.inference.LabelMapItem item = 1;
inline int LabelMap::item_size() const {
  return item_.size();
}
inline void LabelMap::clear_item() {
  item_.Clear();
}
inline const ::apollo::perception::inference::LabelMapItem& LabelMap::item(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LabelMap.item)
  return item_.Get(index);
}
inline ::apollo::perception::inference::LabelMapItem* LabelMap::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LabelMap.item)
  return item_.Mutable(index);
}
inline ::apollo::perception::inference::LabelMapItem* LabelMap::add_item() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LabelMap.item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::LabelMapItem >&
LabelMap::item() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LabelMap.item)
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::LabelMapItem >*
LabelMap::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LabelMap.item)
  return &item_;
}

// -------------------------------------------------------------------

// Sampler

// optional float min_scale = 1 [default = 1];
inline bool Sampler::has_min_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sampler::set_has_min_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sampler::clear_has_min_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sampler::clear_min_scale() {
  min_scale_ = 1;
  clear_has_min_scale();
}
inline float Sampler::min_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Sampler.min_scale)
  return min_scale_;
}
inline void Sampler::set_min_scale(float value) {
  set_has_min_scale();
  min_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Sampler.min_scale)
}

// optional float max_scale = 2 [default = 1];
inline bool Sampler::has_max_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sampler::set_has_max_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sampler::clear_has_max_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sampler::clear_max_scale() {
  max_scale_ = 1;
  clear_has_max_scale();
}
inline float Sampler::max_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Sampler.max_scale)
  return max_scale_;
}
inline void Sampler::set_max_scale(float value) {
  set_has_max_scale();
  max_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Sampler.max_scale)
}

// optional float min_aspect_ratio = 3 [default = 1];
inline bool Sampler::has_min_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sampler::set_has_min_aspect_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sampler::clear_has_min_aspect_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sampler::clear_min_aspect_ratio() {
  min_aspect_ratio_ = 1;
  clear_has_min_aspect_ratio();
}
inline float Sampler::min_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Sampler.min_aspect_ratio)
  return min_aspect_ratio_;
}
inline void Sampler::set_min_aspect_ratio(float value) {
  set_has_min_aspect_ratio();
  min_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Sampler.min_aspect_ratio)
}

// optional float max_aspect_ratio = 4 [default = 1];
inline bool Sampler::has_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sampler::set_has_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sampler::clear_has_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sampler::clear_max_aspect_ratio() {
  max_aspect_ratio_ = 1;
  clear_has_max_aspect_ratio();
}
inline float Sampler::max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Sampler.max_aspect_ratio)
  return max_aspect_ratio_;
}
inline void Sampler::set_max_aspect_ratio(float value) {
  set_has_max_aspect_ratio();
  max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Sampler.max_aspect_ratio)
}

// -------------------------------------------------------------------

// SampleConstraint

// optional float min_jaccard_overlap = 1;
inline bool SampleConstraint::has_min_jaccard_overlap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SampleConstraint::set_has_min_jaccard_overlap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SampleConstraint::clear_has_min_jaccard_overlap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SampleConstraint::clear_min_jaccard_overlap() {
  min_jaccard_overlap_ = 0;
  clear_has_min_jaccard_overlap();
}
inline float SampleConstraint::min_jaccard_overlap() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.min_jaccard_overlap)
  return min_jaccard_overlap_;
}
inline void SampleConstraint::set_min_jaccard_overlap(float value) {
  set_has_min_jaccard_overlap();
  min_jaccard_overlap_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.min_jaccard_overlap)
}

// optional float max_jaccard_overlap = 2;
inline bool SampleConstraint::has_max_jaccard_overlap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SampleConstraint::set_has_max_jaccard_overlap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SampleConstraint::clear_has_max_jaccard_overlap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SampleConstraint::clear_max_jaccard_overlap() {
  max_jaccard_overlap_ = 0;
  clear_has_max_jaccard_overlap();
}
inline float SampleConstraint::max_jaccard_overlap() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.max_jaccard_overlap)
  return max_jaccard_overlap_;
}
inline void SampleConstraint::set_max_jaccard_overlap(float value) {
  set_has_max_jaccard_overlap();
  max_jaccard_overlap_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.max_jaccard_overlap)
}

// optional float min_sample_coverage = 3;
inline bool SampleConstraint::has_min_sample_coverage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SampleConstraint::set_has_min_sample_coverage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SampleConstraint::clear_has_min_sample_coverage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SampleConstraint::clear_min_sample_coverage() {
  min_sample_coverage_ = 0;
  clear_has_min_sample_coverage();
}
inline float SampleConstraint::min_sample_coverage() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.min_sample_coverage)
  return min_sample_coverage_;
}
inline void SampleConstraint::set_min_sample_coverage(float value) {
  set_has_min_sample_coverage();
  min_sample_coverage_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.min_sample_coverage)
}

// optional float max_sample_coverage = 4;
inline bool SampleConstraint::has_max_sample_coverage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SampleConstraint::set_has_max_sample_coverage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SampleConstraint::clear_has_max_sample_coverage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SampleConstraint::clear_max_sample_coverage() {
  max_sample_coverage_ = 0;
  clear_has_max_sample_coverage();
}
inline float SampleConstraint::max_sample_coverage() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.max_sample_coverage)
  return max_sample_coverage_;
}
inline void SampleConstraint::set_max_sample_coverage(float value) {
  set_has_max_sample_coverage();
  max_sample_coverage_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.max_sample_coverage)
}

// optional float min_object_coverage = 5;
inline bool SampleConstraint::has_min_object_coverage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SampleConstraint::set_has_min_object_coverage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SampleConstraint::clear_has_min_object_coverage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SampleConstraint::clear_min_object_coverage() {
  min_object_coverage_ = 0;
  clear_has_min_object_coverage();
}
inline float SampleConstraint::min_object_coverage() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.min_object_coverage)
  return min_object_coverage_;
}
inline void SampleConstraint::set_min_object_coverage(float value) {
  set_has_min_object_coverage();
  min_object_coverage_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.min_object_coverage)
}

// optional float max_object_coverage = 6;
inline bool SampleConstraint::has_max_object_coverage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SampleConstraint::set_has_max_object_coverage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SampleConstraint::clear_has_max_object_coverage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SampleConstraint::clear_max_object_coverage() {
  max_object_coverage_ = 0;
  clear_has_max_object_coverage();
}
inline float SampleConstraint::max_object_coverage() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.max_object_coverage)
  return max_object_coverage_;
}
inline void SampleConstraint::set_max_object_coverage(float value) {
  set_has_max_object_coverage();
  max_object_coverage_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.max_object_coverage)
}

// repeated int32 balance_type = 7;
inline int SampleConstraint::balance_type_size() const {
  return balance_type_.size();
}
inline void SampleConstraint::clear_balance_type() {
  balance_type_.Clear();
}
inline ::google::protobuf::int32 SampleConstraint::balance_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SampleConstraint.balance_type)
  return balance_type_.Get(index);
}
inline void SampleConstraint::set_balance_type(int index, ::google::protobuf::int32 value) {
  balance_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SampleConstraint.balance_type)
}
inline void SampleConstraint::add_balance_type(::google::protobuf::int32 value) {
  balance_type_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.SampleConstraint.balance_type)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SampleConstraint::balance_type() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.SampleConstraint.balance_type)
  return balance_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SampleConstraint::mutable_balance_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.SampleConstraint.balance_type)
  return &balance_type_;
}

// -------------------------------------------------------------------

// BatchSampler

// optional bool use_original_image = 1 [default = true];
inline bool BatchSampler::has_use_original_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchSampler::set_has_use_original_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchSampler::clear_has_use_original_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchSampler::clear_use_original_image() {
  use_original_image_ = true;
  clear_has_use_original_image();
}
inline bool BatchSampler::use_original_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchSampler.use_original_image)
  return use_original_image_;
}
inline void BatchSampler::set_use_original_image(bool value) {
  set_has_use_original_image();
  use_original_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BatchSampler.use_original_image)
}

// optional .apollo.perception.inference.Sampler sampler = 2;
inline bool BatchSampler::has_sampler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchSampler::set_has_sampler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchSampler::clear_has_sampler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchSampler::clear_sampler() {
  if (sampler_ != NULL) sampler_->::apollo::perception::inference::Sampler::Clear();
  clear_has_sampler();
}
inline const ::apollo::perception::inference::Sampler& BatchSampler::sampler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchSampler.sampler)
  return sampler_ != NULL ? *sampler_ : *default_instance_->sampler_;
}
inline ::apollo::perception::inference::Sampler* BatchSampler::mutable_sampler() {
  set_has_sampler();
  if (sampler_ == NULL) sampler_ = new ::apollo::perception::inference::Sampler;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.BatchSampler.sampler)
  return sampler_;
}
inline ::apollo::perception::inference::Sampler* BatchSampler::release_sampler() {
  clear_has_sampler();
  ::apollo::perception::inference::Sampler* temp = sampler_;
  sampler_ = NULL;
  return temp;
}
inline void BatchSampler::set_allocated_sampler(::apollo::perception::inference::Sampler* sampler) {
  delete sampler_;
  sampler_ = sampler;
  if (sampler) {
    set_has_sampler();
  } else {
    clear_has_sampler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.BatchSampler.sampler)
}

// optional .apollo.perception.inference.SampleConstraint sample_constraint = 3;
inline bool BatchSampler::has_sample_constraint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchSampler::set_has_sample_constraint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchSampler::clear_has_sample_constraint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchSampler::clear_sample_constraint() {
  if (sample_constraint_ != NULL) sample_constraint_->::apollo::perception::inference::SampleConstraint::Clear();
  clear_has_sample_constraint();
}
inline const ::apollo::perception::inference::SampleConstraint& BatchSampler::sample_constraint() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchSampler.sample_constraint)
  return sample_constraint_ != NULL ? *sample_constraint_ : *default_instance_->sample_constraint_;
}
inline ::apollo::perception::inference::SampleConstraint* BatchSampler::mutable_sample_constraint() {
  set_has_sample_constraint();
  if (sample_constraint_ == NULL) sample_constraint_ = new ::apollo::perception::inference::SampleConstraint;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.BatchSampler.sample_constraint)
  return sample_constraint_;
}
inline ::apollo::perception::inference::SampleConstraint* BatchSampler::release_sample_constraint() {
  clear_has_sample_constraint();
  ::apollo::perception::inference::SampleConstraint* temp = sample_constraint_;
  sample_constraint_ = NULL;
  return temp;
}
inline void BatchSampler::set_allocated_sample_constraint(::apollo::perception::inference::SampleConstraint* sample_constraint) {
  delete sample_constraint_;
  sample_constraint_ = sample_constraint;
  if (sample_constraint) {
    set_has_sample_constraint();
  } else {
    clear_has_sample_constraint();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.BatchSampler.sample_constraint)
}

// optional uint32 max_sample = 4;
inline bool BatchSampler::has_max_sample() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatchSampler::set_has_max_sample() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BatchSampler::clear_has_max_sample() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BatchSampler::clear_max_sample() {
  max_sample_ = 0u;
  clear_has_max_sample();
}
inline ::google::protobuf::uint32 BatchSampler::max_sample() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchSampler.max_sample)
  return max_sample_;
}
inline void BatchSampler::set_max_sample(::google::protobuf::uint32 value) {
  set_has_max_sample();
  max_sample_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BatchSampler.max_sample)
}

// optional uint32 max_trials = 5 [default = 100];
inline bool BatchSampler::has_max_trials() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BatchSampler::set_has_max_trials() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BatchSampler::clear_has_max_trials() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BatchSampler::clear_max_trials() {
  max_trials_ = 100u;
  clear_has_max_trials();
}
inline ::google::protobuf::uint32 BatchSampler::max_trials() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchSampler.max_trials)
  return max_trials_;
}
inline void BatchSampler::set_max_trials(::google::protobuf::uint32 value) {
  set_has_max_trials();
  max_trials_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BatchSampler.max_trials)
}

// -------------------------------------------------------------------

// EmitConstraint

// optional .apollo.perception.inference.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
inline bool EmitConstraint::has_emit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmitConstraint::set_has_emit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmitConstraint::clear_has_emit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmitConstraint::clear_emit_type() {
  emit_type_ = 0;
  clear_has_emit_type();
}
inline ::apollo::perception::inference::EmitConstraint_EmitType EmitConstraint::emit_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmitConstraint.emit_type)
  return static_cast< ::apollo::perception::inference::EmitConstraint_EmitType >(emit_type_);
}
inline void EmitConstraint::set_emit_type(::apollo::perception::inference::EmitConstraint_EmitType value) {
  assert(::apollo::perception::inference::EmitConstraint_EmitType_IsValid(value));
  set_has_emit_type();
  emit_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EmitConstraint.emit_type)
}

// optional float emit_overlap = 2;
inline bool EmitConstraint::has_emit_overlap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmitConstraint::set_has_emit_overlap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmitConstraint::clear_has_emit_overlap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmitConstraint::clear_emit_overlap() {
  emit_overlap_ = 0;
  clear_has_emit_overlap();
}
inline float EmitConstraint::emit_overlap() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmitConstraint.emit_overlap)
  return emit_overlap_;
}
inline void EmitConstraint::set_emit_overlap(float value) {
  set_has_emit_overlap();
  emit_overlap_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EmitConstraint.emit_overlap)
}

// -------------------------------------------------------------------

// NormalizedBBox

// optional float xmin = 1;
inline bool NormalizedBBox::has_xmin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalizedBBox::set_has_xmin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalizedBBox::clear_has_xmin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalizedBBox::clear_xmin() {
  xmin_ = 0;
  clear_has_xmin();
}
inline float NormalizedBBox::xmin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.xmin)
  return xmin_;
}
inline void NormalizedBBox::set_xmin(float value) {
  set_has_xmin();
  xmin_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.xmin)
}

// optional float ymin = 2;
inline bool NormalizedBBox::has_ymin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalizedBBox::set_has_ymin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalizedBBox::clear_has_ymin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalizedBBox::clear_ymin() {
  ymin_ = 0;
  clear_has_ymin();
}
inline float NormalizedBBox::ymin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.ymin)
  return ymin_;
}
inline void NormalizedBBox::set_ymin(float value) {
  set_has_ymin();
  ymin_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.ymin)
}

// optional float xmax = 3;
inline bool NormalizedBBox::has_xmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NormalizedBBox::set_has_xmax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NormalizedBBox::clear_has_xmax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NormalizedBBox::clear_xmax() {
  xmax_ = 0;
  clear_has_xmax();
}
inline float NormalizedBBox::xmax() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.xmax)
  return xmax_;
}
inline void NormalizedBBox::set_xmax(float value) {
  set_has_xmax();
  xmax_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.xmax)
}

// optional float ymax = 4;
inline bool NormalizedBBox::has_ymax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NormalizedBBox::set_has_ymax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NormalizedBBox::clear_has_ymax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NormalizedBBox::clear_ymax() {
  ymax_ = 0;
  clear_has_ymax();
}
inline float NormalizedBBox::ymax() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.ymax)
  return ymax_;
}
inline void NormalizedBBox::set_ymax(float value) {
  set_has_ymax();
  ymax_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.ymax)
}

// optional int32 label = 5;
inline bool NormalizedBBox::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NormalizedBBox::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NormalizedBBox::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NormalizedBBox::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 NormalizedBBox::label() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.label)
  return label_;
}
inline void NormalizedBBox::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.label)
}

// optional bool difficult = 6;
inline bool NormalizedBBox::has_difficult() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NormalizedBBox::set_has_difficult() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NormalizedBBox::clear_has_difficult() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NormalizedBBox::clear_difficult() {
  difficult_ = false;
  clear_has_difficult();
}
inline bool NormalizedBBox::difficult() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.difficult)
  return difficult_;
}
inline void NormalizedBBox::set_difficult(bool value) {
  set_has_difficult();
  difficult_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.difficult)
}

// optional float score = 7;
inline bool NormalizedBBox::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NormalizedBBox::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NormalizedBBox::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NormalizedBBox::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float NormalizedBBox::score() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.score)
  return score_;
}
inline void NormalizedBBox::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.score)
}

// optional float size = 8;
inline bool NormalizedBBox::has_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NormalizedBBox::set_has_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NormalizedBBox::clear_has_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NormalizedBBox::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline float NormalizedBBox::size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizedBBox.size)
  return size_;
}
inline void NormalizedBBox::set_size(float value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizedBBox.size)
}

// -------------------------------------------------------------------

// BBox3D

// optional float h = 1 [default = 0];
inline bool BBox3D::has_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBox3D::set_has_h() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBox3D::clear_has_h() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBox3D::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline float BBox3D::h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.h)
  return h_;
}
inline void BBox3D::set_h(float value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.h)
}

// optional float w = 2 [default = 0];
inline bool BBox3D::has_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBox3D::set_has_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBox3D::clear_has_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBox3D::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float BBox3D::w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.w)
  return w_;
}
inline void BBox3D::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.w)
}

// optional float l = 3 [default = 0];
inline bool BBox3D::has_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBox3D::set_has_l() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBox3D::clear_has_l() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBox3D::clear_l() {
  l_ = 0;
  clear_has_l();
}
inline float BBox3D::l() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.l)
  return l_;
}
inline void BBox3D::set_l(float value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.l)
}

// optional float x = 4 [default = 0];
inline bool BBox3D::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BBox3D::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BBox3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BBox3D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float BBox3D::x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.x)
  return x_;
}
inline void BBox3D::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.x)
}

// optional float y = 5 [default = 0];
inline bool BBox3D::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BBox3D::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BBox3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BBox3D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float BBox3D::y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.y)
  return y_;
}
inline void BBox3D::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.y)
}

// optional float z = 6 [default = 0];
inline bool BBox3D::has_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BBox3D::set_has_z() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BBox3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BBox3D::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float BBox3D::z() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.z)
  return z_;
}
inline void BBox3D::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.z)
}

// optional float alpha = 7 [default = 0];
inline bool BBox3D::has_alpha() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BBox3D::set_has_alpha() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BBox3D::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BBox3D::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
inline float BBox3D::alpha() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BBox3D.alpha)
  return alpha_;
}
inline void BBox3D::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BBox3D.alpha)
}

// -------------------------------------------------------------------

// Annotation

// optional int32 instance_id = 1 [default = 0];
inline bool Annotation::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotation::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Annotation::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Annotation::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 Annotation::instance_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Annotation.instance_id)
  return instance_id_;
}
inline void Annotation::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.Annotation.instance_id)
}

// optional .apollo.perception.inference.NormalizedBBox bbox = 2;
inline bool Annotation::has_bbox() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Annotation::set_has_bbox() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Annotation::clear_has_bbox() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Annotation::clear_bbox() {
  if (bbox_ != NULL) bbox_->::apollo::perception::inference::NormalizedBBox::Clear();
  clear_has_bbox();
}
inline const ::apollo::perception::inference::NormalizedBBox& Annotation::bbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Annotation.bbox)
  return bbox_ != NULL ? *bbox_ : *default_instance_->bbox_;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::mutable_bbox() {
  set_has_bbox();
  if (bbox_ == NULL) bbox_ = new ::apollo::perception::inference::NormalizedBBox;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.Annotation.bbox)
  return bbox_;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::release_bbox() {
  clear_has_bbox();
  ::apollo::perception::inference::NormalizedBBox* temp = bbox_;
  bbox_ = NULL;
  return temp;
}
inline void Annotation::set_allocated_bbox(::apollo::perception::inference::NormalizedBBox* bbox) {
  delete bbox_;
  bbox_ = bbox;
  if (bbox) {
    set_has_bbox();
  } else {
    clear_has_bbox();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.Annotation.bbox)
}

// optional .apollo.perception.inference.BBox3D bbox3d = 3;
inline bool Annotation::has_bbox3d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Annotation::set_has_bbox3d() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Annotation::clear_has_bbox3d() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Annotation::clear_bbox3d() {
  if (bbox3d_ != NULL) bbox3d_->::apollo::perception::inference::BBox3D::Clear();
  clear_has_bbox3d();
}
inline const ::apollo::perception::inference::BBox3D& Annotation::bbox3d() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Annotation.bbox3d)
  return bbox3d_ != NULL ? *bbox3d_ : *default_instance_->bbox3d_;
}
inline ::apollo::perception::inference::BBox3D* Annotation::mutable_bbox3d() {
  set_has_bbox3d();
  if (bbox3d_ == NULL) bbox3d_ = new ::apollo::perception::inference::BBox3D;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.Annotation.bbox3d)
  return bbox3d_;
}
inline ::apollo::perception::inference::BBox3D* Annotation::release_bbox3d() {
  clear_has_bbox3d();
  ::apollo::perception::inference::BBox3D* temp = bbox3d_;
  bbox3d_ = NULL;
  return temp;
}
inline void Annotation::set_allocated_bbox3d(::apollo::perception::inference::BBox3D* bbox3d) {
  delete bbox3d_;
  bbox3d_ = bbox3d;
  if (bbox3d) {
    set_has_bbox3d();
  } else {
    clear_has_bbox3d();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.Annotation.bbox3d)
}

// optional .apollo.perception.inference.NormalizedBBox front_bbox = 4;
inline bool Annotation::has_front_bbox() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Annotation::set_has_front_bbox() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Annotation::clear_has_front_bbox() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Annotation::clear_front_bbox() {
  if (front_bbox_ != NULL) front_bbox_->::apollo::perception::inference::NormalizedBBox::Clear();
  clear_has_front_bbox();
}
inline const ::apollo::perception::inference::NormalizedBBox& Annotation::front_bbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Annotation.front_bbox)
  return front_bbox_ != NULL ? *front_bbox_ : *default_instance_->front_bbox_;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::mutable_front_bbox() {
  set_has_front_bbox();
  if (front_bbox_ == NULL) front_bbox_ = new ::apollo::perception::inference::NormalizedBBox;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.Annotation.front_bbox)
  return front_bbox_;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::release_front_bbox() {
  clear_has_front_bbox();
  ::apollo::perception::inference::NormalizedBBox* temp = front_bbox_;
  front_bbox_ = NULL;
  return temp;
}
inline void Annotation::set_allocated_front_bbox(::apollo::perception::inference::NormalizedBBox* front_bbox) {
  delete front_bbox_;
  front_bbox_ = front_bbox;
  if (front_bbox) {
    set_has_front_bbox();
  } else {
    clear_has_front_bbox();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.Annotation.front_bbox)
}

// optional .apollo.perception.inference.NormalizedBBox rear_bbox = 5;
inline bool Annotation::has_rear_bbox() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Annotation::set_has_rear_bbox() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Annotation::clear_has_rear_bbox() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Annotation::clear_rear_bbox() {
  if (rear_bbox_ != NULL) rear_bbox_->::apollo::perception::inference::NormalizedBBox::Clear();
  clear_has_rear_bbox();
}
inline const ::apollo::perception::inference::NormalizedBBox& Annotation::rear_bbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.Annotation.rear_bbox)
  return rear_bbox_ != NULL ? *rear_bbox_ : *default_instance_->rear_bbox_;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::mutable_rear_bbox() {
  set_has_rear_bbox();
  if (rear_bbox_ == NULL) rear_bbox_ = new ::apollo::perception::inference::NormalizedBBox;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.Annotation.rear_bbox)
  return rear_bbox_;
}
inline ::apollo::perception::inference::NormalizedBBox* Annotation::release_rear_bbox() {
  clear_has_rear_bbox();
  ::apollo::perception::inference::NormalizedBBox* temp = rear_bbox_;
  rear_bbox_ = NULL;
  return temp;
}
inline void Annotation::set_allocated_rear_bbox(::apollo::perception::inference::NormalizedBBox* rear_bbox) {
  delete rear_bbox_;
  rear_bbox_ = rear_bbox;
  if (rear_bbox) {
    set_has_rear_bbox();
  } else {
    clear_has_rear_bbox();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.Annotation.rear_bbox)
}

// -------------------------------------------------------------------

// AnnotationGroup

// optional int32 group_label = 1;
inline bool AnnotationGroup::has_group_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnnotationGroup::set_has_group_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnnotationGroup::clear_has_group_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnnotationGroup::clear_group_label() {
  group_label_ = 0;
  clear_has_group_label();
}
inline ::google::protobuf::int32 AnnotationGroup::group_label() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotationGroup.group_label)
  return group_label_;
}
inline void AnnotationGroup::set_group_label(::google::protobuf::int32 value) {
  set_has_group_label();
  group_label_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnnotationGroup.group_label)
}

// repeated .apollo.perception.inference.Annotation annotation = 2;
inline int AnnotationGroup::annotation_size() const {
  return annotation_.size();
}
inline void AnnotationGroup::clear_annotation() {
  annotation_.Clear();
}
inline const ::apollo::perception::inference::Annotation& AnnotationGroup::annotation(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotationGroup.annotation)
  return annotation_.Get(index);
}
inline ::apollo::perception::inference::Annotation* AnnotationGroup::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.AnnotationGroup.annotation)
  return annotation_.Mutable(index);
}
inline ::apollo::perception::inference::Annotation* AnnotationGroup::add_annotation() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.AnnotationGroup.annotation)
  return annotation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::Annotation >&
AnnotationGroup::annotation() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.AnnotationGroup.annotation)
  return annotation_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::Annotation >*
AnnotationGroup::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.AnnotationGroup.annotation)
  return &annotation_;
}

// -------------------------------------------------------------------

// AnnotatedDatum

// optional .apollo.perception.inference.Datum datum = 1;
inline bool AnnotatedDatum::has_datum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnnotatedDatum::set_has_datum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnnotatedDatum::clear_has_datum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnnotatedDatum::clear_datum() {
  if (datum_ != NULL) datum_->::apollo::perception::inference::Datum::Clear();
  clear_has_datum();
}
inline const ::apollo::perception::inference::Datum& AnnotatedDatum::datum() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDatum.datum)
  return datum_ != NULL ? *datum_ : *default_instance_->datum_;
}
inline ::apollo::perception::inference::Datum* AnnotatedDatum::mutable_datum() {
  set_has_datum();
  if (datum_ == NULL) datum_ = new ::apollo::perception::inference::Datum;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.AnnotatedDatum.datum)
  return datum_;
}
inline ::apollo::perception::inference::Datum* AnnotatedDatum::release_datum() {
  clear_has_datum();
  ::apollo::perception::inference::Datum* temp = datum_;
  datum_ = NULL;
  return temp;
}
inline void AnnotatedDatum::set_allocated_datum(::apollo::perception::inference::Datum* datum) {
  delete datum_;
  datum_ = datum;
  if (datum) {
    set_has_datum();
  } else {
    clear_has_datum();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.AnnotatedDatum.datum)
}

// optional .apollo.perception.inference.AnnotatedDatum.AnnotationType type = 2;
inline bool AnnotatedDatum::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnnotatedDatum::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnnotatedDatum::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnnotatedDatum::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::perception::inference::AnnotatedDatum_AnnotationType AnnotatedDatum::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDatum.type)
  return static_cast< ::apollo::perception::inference::AnnotatedDatum_AnnotationType >(type_);
}
inline void AnnotatedDatum::set_type(::apollo::perception::inference::AnnotatedDatum_AnnotationType value) {
  assert(::apollo::perception::inference::AnnotatedDatum_AnnotationType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnnotatedDatum.type)
}

// repeated .apollo.perception.inference.AnnotationGroup annotation_group = 3;
inline int AnnotatedDatum::annotation_group_size() const {
  return annotation_group_.size();
}
inline void AnnotatedDatum::clear_annotation_group() {
  annotation_group_.Clear();
}
inline const ::apollo::perception::inference::AnnotationGroup& AnnotatedDatum::annotation_group(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDatum.annotation_group)
  return annotation_group_.Get(index);
}
inline ::apollo::perception::inference::AnnotationGroup* AnnotatedDatum::mutable_annotation_group(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.AnnotatedDatum.annotation_group)
  return annotation_group_.Mutable(index);
}
inline ::apollo::perception::inference::AnnotationGroup* AnnotatedDatum::add_annotation_group() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.AnnotatedDatum.annotation_group)
  return annotation_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnnotationGroup >&
AnnotatedDatum::annotation_group() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.AnnotatedDatum.annotation_group)
  return annotation_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnnotationGroup >*
AnnotatedDatum::mutable_annotation_group() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.AnnotatedDatum.annotation_group)
  return &annotation_group_;
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FillerParameter::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.type)
  return *type_;
}
inline void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.FillerParameter.type)
  return type_;
}
inline ::std::string* FillerParameter::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.std)
  return std_;
}
inline void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.sparse)
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.sparse)
}

// optional .apollo.perception.inference.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
inline bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
inline ::apollo::perception::inference::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FillerParameter.variance_norm)
  return static_cast< ::apollo::perception::inference::FillerParameter_VarianceNorm >(variance_norm_);
}
inline void FillerParameter::set_variance_norm(::apollo::perception::inference::FillerParameter_VarianceNorm value) {
  assert(::apollo::perception::inference::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FillerParameter.variance_norm)
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.name)
  return *name_;
}
inline void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetParameter.name)
}
inline void NetParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.NetParameter.name)
}
inline ::std::string* NetParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetParameter.name)
  return name_;
}
inline ::std::string* NetParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.NetParameter.name)
}

// repeated string input = 3;
inline int NetParameter::input_size() const {
  return input_.size();
}
inline void NetParameter::clear_input() {
  input_.Clear();
}
inline const ::std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.input)
  return input_.Get(index);
}
inline ::std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetParameter.input)
  return input_.Mutable(index);
}
inline void NetParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
inline void NetParameter::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.NetParameter.input)
}
inline ::std::string* NetParameter::add_input() {
  return input_.Add();
}
inline void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetParameter.input)
}
inline void NetParameter::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.NetParameter.input)
}
inline void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.NetParameter.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetParameter.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetParameter.input)
  return &input_;
}

// repeated .apollo.perception.inference.BlobShape input_shape = 8;
inline int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
inline void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline const ::apollo::perception::inference::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.input_shape)
  return input_shape_.Get(index);
}
inline ::apollo::perception::inference::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
inline ::apollo::perception::inference::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetParameter.input_shape)
  return input_shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetParameter.input_shape)
  return input_shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetParameter.input_shape)
  return &input_shape_;
}

// repeated int32 input_dim = 4;
inline int NetParameter::input_dim_size() const {
  return input_dim_.size();
}
inline void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.input_dim)
  return input_dim_.Get(index);
}
inline void NetParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetParameter.input_dim)
}
inline void NetParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetParameter.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetParameter.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetParameter.input_dim)
  return &input_dim_;
}

// optional bool force_backward = 5 [default = false];
inline bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
inline bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.force_backward)
  return force_backward_;
}
inline void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetParameter.force_backward)
}

// optional .apollo.perception.inference.NetState state = 6;
inline bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetParameter::clear_state() {
  if (state_ != NULL) state_->::apollo::perception::inference::NetState::Clear();
  clear_has_state();
}
inline const ::apollo::perception::inference::NetState& NetParameter::state() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::apollo::perception::inference::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) state_ = new ::apollo::perception::inference::NetState;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetParameter.state)
  return state_;
}
inline ::apollo::perception::inference::NetState* NetParameter::release_state() {
  clear_has_state();
  ::apollo::perception::inference::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void NetParameter::set_allocated_state(::apollo::perception::inference::NetState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
inline bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.debug_info)
  return debug_info_;
}
inline void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetParameter.debug_info)
}

// repeated .apollo.perception.inference.LayerParameter layer = 100;
inline int NetParameter::layer_size() const {
  return layer_.size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline const ::apollo::perception::inference::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.layer)
  return layer_.Get(index);
}
inline ::apollo::perception::inference::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetParameter.layer)
  return layer_.Mutable(index);
}
inline ::apollo::perception::inference::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetParameter.layer)
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetParameter.layer)
  return layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetParameter.layer)
  return &layer_;
}

// repeated .apollo.perception.inference.V1LayerParameter layers = 2;
inline int NetParameter::layers_size() const {
  return layers_.size();
}
inline void NetParameter::clear_layers() {
  layers_.Clear();
}
inline const ::apollo::perception::inference::V1LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetParameter.layers)
  return layers_.Get(index);
}
inline ::apollo::perception::inference::V1LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetParameter.layers)
  return layers_.Mutable(index);
}
inline ::apollo::perception::inference::V1LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetParameter.layers)
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::V1LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetParameter.layers)
  return layers_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::V1LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetParameter.layers)
  return &layers_;
}

// -------------------------------------------------------------------

// NetState

// optional .apollo.perception.inference.Phase phase = 1 [default = TEST];
inline bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
inline ::apollo::perception::inference::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetState.phase)
  return static_cast< ::apollo::perception::inference::Phase >(phase_);
}
inline void NetState::set_phase(::apollo::perception::inference::Phase value) {
  assert(::apollo::perception::inference::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetState.phase)
}

// optional int32 level = 2 [default = 0];
inline bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetState.level)
  return level_;
}
inline void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetState.level)
}

// repeated string stage = 3;
inline int NetState::stage_size() const {
  return stage_.size();
}
inline void NetState::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetState.stage)
  return stage_.Get(index);
}
inline ::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetState.stage)
  return stage_.Mutable(index);
}
inline void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetState::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.NetState.stage)
}
inline ::std::string* NetState::add_stage() {
  return stage_.Add();
}
inline void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetState.stage)
}
inline void NetState::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.NetState.stage)
}
inline void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.NetState.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetState.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetState.stage)
  return &stage_;
}

// -------------------------------------------------------------------

// NetStateRule

// optional .apollo.perception.inference.Phase phase = 1;
inline bool NetStateRule::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetStateRule::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetStateRule::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetStateRule::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::apollo::perception::inference::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetStateRule.phase)
  return static_cast< ::apollo::perception::inference::Phase >(phase_);
}
inline void NetStateRule::set_phase(::apollo::perception::inference::Phase value) {
  assert(::apollo::perception::inference::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetStateRule.phase)
}

// optional int32 min_level = 2;
inline bool NetStateRule::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetStateRule::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetStateRule::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetStateRule::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
inline ::google::protobuf::int32 NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetStateRule.min_level)
  return min_level_;
}
inline void NetStateRule::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetStateRule.min_level)
}

// optional int32 max_level = 3;
inline bool NetStateRule::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetStateRule::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetStateRule::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetStateRule::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetStateRule.max_level)
  return max_level_;
}
inline void NetStateRule::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetStateRule.max_level)
}

// repeated string stage = 4;
inline int NetStateRule::stage_size() const {
  return stage_.size();
}
inline void NetStateRule::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetStateRule.stage)
  return stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetStateRule.stage)
  return stage_.Mutable(index);
}
inline void NetStateRule::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetStateRule.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.NetStateRule.stage)
}
inline ::std::string* NetStateRule::add_stage() {
  return stage_.Add();
}
inline void NetStateRule::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.NetStateRule.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetStateRule.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetStateRule.stage)
  return &stage_;
}

// repeated string not_stage = 5;
inline int NetStateRule::not_stage_size() const {
  return not_stage_.size();
}
inline void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
inline const ::std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NetStateRule.not_stage)
  return not_stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NetStateRule.not_stage)
  return not_stage_.Mutable(index);
}
inline void NetStateRule::set_not_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_not_stage(int index, const char* value) {
  not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.NetStateRule.not_stage)
}
inline ::std::string* NetStateRule::add_not_stage() {
  return not_stage_.Add();
}
inline void NetStateRule::add_not_stage(const ::std::string& value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.NetStateRule.not_stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.NetStateRule.not_stage)
  return not_stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.NetStateRule.not_stage)
  return &not_stage_;
}

// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;
inline bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamSpec::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ParamSpec.name)
  return *name_;
}
inline void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.ParamSpec.name)
}
inline ::std::string* ParamSpec::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ParamSpec.name)
  return name_;
}
inline ::std::string* ParamSpec::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParamSpec::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ParamSpec.name)
}

// optional .apollo.perception.inference.ParamSpec.DimCheckMode share_mode = 2;
inline bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
inline ::apollo::perception::inference::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ParamSpec.share_mode)
  return static_cast< ::apollo::perception::inference::ParamSpec_DimCheckMode >(share_mode_);
}
inline void ParamSpec::set_share_mode(::apollo::perception::inference::ParamSpec_DimCheckMode value) {
  assert(::apollo::perception::inference::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
inline bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
inline float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ParamSpec.lr_mult)
  return lr_mult_;
}
inline void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
inline bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
inline float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ParamSpec.decay_mult)
  return decay_mult_;
}
inline void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ParamSpec.decay_mult)
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.name)
  return *name_;
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.name)
  return name_;
}
inline ::std::string* LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.name)
}

// optional string type = 2;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.type)
  return *type_;
}
inline void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.LayerParameter.type)
}
inline ::std::string* LayerParameter::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.type)
  return type_;
}
inline ::std::string* LayerParameter::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.LayerParameter.bottom)
}
inline ::std::string* LayerParameter::add_bottom() {
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
inline int LayerParameter::top_size() const {
  return top_.size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.LayerParameter.top)
}
inline ::std::string* LayerParameter::add_top() {
  return top_.Add();
}
inline void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.top)
  return &top_;
}

// optional .apollo.perception.inference.Phase phase = 10;
inline bool LayerParameter::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerParameter::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerParameter::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::apollo::perception::inference::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.phase)
  return static_cast< ::apollo::perception::inference::Phase >(phase_);
}
inline void LayerParameter::set_phase(::apollo::perception::inference::Phase value) {
  assert(::apollo::perception::inference::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.phase)
}

// repeated float loss_weight = 5;
inline int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.loss_weight)
}
inline void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated .apollo.perception.inference.ParamSpec param = 6;
inline int LayerParameter::param_size() const {
  return param_.size();
}
inline void LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::apollo::perception::inference::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.param)
  return param_.Get(index);
}
inline ::apollo::perception::inference::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.param)
  return param_.Mutable(index);
}
inline ::apollo::perception::inference::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.param)
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.param)
  return &param_;
}

// repeated .apollo.perception.inference.BlobProto blobs = 7;
inline int LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::apollo::perception::inference::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::apollo::perception::inference::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::apollo::perception::inference::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.blobs)
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.blobs)
  return blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.blobs)
  return &blobs_;
}

// repeated bool propagate_down = 11;
inline int LayerParameter::propagate_down_size() const {
  return propagate_down_.size();
}
inline void LayerParameter::clear_propagate_down() {
  propagate_down_.Clear();
}
inline bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.propagate_down)
  return propagate_down_.Get(index);
}
inline void LayerParameter::set_propagate_down(int index, bool value) {
  propagate_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.propagate_down)
}
inline void LayerParameter::add_propagate_down(bool value) {
  propagate_down_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.propagate_down)
}
inline const ::google::protobuf::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.propagate_down)
  return propagate_down_;
}
inline ::google::protobuf::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.propagate_down)
  return &propagate_down_;
}

// repeated .apollo.perception.inference.NetStateRule include = 8;
inline int LayerParameter::include_size() const {
  return include_.size();
}
inline void LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::apollo::perception::inference::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.include)
  return include_.Get(index);
}
inline ::apollo::perception::inference::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.include)
  return include_.Mutable(index);
}
inline ::apollo::perception::inference::NetStateRule* LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.include)
  return include_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.include)
  return include_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.include)
  return &include_;
}

// repeated .apollo.perception.inference.NetStateRule exclude = 9;
inline int LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::apollo::perception::inference::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::apollo::perception::inference::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::apollo::perception::inference::NetStateRule* LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.exclude)
  return exclude_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.exclude)
  return exclude_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.exclude)
  return &exclude_;
}

// optional .apollo.perception.inference.TransformationParameter transform_param = 100;
inline bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::apollo::perception::inference::TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::apollo::perception::inference::TransformationParameter& LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_ : *default_instance_->transform_param_;
}
inline ::apollo::perception::inference::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) transform_param_ = new ::apollo::perception::inference::TransformationParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.transform_param)
  return transform_param_;
}
inline ::apollo::perception::inference::TransformationParameter* LayerParameter::release_transform_param() {
  clear_has_transform_param();
  ::apollo::perception::inference::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_transform_param(::apollo::perception::inference::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.transform_param)
}

// optional .apollo.perception.inference.LossParameter loss_param = 101;
inline bool LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::apollo::perception::inference::LossParameter::Clear();
  clear_has_loss_param();
}
inline const ::apollo::perception::inference::LossParameter& LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_ : *default_instance_->loss_param_;
}
inline ::apollo::perception::inference::LossParameter* LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) loss_param_ = new ::apollo::perception::inference::LossParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.loss_param)
  return loss_param_;
}
inline ::apollo::perception::inference::LossParameter* LayerParameter::release_loss_param() {
  clear_has_loss_param();
  ::apollo::perception::inference::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_loss_param(::apollo::perception::inference::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.loss_param)
}

// optional .apollo.perception.inference.AccuracyParameter accuracy_param = 102;
inline bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::apollo::perception::inference::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
inline const ::apollo::perception::inference::AccuracyParameter& LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_ : *default_instance_->accuracy_param_;
}
inline ::apollo::perception::inference::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) accuracy_param_ = new ::apollo::perception::inference::AccuracyParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline ::apollo::perception::inference::AccuracyParameter* LayerParameter::release_accuracy_param() {
  clear_has_accuracy_param();
  ::apollo::perception::inference::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_accuracy_param(::apollo::perception::inference::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.accuracy_param)
}

// optional .apollo.perception.inference.AnnotatedDataParameter annotated_data_param = 200;
inline bool LayerParameter::has_annotated_data_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_annotated_data_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerParameter::clear_has_annotated_data_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerParameter::clear_annotated_data_param() {
  if (annotated_data_param_ != NULL) annotated_data_param_->::apollo::perception::inference::AnnotatedDataParameter::Clear();
  clear_has_annotated_data_param();
}
inline const ::apollo::perception::inference::AnnotatedDataParameter& LayerParameter::annotated_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.annotated_data_param)
  return annotated_data_param_ != NULL ? *annotated_data_param_ : *default_instance_->annotated_data_param_;
}
inline ::apollo::perception::inference::AnnotatedDataParameter* LayerParameter::mutable_annotated_data_param() {
  set_has_annotated_data_param();
  if (annotated_data_param_ == NULL) annotated_data_param_ = new ::apollo::perception::inference::AnnotatedDataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.annotated_data_param)
  return annotated_data_param_;
}
inline ::apollo::perception::inference::AnnotatedDataParameter* LayerParameter::release_annotated_data_param() {
  clear_has_annotated_data_param();
  ::apollo::perception::inference::AnnotatedDataParameter* temp = annotated_data_param_;
  annotated_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_annotated_data_param(::apollo::perception::inference::AnnotatedDataParameter* annotated_data_param) {
  delete annotated_data_param_;
  annotated_data_param_ = annotated_data_param;
  if (annotated_data_param) {
    set_has_annotated_data_param();
  } else {
    clear_has_annotated_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.annotated_data_param)
}

// optional .apollo.perception.inference.ArgMaxParameter argmax_param = 103;
inline bool LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::apollo::perception::inference::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
inline const ::apollo::perception::inference::ArgMaxParameter& LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_ : *default_instance_->argmax_param_;
}
inline ::apollo::perception::inference::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) argmax_param_ = new ::apollo::perception::inference::ArgMaxParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.argmax_param)
  return argmax_param_;
}
inline ::apollo::perception::inference::ArgMaxParameter* LayerParameter::release_argmax_param() {
  clear_has_argmax_param();
  ::apollo::perception::inference::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_argmax_param(::apollo::perception::inference::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.argmax_param)
}

// optional .apollo.perception.inference.BatchNormParameter batch_norm_param = 139;
inline bool LayerParameter::has_batch_norm_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_batch_norm_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerParameter::clear_has_batch_norm_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != NULL) batch_norm_param_->::apollo::perception::inference::BatchNormParameter::Clear();
  clear_has_batch_norm_param();
}
inline const ::apollo::perception::inference::BatchNormParameter& LayerParameter::batch_norm_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.batch_norm_param)
  return batch_norm_param_ != NULL ? *batch_norm_param_ : *default_instance_->batch_norm_param_;
}
inline ::apollo::perception::inference::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  set_has_batch_norm_param();
  if (batch_norm_param_ == NULL) batch_norm_param_ = new ::apollo::perception::inference::BatchNormParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.batch_norm_param)
  return batch_norm_param_;
}
inline ::apollo::perception::inference::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  clear_has_batch_norm_param();
  ::apollo::perception::inference::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_batch_norm_param(::apollo::perception::inference::BatchNormParameter* batch_norm_param) {
  delete batch_norm_param_;
  batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    set_has_batch_norm_param();
  } else {
    clear_has_batch_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.batch_norm_param)
}

// optional .apollo.perception.inference.BiasParameter bias_param = 141;
inline bool LayerParameter::has_bias_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_bias_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerParameter::clear_has_bias_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->::apollo::perception::inference::BiasParameter::Clear();
  clear_has_bias_param();
}
inline const ::apollo::perception::inference::BiasParameter& LayerParameter::bias_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.bias_param)
  return bias_param_ != NULL ? *bias_param_ : *default_instance_->bias_param_;
}
inline ::apollo::perception::inference::BiasParameter* LayerParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) bias_param_ = new ::apollo::perception::inference::BiasParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.bias_param)
  return bias_param_;
}
inline ::apollo::perception::inference::BiasParameter* LayerParameter::release_bias_param() {
  clear_has_bias_param();
  ::apollo::perception::inference::BiasParameter* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bias_param(::apollo::perception::inference::BiasParameter* bias_param) {
  delete bias_param_;
  bias_param_ = bias_param;
  if (bias_param) {
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.bias_param)
}

// optional .apollo.perception.inference.ConcatParameter concat_param = 104;
inline bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::apollo::perception::inference::ConcatParameter::Clear();
  clear_has_concat_param();
}
inline const ::apollo::perception::inference::ConcatParameter& LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_ : *default_instance_->concat_param_;
}
inline ::apollo::perception::inference::ConcatParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) concat_param_ = new ::apollo::perception::inference::ConcatParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.concat_param)
  return concat_param_;
}
inline ::apollo::perception::inference::ConcatParameter* LayerParameter::release_concat_param() {
  clear_has_concat_param();
  ::apollo::perception::inference::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_concat_param(::apollo::perception::inference::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.concat_param)
}

// optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 105;
inline bool LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::apollo::perception::inference::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
inline const ::apollo::perception::inference::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_ : *default_instance_->contrastive_loss_param_;
}
inline ::apollo::perception::inference::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) contrastive_loss_param_ = new ::apollo::perception::inference::ContrastiveLossParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
inline ::apollo::perception::inference::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  clear_has_contrastive_loss_param();
  ::apollo::perception::inference::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_contrastive_loss_param(::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.contrastive_loss_param)
}

// optional .apollo.perception.inference.ConvolutionParameter convolution_param = 106;
inline bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::apollo::perception::inference::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::apollo::perception::inference::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
inline ::apollo::perception::inference::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) convolution_param_ = new ::apollo::perception::inference::ConvolutionParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.convolution_param)
  return convolution_param_;
}
inline ::apollo::perception::inference::ConvolutionParameter* LayerParameter::release_convolution_param() {
  clear_has_convolution_param();
  ::apollo::perception::inference::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_convolution_param(::apollo::perception::inference::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.convolution_param)
}

// optional .apollo.perception.inference.CropParameter crop_param = 144;
inline bool LayerParameter::has_crop_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_crop_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LayerParameter::clear_has_crop_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LayerParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->::apollo::perception::inference::CropParameter::Clear();
  clear_has_crop_param();
}
inline const ::apollo::perception::inference::CropParameter& LayerParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.crop_param)
  return crop_param_ != NULL ? *crop_param_ : *default_instance_->crop_param_;
}
inline ::apollo::perception::inference::CropParameter* LayerParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) crop_param_ = new ::apollo::perception::inference::CropParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.crop_param)
  return crop_param_;
}
inline ::apollo::perception::inference::CropParameter* LayerParameter::release_crop_param() {
  clear_has_crop_param();
  ::apollo::perception::inference::CropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_crop_param(::apollo::perception::inference::CropParameter* crop_param) {
  delete crop_param_;
  crop_param_ = crop_param;
  if (crop_param) {
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.crop_param)
}

// optional .apollo.perception.inference.DataParameter data_param = 107;
inline bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::apollo::perception::inference::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::apollo::perception::inference::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::apollo::perception::inference::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) data_param_ = new ::apollo::perception::inference::DataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.data_param)
  return data_param_;
}
inline ::apollo::perception::inference::DataParameter* LayerParameter::release_data_param() {
  clear_has_data_param();
  ::apollo::perception::inference::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_data_param(::apollo::perception::inference::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.data_param)
}

// optional .apollo.perception.inference.DetectionEvaluateParameter detection_evaluate_param = 205;
inline bool LayerParameter::has_detection_evaluate_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_detection_evaluate_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LayerParameter::clear_has_detection_evaluate_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LayerParameter::clear_detection_evaluate_param() {
  if (detection_evaluate_param_ != NULL) detection_evaluate_param_->::apollo::perception::inference::DetectionEvaluateParameter::Clear();
  clear_has_detection_evaluate_param();
}
inline const ::apollo::perception::inference::DetectionEvaluateParameter& LayerParameter::detection_evaluate_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.detection_evaluate_param)
  return detection_evaluate_param_ != NULL ? *detection_evaluate_param_ : *default_instance_->detection_evaluate_param_;
}
inline ::apollo::perception::inference::DetectionEvaluateParameter* LayerParameter::mutable_detection_evaluate_param() {
  set_has_detection_evaluate_param();
  if (detection_evaluate_param_ == NULL) detection_evaluate_param_ = new ::apollo::perception::inference::DetectionEvaluateParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.detection_evaluate_param)
  return detection_evaluate_param_;
}
inline ::apollo::perception::inference::DetectionEvaluateParameter* LayerParameter::release_detection_evaluate_param() {
  clear_has_detection_evaluate_param();
  ::apollo::perception::inference::DetectionEvaluateParameter* temp = detection_evaluate_param_;
  detection_evaluate_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_detection_evaluate_param(::apollo::perception::inference::DetectionEvaluateParameter* detection_evaluate_param) {
  delete detection_evaluate_param_;
  detection_evaluate_param_ = detection_evaluate_param;
  if (detection_evaluate_param) {
    set_has_detection_evaluate_param();
  } else {
    clear_has_detection_evaluate_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.detection_evaluate_param)
}

// optional .apollo.perception.inference.DetectionOutputParameter detection_output_param = 204;
inline bool LayerParameter::has_detection_output_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_detection_output_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LayerParameter::clear_has_detection_output_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LayerParameter::clear_detection_output_param() {
  if (detection_output_param_ != NULL) detection_output_param_->::apollo::perception::inference::DetectionOutputParameter::Clear();
  clear_has_detection_output_param();
}
inline const ::apollo::perception::inference::DetectionOutputParameter& LayerParameter::detection_output_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.detection_output_param)
  return detection_output_param_ != NULL ? *detection_output_param_ : *default_instance_->detection_output_param_;
}
inline ::apollo::perception::inference::DetectionOutputParameter* LayerParameter::mutable_detection_output_param() {
  set_has_detection_output_param();
  if (detection_output_param_ == NULL) detection_output_param_ = new ::apollo::perception::inference::DetectionOutputParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.detection_output_param)
  return detection_output_param_;
}
inline ::apollo::perception::inference::DetectionOutputParameter* LayerParameter::release_detection_output_param() {
  clear_has_detection_output_param();
  ::apollo::perception::inference::DetectionOutputParameter* temp = detection_output_param_;
  detection_output_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_detection_output_param(::apollo::perception::inference::DetectionOutputParameter* detection_output_param) {
  delete detection_output_param_;
  detection_output_param_ = detection_output_param;
  if (detection_output_param) {
    set_has_detection_output_param();
  } else {
    clear_has_detection_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.detection_output_param)
}

// optional .apollo.perception.inference.DropoutParameter dropout_param = 108;
inline bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::apollo::perception::inference::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::apollo::perception::inference::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_ : *default_instance_->dropout_param_;
}
inline ::apollo::perception::inference::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) dropout_param_ = new ::apollo::perception::inference::DropoutParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.dropout_param)
  return dropout_param_;
}
inline ::apollo::perception::inference::DropoutParameter* LayerParameter::release_dropout_param() {
  clear_has_dropout_param();
  ::apollo::perception::inference::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dropout_param(::apollo::perception::inference::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.dropout_param)
}

// optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 109;
inline bool LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::apollo::perception::inference::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
inline const ::apollo::perception::inference::DummyDataParameter& LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_ : *default_instance_->dummy_data_param_;
}
inline ::apollo::perception::inference::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) dummy_data_param_ = new ::apollo::perception::inference::DummyDataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
inline ::apollo::perception::inference::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  clear_has_dummy_data_param();
  ::apollo::perception::inference::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dummy_data_param(::apollo::perception::inference::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.dummy_data_param)
}

// optional .apollo.perception.inference.EltwiseParameter eltwise_param = 110;
inline bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::apollo::perception::inference::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::apollo::perception::inference::EltwiseParameter& LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_ : *default_instance_->eltwise_param_;
}
inline ::apollo::perception::inference::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) eltwise_param_ = new ::apollo::perception::inference::EltwiseParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline ::apollo::perception::inference::EltwiseParameter* LayerParameter::release_eltwise_param() {
  clear_has_eltwise_param();
  ::apollo::perception::inference::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_eltwise_param(::apollo::perception::inference::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.eltwise_param)
}

// optional .apollo.perception.inference.ELUParameter elu_param = 140;
inline bool LayerParameter::has_elu_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_elu_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LayerParameter::clear_has_elu_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LayerParameter::clear_elu_param() {
  if (elu_param_ != NULL) elu_param_->::apollo::perception::inference::ELUParameter::Clear();
  clear_has_elu_param();
}
inline const ::apollo::perception::inference::ELUParameter& LayerParameter::elu_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.elu_param)
  return elu_param_ != NULL ? *elu_param_ : *default_instance_->elu_param_;
}
inline ::apollo::perception::inference::ELUParameter* LayerParameter::mutable_elu_param() {
  set_has_elu_param();
  if (elu_param_ == NULL) elu_param_ = new ::apollo::perception::inference::ELUParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.elu_param)
  return elu_param_;
}
inline ::apollo::perception::inference::ELUParameter* LayerParameter::release_elu_param() {
  clear_has_elu_param();
  ::apollo::perception::inference::ELUParameter* temp = elu_param_;
  elu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_elu_param(::apollo::perception::inference::ELUParameter* elu_param) {
  delete elu_param_;
  elu_param_ = elu_param;
  if (elu_param) {
    set_has_elu_param();
  } else {
    clear_has_elu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.elu_param)
}

// optional .apollo.perception.inference.EmbedParameter embed_param = 137;
inline bool LayerParameter::has_embed_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_embed_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LayerParameter::clear_has_embed_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LayerParameter::clear_embed_param() {
  if (embed_param_ != NULL) embed_param_->::apollo::perception::inference::EmbedParameter::Clear();
  clear_has_embed_param();
}
inline const ::apollo::perception::inference::EmbedParameter& LayerParameter::embed_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.embed_param)
  return embed_param_ != NULL ? *embed_param_ : *default_instance_->embed_param_;
}
inline ::apollo::perception::inference::EmbedParameter* LayerParameter::mutable_embed_param() {
  set_has_embed_param();
  if (embed_param_ == NULL) embed_param_ = new ::apollo::perception::inference::EmbedParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.embed_param)
  return embed_param_;
}
inline ::apollo::perception::inference::EmbedParameter* LayerParameter::release_embed_param() {
  clear_has_embed_param();
  ::apollo::perception::inference::EmbedParameter* temp = embed_param_;
  embed_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_embed_param(::apollo::perception::inference::EmbedParameter* embed_param) {
  delete embed_param_;
  embed_param_ = embed_param;
  if (embed_param) {
    set_has_embed_param();
  } else {
    clear_has_embed_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.embed_param)
}

// optional .apollo.perception.inference.ExpParameter exp_param = 111;
inline bool LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::apollo::perception::inference::ExpParameter::Clear();
  clear_has_exp_param();
}
inline const ::apollo::perception::inference::ExpParameter& LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_ : *default_instance_->exp_param_;
}
inline ::apollo::perception::inference::ExpParameter* LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) exp_param_ = new ::apollo::perception::inference::ExpParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.exp_param)
  return exp_param_;
}
inline ::apollo::perception::inference::ExpParameter* LayerParameter::release_exp_param() {
  clear_has_exp_param();
  ::apollo::perception::inference::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_exp_param(::apollo::perception::inference::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.exp_param)
}

// optional .apollo.perception.inference.FlattenParameter flatten_param = 135;
inline bool LayerParameter::has_flatten_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_flatten_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void LayerParameter::clear_has_flatten_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void LayerParameter::clear_flatten_param() {
  if (flatten_param_ != NULL) flatten_param_->::apollo::perception::inference::FlattenParameter::Clear();
  clear_has_flatten_param();
}
inline const ::apollo::perception::inference::FlattenParameter& LayerParameter::flatten_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.flatten_param)
  return flatten_param_ != NULL ? *flatten_param_ : *default_instance_->flatten_param_;
}
inline ::apollo::perception::inference::FlattenParameter* LayerParameter::mutable_flatten_param() {
  set_has_flatten_param();
  if (flatten_param_ == NULL) flatten_param_ = new ::apollo::perception::inference::FlattenParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.flatten_param)
  return flatten_param_;
}
inline ::apollo::perception::inference::FlattenParameter* LayerParameter::release_flatten_param() {
  clear_has_flatten_param();
  ::apollo::perception::inference::FlattenParameter* temp = flatten_param_;
  flatten_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_flatten_param(::apollo::perception::inference::FlattenParameter* flatten_param) {
  delete flatten_param_;
  flatten_param_ = flatten_param;
  if (flatten_param) {
    set_has_flatten_param();
  } else {
    clear_has_flatten_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.flatten_param)
}

// optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 112;
inline bool LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::apollo::perception::inference::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
inline const ::apollo::perception::inference::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_ : *default_instance_->hdf5_data_param_;
}
inline ::apollo::perception::inference::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) hdf5_data_param_ = new ::apollo::perception::inference::HDF5DataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
inline ::apollo::perception::inference::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  clear_has_hdf5_data_param();
  ::apollo::perception::inference::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hdf5_data_param(::apollo::perception::inference::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.hdf5_data_param)
}

// optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 113;
inline bool LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::apollo::perception::inference::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::apollo::perception::inference::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
inline ::apollo::perception::inference::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) hdf5_output_param_ = new ::apollo::perception::inference::HDF5OutputParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::apollo::perception::inference::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  clear_has_hdf5_output_param();
  ::apollo::perception::inference::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hdf5_output_param(::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.hdf5_output_param)
}

// optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 114;
inline bool LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::apollo::perception::inference::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
inline const ::apollo::perception::inference::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_ : *default_instance_->hinge_loss_param_;
}
inline ::apollo::perception::inference::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) hinge_loss_param_ = new ::apollo::perception::inference::HingeLossParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
inline ::apollo::perception::inference::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  clear_has_hinge_loss_param();
  ::apollo::perception::inference::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hinge_loss_param(::apollo::perception::inference::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.hinge_loss_param)
}

// optional .apollo.perception.inference.ImageDataParameter image_data_param = 115;
inline bool LayerParameter::has_image_data_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_image_data_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void LayerParameter::clear_has_image_data_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::apollo::perception::inference::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
inline const ::apollo::perception::inference::ImageDataParameter& LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_ : *default_instance_->image_data_param_;
}
inline ::apollo::perception::inference::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) image_data_param_ = new ::apollo::perception::inference::ImageDataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.image_data_param)
  return image_data_param_;
}
inline ::apollo::perception::inference::ImageDataParameter* LayerParameter::release_image_data_param() {
  clear_has_image_data_param();
  ::apollo::perception::inference::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_image_data_param(::apollo::perception::inference::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.image_data_param)
}

// repeated .apollo.perception.inference.ImageDataParameter yolo_data_param = 1707111;
inline int LayerParameter::yolo_data_param_size() const {
  return yolo_data_param_.size();
}
inline void LayerParameter::clear_yolo_data_param() {
  yolo_data_param_.Clear();
}
inline const ::apollo::perception::inference::ImageDataParameter& LayerParameter::yolo_data_param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.yolo_data_param)
  return yolo_data_param_.Get(index);
}
inline ::apollo::perception::inference::ImageDataParameter* LayerParameter::mutable_yolo_data_param(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.yolo_data_param)
  return yolo_data_param_.Mutable(index);
}
inline ::apollo::perception::inference::ImageDataParameter* LayerParameter::add_yolo_data_param() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.yolo_data_param)
  return yolo_data_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::ImageDataParameter >&
LayerParameter::yolo_data_param() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.yolo_data_param)
  return yolo_data_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::ImageDataParameter >*
LayerParameter::mutable_yolo_data_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.yolo_data_param)
  return &yolo_data_param_;
}

// repeated float data_prob_param = 1707112;
inline int LayerParameter::data_prob_param_size() const {
  return data_prob_param_.size();
}
inline void LayerParameter::clear_data_prob_param() {
  data_prob_param_.Clear();
}
inline float LayerParameter::data_prob_param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.data_prob_param)
  return data_prob_param_.Get(index);
}
inline void LayerParameter::set_data_prob_param(int index, float value) {
  data_prob_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LayerParameter.data_prob_param)
}
inline void LayerParameter::add_data_prob_param(float value) {
  data_prob_param_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.LayerParameter.data_prob_param)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::data_prob_param() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.LayerParameter.data_prob_param)
  return data_prob_param_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_data_prob_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.LayerParameter.data_prob_param)
  return &data_prob_param_;
}

// optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 116;
inline bool LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::apollo::perception::inference::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
inline const ::apollo::perception::inference::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_ : *default_instance_->infogain_loss_param_;
}
inline ::apollo::perception::inference::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) infogain_loss_param_ = new ::apollo::perception::inference::InfogainLossParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
inline ::apollo::perception::inference::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  clear_has_infogain_loss_param();
  ::apollo::perception::inference::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_infogain_loss_param(::apollo::perception::inference::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.infogain_loss_param)
}

// optional .apollo.perception.inference.InnerProductParameter inner_product_param = 117;
inline bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_inner_product_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::apollo::perception::inference::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::apollo::perception::inference::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
inline ::apollo::perception::inference::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) inner_product_param_ = new ::apollo::perception::inference::InnerProductParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline ::apollo::perception::inference::InnerProductParameter* LayerParameter::release_inner_product_param() {
  clear_has_inner_product_param();
  ::apollo::perception::inference::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_inner_product_param(::apollo::perception::inference::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.inner_product_param)
}

// optional .apollo.perception.inference.InputParameter input_param = 143;
inline bool LayerParameter::has_input_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_input_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void LayerParameter::clear_has_input_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void LayerParameter::clear_input_param() {
  if (input_param_ != NULL) input_param_->::apollo::perception::inference::InputParameter::Clear();
  clear_has_input_param();
}
inline const ::apollo::perception::inference::InputParameter& LayerParameter::input_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.input_param)
  return input_param_ != NULL ? *input_param_ : *default_instance_->input_param_;
}
inline ::apollo::perception::inference::InputParameter* LayerParameter::mutable_input_param() {
  set_has_input_param();
  if (input_param_ == NULL) input_param_ = new ::apollo::perception::inference::InputParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.input_param)
  return input_param_;
}
inline ::apollo::perception::inference::InputParameter* LayerParameter::release_input_param() {
  clear_has_input_param();
  ::apollo::perception::inference::InputParameter* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_input_param(::apollo::perception::inference::InputParameter* input_param) {
  delete input_param_;
  input_param_ = input_param;
  if (input_param) {
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.input_param)
}

// optional .apollo.perception.inference.LogParameter log_param = 134;
inline bool LayerParameter::has_log_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_log_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void LayerParameter::clear_has_log_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void LayerParameter::clear_log_param() {
  if (log_param_ != NULL) log_param_->::apollo::perception::inference::LogParameter::Clear();
  clear_has_log_param();
}
inline const ::apollo::perception::inference::LogParameter& LayerParameter::log_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.log_param)
  return log_param_ != NULL ? *log_param_ : *default_instance_->log_param_;
}
inline ::apollo::perception::inference::LogParameter* LayerParameter::mutable_log_param() {
  set_has_log_param();
  if (log_param_ == NULL) log_param_ = new ::apollo::perception::inference::LogParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.log_param)
  return log_param_;
}
inline ::apollo::perception::inference::LogParameter* LayerParameter::release_log_param() {
  clear_has_log_param();
  ::apollo::perception::inference::LogParameter* temp = log_param_;
  log_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_log_param(::apollo::perception::inference::LogParameter* log_param) {
  delete log_param_;
  log_param_ = log_param;
  if (log_param) {
    set_has_log_param();
  } else {
    clear_has_log_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.log_param)
}

// optional .apollo.perception.inference.LRNParameter lrn_param = 118;
inline bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_lrn_param() {
  _has_bits_[1] |= 0x00000400u;
}
inline void LayerParameter::clear_has_lrn_param() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::apollo::perception::inference::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::apollo::perception::inference::LRNParameter& LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
inline ::apollo::perception::inference::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) lrn_param_ = new ::apollo::perception::inference::LRNParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.lrn_param)
  return lrn_param_;
}
inline ::apollo::perception::inference::LRNParameter* LayerParameter::release_lrn_param() {
  clear_has_lrn_param();
  ::apollo::perception::inference::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_lrn_param(::apollo::perception::inference::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.lrn_param)
}

// optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 119;
inline bool LayerParameter::has_memory_data_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_memory_data_param() {
  _has_bits_[1] |= 0x00000800u;
}
inline void LayerParameter::clear_has_memory_data_param() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::apollo::perception::inference::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
inline const ::apollo::perception::inference::MemoryDataParameter& LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_ : *default_instance_->memory_data_param_;
}
inline ::apollo::perception::inference::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) memory_data_param_ = new ::apollo::perception::inference::MemoryDataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline ::apollo::perception::inference::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  clear_has_memory_data_param();
  ::apollo::perception::inference::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_memory_data_param(::apollo::perception::inference::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.memory_data_param)
}

// optional .apollo.perception.inference.MultiBoxLossParameter multibox_loss_param = 201;
inline bool LayerParameter::has_multibox_loss_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_multibox_loss_param() {
  _has_bits_[1] |= 0x00001000u;
}
inline void LayerParameter::clear_has_multibox_loss_param() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void LayerParameter::clear_multibox_loss_param() {
  if (multibox_loss_param_ != NULL) multibox_loss_param_->::apollo::perception::inference::MultiBoxLossParameter::Clear();
  clear_has_multibox_loss_param();
}
inline const ::apollo::perception::inference::MultiBoxLossParameter& LayerParameter::multibox_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.multibox_loss_param)
  return multibox_loss_param_ != NULL ? *multibox_loss_param_ : *default_instance_->multibox_loss_param_;
}
inline ::apollo::perception::inference::MultiBoxLossParameter* LayerParameter::mutable_multibox_loss_param() {
  set_has_multibox_loss_param();
  if (multibox_loss_param_ == NULL) multibox_loss_param_ = new ::apollo::perception::inference::MultiBoxLossParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.multibox_loss_param)
  return multibox_loss_param_;
}
inline ::apollo::perception::inference::MultiBoxLossParameter* LayerParameter::release_multibox_loss_param() {
  clear_has_multibox_loss_param();
  ::apollo::perception::inference::MultiBoxLossParameter* temp = multibox_loss_param_;
  multibox_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_multibox_loss_param(::apollo::perception::inference::MultiBoxLossParameter* multibox_loss_param) {
  delete multibox_loss_param_;
  multibox_loss_param_ = multibox_loss_param;
  if (multibox_loss_param) {
    set_has_multibox_loss_param();
  } else {
    clear_has_multibox_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.multibox_loss_param)
}

// optional .apollo.perception.inference.RegionParameter region_param = 300;
inline bool LayerParameter::has_region_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_region_param() {
  _has_bits_[1] |= 0x00002000u;
}
inline void LayerParameter::clear_has_region_param() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void LayerParameter::clear_region_param() {
  if (region_param_ != NULL) region_param_->::apollo::perception::inference::RegionParameter::Clear();
  clear_has_region_param();
}
inline const ::apollo::perception::inference::RegionParameter& LayerParameter::region_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.region_param)
  return region_param_ != NULL ? *region_param_ : *default_instance_->region_param_;
}
inline ::apollo::perception::inference::RegionParameter* LayerParameter::mutable_region_param() {
  set_has_region_param();
  if (region_param_ == NULL) region_param_ = new ::apollo::perception::inference::RegionParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.region_param)
  return region_param_;
}
inline ::apollo::perception::inference::RegionParameter* LayerParameter::release_region_param() {
  clear_has_region_param();
  ::apollo::perception::inference::RegionParameter* temp = region_param_;
  region_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_region_param(::apollo::perception::inference::RegionParameter* region_param) {
  delete region_param_;
  region_param_ = region_param;
  if (region_param) {
    set_has_region_param();
  } else {
    clear_has_region_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.region_param)
}

// optional .apollo.perception.inference.RegionOutputParameter region_output_param = 310;
inline bool LayerParameter::has_region_output_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_region_output_param() {
  _has_bits_[1] |= 0x00004000u;
}
inline void LayerParameter::clear_has_region_output_param() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void LayerParameter::clear_region_output_param() {
  if (region_output_param_ != NULL) region_output_param_->::apollo::perception::inference::RegionOutputParameter::Clear();
  clear_has_region_output_param();
}
inline const ::apollo::perception::inference::RegionOutputParameter& LayerParameter::region_output_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.region_output_param)
  return region_output_param_ != NULL ? *region_output_param_ : *default_instance_->region_output_param_;
}
inline ::apollo::perception::inference::RegionOutputParameter* LayerParameter::mutable_region_output_param() {
  set_has_region_output_param();
  if (region_output_param_ == NULL) region_output_param_ = new ::apollo::perception::inference::RegionOutputParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.region_output_param)
  return region_output_param_;
}
inline ::apollo::perception::inference::RegionOutputParameter* LayerParameter::release_region_output_param() {
  clear_has_region_output_param();
  ::apollo::perception::inference::RegionOutputParameter* temp = region_output_param_;
  region_output_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_region_output_param(::apollo::perception::inference::RegionOutputParameter* region_output_param) {
  delete region_output_param_;
  region_output_param_ = region_output_param;
  if (region_output_param) {
    set_has_region_output_param();
  } else {
    clear_has_region_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.region_output_param)
}

// optional .apollo.perception.inference.RegionProposalParameter region_proposal_param = 320;
inline bool LayerParameter::has_region_proposal_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_region_proposal_param() {
  _has_bits_[1] |= 0x00008000u;
}
inline void LayerParameter::clear_has_region_proposal_param() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void LayerParameter::clear_region_proposal_param() {
  if (region_proposal_param_ != NULL) region_proposal_param_->::apollo::perception::inference::RegionProposalParameter::Clear();
  clear_has_region_proposal_param();
}
inline const ::apollo::perception::inference::RegionProposalParameter& LayerParameter::region_proposal_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.region_proposal_param)
  return region_proposal_param_ != NULL ? *region_proposal_param_ : *default_instance_->region_proposal_param_;
}
inline ::apollo::perception::inference::RegionProposalParameter* LayerParameter::mutable_region_proposal_param() {
  set_has_region_proposal_param();
  if (region_proposal_param_ == NULL) region_proposal_param_ = new ::apollo::perception::inference::RegionProposalParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.region_proposal_param)
  return region_proposal_param_;
}
inline ::apollo::perception::inference::RegionProposalParameter* LayerParameter::release_region_proposal_param() {
  clear_has_region_proposal_param();
  ::apollo::perception::inference::RegionProposalParameter* temp = region_proposal_param_;
  region_proposal_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_region_proposal_param(::apollo::perception::inference::RegionProposalParameter* region_proposal_param) {
  delete region_proposal_param_;
  region_proposal_param_ = region_proposal_param;
  if (region_proposal_param) {
    set_has_region_proposal_param();
  } else {
    clear_has_region_proposal_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.region_proposal_param)
}

// optional .apollo.perception.inference.YoloTargetParameter yolo_target_param = 204801;
inline bool LayerParameter::has_yolo_target_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_yolo_target_param() {
  _has_bits_[1] |= 0x00010000u;
}
inline void LayerParameter::clear_has_yolo_target_param() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void LayerParameter::clear_yolo_target_param() {
  if (yolo_target_param_ != NULL) yolo_target_param_->::apollo::perception::inference::YoloTargetParameter::Clear();
  clear_has_yolo_target_param();
}
inline const ::apollo::perception::inference::YoloTargetParameter& LayerParameter::yolo_target_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.yolo_target_param)
  return yolo_target_param_ != NULL ? *yolo_target_param_ : *default_instance_->yolo_target_param_;
}
inline ::apollo::perception::inference::YoloTargetParameter* LayerParameter::mutable_yolo_target_param() {
  set_has_yolo_target_param();
  if (yolo_target_param_ == NULL) yolo_target_param_ = new ::apollo::perception::inference::YoloTargetParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.yolo_target_param)
  return yolo_target_param_;
}
inline ::apollo::perception::inference::YoloTargetParameter* LayerParameter::release_yolo_target_param() {
  clear_has_yolo_target_param();
  ::apollo::perception::inference::YoloTargetParameter* temp = yolo_target_param_;
  yolo_target_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_yolo_target_param(::apollo::perception::inference::YoloTargetParameter* yolo_target_param) {
  delete yolo_target_param_;
  yolo_target_param_ = yolo_target_param;
  if (yolo_target_param) {
    set_has_yolo_target_param();
  } else {
    clear_has_yolo_target_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.yolo_target_param)
}

// optional .apollo.perception.inference.YoloAnchorsParameter yolo_anchors_param = 204802;
inline bool LayerParameter::has_yolo_anchors_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_yolo_anchors_param() {
  _has_bits_[1] |= 0x00020000u;
}
inline void LayerParameter::clear_has_yolo_anchors_param() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void LayerParameter::clear_yolo_anchors_param() {
  if (yolo_anchors_param_ != NULL) yolo_anchors_param_->::apollo::perception::inference::YoloAnchorsParameter::Clear();
  clear_has_yolo_anchors_param();
}
inline const ::apollo::perception::inference::YoloAnchorsParameter& LayerParameter::yolo_anchors_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.yolo_anchors_param)
  return yolo_anchors_param_ != NULL ? *yolo_anchors_param_ : *default_instance_->yolo_anchors_param_;
}
inline ::apollo::perception::inference::YoloAnchorsParameter* LayerParameter::mutable_yolo_anchors_param() {
  set_has_yolo_anchors_param();
  if (yolo_anchors_param_ == NULL) yolo_anchors_param_ = new ::apollo::perception::inference::YoloAnchorsParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.yolo_anchors_param)
  return yolo_anchors_param_;
}
inline ::apollo::perception::inference::YoloAnchorsParameter* LayerParameter::release_yolo_anchors_param() {
  clear_has_yolo_anchors_param();
  ::apollo::perception::inference::YoloAnchorsParameter* temp = yolo_anchors_param_;
  yolo_anchors_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_yolo_anchors_param(::apollo::perception::inference::YoloAnchorsParameter* yolo_anchors_param) {
  delete yolo_anchors_param_;
  yolo_anchors_param_ = yolo_anchors_param;
  if (yolo_anchors_param) {
    set_has_yolo_anchors_param();
  } else {
    clear_has_yolo_anchors_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.yolo_anchors_param)
}

// optional .apollo.perception.inference.YoloLossParameter yolo_loss_param = 204803;
inline bool LayerParameter::has_yolo_loss_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_yolo_loss_param() {
  _has_bits_[1] |= 0x00040000u;
}
inline void LayerParameter::clear_has_yolo_loss_param() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void LayerParameter::clear_yolo_loss_param() {
  if (yolo_loss_param_ != NULL) yolo_loss_param_->::apollo::perception::inference::YoloLossParameter::Clear();
  clear_has_yolo_loss_param();
}
inline const ::apollo::perception::inference::YoloLossParameter& LayerParameter::yolo_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.yolo_loss_param)
  return yolo_loss_param_ != NULL ? *yolo_loss_param_ : *default_instance_->yolo_loss_param_;
}
inline ::apollo::perception::inference::YoloLossParameter* LayerParameter::mutable_yolo_loss_param() {
  set_has_yolo_loss_param();
  if (yolo_loss_param_ == NULL) yolo_loss_param_ = new ::apollo::perception::inference::YoloLossParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.yolo_loss_param)
  return yolo_loss_param_;
}
inline ::apollo::perception::inference::YoloLossParameter* LayerParameter::release_yolo_loss_param() {
  clear_has_yolo_loss_param();
  ::apollo::perception::inference::YoloLossParameter* temp = yolo_loss_param_;
  yolo_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_yolo_loss_param(::apollo::perception::inference::YoloLossParameter* yolo_loss_param) {
  delete yolo_loss_param_;
  yolo_loss_param_ = yolo_loss_param;
  if (yolo_loss_param) {
    set_has_yolo_loss_param();
  } else {
    clear_has_yolo_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.yolo_loss_param)
}

// optional .apollo.perception.inference.YoloDumpParameter yolo_dump_param = 204804;
inline bool LayerParameter::has_yolo_dump_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_yolo_dump_param() {
  _has_bits_[1] |= 0x00080000u;
}
inline void LayerParameter::clear_has_yolo_dump_param() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void LayerParameter::clear_yolo_dump_param() {
  if (yolo_dump_param_ != NULL) yolo_dump_param_->::apollo::perception::inference::YoloDumpParameter::Clear();
  clear_has_yolo_dump_param();
}
inline const ::apollo::perception::inference::YoloDumpParameter& LayerParameter::yolo_dump_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.yolo_dump_param)
  return yolo_dump_param_ != NULL ? *yolo_dump_param_ : *default_instance_->yolo_dump_param_;
}
inline ::apollo::perception::inference::YoloDumpParameter* LayerParameter::mutable_yolo_dump_param() {
  set_has_yolo_dump_param();
  if (yolo_dump_param_ == NULL) yolo_dump_param_ = new ::apollo::perception::inference::YoloDumpParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.yolo_dump_param)
  return yolo_dump_param_;
}
inline ::apollo::perception::inference::YoloDumpParameter* LayerParameter::release_yolo_dump_param() {
  clear_has_yolo_dump_param();
  ::apollo::perception::inference::YoloDumpParameter* temp = yolo_dump_param_;
  yolo_dump_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_yolo_dump_param(::apollo::perception::inference::YoloDumpParameter* yolo_dump_param) {
  delete yolo_dump_param_;
  yolo_dump_param_ = yolo_dump_param;
  if (yolo_dump_param) {
    set_has_yolo_dump_param();
  } else {
    clear_has_yolo_dump_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.yolo_dump_param)
}

// optional .apollo.perception.inference.PaddingParameter padding_param = 1001;
inline bool LayerParameter::has_padding_param() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_padding_param() {
  _has_bits_[1] |= 0x00100000u;
}
inline void LayerParameter::clear_has_padding_param() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void LayerParameter::clear_padding_param() {
  if (padding_param_ != NULL) padding_param_->::apollo::perception::inference::PaddingParameter::Clear();
  clear_has_padding_param();
}
inline const ::apollo::perception::inference::PaddingParameter& LayerParameter::padding_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.padding_param)
  return padding_param_ != NULL ? *padding_param_ : *default_instance_->padding_param_;
}
inline ::apollo::perception::inference::PaddingParameter* LayerParameter::mutable_padding_param() {
  set_has_padding_param();
  if (padding_param_ == NULL) padding_param_ = new ::apollo::perception::inference::PaddingParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.padding_param)
  return padding_param_;
}
inline ::apollo::perception::inference::PaddingParameter* LayerParameter::release_padding_param() {
  clear_has_padding_param();
  ::apollo::perception::inference::PaddingParameter* temp = padding_param_;
  padding_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_padding_param(::apollo::perception::inference::PaddingParameter* padding_param) {
  delete padding_param_;
  padding_param_ = padding_param;
  if (padding_param) {
    set_has_padding_param();
  } else {
    clear_has_padding_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.padding_param)
}

// optional .apollo.perception.inference.ReorgParameter reorg_param = 301;
inline bool LayerParameter::has_reorg_param() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_reorg_param() {
  _has_bits_[1] |= 0x00200000u;
}
inline void LayerParameter::clear_has_reorg_param() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void LayerParameter::clear_reorg_param() {
  if (reorg_param_ != NULL) reorg_param_->::apollo::perception::inference::ReorgParameter::Clear();
  clear_has_reorg_param();
}
inline const ::apollo::perception::inference::ReorgParameter& LayerParameter::reorg_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.reorg_param)
  return reorg_param_ != NULL ? *reorg_param_ : *default_instance_->reorg_param_;
}
inline ::apollo::perception::inference::ReorgParameter* LayerParameter::mutable_reorg_param() {
  set_has_reorg_param();
  if (reorg_param_ == NULL) reorg_param_ = new ::apollo::perception::inference::ReorgParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.reorg_param)
  return reorg_param_;
}
inline ::apollo::perception::inference::ReorgParameter* LayerParameter::release_reorg_param() {
  clear_has_reorg_param();
  ::apollo::perception::inference::ReorgParameter* temp = reorg_param_;
  reorg_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reorg_param(::apollo::perception::inference::ReorgParameter* reorg_param) {
  delete reorg_param_;
  reorg_param_ = reorg_param;
  if (reorg_param) {
    set_has_reorg_param();
  } else {
    clear_has_reorg_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.reorg_param)
}

// optional .apollo.perception.inference.MVNParameter mvn_param = 120;
inline bool LayerParameter::has_mvn_param() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_mvn_param() {
  _has_bits_[1] |= 0x00400000u;
}
inline void LayerParameter::clear_has_mvn_param() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::apollo::perception::inference::MVNParameter::Clear();
  clear_has_mvn_param();
}
inline const ::apollo::perception::inference::MVNParameter& LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_ : *default_instance_->mvn_param_;
}
inline ::apollo::perception::inference::MVNParameter* LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) mvn_param_ = new ::apollo::perception::inference::MVNParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.mvn_param)
  return mvn_param_;
}
inline ::apollo::perception::inference::MVNParameter* LayerParameter::release_mvn_param() {
  clear_has_mvn_param();
  ::apollo::perception::inference::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_mvn_param(::apollo::perception::inference::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.mvn_param)
}

// optional .apollo.perception.inference.NormalizeParameter norm_param = 206;
inline bool LayerParameter::has_norm_param() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_norm_param() {
  _has_bits_[1] |= 0x00800000u;
}
inline void LayerParameter::clear_has_norm_param() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void LayerParameter::clear_norm_param() {
  if (norm_param_ != NULL) norm_param_->::apollo::perception::inference::NormalizeParameter::Clear();
  clear_has_norm_param();
}
inline const ::apollo::perception::inference::NormalizeParameter& LayerParameter::norm_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.norm_param)
  return norm_param_ != NULL ? *norm_param_ : *default_instance_->norm_param_;
}
inline ::apollo::perception::inference::NormalizeParameter* LayerParameter::mutable_norm_param() {
  set_has_norm_param();
  if (norm_param_ == NULL) norm_param_ = new ::apollo::perception::inference::NormalizeParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.norm_param)
  return norm_param_;
}
inline ::apollo::perception::inference::NormalizeParameter* LayerParameter::release_norm_param() {
  clear_has_norm_param();
  ::apollo::perception::inference::NormalizeParameter* temp = norm_param_;
  norm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_norm_param(::apollo::perception::inference::NormalizeParameter* norm_param) {
  delete norm_param_;
  norm_param_ = norm_param;
  if (norm_param) {
    set_has_norm_param();
  } else {
    clear_has_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.norm_param)
}

// optional .apollo.perception.inference.ParameterParameter parameter_param = 145;
inline bool LayerParameter::has_parameter_param() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_parameter_param() {
  _has_bits_[1] |= 0x01000000u;
}
inline void LayerParameter::clear_has_parameter_param() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void LayerParameter::clear_parameter_param() {
  if (parameter_param_ != NULL) parameter_param_->::apollo::perception::inference::ParameterParameter::Clear();
  clear_has_parameter_param();
}
inline const ::apollo::perception::inference::ParameterParameter& LayerParameter::parameter_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.parameter_param)
  return parameter_param_ != NULL ? *parameter_param_ : *default_instance_->parameter_param_;
}
inline ::apollo::perception::inference::ParameterParameter* LayerParameter::mutable_parameter_param() {
  set_has_parameter_param();
  if (parameter_param_ == NULL) parameter_param_ = new ::apollo::perception::inference::ParameterParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.parameter_param)
  return parameter_param_;
}
inline ::apollo::perception::inference::ParameterParameter* LayerParameter::release_parameter_param() {
  clear_has_parameter_param();
  ::apollo::perception::inference::ParameterParameter* temp = parameter_param_;
  parameter_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_parameter_param(::apollo::perception::inference::ParameterParameter* parameter_param) {
  delete parameter_param_;
  parameter_param_ = parameter_param;
  if (parameter_param) {
    set_has_parameter_param();
  } else {
    clear_has_parameter_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.parameter_param)
}

// optional .apollo.perception.inference.PermuteParameter permute_param = 202;
inline bool LayerParameter::has_permute_param() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_permute_param() {
  _has_bits_[1] |= 0x02000000u;
}
inline void LayerParameter::clear_has_permute_param() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void LayerParameter::clear_permute_param() {
  if (permute_param_ != NULL) permute_param_->::apollo::perception::inference::PermuteParameter::Clear();
  clear_has_permute_param();
}
inline const ::apollo::perception::inference::PermuteParameter& LayerParameter::permute_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.permute_param)
  return permute_param_ != NULL ? *permute_param_ : *default_instance_->permute_param_;
}
inline ::apollo::perception::inference::PermuteParameter* LayerParameter::mutable_permute_param() {
  set_has_permute_param();
  if (permute_param_ == NULL) permute_param_ = new ::apollo::perception::inference::PermuteParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.permute_param)
  return permute_param_;
}
inline ::apollo::perception::inference::PermuteParameter* LayerParameter::release_permute_param() {
  clear_has_permute_param();
  ::apollo::perception::inference::PermuteParameter* temp = permute_param_;
  permute_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_permute_param(::apollo::perception::inference::PermuteParameter* permute_param) {
  delete permute_param_;
  permute_param_ = permute_param;
  if (permute_param) {
    set_has_permute_param();
  } else {
    clear_has_permute_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.permute_param)
}

// optional .apollo.perception.inference.PoolingParameter pooling_param = 121;
inline bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_pooling_param() {
  _has_bits_[1] |= 0x04000000u;
}
inline void LayerParameter::clear_has_pooling_param() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::apollo::perception::inference::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::apollo::perception::inference::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::apollo::perception::inference::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) pooling_param_ = new ::apollo::perception::inference::PoolingParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::apollo::perception::inference::PoolingParameter* LayerParameter::release_pooling_param() {
  clear_has_pooling_param();
  ::apollo::perception::inference::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pooling_param(::apollo::perception::inference::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.pooling_param)
}

// optional .apollo.perception.inference.PowerParameter power_param = 122;
inline bool LayerParameter::has_power_param() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_power_param() {
  _has_bits_[1] |= 0x08000000u;
}
inline void LayerParameter::clear_has_power_param() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::apollo::perception::inference::PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::apollo::perception::inference::PowerParameter& LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_ : *default_instance_->power_param_;
}
inline ::apollo::perception::inference::PowerParameter* LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) power_param_ = new ::apollo::perception::inference::PowerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.power_param)
  return power_param_;
}
inline ::apollo::perception::inference::PowerParameter* LayerParameter::release_power_param() {
  clear_has_power_param();
  ::apollo::perception::inference::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_power_param(::apollo::perception::inference::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.power_param)
}

// optional .apollo.perception.inference.PReLUParameter prelu_param = 131;
inline bool LayerParameter::has_prelu_param() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_prelu_param() {
  _has_bits_[1] |= 0x10000000u;
}
inline void LayerParameter::clear_has_prelu_param() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::apollo::perception::inference::PReLUParameter::Clear();
  clear_has_prelu_param();
}
inline const ::apollo::perception::inference::PReLUParameter& LayerParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.prelu_param)
  return prelu_param_ != NULL ? *prelu_param_ : *default_instance_->prelu_param_;
}
inline ::apollo::perception::inference::PReLUParameter* LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) prelu_param_ = new ::apollo::perception::inference::PReLUParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.prelu_param)
  return prelu_param_;
}
inline ::apollo::perception::inference::PReLUParameter* LayerParameter::release_prelu_param() {
  clear_has_prelu_param();
  ::apollo::perception::inference::PReLUParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_prelu_param(::apollo::perception::inference::PReLUParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.prelu_param)
}

// optional .apollo.perception.inference.PriorBoxParameter prior_box_param = 203;
inline bool LayerParameter::has_prior_box_param() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_prior_box_param() {
  _has_bits_[1] |= 0x20000000u;
}
inline void LayerParameter::clear_has_prior_box_param() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void LayerParameter::clear_prior_box_param() {
  if (prior_box_param_ != NULL) prior_box_param_->::apollo::perception::inference::PriorBoxParameter::Clear();
  clear_has_prior_box_param();
}
inline const ::apollo::perception::inference::PriorBoxParameter& LayerParameter::prior_box_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.prior_box_param)
  return prior_box_param_ != NULL ? *prior_box_param_ : *default_instance_->prior_box_param_;
}
inline ::apollo::perception::inference::PriorBoxParameter* LayerParameter::mutable_prior_box_param() {
  set_has_prior_box_param();
  if (prior_box_param_ == NULL) prior_box_param_ = new ::apollo::perception::inference::PriorBoxParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.prior_box_param)
  return prior_box_param_;
}
inline ::apollo::perception::inference::PriorBoxParameter* LayerParameter::release_prior_box_param() {
  clear_has_prior_box_param();
  ::apollo::perception::inference::PriorBoxParameter* temp = prior_box_param_;
  prior_box_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_prior_box_param(::apollo::perception::inference::PriorBoxParameter* prior_box_param) {
  delete prior_box_param_;
  prior_box_param_ = prior_box_param;
  if (prior_box_param) {
    set_has_prior_box_param();
  } else {
    clear_has_prior_box_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.prior_box_param)
}

// optional .apollo.perception.inference.PythonParameter python_param = 130;
inline bool LayerParameter::has_python_param() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_python_param() {
  _has_bits_[1] |= 0x40000000u;
}
inline void LayerParameter::clear_has_python_param() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void LayerParameter::clear_python_param() {
  if (python_param_ != NULL) python_param_->::apollo::perception::inference::PythonParameter::Clear();
  clear_has_python_param();
}
inline const ::apollo::perception::inference::PythonParameter& LayerParameter::python_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.python_param)
  return python_param_ != NULL ? *python_param_ : *default_instance_->python_param_;
}
inline ::apollo::perception::inference::PythonParameter* LayerParameter::mutable_python_param() {
  set_has_python_param();
  if (python_param_ == NULL) python_param_ = new ::apollo::perception::inference::PythonParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.python_param)
  return python_param_;
}
inline ::apollo::perception::inference::PythonParameter* LayerParameter::release_python_param() {
  clear_has_python_param();
  ::apollo::perception::inference::PythonParameter* temp = python_param_;
  python_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_python_param(::apollo::perception::inference::PythonParameter* python_param) {
  delete python_param_;
  python_param_ = python_param;
  if (python_param) {
    set_has_python_param();
  } else {
    clear_has_python_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.python_param)
}

// optional .apollo.perception.inference.RecurrentParameter recurrent_param = 146;
inline bool LayerParameter::has_recurrent_param() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_recurrent_param() {
  _has_bits_[1] |= 0x80000000u;
}
inline void LayerParameter::clear_has_recurrent_param() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void LayerParameter::clear_recurrent_param() {
  if (recurrent_param_ != NULL) recurrent_param_->::apollo::perception::inference::RecurrentParameter::Clear();
  clear_has_recurrent_param();
}
inline const ::apollo::perception::inference::RecurrentParameter& LayerParameter::recurrent_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.recurrent_param)
  return recurrent_param_ != NULL ? *recurrent_param_ : *default_instance_->recurrent_param_;
}
inline ::apollo::perception::inference::RecurrentParameter* LayerParameter::mutable_recurrent_param() {
  set_has_recurrent_param();
  if (recurrent_param_ == NULL) recurrent_param_ = new ::apollo::perception::inference::RecurrentParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.recurrent_param)
  return recurrent_param_;
}
inline ::apollo::perception::inference::RecurrentParameter* LayerParameter::release_recurrent_param() {
  clear_has_recurrent_param();
  ::apollo::perception::inference::RecurrentParameter* temp = recurrent_param_;
  recurrent_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_recurrent_param(::apollo::perception::inference::RecurrentParameter* recurrent_param) {
  delete recurrent_param_;
  recurrent_param_ = recurrent_param;
  if (recurrent_param) {
    set_has_recurrent_param();
  } else {
    clear_has_recurrent_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.recurrent_param)
}

// optional .apollo.perception.inference.ReductionParameter reduction_param = 136;
inline bool LayerParameter::has_reduction_param() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_reduction_param() {
  _has_bits_[2] |= 0x00000001u;
}
inline void LayerParameter::clear_has_reduction_param() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void LayerParameter::clear_reduction_param() {
  if (reduction_param_ != NULL) reduction_param_->::apollo::perception::inference::ReductionParameter::Clear();
  clear_has_reduction_param();
}
inline const ::apollo::perception::inference::ReductionParameter& LayerParameter::reduction_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.reduction_param)
  return reduction_param_ != NULL ? *reduction_param_ : *default_instance_->reduction_param_;
}
inline ::apollo::perception::inference::ReductionParameter* LayerParameter::mutable_reduction_param() {
  set_has_reduction_param();
  if (reduction_param_ == NULL) reduction_param_ = new ::apollo::perception::inference::ReductionParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.reduction_param)
  return reduction_param_;
}
inline ::apollo::perception::inference::ReductionParameter* LayerParameter::release_reduction_param() {
  clear_has_reduction_param();
  ::apollo::perception::inference::ReductionParameter* temp = reduction_param_;
  reduction_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reduction_param(::apollo::perception::inference::ReductionParameter* reduction_param) {
  delete reduction_param_;
  reduction_param_ = reduction_param;
  if (reduction_param) {
    set_has_reduction_param();
  } else {
    clear_has_reduction_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.reduction_param)
}

// optional .apollo.perception.inference.ReLUParameter relu_param = 123;
inline bool LayerParameter::has_relu_param() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_relu_param() {
  _has_bits_[2] |= 0x00000002u;
}
inline void LayerParameter::clear_has_relu_param() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::apollo::perception::inference::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::apollo::perception::inference::ReLUParameter& LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::apollo::perception::inference::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) relu_param_ = new ::apollo::perception::inference::ReLUParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.relu_param)
  return relu_param_;
}
inline ::apollo::perception::inference::ReLUParameter* LayerParameter::release_relu_param() {
  clear_has_relu_param();
  ::apollo::perception::inference::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_relu_param(::apollo::perception::inference::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.relu_param)
}

// optional .apollo.perception.inference.ReshapeParameter reshape_param = 133;
inline bool LayerParameter::has_reshape_param() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_reshape_param() {
  _has_bits_[2] |= 0x00000004u;
}
inline void LayerParameter::clear_has_reshape_param() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void LayerParameter::clear_reshape_param() {
  if (reshape_param_ != NULL) reshape_param_->::apollo::perception::inference::ReshapeParameter::Clear();
  clear_has_reshape_param();
}
inline const ::apollo::perception::inference::ReshapeParameter& LayerParameter::reshape_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.reshape_param)
  return reshape_param_ != NULL ? *reshape_param_ : *default_instance_->reshape_param_;
}
inline ::apollo::perception::inference::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  set_has_reshape_param();
  if (reshape_param_ == NULL) reshape_param_ = new ::apollo::perception::inference::ReshapeParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.reshape_param)
  return reshape_param_;
}
inline ::apollo::perception::inference::ReshapeParameter* LayerParameter::release_reshape_param() {
  clear_has_reshape_param();
  ::apollo::perception::inference::ReshapeParameter* temp = reshape_param_;
  reshape_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reshape_param(::apollo::perception::inference::ReshapeParameter* reshape_param) {
  delete reshape_param_;
  reshape_param_ = reshape_param;
  if (reshape_param) {
    set_has_reshape_param();
  } else {
    clear_has_reshape_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.reshape_param)
}

// optional .apollo.perception.inference.ROIPoolingParameter roi_pooling_param = 8266711;
inline bool LayerParameter::has_roi_pooling_param() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_roi_pooling_param() {
  _has_bits_[2] |= 0x00000008u;
}
inline void LayerParameter::clear_has_roi_pooling_param() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void LayerParameter::clear_roi_pooling_param() {
  if (roi_pooling_param_ != NULL) roi_pooling_param_->::apollo::perception::inference::ROIPoolingParameter::Clear();
  clear_has_roi_pooling_param();
}
inline const ::apollo::perception::inference::ROIPoolingParameter& LayerParameter::roi_pooling_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.roi_pooling_param)
  return roi_pooling_param_ != NULL ? *roi_pooling_param_ : *default_instance_->roi_pooling_param_;
}
inline ::apollo::perception::inference::ROIPoolingParameter* LayerParameter::mutable_roi_pooling_param() {
  set_has_roi_pooling_param();
  if (roi_pooling_param_ == NULL) roi_pooling_param_ = new ::apollo::perception::inference::ROIPoolingParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.roi_pooling_param)
  return roi_pooling_param_;
}
inline ::apollo::perception::inference::ROIPoolingParameter* LayerParameter::release_roi_pooling_param() {
  clear_has_roi_pooling_param();
  ::apollo::perception::inference::ROIPoolingParameter* temp = roi_pooling_param_;
  roi_pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_roi_pooling_param(::apollo::perception::inference::ROIPoolingParameter* roi_pooling_param) {
  delete roi_pooling_param_;
  roi_pooling_param_ = roi_pooling_param;
  if (roi_pooling_param) {
    set_has_roi_pooling_param();
  } else {
    clear_has_roi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.roi_pooling_param)
}

// optional .apollo.perception.inference.ScaleParameter scale_param = 142;
inline bool LayerParameter::has_scale_param() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_scale_param() {
  _has_bits_[2] |= 0x00000010u;
}
inline void LayerParameter::clear_has_scale_param() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void LayerParameter::clear_scale_param() {
  if (scale_param_ != NULL) scale_param_->::apollo::perception::inference::ScaleParameter::Clear();
  clear_has_scale_param();
}
inline const ::apollo::perception::inference::ScaleParameter& LayerParameter::scale_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.scale_param)
  return scale_param_ != NULL ? *scale_param_ : *default_instance_->scale_param_;
}
inline ::apollo::perception::inference::ScaleParameter* LayerParameter::mutable_scale_param() {
  set_has_scale_param();
  if (scale_param_ == NULL) scale_param_ = new ::apollo::perception::inference::ScaleParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.scale_param)
  return scale_param_;
}
inline ::apollo::perception::inference::ScaleParameter* LayerParameter::release_scale_param() {
  clear_has_scale_param();
  ::apollo::perception::inference::ScaleParameter* temp = scale_param_;
  scale_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_scale_param(::apollo::perception::inference::ScaleParameter* scale_param) {
  delete scale_param_;
  scale_param_ = scale_param;
  if (scale_param) {
    set_has_scale_param();
  } else {
    clear_has_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.scale_param)
}

// optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 124;
inline bool LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_sigmoid_param() {
  _has_bits_[2] |= 0x00000020u;
}
inline void LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::apollo::perception::inference::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::apollo::perception::inference::SigmoidParameter& LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_ : *default_instance_->sigmoid_param_;
}
inline ::apollo::perception::inference::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) sigmoid_param_ = new ::apollo::perception::inference::SigmoidParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline ::apollo::perception::inference::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  clear_has_sigmoid_param();
  ::apollo::perception::inference::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_sigmoid_param(::apollo::perception::inference::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.sigmoid_param)
}

// optional .apollo.perception.inference.SoftmaxParameter softmax_param = 125;
inline bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_softmax_param() {
  _has_bits_[2] |= 0x00000040u;
}
inline void LayerParameter::clear_has_softmax_param() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::apollo::perception::inference::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::apollo::perception::inference::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
inline ::apollo::perception::inference::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) softmax_param_ = new ::apollo::perception::inference::SoftmaxParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::apollo::perception::inference::SoftmaxParameter* LayerParameter::release_softmax_param() {
  clear_has_softmax_param();
  ::apollo::perception::inference::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_softmax_param(::apollo::perception::inference::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.softmax_param)
}

// optional .apollo.perception.inference.SPPParameter spp_param = 132;
inline bool LayerParameter::has_spp_param() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_spp_param() {
  _has_bits_[2] |= 0x00000080u;
}
inline void LayerParameter::clear_has_spp_param() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void LayerParameter::clear_spp_param() {
  if (spp_param_ != NULL) spp_param_->::apollo::perception::inference::SPPParameter::Clear();
  clear_has_spp_param();
}
inline const ::apollo::perception::inference::SPPParameter& LayerParameter::spp_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.spp_param)
  return spp_param_ != NULL ? *spp_param_ : *default_instance_->spp_param_;
}
inline ::apollo::perception::inference::SPPParameter* LayerParameter::mutable_spp_param() {
  set_has_spp_param();
  if (spp_param_ == NULL) spp_param_ = new ::apollo::perception::inference::SPPParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.spp_param)
  return spp_param_;
}
inline ::apollo::perception::inference::SPPParameter* LayerParameter::release_spp_param() {
  clear_has_spp_param();
  ::apollo::perception::inference::SPPParameter* temp = spp_param_;
  spp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_spp_param(::apollo::perception::inference::SPPParameter* spp_param) {
  delete spp_param_;
  spp_param_ = spp_param;
  if (spp_param) {
    set_has_spp_param();
  } else {
    clear_has_spp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.spp_param)
}

// optional .apollo.perception.inference.SliceParameter slice_param = 126;
inline bool LayerParameter::has_slice_param() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_slice_param() {
  _has_bits_[2] |= 0x00000100u;
}
inline void LayerParameter::clear_has_slice_param() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::apollo::perception::inference::SliceParameter::Clear();
  clear_has_slice_param();
}
inline const ::apollo::perception::inference::SliceParameter& LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_ : *default_instance_->slice_param_;
}
inline ::apollo::perception::inference::SliceParameter* LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) slice_param_ = new ::apollo::perception::inference::SliceParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.slice_param)
  return slice_param_;
}
inline ::apollo::perception::inference::SliceParameter* LayerParameter::release_slice_param() {
  clear_has_slice_param();
  ::apollo::perception::inference::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_slice_param(::apollo::perception::inference::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.slice_param)
}

// optional .apollo.perception.inference.TanHParameter tanh_param = 127;
inline bool LayerParameter::has_tanh_param() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_tanh_param() {
  _has_bits_[2] |= 0x00000200u;
}
inline void LayerParameter::clear_has_tanh_param() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::apollo::perception::inference::TanHParameter::Clear();
  clear_has_tanh_param();
}
inline const ::apollo::perception::inference::TanHParameter& LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_ : *default_instance_->tanh_param_;
}
inline ::apollo::perception::inference::TanHParameter* LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) tanh_param_ = new ::apollo::perception::inference::TanHParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.tanh_param)
  return tanh_param_;
}
inline ::apollo::perception::inference::TanHParameter* LayerParameter::release_tanh_param() {
  clear_has_tanh_param();
  ::apollo::perception::inference::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tanh_param(::apollo::perception::inference::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.tanh_param)
}

// optional .apollo.perception.inference.ThresholdParameter threshold_param = 128;
inline bool LayerParameter::has_threshold_param() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_threshold_param() {
  _has_bits_[2] |= 0x00000400u;
}
inline void LayerParameter::clear_has_threshold_param() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::apollo::perception::inference::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
inline const ::apollo::perception::inference::ThresholdParameter& LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_ : *default_instance_->threshold_param_;
}
inline ::apollo::perception::inference::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) threshold_param_ = new ::apollo::perception::inference::ThresholdParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.threshold_param)
  return threshold_param_;
}
inline ::apollo::perception::inference::ThresholdParameter* LayerParameter::release_threshold_param() {
  clear_has_threshold_param();
  ::apollo::perception::inference::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_threshold_param(::apollo::perception::inference::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.threshold_param)
}

// optional .apollo.perception.inference.TileParameter tile_param = 138;
inline bool LayerParameter::has_tile_param() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_tile_param() {
  _has_bits_[2] |= 0x00000800u;
}
inline void LayerParameter::clear_has_tile_param() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void LayerParameter::clear_tile_param() {
  if (tile_param_ != NULL) tile_param_->::apollo::perception::inference::TileParameter::Clear();
  clear_has_tile_param();
}
inline const ::apollo::perception::inference::TileParameter& LayerParameter::tile_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.tile_param)
  return tile_param_ != NULL ? *tile_param_ : *default_instance_->tile_param_;
}
inline ::apollo::perception::inference::TileParameter* LayerParameter::mutable_tile_param() {
  set_has_tile_param();
  if (tile_param_ == NULL) tile_param_ = new ::apollo::perception::inference::TileParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.tile_param)
  return tile_param_;
}
inline ::apollo::perception::inference::TileParameter* LayerParameter::release_tile_param() {
  clear_has_tile_param();
  ::apollo::perception::inference::TileParameter* temp = tile_param_;
  tile_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tile_param(::apollo::perception::inference::TileParameter* tile_param) {
  delete tile_param_;
  tile_param_ = tile_param;
  if (tile_param) {
    set_has_tile_param();
  } else {
    clear_has_tile_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.tile_param)
}

// optional .apollo.perception.inference.VideoDataParameter video_data_param = 207;
inline bool LayerParameter::has_video_data_param() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_video_data_param() {
  _has_bits_[2] |= 0x00001000u;
}
inline void LayerParameter::clear_has_video_data_param() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void LayerParameter::clear_video_data_param() {
  if (video_data_param_ != NULL) video_data_param_->::apollo::perception::inference::VideoDataParameter::Clear();
  clear_has_video_data_param();
}
inline const ::apollo::perception::inference::VideoDataParameter& LayerParameter::video_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.video_data_param)
  return video_data_param_ != NULL ? *video_data_param_ : *default_instance_->video_data_param_;
}
inline ::apollo::perception::inference::VideoDataParameter* LayerParameter::mutable_video_data_param() {
  set_has_video_data_param();
  if (video_data_param_ == NULL) video_data_param_ = new ::apollo::perception::inference::VideoDataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.video_data_param)
  return video_data_param_;
}
inline ::apollo::perception::inference::VideoDataParameter* LayerParameter::release_video_data_param() {
  clear_has_video_data_param();
  ::apollo::perception::inference::VideoDataParameter* temp = video_data_param_;
  video_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_video_data_param(::apollo::perception::inference::VideoDataParameter* video_data_param) {
  delete video_data_param_;
  video_data_param_ = video_data_param;
  if (video_data_param) {
    set_has_video_data_param();
  } else {
    clear_has_video_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.video_data_param)
}

// optional .apollo.perception.inference.WindowDataParameter window_data_param = 129;
inline bool LayerParameter::has_window_data_param() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_window_data_param() {
  _has_bits_[2] |= 0x00002000u;
}
inline void LayerParameter::clear_has_window_data_param() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::apollo::perception::inference::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
inline const ::apollo::perception::inference::WindowDataParameter& LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_ : *default_instance_->window_data_param_;
}
inline ::apollo::perception::inference::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) window_data_param_ = new ::apollo::perception::inference::WindowDataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.LayerParameter.window_data_param)
  return window_data_param_;
}
inline ::apollo::perception::inference::WindowDataParameter* LayerParameter::release_window_data_param() {
  clear_has_window_data_param();
  ::apollo::perception::inference::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_window_data_param(::apollo::perception::inference::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.LayerParameter.window_data_param)
}

// -------------------------------------------------------------------

// TransformationParameter

// optional float scale = 1 [default = 1];
inline bool TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.scale)
  return scale_;
}
inline void TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
inline bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.mirror)
  return mirror_;
}
inline void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
inline bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.crop_size)
  return crop_size_;
}
inline void TransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.crop_size)
}

// optional uint32 crop_h = 11 [default = 0];
inline bool TransformationParameter::has_crop_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransformationParameter::set_has_crop_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransformationParameter::clear_has_crop_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransformationParameter::clear_crop_h() {
  crop_h_ = 0u;
  clear_has_crop_h();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.crop_h)
  return crop_h_;
}
inline void TransformationParameter::set_crop_h(::google::protobuf::uint32 value) {
  set_has_crop_h();
  crop_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.crop_h)
}

// optional uint32 crop_w = 12 [default = 0];
inline bool TransformationParameter::has_crop_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransformationParameter::set_has_crop_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransformationParameter::clear_has_crop_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransformationParameter::clear_crop_w() {
  crop_w_ = 0u;
  clear_has_crop_w();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.crop_w)
  return crop_w_;
}
inline void TransformationParameter::set_crop_w(::google::protobuf::uint32 value) {
  set_has_crop_w();
  crop_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.crop_w)
}

// optional string mean_file = 4;
inline bool TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransformationParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.mean_file)
  return *mean_file_;
}
inline void TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.TransformationParameter.mean_file)
}
inline ::std::string* TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.TransformationParameter.mean_file)
  return mean_file_;
}
inline ::std::string* TransformationParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
inline int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
inline void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.mean_value)
}
inline void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.TransformationParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.TransformationParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.TransformationParameter.mean_value)
  return &mean_value_;
}

// optional bool force_color = 6 [default = false];
inline bool TransformationParameter::has_force_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TransformationParameter::set_has_force_color() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TransformationParameter::clear_has_force_color() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TransformationParameter::clear_force_color() {
  force_color_ = false;
  clear_has_force_color();
}
inline bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.force_color)
  return force_color_;
}
inline void TransformationParameter::set_force_color(bool value) {
  set_has_force_color();
  force_color_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.force_color)
}

// optional bool force_gray = 7 [default = false];
inline bool TransformationParameter::has_force_gray() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TransformationParameter::set_has_force_gray() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TransformationParameter::clear_has_force_gray() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  clear_has_force_gray();
}
inline bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.force_gray)
  return force_gray_;
}
inline void TransformationParameter::set_force_gray(bool value) {
  set_has_force_gray();
  force_gray_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.force_gray)
}

// optional .apollo.perception.inference.ResizeParameter resize_param = 8;
inline bool TransformationParameter::has_resize_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TransformationParameter::set_has_resize_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TransformationParameter::clear_has_resize_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TransformationParameter::clear_resize_param() {
  if (resize_param_ != NULL) resize_param_->::apollo::perception::inference::ResizeParameter::Clear();
  clear_has_resize_param();
}
inline const ::apollo::perception::inference::ResizeParameter& TransformationParameter::resize_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.resize_param)
  return resize_param_ != NULL ? *resize_param_ : *default_instance_->resize_param_;
}
inline ::apollo::perception::inference::ResizeParameter* TransformationParameter::mutable_resize_param() {
  set_has_resize_param();
  if (resize_param_ == NULL) resize_param_ = new ::apollo::perception::inference::ResizeParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.TransformationParameter.resize_param)
  return resize_param_;
}
inline ::apollo::perception::inference::ResizeParameter* TransformationParameter::release_resize_param() {
  clear_has_resize_param();
  ::apollo::perception::inference::ResizeParameter* temp = resize_param_;
  resize_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_resize_param(::apollo::perception::inference::ResizeParameter* resize_param) {
  delete resize_param_;
  resize_param_ = resize_param;
  if (resize_param) {
    set_has_resize_param();
  } else {
    clear_has_resize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.TransformationParameter.resize_param)
}

// optional .apollo.perception.inference.NoiseParameter noise_param = 9;
inline bool TransformationParameter::has_noise_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TransformationParameter::set_has_noise_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TransformationParameter::clear_has_noise_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TransformationParameter::clear_noise_param() {
  if (noise_param_ != NULL) noise_param_->::apollo::perception::inference::NoiseParameter::Clear();
  clear_has_noise_param();
}
inline const ::apollo::perception::inference::NoiseParameter& TransformationParameter::noise_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.noise_param)
  return noise_param_ != NULL ? *noise_param_ : *default_instance_->noise_param_;
}
inline ::apollo::perception::inference::NoiseParameter* TransformationParameter::mutable_noise_param() {
  set_has_noise_param();
  if (noise_param_ == NULL) noise_param_ = new ::apollo::perception::inference::NoiseParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.TransformationParameter.noise_param)
  return noise_param_;
}
inline ::apollo::perception::inference::NoiseParameter* TransformationParameter::release_noise_param() {
  clear_has_noise_param();
  ::apollo::perception::inference::NoiseParameter* temp = noise_param_;
  noise_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_noise_param(::apollo::perception::inference::NoiseParameter* noise_param) {
  delete noise_param_;
  noise_param_ = noise_param;
  if (noise_param) {
    set_has_noise_param();
  } else {
    clear_has_noise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.TransformationParameter.noise_param)
}

// optional .apollo.perception.inference.DistortionParameter distort_param = 13;
inline bool TransformationParameter::has_distort_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TransformationParameter::set_has_distort_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TransformationParameter::clear_has_distort_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TransformationParameter::clear_distort_param() {
  if (distort_param_ != NULL) distort_param_->::apollo::perception::inference::DistortionParameter::Clear();
  clear_has_distort_param();
}
inline const ::apollo::perception::inference::DistortionParameter& TransformationParameter::distort_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.distort_param)
  return distort_param_ != NULL ? *distort_param_ : *default_instance_->distort_param_;
}
inline ::apollo::perception::inference::DistortionParameter* TransformationParameter::mutable_distort_param() {
  set_has_distort_param();
  if (distort_param_ == NULL) distort_param_ = new ::apollo::perception::inference::DistortionParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.TransformationParameter.distort_param)
  return distort_param_;
}
inline ::apollo::perception::inference::DistortionParameter* TransformationParameter::release_distort_param() {
  clear_has_distort_param();
  ::apollo::perception::inference::DistortionParameter* temp = distort_param_;
  distort_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_distort_param(::apollo::perception::inference::DistortionParameter* distort_param) {
  delete distort_param_;
  distort_param_ = distort_param;
  if (distort_param) {
    set_has_distort_param();
  } else {
    clear_has_distort_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.TransformationParameter.distort_param)
}

// optional .apollo.perception.inference.ExpansionParameter expand_param = 14;
inline bool TransformationParameter::has_expand_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TransformationParameter::set_has_expand_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TransformationParameter::clear_has_expand_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TransformationParameter::clear_expand_param() {
  if (expand_param_ != NULL) expand_param_->::apollo::perception::inference::ExpansionParameter::Clear();
  clear_has_expand_param();
}
inline const ::apollo::perception::inference::ExpansionParameter& TransformationParameter::expand_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.expand_param)
  return expand_param_ != NULL ? *expand_param_ : *default_instance_->expand_param_;
}
inline ::apollo::perception::inference::ExpansionParameter* TransformationParameter::mutable_expand_param() {
  set_has_expand_param();
  if (expand_param_ == NULL) expand_param_ = new ::apollo::perception::inference::ExpansionParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.TransformationParameter.expand_param)
  return expand_param_;
}
inline ::apollo::perception::inference::ExpansionParameter* TransformationParameter::release_expand_param() {
  clear_has_expand_param();
  ::apollo::perception::inference::ExpansionParameter* temp = expand_param_;
  expand_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_expand_param(::apollo::perception::inference::ExpansionParameter* expand_param) {
  delete expand_param_;
  expand_param_ = expand_param;
  if (expand_param) {
    set_has_expand_param();
  } else {
    clear_has_expand_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.TransformationParameter.expand_param)
}

// optional float jitter = 15;
inline bool TransformationParameter::has_jitter() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TransformationParameter::set_has_jitter() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TransformationParameter::clear_has_jitter() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TransformationParameter::clear_jitter() {
  jitter_ = 0;
  clear_has_jitter();
}
inline float TransformationParameter::jitter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.jitter)
  return jitter_;
}
inline void TransformationParameter::set_jitter(float value) {
  set_has_jitter();
  jitter_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TransformationParameter.jitter)
}

// optional .apollo.perception.inference.EmitConstraint emit_constraint = 10;
inline bool TransformationParameter::has_emit_constraint() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TransformationParameter::set_has_emit_constraint() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TransformationParameter::clear_has_emit_constraint() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TransformationParameter::clear_emit_constraint() {
  if (emit_constraint_ != NULL) emit_constraint_->::apollo::perception::inference::EmitConstraint::Clear();
  clear_has_emit_constraint();
}
inline const ::apollo::perception::inference::EmitConstraint& TransformationParameter::emit_constraint() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TransformationParameter.emit_constraint)
  return emit_constraint_ != NULL ? *emit_constraint_ : *default_instance_->emit_constraint_;
}
inline ::apollo::perception::inference::EmitConstraint* TransformationParameter::mutable_emit_constraint() {
  set_has_emit_constraint();
  if (emit_constraint_ == NULL) emit_constraint_ = new ::apollo::perception::inference::EmitConstraint;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.TransformationParameter.emit_constraint)
  return emit_constraint_;
}
inline ::apollo::perception::inference::EmitConstraint* TransformationParameter::release_emit_constraint() {
  clear_has_emit_constraint();
  ::apollo::perception::inference::EmitConstraint* temp = emit_constraint_;
  emit_constraint_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_emit_constraint(::apollo::perception::inference::EmitConstraint* emit_constraint) {
  delete emit_constraint_;
  emit_constraint_ = emit_constraint;
  if (emit_constraint) {
    set_has_emit_constraint();
  } else {
    clear_has_emit_constraint();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.TransformationParameter.emit_constraint)
}

// -------------------------------------------------------------------

// ResizeParameter

// optional float prob = 1 [default = 1];
inline bool ResizeParameter::has_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResizeParameter::set_has_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResizeParameter::clear_has_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResizeParameter::clear_prob() {
  prob_ = 1;
  clear_has_prob();
}
inline float ResizeParameter::prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.prob)
  return prob_;
}
inline void ResizeParameter::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.prob)
}

// optional .apollo.perception.inference.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
inline bool ResizeParameter::has_resize_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResizeParameter::set_has_resize_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResizeParameter::clear_has_resize_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResizeParameter::clear_resize_mode() {
  resize_mode_ = 1;
  clear_has_resize_mode();
}
inline ::apollo::perception::inference::ResizeParameter_Resize_mode ResizeParameter::resize_mode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.resize_mode)
  return static_cast< ::apollo::perception::inference::ResizeParameter_Resize_mode >(resize_mode_);
}
inline void ResizeParameter::set_resize_mode(::apollo::perception::inference::ResizeParameter_Resize_mode value) {
  assert(::apollo::perception::inference::ResizeParameter_Resize_mode_IsValid(value));
  set_has_resize_mode();
  resize_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.resize_mode)
}

// optional uint32 height = 3 [default = 0];
inline bool ResizeParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResizeParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResizeParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResizeParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 ResizeParameter::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.height)
  return height_;
}
inline void ResizeParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.height)
}

// optional uint32 width = 4 [default = 0];
inline bool ResizeParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResizeParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResizeParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResizeParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 ResizeParameter::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.width)
  return width_;
}
inline void ResizeParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.width)
}

// optional uint32 height_scale = 8 [default = 0];
inline bool ResizeParameter::has_height_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResizeParameter::set_has_height_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResizeParameter::clear_has_height_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResizeParameter::clear_height_scale() {
  height_scale_ = 0u;
  clear_has_height_scale();
}
inline ::google::protobuf::uint32 ResizeParameter::height_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.height_scale)
  return height_scale_;
}
inline void ResizeParameter::set_height_scale(::google::protobuf::uint32 value) {
  set_has_height_scale();
  height_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.height_scale)
}

// optional uint32 width_scale = 9 [default = 0];
inline bool ResizeParameter::has_width_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResizeParameter::set_has_width_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResizeParameter::clear_has_width_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResizeParameter::clear_width_scale() {
  width_scale_ = 0u;
  clear_has_width_scale();
}
inline ::google::protobuf::uint32 ResizeParameter::width_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.width_scale)
  return width_scale_;
}
inline void ResizeParameter::set_width_scale(::google::protobuf::uint32 value) {
  set_has_width_scale();
  width_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.width_scale)
}

// optional .apollo.perception.inference.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
inline bool ResizeParameter::has_pad_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResizeParameter::set_has_pad_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResizeParameter::clear_has_pad_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResizeParameter::clear_pad_mode() {
  pad_mode_ = 1;
  clear_has_pad_mode();
}
inline ::apollo::perception::inference::ResizeParameter_Pad_mode ResizeParameter::pad_mode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.pad_mode)
  return static_cast< ::apollo::perception::inference::ResizeParameter_Pad_mode >(pad_mode_);
}
inline void ResizeParameter::set_pad_mode(::apollo::perception::inference::ResizeParameter_Pad_mode value) {
  assert(::apollo::perception::inference::ResizeParameter_Pad_mode_IsValid(value));
  set_has_pad_mode();
  pad_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.pad_mode)
}

// repeated float pad_value = 6;
inline int ResizeParameter::pad_value_size() const {
  return pad_value_.size();
}
inline void ResizeParameter::clear_pad_value() {
  pad_value_.Clear();
}
inline float ResizeParameter::pad_value(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.pad_value)
  return pad_value_.Get(index);
}
inline void ResizeParameter::set_pad_value(int index, float value) {
  pad_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.pad_value)
}
inline void ResizeParameter::add_pad_value(float value) {
  pad_value_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ResizeParameter.pad_value)
}
inline const ::google::protobuf::RepeatedField< float >&
ResizeParameter::pad_value() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ResizeParameter.pad_value)
  return pad_value_;
}
inline ::google::protobuf::RepeatedField< float >*
ResizeParameter::mutable_pad_value() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ResizeParameter.pad_value)
  return &pad_value_;
}

// repeated .apollo.perception.inference.ResizeParameter.Interp_mode interp_mode = 7;
inline int ResizeParameter::interp_mode_size() const {
  return interp_mode_.size();
}
inline void ResizeParameter::clear_interp_mode() {
  interp_mode_.Clear();
}
inline ::apollo::perception::inference::ResizeParameter_Interp_mode ResizeParameter::interp_mode(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ResizeParameter.interp_mode)
  return static_cast< ::apollo::perception::inference::ResizeParameter_Interp_mode >(interp_mode_.Get(index));
}
inline void ResizeParameter::set_interp_mode(int index, ::apollo::perception::inference::ResizeParameter_Interp_mode value) {
  assert(::apollo::perception::inference::ResizeParameter_Interp_mode_IsValid(value));
  interp_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ResizeParameter.interp_mode)
}
inline void ResizeParameter::add_interp_mode(::apollo::perception::inference::ResizeParameter_Interp_mode value) {
  assert(::apollo::perception::inference::ResizeParameter_Interp_mode_IsValid(value));
  interp_mode_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ResizeParameter.interp_mode)
}
inline const ::google::protobuf::RepeatedField<int>&
ResizeParameter::interp_mode() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ResizeParameter.interp_mode)
  return interp_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
ResizeParameter::mutable_interp_mode() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ResizeParameter.interp_mode)
  return &interp_mode_;
}

// -------------------------------------------------------------------

// SaltPepperParameter

// optional float fraction = 1 [default = 0];
inline bool SaltPepperParameter::has_fraction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaltPepperParameter::set_has_fraction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaltPepperParameter::clear_has_fraction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaltPepperParameter::clear_fraction() {
  fraction_ = 0;
  clear_has_fraction();
}
inline float SaltPepperParameter::fraction() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaltPepperParameter.fraction)
  return fraction_;
}
inline void SaltPepperParameter::set_fraction(float value) {
  set_has_fraction();
  fraction_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaltPepperParameter.fraction)
}

// repeated float value = 2;
inline int SaltPepperParameter::value_size() const {
  return value_.size();
}
inline void SaltPepperParameter::clear_value() {
  value_.Clear();
}
inline float SaltPepperParameter::value(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaltPepperParameter.value)
  return value_.Get(index);
}
inline void SaltPepperParameter::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaltPepperParameter.value)
}
inline void SaltPepperParameter::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.SaltPepperParameter.value)
}
inline const ::google::protobuf::RepeatedField< float >&
SaltPepperParameter::value() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.SaltPepperParameter.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
SaltPepperParameter::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.SaltPepperParameter.value)
  return &value_;
}

// -------------------------------------------------------------------

// NoiseParameter

// optional float prob = 1 [default = 0];
inline bool NoiseParameter::has_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoiseParameter::set_has_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoiseParameter::clear_has_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoiseParameter::clear_prob() {
  prob_ = 0;
  clear_has_prob();
}
inline float NoiseParameter::prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.prob)
  return prob_;
}
inline void NoiseParameter::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.prob)
}

// optional bool hist_eq = 2 [default = false];
inline bool NoiseParameter::has_hist_eq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoiseParameter::set_has_hist_eq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoiseParameter::clear_has_hist_eq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoiseParameter::clear_hist_eq() {
  hist_eq_ = false;
  clear_has_hist_eq();
}
inline bool NoiseParameter::hist_eq() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.hist_eq)
  return hist_eq_;
}
inline void NoiseParameter::set_hist_eq(bool value) {
  set_has_hist_eq();
  hist_eq_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.hist_eq)
}

// optional bool inverse = 3 [default = false];
inline bool NoiseParameter::has_inverse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NoiseParameter::set_has_inverse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NoiseParameter::clear_has_inverse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NoiseParameter::clear_inverse() {
  inverse_ = false;
  clear_has_inverse();
}
inline bool NoiseParameter::inverse() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.inverse)
  return inverse_;
}
inline void NoiseParameter::set_inverse(bool value) {
  set_has_inverse();
  inverse_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.inverse)
}

// optional bool decolorize = 4 [default = false];
inline bool NoiseParameter::has_decolorize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NoiseParameter::set_has_decolorize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NoiseParameter::clear_has_decolorize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NoiseParameter::clear_decolorize() {
  decolorize_ = false;
  clear_has_decolorize();
}
inline bool NoiseParameter::decolorize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.decolorize)
  return decolorize_;
}
inline void NoiseParameter::set_decolorize(bool value) {
  set_has_decolorize();
  decolorize_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.decolorize)
}

// optional bool gauss_blur = 5 [default = false];
inline bool NoiseParameter::has_gauss_blur() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NoiseParameter::set_has_gauss_blur() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NoiseParameter::clear_has_gauss_blur() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NoiseParameter::clear_gauss_blur() {
  gauss_blur_ = false;
  clear_has_gauss_blur();
}
inline bool NoiseParameter::gauss_blur() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.gauss_blur)
  return gauss_blur_;
}
inline void NoiseParameter::set_gauss_blur(bool value) {
  set_has_gauss_blur();
  gauss_blur_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.gauss_blur)
}

// optional float jpeg = 6 [default = -1];
inline bool NoiseParameter::has_jpeg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NoiseParameter::set_has_jpeg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NoiseParameter::clear_has_jpeg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NoiseParameter::clear_jpeg() {
  jpeg_ = -1;
  clear_has_jpeg();
}
inline float NoiseParameter::jpeg() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.jpeg)
  return jpeg_;
}
inline void NoiseParameter::set_jpeg(float value) {
  set_has_jpeg();
  jpeg_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.jpeg)
}

// optional bool posterize = 7 [default = false];
inline bool NoiseParameter::has_posterize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NoiseParameter::set_has_posterize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NoiseParameter::clear_has_posterize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NoiseParameter::clear_posterize() {
  posterize_ = false;
  clear_has_posterize();
}
inline bool NoiseParameter::posterize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.posterize)
  return posterize_;
}
inline void NoiseParameter::set_posterize(bool value) {
  set_has_posterize();
  posterize_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.posterize)
}

// optional bool erode = 8 [default = false];
inline bool NoiseParameter::has_erode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NoiseParameter::set_has_erode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NoiseParameter::clear_has_erode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NoiseParameter::clear_erode() {
  erode_ = false;
  clear_has_erode();
}
inline bool NoiseParameter::erode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.erode)
  return erode_;
}
inline void NoiseParameter::set_erode(bool value) {
  set_has_erode();
  erode_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.erode)
}

// optional bool saltpepper = 9 [default = false];
inline bool NoiseParameter::has_saltpepper() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NoiseParameter::set_has_saltpepper() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NoiseParameter::clear_has_saltpepper() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NoiseParameter::clear_saltpepper() {
  saltpepper_ = false;
  clear_has_saltpepper();
}
inline bool NoiseParameter::saltpepper() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.saltpepper)
  return saltpepper_;
}
inline void NoiseParameter::set_saltpepper(bool value) {
  set_has_saltpepper();
  saltpepper_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.saltpepper)
}

// optional .apollo.perception.inference.SaltPepperParameter saltpepper_param = 10;
inline bool NoiseParameter::has_saltpepper_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NoiseParameter::set_has_saltpepper_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NoiseParameter::clear_has_saltpepper_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NoiseParameter::clear_saltpepper_param() {
  if (saltpepper_param_ != NULL) saltpepper_param_->::apollo::perception::inference::SaltPepperParameter::Clear();
  clear_has_saltpepper_param();
}
inline const ::apollo::perception::inference::SaltPepperParameter& NoiseParameter::saltpepper_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.saltpepper_param)
  return saltpepper_param_ != NULL ? *saltpepper_param_ : *default_instance_->saltpepper_param_;
}
inline ::apollo::perception::inference::SaltPepperParameter* NoiseParameter::mutable_saltpepper_param() {
  set_has_saltpepper_param();
  if (saltpepper_param_ == NULL) saltpepper_param_ = new ::apollo::perception::inference::SaltPepperParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NoiseParameter.saltpepper_param)
  return saltpepper_param_;
}
inline ::apollo::perception::inference::SaltPepperParameter* NoiseParameter::release_saltpepper_param() {
  clear_has_saltpepper_param();
  ::apollo::perception::inference::SaltPepperParameter* temp = saltpepper_param_;
  saltpepper_param_ = NULL;
  return temp;
}
inline void NoiseParameter::set_allocated_saltpepper_param(::apollo::perception::inference::SaltPepperParameter* saltpepper_param) {
  delete saltpepper_param_;
  saltpepper_param_ = saltpepper_param;
  if (saltpepper_param) {
    set_has_saltpepper_param();
  } else {
    clear_has_saltpepper_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.NoiseParameter.saltpepper_param)
}

// optional bool clahe = 11 [default = false];
inline bool NoiseParameter::has_clahe() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NoiseParameter::set_has_clahe() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NoiseParameter::clear_has_clahe() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NoiseParameter::clear_clahe() {
  clahe_ = false;
  clear_has_clahe();
}
inline bool NoiseParameter::clahe() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.clahe)
  return clahe_;
}
inline void NoiseParameter::set_clahe(bool value) {
  set_has_clahe();
  clahe_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.clahe)
}

// optional bool convert_to_hsv = 12 [default = false];
inline bool NoiseParameter::has_convert_to_hsv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NoiseParameter::set_has_convert_to_hsv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NoiseParameter::clear_has_convert_to_hsv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NoiseParameter::clear_convert_to_hsv() {
  convert_to_hsv_ = false;
  clear_has_convert_to_hsv();
}
inline bool NoiseParameter::convert_to_hsv() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.convert_to_hsv)
  return convert_to_hsv_;
}
inline void NoiseParameter::set_convert_to_hsv(bool value) {
  set_has_convert_to_hsv();
  convert_to_hsv_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.convert_to_hsv)
}

// optional bool convert_to_lab = 13 [default = false];
inline bool NoiseParameter::has_convert_to_lab() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NoiseParameter::set_has_convert_to_lab() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NoiseParameter::clear_has_convert_to_lab() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NoiseParameter::clear_convert_to_lab() {
  convert_to_lab_ = false;
  clear_has_convert_to_lab();
}
inline bool NoiseParameter::convert_to_lab() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NoiseParameter.convert_to_lab)
  return convert_to_lab_;
}
inline void NoiseParameter::set_convert_to_lab(bool value) {
  set_has_convert_to_lab();
  convert_to_lab_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NoiseParameter.convert_to_lab)
}

// -------------------------------------------------------------------

// DistortionParameter

// optional float brightness_prob = 1 [default = 0];
inline bool DistortionParameter::has_brightness_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistortionParameter::set_has_brightness_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DistortionParameter::clear_has_brightness_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DistortionParameter::clear_brightness_prob() {
  brightness_prob_ = 0;
  clear_has_brightness_prob();
}
inline float DistortionParameter::brightness_prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.brightness_prob)
  return brightness_prob_;
}
inline void DistortionParameter::set_brightness_prob(float value) {
  set_has_brightness_prob();
  brightness_prob_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.brightness_prob)
}

// optional float brightness_delta = 2 [default = 0];
inline bool DistortionParameter::has_brightness_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistortionParameter::set_has_brightness_delta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DistortionParameter::clear_has_brightness_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DistortionParameter::clear_brightness_delta() {
  brightness_delta_ = 0;
  clear_has_brightness_delta();
}
inline float DistortionParameter::brightness_delta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.brightness_delta)
  return brightness_delta_;
}
inline void DistortionParameter::set_brightness_delta(float value) {
  set_has_brightness_delta();
  brightness_delta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.brightness_delta)
}

// optional float contrast_prob = 3 [default = 0];
inline bool DistortionParameter::has_contrast_prob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DistortionParameter::set_has_contrast_prob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DistortionParameter::clear_has_contrast_prob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DistortionParameter::clear_contrast_prob() {
  contrast_prob_ = 0;
  clear_has_contrast_prob();
}
inline float DistortionParameter::contrast_prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.contrast_prob)
  return contrast_prob_;
}
inline void DistortionParameter::set_contrast_prob(float value) {
  set_has_contrast_prob();
  contrast_prob_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.contrast_prob)
}

// optional float contrast_lower = 4 [default = 0];
inline bool DistortionParameter::has_contrast_lower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DistortionParameter::set_has_contrast_lower() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DistortionParameter::clear_has_contrast_lower() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DistortionParameter::clear_contrast_lower() {
  contrast_lower_ = 0;
  clear_has_contrast_lower();
}
inline float DistortionParameter::contrast_lower() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.contrast_lower)
  return contrast_lower_;
}
inline void DistortionParameter::set_contrast_lower(float value) {
  set_has_contrast_lower();
  contrast_lower_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.contrast_lower)
}

// optional float contrast_upper = 5 [default = 0];
inline bool DistortionParameter::has_contrast_upper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DistortionParameter::set_has_contrast_upper() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DistortionParameter::clear_has_contrast_upper() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DistortionParameter::clear_contrast_upper() {
  contrast_upper_ = 0;
  clear_has_contrast_upper();
}
inline float DistortionParameter::contrast_upper() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.contrast_upper)
  return contrast_upper_;
}
inline void DistortionParameter::set_contrast_upper(float value) {
  set_has_contrast_upper();
  contrast_upper_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.contrast_upper)
}

// optional float hue_prob = 6 [default = 0];
inline bool DistortionParameter::has_hue_prob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DistortionParameter::set_has_hue_prob() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DistortionParameter::clear_has_hue_prob() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DistortionParameter::clear_hue_prob() {
  hue_prob_ = 0;
  clear_has_hue_prob();
}
inline float DistortionParameter::hue_prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.hue_prob)
  return hue_prob_;
}
inline void DistortionParameter::set_hue_prob(float value) {
  set_has_hue_prob();
  hue_prob_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.hue_prob)
}

// optional float hue_delta = 7 [default = 0];
inline bool DistortionParameter::has_hue_delta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DistortionParameter::set_has_hue_delta() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DistortionParameter::clear_has_hue_delta() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DistortionParameter::clear_hue_delta() {
  hue_delta_ = 0;
  clear_has_hue_delta();
}
inline float DistortionParameter::hue_delta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.hue_delta)
  return hue_delta_;
}
inline void DistortionParameter::set_hue_delta(float value) {
  set_has_hue_delta();
  hue_delta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.hue_delta)
}

// optional float saturation_prob = 8 [default = 0];
inline bool DistortionParameter::has_saturation_prob() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DistortionParameter::set_has_saturation_prob() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DistortionParameter::clear_has_saturation_prob() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DistortionParameter::clear_saturation_prob() {
  saturation_prob_ = 0;
  clear_has_saturation_prob();
}
inline float DistortionParameter::saturation_prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.saturation_prob)
  return saturation_prob_;
}
inline void DistortionParameter::set_saturation_prob(float value) {
  set_has_saturation_prob();
  saturation_prob_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.saturation_prob)
}

// optional float saturation_lower = 9 [default = 0];
inline bool DistortionParameter::has_saturation_lower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DistortionParameter::set_has_saturation_lower() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DistortionParameter::clear_has_saturation_lower() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DistortionParameter::clear_saturation_lower() {
  saturation_lower_ = 0;
  clear_has_saturation_lower();
}
inline float DistortionParameter::saturation_lower() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.saturation_lower)
  return saturation_lower_;
}
inline void DistortionParameter::set_saturation_lower(float value) {
  set_has_saturation_lower();
  saturation_lower_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.saturation_lower)
}

// optional float saturation_upper = 10 [default = 0];
inline bool DistortionParameter::has_saturation_upper() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DistortionParameter::set_has_saturation_upper() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DistortionParameter::clear_has_saturation_upper() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DistortionParameter::clear_saturation_upper() {
  saturation_upper_ = 0;
  clear_has_saturation_upper();
}
inline float DistortionParameter::saturation_upper() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.saturation_upper)
  return saturation_upper_;
}
inline void DistortionParameter::set_saturation_upper(float value) {
  set_has_saturation_upper();
  saturation_upper_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.saturation_upper)
}

// optional float random_order_prob = 11 [default = 0];
inline bool DistortionParameter::has_random_order_prob() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DistortionParameter::set_has_random_order_prob() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DistortionParameter::clear_has_random_order_prob() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DistortionParameter::clear_random_order_prob() {
  random_order_prob_ = 0;
  clear_has_random_order_prob();
}
inline float DistortionParameter::random_order_prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DistortionParameter.random_order_prob)
  return random_order_prob_;
}
inline void DistortionParameter::set_random_order_prob(float value) {
  set_has_random_order_prob();
  random_order_prob_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DistortionParameter.random_order_prob)
}

// -------------------------------------------------------------------

// ExpansionParameter

// optional float prob = 1 [default = 1];
inline bool ExpansionParameter::has_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpansionParameter::set_has_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpansionParameter::clear_has_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpansionParameter::clear_prob() {
  prob_ = 1;
  clear_has_prob();
}
inline float ExpansionParameter::prob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ExpansionParameter.prob)
  return prob_;
}
inline void ExpansionParameter::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ExpansionParameter.prob)
}

// optional float max_expand_ratio = 2 [default = 1];
inline bool ExpansionParameter::has_max_expand_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpansionParameter::set_has_max_expand_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpansionParameter::clear_has_max_expand_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpansionParameter::clear_max_expand_ratio() {
  max_expand_ratio_ = 1;
  clear_has_max_expand_ratio();
}
inline float ExpansionParameter::max_expand_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ExpansionParameter.max_expand_ratio)
  return max_expand_ratio_;
}
inline void ExpansionParameter::set_max_expand_ratio(float value) {
  set_has_max_expand_ratio();
  max_expand_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ExpansionParameter.max_expand_ratio)
}

// -------------------------------------------------------------------

// LossParameter

// optional int32 ignore_label = 1;
inline bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LossParameter.ignore_label)
  return ignore_label_;
}
inline void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LossParameter.ignore_label)
}

// optional .apollo.perception.inference.LossParameter.NormalizationMode normalization = 3 [default = VALID];
inline bool LossParameter::has_normalization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LossParameter::set_has_normalization() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LossParameter::clear_has_normalization() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LossParameter::clear_normalization() {
  normalization_ = 1;
  clear_has_normalization();
}
inline ::apollo::perception::inference::LossParameter_NormalizationMode LossParameter::normalization() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LossParameter.normalization)
  return static_cast< ::apollo::perception::inference::LossParameter_NormalizationMode >(normalization_);
}
inline void LossParameter::set_normalization(::apollo::perception::inference::LossParameter_NormalizationMode value) {
  assert(::apollo::perception::inference::LossParameter_NormalizationMode_IsValid(value));
  set_has_normalization();
  normalization_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LossParameter.normalization)
}

// optional bool normalize = 2;
inline bool LossParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LossParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LossParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LossParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
inline bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LossParameter.normalize)
  return normalize_;
}
inline void LossParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LossParameter.normalize)
}

// -------------------------------------------------------------------

// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
inline bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AccuracyParameter.top_k)
  return top_k_;
}
inline void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AccuracyParameter.top_k)
}

// optional int32 axis = 2 [default = 1];
inline bool AccuracyParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccuracyParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccuracyParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccuracyParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AccuracyParameter.axis)
  return axis_;
}
inline void AccuracyParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AccuracyParameter.axis)
}

// optional int32 ignore_label = 3;
inline bool AccuracyParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccuracyParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccuracyParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AccuracyParameter.ignore_label)
  return ignore_label_;
}
inline void AccuracyParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AccuracyParameter.ignore_label)
}

// -------------------------------------------------------------------

// AnnotatedDataParameter

// repeated .apollo.perception.inference.BatchSampler batch_sampler = 1;
inline int AnnotatedDataParameter::batch_sampler_size() const {
  return batch_sampler_.size();
}
inline void AnnotatedDataParameter::clear_batch_sampler() {
  batch_sampler_.Clear();
}
inline const ::apollo::perception::inference::BatchSampler& AnnotatedDataParameter::batch_sampler(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDataParameter.batch_sampler)
  return batch_sampler_.Get(index);
}
inline ::apollo::perception::inference::BatchSampler* AnnotatedDataParameter::mutable_batch_sampler(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.AnnotatedDataParameter.batch_sampler)
  return batch_sampler_.Mutable(index);
}
inline ::apollo::perception::inference::BatchSampler* AnnotatedDataParameter::add_batch_sampler() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.AnnotatedDataParameter.batch_sampler)
  return batch_sampler_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BatchSampler >&
AnnotatedDataParameter::batch_sampler() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.AnnotatedDataParameter.batch_sampler)
  return batch_sampler_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BatchSampler >*
AnnotatedDataParameter::mutable_batch_sampler() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.AnnotatedDataParameter.batch_sampler)
  return &batch_sampler_;
}

// optional string label_map_file = 2;
inline bool AnnotatedDataParameter::has_label_map_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnnotatedDataParameter::set_has_label_map_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnnotatedDataParameter::clear_has_label_map_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnnotatedDataParameter::clear_label_map_file() {
  if (label_map_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_->clear();
  }
  clear_has_label_map_file();
}
inline const ::std::string& AnnotatedDataParameter::label_map_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDataParameter.label_map_file)
  return *label_map_file_;
}
inline void AnnotatedDataParameter::set_label_map_file(const ::std::string& value) {
  set_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_ = new ::std::string;
  }
  label_map_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnnotatedDataParameter.label_map_file)
}
inline void AnnotatedDataParameter::set_label_map_file(const char* value) {
  set_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_ = new ::std::string;
  }
  label_map_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.AnnotatedDataParameter.label_map_file)
}
inline void AnnotatedDataParameter::set_label_map_file(const char* value, size_t size) {
  set_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_ = new ::std::string;
  }
  label_map_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.AnnotatedDataParameter.label_map_file)
}
inline ::std::string* AnnotatedDataParameter::mutable_label_map_file() {
  set_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.AnnotatedDataParameter.label_map_file)
  return label_map_file_;
}
inline ::std::string* AnnotatedDataParameter::release_label_map_file() {
  clear_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_map_file_;
    label_map_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AnnotatedDataParameter::set_allocated_label_map_file(::std::string* label_map_file) {
  if (label_map_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_map_file_;
  }
  if (label_map_file) {
    set_has_label_map_file();
    label_map_file_ = label_map_file;
  } else {
    clear_has_label_map_file();
    label_map_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.AnnotatedDataParameter.label_map_file)
}

// optional .apollo.perception.inference.AnnotatedDatum.AnnotationType anno_type = 3 [default = BBOX];
inline bool AnnotatedDataParameter::has_anno_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnnotatedDataParameter::set_has_anno_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnnotatedDataParameter::clear_has_anno_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnnotatedDataParameter::clear_anno_type() {
  anno_type_ = 0;
  clear_has_anno_type();
}
inline ::apollo::perception::inference::AnnotatedDatum_AnnotationType AnnotatedDataParameter::anno_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDataParameter.anno_type)
  return static_cast< ::apollo::perception::inference::AnnotatedDatum_AnnotationType >(anno_type_);
}
inline void AnnotatedDataParameter::set_anno_type(::apollo::perception::inference::AnnotatedDatum_AnnotationType value) {
  assert(::apollo::perception::inference::AnnotatedDatum_AnnotationType_IsValid(value));
  set_has_anno_type();
  anno_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnnotatedDataParameter.anno_type)
}

// optional int32 num_classes = 10 [default = 3];
inline bool AnnotatedDataParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnnotatedDataParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnnotatedDataParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnnotatedDataParameter::clear_num_classes() {
  num_classes_ = 3;
  clear_has_num_classes();
}
inline ::google::protobuf::int32 AnnotatedDataParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnnotatedDataParameter.num_classes)
  return num_classes_;
}
inline void AnnotatedDataParameter::set_num_classes(::google::protobuf::int32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnnotatedDataParameter.num_classes)
}

// -------------------------------------------------------------------

// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
inline bool ArgMaxParameter::has_out_max_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArgMaxParameter::set_has_out_max_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArgMaxParameter::clear_has_out_max_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArgMaxParameter::clear_out_max_val() {
  out_max_val_ = false;
  clear_has_out_max_val();
}
inline bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ArgMaxParameter.out_max_val)
  return out_max_val_;
}
inline void ArgMaxParameter::set_out_max_val(bool value) {
  set_has_out_max_val();
  out_max_val_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ArgMaxParameter.out_max_val)
}

// optional uint32 top_k = 2 [default = 1];
inline bool ArgMaxParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArgMaxParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArgMaxParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArgMaxParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ArgMaxParameter.top_k)
  return top_k_;
}
inline void ArgMaxParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ArgMaxParameter.top_k)
}

// optional int32 axis = 3;
inline bool ArgMaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArgMaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArgMaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArgMaxParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ArgMaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ArgMaxParameter.axis)
  return axis_;
}
inline void ArgMaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ArgMaxParameter.axis)
}

// -------------------------------------------------------------------

// ConcatParameter

// optional int32 axis = 2 [default = 1];
inline bool ConcatParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcatParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcatParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcatParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConcatParameter.axis)
  return axis_;
}
inline void ConcatParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConcatParameter.axis)
}

// optional uint32 concat_dim = 1 [default = 1];
inline bool ConcatParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConcatParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConcatParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConcatParameter.concat_dim)
  return concat_dim_;
}
inline void ConcatParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConcatParameter.concat_dim)
}

// -------------------------------------------------------------------

// BatchNormParameter

// optional bool use_global_stats = 1;
inline bool BatchNormParameter::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchNormParameter::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchNormParameter::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchNormParameter::clear_use_global_stats() {
  use_global_stats_ = false;
  clear_has_use_global_stats();
}
inline bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchNormParameter.use_global_stats)
  return use_global_stats_;
}
inline void BatchNormParameter::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BatchNormParameter.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.999];
inline bool BatchNormParameter::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchNormParameter::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchNormParameter::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchNormParameter::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.999f;
  clear_has_moving_average_fraction();
}
inline float BatchNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchNormParameter.moving_average_fraction)
  return moving_average_fraction_;
}
inline void BatchNormParameter::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BatchNormParameter.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-05];
inline bool BatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchNormParameter::clear_eps() {
  eps_ = 1e-05f;
  clear_has_eps();
}
inline float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BatchNormParameter.eps)
  return eps_;
}
inline void BatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BatchNormParameter.eps)
}

// -------------------------------------------------------------------

// BiasParameter

// optional int32 axis = 1 [default = 1];
inline bool BiasParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BiasParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BiasParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BiasParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 BiasParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BiasParameter.axis)
  return axis_;
}
inline void BiasParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BiasParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool BiasParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BiasParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BiasParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BiasParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 BiasParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BiasParameter.num_axes)
  return num_axes_;
}
inline void BiasParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.BiasParameter.num_axes)
}

// optional .apollo.perception.inference.FillerParameter filler = 3;
inline bool BiasParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BiasParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BiasParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BiasParameter::clear_filler() {
  if (filler_ != NULL) filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::apollo::perception::inference::FillerParameter& BiasParameter::filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.BiasParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::apollo::perception::inference::FillerParameter* BiasParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.BiasParameter.filler)
  return filler_;
}
inline ::apollo::perception::inference::FillerParameter* BiasParameter::release_filler() {
  clear_has_filler();
  ::apollo::perception::inference::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void BiasParameter::set_allocated_filler(::apollo::perception::inference::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.BiasParameter.filler)
}

// -------------------------------------------------------------------

// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
inline bool ContrastiveLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContrastiveLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContrastiveLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContrastiveLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
inline float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ContrastiveLossParameter.margin)
  return margin_;
}
inline void ContrastiveLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ContrastiveLossParameter.margin)
}

// optional bool legacy_version = 2 [default = false];
inline bool ContrastiveLossParameter::has_legacy_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContrastiveLossParameter::set_has_legacy_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContrastiveLossParameter::clear_has_legacy_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContrastiveLossParameter::clear_legacy_version() {
  legacy_version_ = false;
  clear_has_legacy_version();
}
inline bool ContrastiveLossParameter::legacy_version() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ContrastiveLossParameter.legacy_version)
  return legacy_version_;
}
inline void ContrastiveLossParameter::set_legacy_version(bool value) {
  set_has_legacy_version();
  legacy_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ContrastiveLossParameter.legacy_version)
}

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.num_output)
  return num_output_;
}
inline void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.bias_term)
  return bias_term_;
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
inline int ConvolutionParameter::pad_size() const {
  return pad_.size();
}
inline void ConvolutionParameter::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.pad)
  return pad_.Get(index);
}
inline void ConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.pad)
}
inline void ConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ConvolutionParameter.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ConvolutionParameter.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 kernel_size = 4;
inline int ConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
inline void ConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
inline void ConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.kernel_size)
}
inline void ConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ConvolutionParameter.kernel_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 6;
inline int ConvolutionParameter::stride_size() const {
  return stride_.size();
}
inline void ConvolutionParameter::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.stride)
  return stride_.Get(index);
}
inline void ConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.stride)
}
inline void ConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ConvolutionParameter.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ConvolutionParameter.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 18;
inline int ConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
inline void ConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.dilation)
  return dilation_.Get(index);
}
inline void ConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.dilation)
}
inline void ConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ConvolutionParameter.dilation)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ConvolutionParameter.dilation)
  return dilation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ConvolutionParameter.dilation)
  return &dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.pad_h)
  return pad_h_;
}
inline void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.pad_w)
  return pad_w_;
}
inline void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.kernel_h)
  return kernel_h_;
}
inline void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.kernel_w)
  return kernel_w_;
}
inline void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
inline bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.stride_h)
  return stride_h_;
}
inline void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
inline bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.stride_w)
  return stride_w_;
}
inline void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.group)
  return group_;
}
inline void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.group)
}

// optional .apollo.perception.inference.FillerParameter weight_filler = 7;
inline bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::apollo::perception::inference::FillerParameter& ConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ConvolutionParameter.weight_filler)
  return weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* ConvolutionParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::apollo::perception::inference::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ConvolutionParameter.weight_filler)
}

// optional .apollo.perception.inference.FillerParameter bias_filler = 8;
inline bool ConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::apollo::perception::inference::FillerParameter& ConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ConvolutionParameter.bias_filler)
  return bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* ConvolutionParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::apollo::perception::inference::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ConvolutionParameter.bias_filler)
}

// optional .apollo.perception.inference.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::apollo::perception::inference::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.engine)
  return static_cast< ::apollo::perception::inference::ConvolutionParameter_Engine >(engine_);
}
inline void ConvolutionParameter::set_engine(::apollo::perception::inference::ConvolutionParameter_Engine value) {
  assert(::apollo::perception::inference::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
inline bool ConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.axis)
  return axis_;
}
inline void ConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
inline bool ConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
inline bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
inline void ConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ConvolutionParameter.force_nd_im2col)
}

// -------------------------------------------------------------------

// CropParameter

// optional int32 axis = 1 [default = 2];
inline bool CropParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CropParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CropParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CropParameter::clear_axis() {
  axis_ = 2;
  clear_has_axis();
}
inline ::google::protobuf::int32 CropParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.CropParameter.axis)
  return axis_;
}
inline void CropParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.CropParameter.axis)
}

// repeated uint32 offset = 2;
inline int CropParameter::offset_size() const {
  return offset_.size();
}
inline void CropParameter::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::uint32 CropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.CropParameter.offset)
  return offset_.Get(index);
}
inline void CropParameter::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.CropParameter.offset)
}
inline void CropParameter::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.CropParameter.offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CropParameter::offset() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.CropParameter.offset)
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CropParameter::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.CropParameter.offset)
  return &offset_;
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.source)
  return *source_;
}
inline void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.source)
}
inline void DataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.DataParameter.source)
}
inline void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.DataParameter.source)
}
inline ::std::string* DataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DataParameter.source)
  return source_;
}
inline ::std::string* DataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DataParameter.source)
}

// optional uint32 batch_size = 4;
inline bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.batch_size)
  return batch_size_;
}
inline void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool DataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.rand_skip)
  return rand_skip_;
}
inline void DataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.rand_skip)
}

// optional .apollo.perception.inference.DataParameter.DB backend = 8 [default = LEVELDB];
inline bool DataParameter::has_backend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataParameter::set_has_backend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataParameter::clear_has_backend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataParameter::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
inline ::apollo::perception::inference::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.backend)
  return static_cast< ::apollo::perception::inference::DataParameter_DB >(backend_);
}
inline void DataParameter::set_backend(::apollo::perception::inference::DataParameter_DB value) {
  assert(::apollo::perception::inference::DataParameter_DB_IsValid(value));
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.backend)
}

// optional float scale = 2 [default = 1];
inline bool DataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.scale)
  return scale_;
}
inline void DataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.scale)
}

// optional string mean_file = 3;
inline bool DataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.mean_file)
  return *mean_file_;
}
inline void DataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.DataParameter.mean_file)
}
inline ::std::string* DataParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DataParameter.mean_file)
  return mean_file_;
}
inline ::std::string* DataParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool DataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.crop_size)
  return crop_size_;
}
inline void DataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool DataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.mirror)
  return mirror_;
}
inline void DataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.mirror)
}

// optional bool force_encoded_color = 9 [default = false];
inline bool DataParameter::has_force_encoded_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataParameter::set_has_force_encoded_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataParameter::clear_has_force_encoded_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataParameter::clear_force_encoded_color() {
  force_encoded_color_ = false;
  clear_has_force_encoded_color();
}
inline bool DataParameter::force_encoded_color() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.force_encoded_color)
  return force_encoded_color_;
}
inline void DataParameter::set_force_encoded_color(bool value) {
  set_has_force_encoded_color();
  force_encoded_color_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.force_encoded_color)
}

// optional uint32 prefetch = 10 [default = 4];
inline bool DataParameter::has_prefetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataParameter::set_has_prefetch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DataParameter::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DataParameter::clear_prefetch() {
  prefetch_ = 4u;
  clear_has_prefetch();
}
inline ::google::protobuf::uint32 DataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DataParameter.prefetch)
  return prefetch_;
}
inline void DataParameter::set_prefetch(::google::protobuf::uint32 value) {
  set_has_prefetch();
  prefetch_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DataParameter.prefetch)
}

// -------------------------------------------------------------------

// DetectionEvaluateParameter

// optional uint32 num_classes = 1;
inline bool DetectionEvaluateParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectionEvaluateParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectionEvaluateParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectionEvaluateParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 DetectionEvaluateParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionEvaluateParameter.num_classes)
  return num_classes_;
}
inline void DetectionEvaluateParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionEvaluateParameter.num_classes)
}

// optional uint32 background_label_id = 2 [default = 0];
inline bool DetectionEvaluateParameter::has_background_label_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectionEvaluateParameter::set_has_background_label_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectionEvaluateParameter::clear_has_background_label_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectionEvaluateParameter::clear_background_label_id() {
  background_label_id_ = 0u;
  clear_has_background_label_id();
}
inline ::google::protobuf::uint32 DetectionEvaluateParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionEvaluateParameter.background_label_id)
  return background_label_id_;
}
inline void DetectionEvaluateParameter::set_background_label_id(::google::protobuf::uint32 value) {
  set_has_background_label_id();
  background_label_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionEvaluateParameter.background_label_id)
}

// optional float overlap_threshold = 3 [default = 0.5];
inline bool DetectionEvaluateParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectionEvaluateParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectionEvaluateParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectionEvaluateParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.5f;
  clear_has_overlap_threshold();
}
inline float DetectionEvaluateParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionEvaluateParameter.overlap_threshold)
  return overlap_threshold_;
}
inline void DetectionEvaluateParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionEvaluateParameter.overlap_threshold)
}

// optional bool evaluate_difficult_gt = 4 [default = true];
inline bool DetectionEvaluateParameter::has_evaluate_difficult_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectionEvaluateParameter::set_has_evaluate_difficult_gt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectionEvaluateParameter::clear_has_evaluate_difficult_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectionEvaluateParameter::clear_evaluate_difficult_gt() {
  evaluate_difficult_gt_ = true;
  clear_has_evaluate_difficult_gt();
}
inline bool DetectionEvaluateParameter::evaluate_difficult_gt() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionEvaluateParameter.evaluate_difficult_gt)
  return evaluate_difficult_gt_;
}
inline void DetectionEvaluateParameter::set_evaluate_difficult_gt(bool value) {
  set_has_evaluate_difficult_gt();
  evaluate_difficult_gt_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionEvaluateParameter.evaluate_difficult_gt)
}

// optional string name_size_file = 5;
inline bool DetectionEvaluateParameter::has_name_size_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectionEvaluateParameter::set_has_name_size_file() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectionEvaluateParameter::clear_has_name_size_file() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectionEvaluateParameter::clear_name_size_file() {
  if (name_size_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_size_file_->clear();
  }
  clear_has_name_size_file();
}
inline const ::std::string& DetectionEvaluateParameter::name_size_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionEvaluateParameter.name_size_file)
  return *name_size_file_;
}
inline void DetectionEvaluateParameter::set_name_size_file(const ::std::string& value) {
  set_has_name_size_file();
  if (name_size_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_size_file_ = new ::std::string;
  }
  name_size_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionEvaluateParameter.name_size_file)
}
inline void DetectionEvaluateParameter::set_name_size_file(const char* value) {
  set_has_name_size_file();
  if (name_size_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_size_file_ = new ::std::string;
  }
  name_size_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.DetectionEvaluateParameter.name_size_file)
}
inline void DetectionEvaluateParameter::set_name_size_file(const char* value, size_t size) {
  set_has_name_size_file();
  if (name_size_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_size_file_ = new ::std::string;
  }
  name_size_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.DetectionEvaluateParameter.name_size_file)
}
inline ::std::string* DetectionEvaluateParameter::mutable_name_size_file() {
  set_has_name_size_file();
  if (name_size_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_size_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DetectionEvaluateParameter.name_size_file)
  return name_size_file_;
}
inline ::std::string* DetectionEvaluateParameter::release_name_size_file() {
  clear_has_name_size_file();
  if (name_size_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_size_file_;
    name_size_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DetectionEvaluateParameter::set_allocated_name_size_file(::std::string* name_size_file) {
  if (name_size_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_size_file_;
  }
  if (name_size_file) {
    set_has_name_size_file();
    name_size_file_ = name_size_file;
  } else {
    clear_has_name_size_file();
    name_size_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DetectionEvaluateParameter.name_size_file)
}

// optional .apollo.perception.inference.ResizeParameter resize_param = 6;
inline bool DetectionEvaluateParameter::has_resize_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetectionEvaluateParameter::set_has_resize_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetectionEvaluateParameter::clear_has_resize_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetectionEvaluateParameter::clear_resize_param() {
  if (resize_param_ != NULL) resize_param_->::apollo::perception::inference::ResizeParameter::Clear();
  clear_has_resize_param();
}
inline const ::apollo::perception::inference::ResizeParameter& DetectionEvaluateParameter::resize_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionEvaluateParameter.resize_param)
  return resize_param_ != NULL ? *resize_param_ : *default_instance_->resize_param_;
}
inline ::apollo::perception::inference::ResizeParameter* DetectionEvaluateParameter::mutable_resize_param() {
  set_has_resize_param();
  if (resize_param_ == NULL) resize_param_ = new ::apollo::perception::inference::ResizeParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DetectionEvaluateParameter.resize_param)
  return resize_param_;
}
inline ::apollo::perception::inference::ResizeParameter* DetectionEvaluateParameter::release_resize_param() {
  clear_has_resize_param();
  ::apollo::perception::inference::ResizeParameter* temp = resize_param_;
  resize_param_ = NULL;
  return temp;
}
inline void DetectionEvaluateParameter::set_allocated_resize_param(::apollo::perception::inference::ResizeParameter* resize_param) {
  delete resize_param_;
  resize_param_ = resize_param;
  if (resize_param) {
    set_has_resize_param();
  } else {
    clear_has_resize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DetectionEvaluateParameter.resize_param)
}

// -------------------------------------------------------------------

// NonMaximumSuppressionParameter

// optional float nms_threshold = 1 [default = 0.3];
inline bool NonMaximumSuppressionParameter::has_nms_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NonMaximumSuppressionParameter::set_has_nms_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NonMaximumSuppressionParameter::clear_has_nms_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NonMaximumSuppressionParameter::clear_nms_threshold() {
  nms_threshold_ = 0.3f;
  clear_has_nms_threshold();
}
inline float NonMaximumSuppressionParameter::nms_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NonMaximumSuppressionParameter.nms_threshold)
  return nms_threshold_;
}
inline void NonMaximumSuppressionParameter::set_nms_threshold(float value) {
  set_has_nms_threshold();
  nms_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NonMaximumSuppressionParameter.nms_threshold)
}

// optional int32 top_k = 2;
inline bool NonMaximumSuppressionParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NonMaximumSuppressionParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NonMaximumSuppressionParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NonMaximumSuppressionParameter::clear_top_k() {
  top_k_ = 0;
  clear_has_top_k();
}
inline ::google::protobuf::int32 NonMaximumSuppressionParameter::top_k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NonMaximumSuppressionParameter.top_k)
  return top_k_;
}
inline void NonMaximumSuppressionParameter::set_top_k(::google::protobuf::int32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NonMaximumSuppressionParameter.top_k)
}

// optional float eta = 3 [default = 1];
inline bool NonMaximumSuppressionParameter::has_eta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NonMaximumSuppressionParameter::set_has_eta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NonMaximumSuppressionParameter::clear_has_eta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NonMaximumSuppressionParameter::clear_eta() {
  eta_ = 1;
  clear_has_eta();
}
inline float NonMaximumSuppressionParameter::eta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NonMaximumSuppressionParameter.eta)
  return eta_;
}
inline void NonMaximumSuppressionParameter::set_eta(float value) {
  set_has_eta();
  eta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NonMaximumSuppressionParameter.eta)
}

// -------------------------------------------------------------------

// SaveOutputParameter

// optional string output_directory = 1;
inline bool SaveOutputParameter::has_output_directory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveOutputParameter::set_has_output_directory() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveOutputParameter::clear_has_output_directory() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveOutputParameter::clear_output_directory() {
  if (output_directory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_directory_->clear();
  }
  clear_has_output_directory();
}
inline const ::std::string& SaveOutputParameter::output_directory() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.output_directory)
  return *output_directory_;
}
inline void SaveOutputParameter::set_output_directory(const ::std::string& value) {
  set_has_output_directory();
  if (output_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_directory_ = new ::std::string;
  }
  output_directory_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaveOutputParameter.output_directory)
}
inline void SaveOutputParameter::set_output_directory(const char* value) {
  set_has_output_directory();
  if (output_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_directory_ = new ::std::string;
  }
  output_directory_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.SaveOutputParameter.output_directory)
}
inline void SaveOutputParameter::set_output_directory(const char* value, size_t size) {
  set_has_output_directory();
  if (output_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_directory_ = new ::std::string;
  }
  output_directory_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.SaveOutputParameter.output_directory)
}
inline ::std::string* SaveOutputParameter::mutable_output_directory() {
  set_has_output_directory();
  if (output_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_directory_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.SaveOutputParameter.output_directory)
  return output_directory_;
}
inline ::std::string* SaveOutputParameter::release_output_directory() {
  clear_has_output_directory();
  if (output_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = output_directory_;
    output_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SaveOutputParameter::set_allocated_output_directory(::std::string* output_directory) {
  if (output_directory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete output_directory_;
  }
  if (output_directory) {
    set_has_output_directory();
    output_directory_ = output_directory;
  } else {
    clear_has_output_directory();
    output_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.SaveOutputParameter.output_directory)
}

// optional string output_name_prefix = 2;
inline bool SaveOutputParameter::has_output_name_prefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveOutputParameter::set_has_output_name_prefix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveOutputParameter::clear_has_output_name_prefix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveOutputParameter::clear_output_name_prefix() {
  if (output_name_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_name_prefix_->clear();
  }
  clear_has_output_name_prefix();
}
inline const ::std::string& SaveOutputParameter::output_name_prefix() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.output_name_prefix)
  return *output_name_prefix_;
}
inline void SaveOutputParameter::set_output_name_prefix(const ::std::string& value) {
  set_has_output_name_prefix();
  if (output_name_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_name_prefix_ = new ::std::string;
  }
  output_name_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaveOutputParameter.output_name_prefix)
}
inline void SaveOutputParameter::set_output_name_prefix(const char* value) {
  set_has_output_name_prefix();
  if (output_name_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_name_prefix_ = new ::std::string;
  }
  output_name_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.SaveOutputParameter.output_name_prefix)
}
inline void SaveOutputParameter::set_output_name_prefix(const char* value, size_t size) {
  set_has_output_name_prefix();
  if (output_name_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_name_prefix_ = new ::std::string;
  }
  output_name_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.SaveOutputParameter.output_name_prefix)
}
inline ::std::string* SaveOutputParameter::mutable_output_name_prefix() {
  set_has_output_name_prefix();
  if (output_name_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_name_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.SaveOutputParameter.output_name_prefix)
  return output_name_prefix_;
}
inline ::std::string* SaveOutputParameter::release_output_name_prefix() {
  clear_has_output_name_prefix();
  if (output_name_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = output_name_prefix_;
    output_name_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SaveOutputParameter::set_allocated_output_name_prefix(::std::string* output_name_prefix) {
  if (output_name_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete output_name_prefix_;
  }
  if (output_name_prefix) {
    set_has_output_name_prefix();
    output_name_prefix_ = output_name_prefix;
  } else {
    clear_has_output_name_prefix();
    output_name_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.SaveOutputParameter.output_name_prefix)
}

// optional string output_format = 3;
inline bool SaveOutputParameter::has_output_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveOutputParameter::set_has_output_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SaveOutputParameter::clear_has_output_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SaveOutputParameter::clear_output_format() {
  if (output_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_format_->clear();
  }
  clear_has_output_format();
}
inline const ::std::string& SaveOutputParameter::output_format() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.output_format)
  return *output_format_;
}
inline void SaveOutputParameter::set_output_format(const ::std::string& value) {
  set_has_output_format();
  if (output_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_format_ = new ::std::string;
  }
  output_format_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaveOutputParameter.output_format)
}
inline void SaveOutputParameter::set_output_format(const char* value) {
  set_has_output_format();
  if (output_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_format_ = new ::std::string;
  }
  output_format_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.SaveOutputParameter.output_format)
}
inline void SaveOutputParameter::set_output_format(const char* value, size_t size) {
  set_has_output_format();
  if (output_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_format_ = new ::std::string;
  }
  output_format_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.SaveOutputParameter.output_format)
}
inline ::std::string* SaveOutputParameter::mutable_output_format() {
  set_has_output_format();
  if (output_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_format_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.SaveOutputParameter.output_format)
  return output_format_;
}
inline ::std::string* SaveOutputParameter::release_output_format() {
  clear_has_output_format();
  if (output_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = output_format_;
    output_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SaveOutputParameter::set_allocated_output_format(::std::string* output_format) {
  if (output_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete output_format_;
  }
  if (output_format) {
    set_has_output_format();
    output_format_ = output_format;
  } else {
    clear_has_output_format();
    output_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.SaveOutputParameter.output_format)
}

// optional string label_map_file = 4;
inline bool SaveOutputParameter::has_label_map_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SaveOutputParameter::set_has_label_map_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SaveOutputParameter::clear_has_label_map_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SaveOutputParameter::clear_label_map_file() {
  if (label_map_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_->clear();
  }
  clear_has_label_map_file();
}
inline const ::std::string& SaveOutputParameter::label_map_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.label_map_file)
  return *label_map_file_;
}
inline void SaveOutputParameter::set_label_map_file(const ::std::string& value) {
  set_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_ = new ::std::string;
  }
  label_map_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaveOutputParameter.label_map_file)
}
inline void SaveOutputParameter::set_label_map_file(const char* value) {
  set_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_ = new ::std::string;
  }
  label_map_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.SaveOutputParameter.label_map_file)
}
inline void SaveOutputParameter::set_label_map_file(const char* value, size_t size) {
  set_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_ = new ::std::string;
  }
  label_map_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.SaveOutputParameter.label_map_file)
}
inline ::std::string* SaveOutputParameter::mutable_label_map_file() {
  set_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.SaveOutputParameter.label_map_file)
  return label_map_file_;
}
inline ::std::string* SaveOutputParameter::release_label_map_file() {
  clear_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_map_file_;
    label_map_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SaveOutputParameter::set_allocated_label_map_file(::std::string* label_map_file) {
  if (label_map_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_map_file_;
  }
  if (label_map_file) {
    set_has_label_map_file();
    label_map_file_ = label_map_file;
  } else {
    clear_has_label_map_file();
    label_map_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.SaveOutputParameter.label_map_file)
}

// optional string name_size_file = 5;
inline bool SaveOutputParameter::has_name_size_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SaveOutputParameter::set_has_name_size_file() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SaveOutputParameter::clear_has_name_size_file() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SaveOutputParameter::clear_name_size_file() {
  if (name_size_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_size_file_->clear();
  }
  clear_has_name_size_file();
}
inline const ::std::string& SaveOutputParameter::name_size_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.name_size_file)
  return *name_size_file_;
}
inline void SaveOutputParameter::set_name_size_file(const ::std::string& value) {
  set_has_name_size_file();
  if (name_size_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_size_file_ = new ::std::string;
  }
  name_size_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaveOutputParameter.name_size_file)
}
inline void SaveOutputParameter::set_name_size_file(const char* value) {
  set_has_name_size_file();
  if (name_size_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_size_file_ = new ::std::string;
  }
  name_size_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.SaveOutputParameter.name_size_file)
}
inline void SaveOutputParameter::set_name_size_file(const char* value, size_t size) {
  set_has_name_size_file();
  if (name_size_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_size_file_ = new ::std::string;
  }
  name_size_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.SaveOutputParameter.name_size_file)
}
inline ::std::string* SaveOutputParameter::mutable_name_size_file() {
  set_has_name_size_file();
  if (name_size_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_size_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.SaveOutputParameter.name_size_file)
  return name_size_file_;
}
inline ::std::string* SaveOutputParameter::release_name_size_file() {
  clear_has_name_size_file();
  if (name_size_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_size_file_;
    name_size_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SaveOutputParameter::set_allocated_name_size_file(::std::string* name_size_file) {
  if (name_size_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_size_file_;
  }
  if (name_size_file) {
    set_has_name_size_file();
    name_size_file_ = name_size_file;
  } else {
    clear_has_name_size_file();
    name_size_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.SaveOutputParameter.name_size_file)
}

// optional uint32 num_test_image = 6;
inline bool SaveOutputParameter::has_num_test_image() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SaveOutputParameter::set_has_num_test_image() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SaveOutputParameter::clear_has_num_test_image() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SaveOutputParameter::clear_num_test_image() {
  num_test_image_ = 0u;
  clear_has_num_test_image();
}
inline ::google::protobuf::uint32 SaveOutputParameter::num_test_image() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.num_test_image)
  return num_test_image_;
}
inline void SaveOutputParameter::set_num_test_image(::google::protobuf::uint32 value) {
  set_has_num_test_image();
  num_test_image_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SaveOutputParameter.num_test_image)
}

// optional .apollo.perception.inference.ResizeParameter resize_param = 7;
inline bool SaveOutputParameter::has_resize_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SaveOutputParameter::set_has_resize_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SaveOutputParameter::clear_has_resize_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SaveOutputParameter::clear_resize_param() {
  if (resize_param_ != NULL) resize_param_->::apollo::perception::inference::ResizeParameter::Clear();
  clear_has_resize_param();
}
inline const ::apollo::perception::inference::ResizeParameter& SaveOutputParameter::resize_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SaveOutputParameter.resize_param)
  return resize_param_ != NULL ? *resize_param_ : *default_instance_->resize_param_;
}
inline ::apollo::perception::inference::ResizeParameter* SaveOutputParameter::mutable_resize_param() {
  set_has_resize_param();
  if (resize_param_ == NULL) resize_param_ = new ::apollo::perception::inference::ResizeParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.SaveOutputParameter.resize_param)
  return resize_param_;
}
inline ::apollo::perception::inference::ResizeParameter* SaveOutputParameter::release_resize_param() {
  clear_has_resize_param();
  ::apollo::perception::inference::ResizeParameter* temp = resize_param_;
  resize_param_ = NULL;
  return temp;
}
inline void SaveOutputParameter::set_allocated_resize_param(::apollo::perception::inference::ResizeParameter* resize_param) {
  delete resize_param_;
  resize_param_ = resize_param;
  if (resize_param) {
    set_has_resize_param();
  } else {
    clear_has_resize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.SaveOutputParameter.resize_param)
}

// -------------------------------------------------------------------

// DetectionOutputParameter

// optional uint32 num_classes = 1;
inline bool DetectionOutputParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectionOutputParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectionOutputParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectionOutputParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 DetectionOutputParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.num_classes)
  return num_classes_;
}
inline void DetectionOutputParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.num_classes)
}

// optional bool share_location = 2 [default = true];
inline bool DetectionOutputParameter::has_share_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectionOutputParameter::set_has_share_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectionOutputParameter::clear_has_share_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectionOutputParameter::clear_share_location() {
  share_location_ = true;
  clear_has_share_location();
}
inline bool DetectionOutputParameter::share_location() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.share_location)
  return share_location_;
}
inline void DetectionOutputParameter::set_share_location(bool value) {
  set_has_share_location();
  share_location_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.share_location)
}

// optional int32 background_label_id = 3 [default = 0];
inline bool DetectionOutputParameter::has_background_label_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectionOutputParameter::set_has_background_label_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectionOutputParameter::clear_has_background_label_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectionOutputParameter::clear_background_label_id() {
  background_label_id_ = 0;
  clear_has_background_label_id();
}
inline ::google::protobuf::int32 DetectionOutputParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.background_label_id)
  return background_label_id_;
}
inline void DetectionOutputParameter::set_background_label_id(::google::protobuf::int32 value) {
  set_has_background_label_id();
  background_label_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.background_label_id)
}

// optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 4;
inline bool DetectionOutputParameter::has_nms_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectionOutputParameter::set_has_nms_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectionOutputParameter::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectionOutputParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::apollo::perception::inference::NonMaximumSuppressionParameter::Clear();
  clear_has_nms_param();
}
inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& DetectionOutputParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_ : *default_instance_->nms_param_;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* DetectionOutputParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) nms_param_ = new ::apollo::perception::inference::NonMaximumSuppressionParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DetectionOutputParameter.nms_param)
  return nms_param_;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* DetectionOutputParameter::release_nms_param() {
  clear_has_nms_param();
  ::apollo::perception::inference::NonMaximumSuppressionParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
inline void DetectionOutputParameter::set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DetectionOutputParameter.nms_param)
}

// optional .apollo.perception.inference.SaveOutputParameter save_output_param = 5;
inline bool DetectionOutputParameter::has_save_output_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectionOutputParameter::set_has_save_output_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectionOutputParameter::clear_has_save_output_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectionOutputParameter::clear_save_output_param() {
  if (save_output_param_ != NULL) save_output_param_->::apollo::perception::inference::SaveOutputParameter::Clear();
  clear_has_save_output_param();
}
inline const ::apollo::perception::inference::SaveOutputParameter& DetectionOutputParameter::save_output_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.save_output_param)
  return save_output_param_ != NULL ? *save_output_param_ : *default_instance_->save_output_param_;
}
inline ::apollo::perception::inference::SaveOutputParameter* DetectionOutputParameter::mutable_save_output_param() {
  set_has_save_output_param();
  if (save_output_param_ == NULL) save_output_param_ = new ::apollo::perception::inference::SaveOutputParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DetectionOutputParameter.save_output_param)
  return save_output_param_;
}
inline ::apollo::perception::inference::SaveOutputParameter* DetectionOutputParameter::release_save_output_param() {
  clear_has_save_output_param();
  ::apollo::perception::inference::SaveOutputParameter* temp = save_output_param_;
  save_output_param_ = NULL;
  return temp;
}
inline void DetectionOutputParameter::set_allocated_save_output_param(::apollo::perception::inference::SaveOutputParameter* save_output_param) {
  delete save_output_param_;
  save_output_param_ = save_output_param;
  if (save_output_param) {
    set_has_save_output_param();
  } else {
    clear_has_save_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DetectionOutputParameter.save_output_param)
}

// optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
inline bool DetectionOutputParameter::has_code_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetectionOutputParameter::set_has_code_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetectionOutputParameter::clear_has_code_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetectionOutputParameter::clear_code_type() {
  code_type_ = 1;
  clear_has_code_type();
}
inline ::apollo::perception::inference::PriorBoxParameter_CodeType DetectionOutputParameter::code_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.code_type)
  return static_cast< ::apollo::perception::inference::PriorBoxParameter_CodeType >(code_type_);
}
inline void DetectionOutputParameter::set_code_type(::apollo::perception::inference::PriorBoxParameter_CodeType value) {
  assert(::apollo::perception::inference::PriorBoxParameter_CodeType_IsValid(value));
  set_has_code_type();
  code_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.code_type)
}

// optional bool variance_encoded_in_target = 8 [default = false];
inline bool DetectionOutputParameter::has_variance_encoded_in_target() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DetectionOutputParameter::set_has_variance_encoded_in_target() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DetectionOutputParameter::clear_has_variance_encoded_in_target() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DetectionOutputParameter::clear_variance_encoded_in_target() {
  variance_encoded_in_target_ = false;
  clear_has_variance_encoded_in_target();
}
inline bool DetectionOutputParameter::variance_encoded_in_target() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.variance_encoded_in_target)
  return variance_encoded_in_target_;
}
inline void DetectionOutputParameter::set_variance_encoded_in_target(bool value) {
  set_has_variance_encoded_in_target();
  variance_encoded_in_target_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.variance_encoded_in_target)
}

// optional int32 keep_top_k = 7 [default = -1];
inline bool DetectionOutputParameter::has_keep_top_k() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DetectionOutputParameter::set_has_keep_top_k() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DetectionOutputParameter::clear_has_keep_top_k() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DetectionOutputParameter::clear_keep_top_k() {
  keep_top_k_ = -1;
  clear_has_keep_top_k();
}
inline ::google::protobuf::int32 DetectionOutputParameter::keep_top_k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.keep_top_k)
  return keep_top_k_;
}
inline void DetectionOutputParameter::set_keep_top_k(::google::protobuf::int32 value) {
  set_has_keep_top_k();
  keep_top_k_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.keep_top_k)
}

// optional float confidence_threshold = 9;
inline bool DetectionOutputParameter::has_confidence_threshold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DetectionOutputParameter::set_has_confidence_threshold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DetectionOutputParameter::clear_has_confidence_threshold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DetectionOutputParameter::clear_confidence_threshold() {
  confidence_threshold_ = 0;
  clear_has_confidence_threshold();
}
inline float DetectionOutputParameter::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.confidence_threshold)
  return confidence_threshold_;
}
inline void DetectionOutputParameter::set_confidence_threshold(float value) {
  set_has_confidence_threshold();
  confidence_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.confidence_threshold)
}

// optional bool visualize = 10 [default = false];
inline bool DetectionOutputParameter::has_visualize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DetectionOutputParameter::set_has_visualize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DetectionOutputParameter::clear_has_visualize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DetectionOutputParameter::clear_visualize() {
  visualize_ = false;
  clear_has_visualize();
}
inline bool DetectionOutputParameter::visualize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.visualize)
  return visualize_;
}
inline void DetectionOutputParameter::set_visualize(bool value) {
  set_has_visualize();
  visualize_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.visualize)
}

// optional float visualize_threshold = 11;
inline bool DetectionOutputParameter::has_visualize_threshold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DetectionOutputParameter::set_has_visualize_threshold() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DetectionOutputParameter::clear_has_visualize_threshold() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DetectionOutputParameter::clear_visualize_threshold() {
  visualize_threshold_ = 0;
  clear_has_visualize_threshold();
}
inline float DetectionOutputParameter::visualize_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.visualize_threshold)
  return visualize_threshold_;
}
inline void DetectionOutputParameter::set_visualize_threshold(float value) {
  set_has_visualize_threshold();
  visualize_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.visualize_threshold)
}

// optional string save_file = 12;
inline bool DetectionOutputParameter::has_save_file() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DetectionOutputParameter::set_has_save_file() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DetectionOutputParameter::clear_has_save_file() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DetectionOutputParameter::clear_save_file() {
  if (save_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    save_file_->clear();
  }
  clear_has_save_file();
}
inline const ::std::string& DetectionOutputParameter::save_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DetectionOutputParameter.save_file)
  return *save_file_;
}
inline void DetectionOutputParameter::set_save_file(const ::std::string& value) {
  set_has_save_file();
  if (save_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    save_file_ = new ::std::string;
  }
  save_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DetectionOutputParameter.save_file)
}
inline void DetectionOutputParameter::set_save_file(const char* value) {
  set_has_save_file();
  if (save_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    save_file_ = new ::std::string;
  }
  save_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.DetectionOutputParameter.save_file)
}
inline void DetectionOutputParameter::set_save_file(const char* value, size_t size) {
  set_has_save_file();
  if (save_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    save_file_ = new ::std::string;
  }
  save_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.DetectionOutputParameter.save_file)
}
inline ::std::string* DetectionOutputParameter::mutable_save_file() {
  set_has_save_file();
  if (save_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    save_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DetectionOutputParameter.save_file)
  return save_file_;
}
inline ::std::string* DetectionOutputParameter::release_save_file() {
  clear_has_save_file();
  if (save_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = save_file_;
    save_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DetectionOutputParameter::set_allocated_save_file(::std::string* save_file) {
  if (save_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete save_file_;
  }
  if (save_file) {
    set_has_save_file();
    save_file_ = save_file;
  } else {
    clear_has_save_file();
    save_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DetectionOutputParameter.save_file)
}

// -------------------------------------------------------------------

// RegionOutputParameter

// optional uint32 num_classes = 1;
inline bool RegionOutputParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionOutputParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionOutputParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionOutputParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 RegionOutputParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.num_classes)
  return num_classes_;
}
inline void RegionOutputParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionOutputParameter.num_classes)
}

// optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 2;
inline bool RegionOutputParameter::has_nms_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionOutputParameter::set_has_nms_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionOutputParameter::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionOutputParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::apollo::perception::inference::NonMaximumSuppressionParameter::Clear();
  clear_has_nms_param();
}
inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& RegionOutputParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_ : *default_instance_->nms_param_;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* RegionOutputParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) nms_param_ = new ::apollo::perception::inference::NonMaximumSuppressionParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RegionOutputParameter.nms_param)
  return nms_param_;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* RegionOutputParameter::release_nms_param() {
  clear_has_nms_param();
  ::apollo::perception::inference::NonMaximumSuppressionParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
inline void RegionOutputParameter::set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.RegionOutputParameter.nms_param)
}

// optional int32 keep_top_k = 3 [default = -1];
inline bool RegionOutputParameter::has_keep_top_k() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegionOutputParameter::set_has_keep_top_k() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegionOutputParameter::clear_has_keep_top_k() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegionOutputParameter::clear_keep_top_k() {
  keep_top_k_ = -1;
  clear_has_keep_top_k();
}
inline ::google::protobuf::int32 RegionOutputParameter::keep_top_k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.keep_top_k)
  return keep_top_k_;
}
inline void RegionOutputParameter::set_keep_top_k(::google::protobuf::int32 value) {
  set_has_keep_top_k();
  keep_top_k_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionOutputParameter.keep_top_k)
}

// optional float confidence_threshold = 4;
inline bool RegionOutputParameter::has_confidence_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegionOutputParameter::set_has_confidence_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegionOutputParameter::clear_has_confidence_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegionOutputParameter::clear_confidence_threshold() {
  confidence_threshold_ = 0;
  clear_has_confidence_threshold();
}
inline float RegionOutputParameter::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.confidence_threshold)
  return confidence_threshold_;
}
inline void RegionOutputParameter::set_confidence_threshold(float value) {
  set_has_confidence_threshold();
  confidence_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionOutputParameter.confidence_threshold)
}

// repeated .apollo.perception.inference.AnchorBox anchorbox = 5;
inline int RegionOutputParameter::anchorbox_size() const {
  return anchorbox_.size();
}
inline void RegionOutputParameter::clear_anchorbox() {
  anchorbox_.Clear();
}
inline const ::apollo::perception::inference::AnchorBox& RegionOutputParameter::anchorbox(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.anchorbox)
  return anchorbox_.Get(index);
}
inline ::apollo::perception::inference::AnchorBox* RegionOutputParameter::mutable_anchorbox(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RegionOutputParameter.anchorbox)
  return anchorbox_.Mutable(index);
}
inline ::apollo::perception::inference::AnchorBox* RegionOutputParameter::add_anchorbox() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.RegionOutputParameter.anchorbox)
  return anchorbox_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >&
RegionOutputParameter::anchorbox() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.RegionOutputParameter.anchorbox)
  return anchorbox_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >*
RegionOutputParameter::mutable_anchorbox() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.RegionOutputParameter.anchorbox)
  return &anchorbox_;
}

// optional int32 nms_type = 6;
inline bool RegionOutputParameter::has_nms_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegionOutputParameter::set_has_nms_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegionOutputParameter::clear_has_nms_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegionOutputParameter::clear_nms_type() {
  nms_type_ = 0;
  clear_has_nms_type();
}
inline ::google::protobuf::int32 RegionOutputParameter::nms_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.nms_type)
  return nms_type_;
}
inline void RegionOutputParameter::set_nms_type(::google::protobuf::int32 value) {
  set_has_nms_type();
  nms_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionOutputParameter.nms_type)
}

// optional float nms_sigma = 7;
inline bool RegionOutputParameter::has_nms_sigma() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegionOutputParameter::set_has_nms_sigma() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegionOutputParameter::clear_has_nms_sigma() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegionOutputParameter::clear_nms_sigma() {
  nms_sigma_ = 0;
  clear_has_nms_sigma();
}
inline float RegionOutputParameter::nms_sigma() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.nms_sigma)
  return nms_sigma_;
}
inline void RegionOutputParameter::set_nms_sigma(float value) {
  set_has_nms_sigma();
  nms_sigma_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionOutputParameter.nms_sigma)
}

// optional bool is_rpn = 8 [default = false];
inline bool RegionOutputParameter::has_is_rpn() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegionOutputParameter::set_has_is_rpn() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegionOutputParameter::clear_has_is_rpn() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegionOutputParameter::clear_is_rpn() {
  is_rpn_ = false;
  clear_has_is_rpn();
}
inline bool RegionOutputParameter::is_rpn() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionOutputParameter.is_rpn)
  return is_rpn_;
}
inline void RegionOutputParameter::set_is_rpn(bool value) {
  set_has_is_rpn();
  is_rpn_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionOutputParameter.is_rpn)
}

// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DropoutParameter.dropout_ratio)
}

// -------------------------------------------------------------------

// DummyDataParameter

// repeated .apollo.perception.inference.FillerParameter data_filler = 1;
inline int DummyDataParameter::data_filler_size() const {
  return data_filler_.size();
}
inline void DummyDataParameter::clear_data_filler() {
  data_filler_.Clear();
}
inline const ::apollo::perception::inference::FillerParameter& DummyDataParameter::data_filler(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DummyDataParameter.data_filler)
  return data_filler_.Get(index);
}
inline ::apollo::perception::inference::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DummyDataParameter.data_filler)
  return data_filler_.Mutable(index);
}
inline ::apollo::perception::inference::FillerParameter* DummyDataParameter::add_data_filler() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DummyDataParameter.data_filler)
  return data_filler_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::FillerParameter >&
DummyDataParameter::data_filler() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DummyDataParameter.data_filler)
  return data_filler_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DummyDataParameter.data_filler)
  return &data_filler_;
}

// repeated .apollo.perception.inference.BlobShape shape = 6;
inline int DummyDataParameter::shape_size() const {
  return shape_.size();
}
inline void DummyDataParameter::clear_shape() {
  shape_.Clear();
}
inline const ::apollo::perception::inference::BlobShape& DummyDataParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DummyDataParameter.shape)
  return shape_.Get(index);
}
inline ::apollo::perception::inference::BlobShape* DummyDataParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DummyDataParameter.shape)
  return shape_.Mutable(index);
}
inline ::apollo::perception::inference::BlobShape* DummyDataParameter::add_shape() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DummyDataParameter.shape)
  return shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape >&
DummyDataParameter::shape() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DummyDataParameter.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape >*
DummyDataParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DummyDataParameter.shape)
  return &shape_;
}

// repeated uint32 num = 2;
inline int DummyDataParameter::num_size() const {
  return num_.size();
}
inline void DummyDataParameter::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DummyDataParameter.num)
  return num_.Get(index);
}
inline void DummyDataParameter::set_num(int index, ::google::protobuf::uint32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DummyDataParameter.num)
}
inline void DummyDataParameter::add_num(::google::protobuf::uint32 value) {
  num_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DummyDataParameter.num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::num() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DummyDataParameter.num)
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DummyDataParameter.num)
  return &num_;
}

// repeated uint32 channels = 3;
inline int DummyDataParameter::channels_size() const {
  return channels_.size();
}
inline void DummyDataParameter::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DummyDataParameter.channels)
  return channels_.Get(index);
}
inline void DummyDataParameter::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DummyDataParameter.channels)
}
inline void DummyDataParameter::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DummyDataParameter.channels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::channels() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DummyDataParameter.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DummyDataParameter.channels)
  return &channels_;
}

// repeated uint32 height = 4;
inline int DummyDataParameter::height_size() const {
  return height_.size();
}
inline void DummyDataParameter::clear_height() {
  height_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DummyDataParameter.height)
  return height_.Get(index);
}
inline void DummyDataParameter::set_height(int index, ::google::protobuf::uint32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DummyDataParameter.height)
}
inline void DummyDataParameter::add_height(::google::protobuf::uint32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DummyDataParameter.height)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::height() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DummyDataParameter.height)
  return height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DummyDataParameter.height)
  return &height_;
}

// repeated uint32 width = 5;
inline int DummyDataParameter::width_size() const {
  return width_.size();
}
inline void DummyDataParameter::clear_width() {
  width_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DummyDataParameter.width)
  return width_.Get(index);
}
inline void DummyDataParameter::set_width(int index, ::google::protobuf::uint32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DummyDataParameter.width)
}
inline void DummyDataParameter::add_width(::google::protobuf::uint32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DummyDataParameter.width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::width() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DummyDataParameter.width)
  return width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DummyDataParameter.width)
  return &width_;
}

// -------------------------------------------------------------------

// EltwiseParameter

// optional .apollo.perception.inference.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::apollo::perception::inference::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EltwiseParameter.operation)
  return static_cast< ::apollo::perception::inference::EltwiseParameter_EltwiseOp >(operation_);
}
inline void EltwiseParameter::set_operation(::apollo::perception::inference::EltwiseParameter_EltwiseOp value) {
  assert(::apollo::perception::inference::EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EltwiseParameter.operation)
}

// repeated float coeff = 2;
inline int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
inline void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EltwiseParameter.coeff)
  return coeff_.Get(index);
}
inline void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EltwiseParameter.coeff)
}
inline void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.EltwiseParameter.coeff)
}
inline const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.EltwiseParameter.coeff)
  return coeff_;
}
inline ::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
inline bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
inline void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EltwiseParameter.stable_prod_grad)
}

// -------------------------------------------------------------------

// ELUParameter

// optional float alpha = 1 [default = 1];
inline bool ELUParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ELUParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ELUParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ELUParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float ELUParameter::alpha() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ELUParameter.alpha)
  return alpha_;
}
inline void ELUParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ELUParameter.alpha)
}

// -------------------------------------------------------------------

// EmbedParameter

// optional uint32 num_output = 1;
inline bool EmbedParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmbedParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmbedParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmbedParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 EmbedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmbedParameter.num_output)
  return num_output_;
}
inline void EmbedParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EmbedParameter.num_output)
}

// optional uint32 input_dim = 2;
inline bool EmbedParameter::has_input_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmbedParameter::set_has_input_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmbedParameter::clear_has_input_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmbedParameter::clear_input_dim() {
  input_dim_ = 0u;
  clear_has_input_dim();
}
inline ::google::protobuf::uint32 EmbedParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmbedParameter.input_dim)
  return input_dim_;
}
inline void EmbedParameter::set_input_dim(::google::protobuf::uint32 value) {
  set_has_input_dim();
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EmbedParameter.input_dim)
}

// optional bool bias_term = 3 [default = true];
inline bool EmbedParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmbedParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmbedParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmbedParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool EmbedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmbedParameter.bias_term)
  return bias_term_;
}
inline void EmbedParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.EmbedParameter.bias_term)
}

// optional .apollo.perception.inference.FillerParameter weight_filler = 4;
inline bool EmbedParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmbedParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmbedParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmbedParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::apollo::perception::inference::FillerParameter& EmbedParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmbedParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* EmbedParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.EmbedParameter.weight_filler)
  return weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* EmbedParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::apollo::perception::inference::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void EmbedParameter::set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.EmbedParameter.weight_filler)
}

// optional .apollo.perception.inference.FillerParameter bias_filler = 5;
inline bool EmbedParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmbedParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmbedParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmbedParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::apollo::perception::inference::FillerParameter& EmbedParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.EmbedParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* EmbedParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.EmbedParameter.bias_filler)
  return bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* EmbedParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::apollo::perception::inference::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void EmbedParameter::set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.EmbedParameter.bias_filler)
}

// -------------------------------------------------------------------

// ExpParameter

// optional float base = 1 [default = -1];
inline bool ExpParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ExpParameter.base)
  return base_;
}
inline void ExpParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ExpParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool ExpParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ExpParameter.scale)
  return scale_;
}
inline void ExpParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool ExpParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExpParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExpParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExpParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ExpParameter.shift)
  return shift_;
}
inline void ExpParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ExpParameter.shift)
}

// -------------------------------------------------------------------

// FlattenParameter

// optional int32 axis = 1 [default = 1];
inline bool FlattenParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlattenParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlattenParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlattenParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 FlattenParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FlattenParameter.axis)
  return axis_;
}
inline void FlattenParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FlattenParameter.axis)
}

// optional int32 end_axis = 2 [default = -1];
inline bool FlattenParameter::has_end_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlattenParameter::set_has_end_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlattenParameter::clear_has_end_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlattenParameter::clear_end_axis() {
  end_axis_ = -1;
  clear_has_end_axis();
}
inline ::google::protobuf::int32 FlattenParameter::end_axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.FlattenParameter.end_axis)
  return end_axis_;
}
inline void FlattenParameter::set_end_axis(::google::protobuf::int32 value) {
  set_has_end_axis();
  end_axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.FlattenParameter.end_axis)
}

// -------------------------------------------------------------------

// HDF5DataParameter

// optional string source = 1;
inline bool HDF5DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5DataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.HDF5DataParameter.source)
  return *source_;
}
inline void HDF5DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.HDF5DataParameter.source)
}
inline ::std::string* HDF5DataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.HDF5DataParameter.source)
  return source_;
}
inline ::std::string* HDF5DataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HDF5DataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool HDF5DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HDF5DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HDF5DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.HDF5DataParameter.batch_size)
  return batch_size_;
}
inline void HDF5DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.HDF5DataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
inline bool HDF5DataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HDF5DataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HDF5DataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HDF5DataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool HDF5DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.HDF5DataParameter.shuffle)
  return shuffle_;
}
inline void HDF5DataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.HDF5DataParameter.shuffle)
}

// -------------------------------------------------------------------

// HDF5OutputParameter

// optional string file_name = 1;
inline bool HDF5OutputParameter::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5OutputParameter::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5OutputParameter::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5OutputParameter::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.HDF5OutputParameter.file_name)
  return *file_name_;
}
inline void HDF5OutputParameter::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.HDF5OutputParameter.file_name)
}
inline ::std::string* HDF5OutputParameter::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.HDF5OutputParameter.file_name)
  return file_name_;
}
inline ::std::string* HDF5OutputParameter::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HDF5OutputParameter::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.HDF5OutputParameter.file_name)
}

// -------------------------------------------------------------------

// HingeLossParameter

// optional .apollo.perception.inference.HingeLossParameter.Norm norm = 1 [default = L1];
inline bool HingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HingeLossParameter::clear_norm() {
  norm_ = 1;
  clear_has_norm();
}
inline ::apollo::perception::inference::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.HingeLossParameter.norm)
  return static_cast< ::apollo::perception::inference::HingeLossParameter_Norm >(norm_);
}
inline void HingeLossParameter::set_norm(::apollo::perception::inference::HingeLossParameter_Norm value) {
  assert(::apollo::perception::inference::HingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.HingeLossParameter.norm)
}

// -------------------------------------------------------------------

// RepeatedList

// optional string list_path = 1;
inline bool RepeatedList::has_list_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RepeatedList::set_has_list_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RepeatedList::clear_has_list_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RepeatedList::clear_list_path() {
  if (list_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    list_path_->clear();
  }
  clear_has_list_path();
}
inline const ::std::string& RepeatedList::list_path() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RepeatedList.list_path)
  return *list_path_;
}
inline void RepeatedList::set_list_path(const ::std::string& value) {
  set_has_list_path();
  if (list_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    list_path_ = new ::std::string;
  }
  list_path_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RepeatedList.list_path)
}
inline void RepeatedList::set_list_path(const char* value) {
  set_has_list_path();
  if (list_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    list_path_ = new ::std::string;
  }
  list_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.RepeatedList.list_path)
}
inline void RepeatedList::set_list_path(const char* value, size_t size) {
  set_has_list_path();
  if (list_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    list_path_ = new ::std::string;
  }
  list_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.RepeatedList.list_path)
}
inline ::std::string* RepeatedList::mutable_list_path() {
  set_has_list_path();
  if (list_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    list_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RepeatedList.list_path)
  return list_path_;
}
inline ::std::string* RepeatedList::release_list_path() {
  clear_has_list_path();
  if (list_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = list_path_;
    list_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RepeatedList::set_allocated_list_path(::std::string* list_path) {
  if (list_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete list_path_;
  }
  if (list_path) {
    set_has_list_path();
    list_path_ = list_path;
  } else {
    clear_has_list_path();
    list_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.RepeatedList.list_path)
}

// optional uint32 num_repeat = 2 [default = 1];
inline bool RepeatedList::has_num_repeat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RepeatedList::set_has_num_repeat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RepeatedList::clear_has_num_repeat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RepeatedList::clear_num_repeat() {
  num_repeat_ = 1u;
  clear_has_num_repeat();
}
inline ::google::protobuf::uint32 RepeatedList::num_repeat() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RepeatedList.num_repeat)
  return num_repeat_;
}
inline void RepeatedList::set_num_repeat(::google::protobuf::uint32 value) {
  set_has_num_repeat();
  num_repeat_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RepeatedList.num_repeat)
}

// -------------------------------------------------------------------

// DatasetParameter

// optional string source = 1;
inline bool DatasetParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatasetParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatasetParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatasetParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& DatasetParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DatasetParameter.source)
  return *source_;
}
inline void DatasetParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DatasetParameter.source)
}
inline void DatasetParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.DatasetParameter.source)
}
inline void DatasetParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.DatasetParameter.source)
}
inline ::std::string* DatasetParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DatasetParameter.source)
  return source_;
}
inline ::std::string* DatasetParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DatasetParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DatasetParameter.source)
}

// optional string root_folder = 2;
inline bool DatasetParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DatasetParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DatasetParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DatasetParameter::clear_root_folder() {
  if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_->clear();
  }
  clear_has_root_folder();
}
inline const ::std::string& DatasetParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DatasetParameter.root_folder)
  return *root_folder_;
}
inline void DatasetParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DatasetParameter.root_folder)
}
inline void DatasetParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.DatasetParameter.root_folder)
}
inline void DatasetParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.DatasetParameter.root_folder)
}
inline ::std::string* DatasetParameter::mutable_root_folder() {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DatasetParameter.root_folder)
  return root_folder_;
}
inline ::std::string* DatasetParameter::release_root_folder() {
  clear_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = root_folder_;
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DatasetParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete root_folder_;
  }
  if (root_folder) {
    set_has_root_folder();
    root_folder_ = root_folder;
  } else {
    clear_has_root_folder();
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.DatasetParameter.root_folder)
}

// optional float weight = 3 [default = 1];
inline bool DatasetParameter::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DatasetParameter::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DatasetParameter::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DatasetParameter::clear_weight() {
  weight_ = 1;
  clear_has_weight();
}
inline float DatasetParameter::weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DatasetParameter.weight)
  return weight_;
}
inline void DatasetParameter::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DatasetParameter.weight)
}

// optional .apollo.perception.inference.DatasetParameter.DatasetType type = 4 [default = LIST];
inline bool DatasetParameter::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DatasetParameter::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DatasetParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DatasetParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::apollo::perception::inference::DatasetParameter_DatasetType DatasetParameter::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DatasetParameter.type)
  return static_cast< ::apollo::perception::inference::DatasetParameter_DatasetType >(type_);
}
inline void DatasetParameter::set_type(::apollo::perception::inference::DatasetParameter_DatasetType value) {
  assert(::apollo::perception::inference::DatasetParameter_DatasetType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DatasetParameter.type)
}

// optional bool shuffle = 5 [default = true];
inline bool DatasetParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DatasetParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DatasetParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DatasetParameter::clear_shuffle() {
  shuffle_ = true;
  clear_has_shuffle();
}
inline bool DatasetParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DatasetParameter.shuffle)
  return shuffle_;
}
inline void DatasetParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DatasetParameter.shuffle)
}

// repeated .apollo.perception.inference.RepeatedList repeated_list = 6;
inline int DatasetParameter::repeated_list_size() const {
  return repeated_list_.size();
}
inline void DatasetParameter::clear_repeated_list() {
  repeated_list_.Clear();
}
inline const ::apollo::perception::inference::RepeatedList& DatasetParameter::repeated_list(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DatasetParameter.repeated_list)
  return repeated_list_.Get(index);
}
inline ::apollo::perception::inference::RepeatedList* DatasetParameter::mutable_repeated_list(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.DatasetParameter.repeated_list)
  return repeated_list_.Mutable(index);
}
inline ::apollo::perception::inference::RepeatedList* DatasetParameter::add_repeated_list() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.DatasetParameter.repeated_list)
  return repeated_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::RepeatedList >&
DatasetParameter::repeated_list() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.DatasetParameter.repeated_list)
  return repeated_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::RepeatedList >*
DatasetParameter::mutable_repeated_list() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.DatasetParameter.repeated_list)
  return &repeated_list_;
}

// -------------------------------------------------------------------

// ImageDataParameter

// optional string source = 1;
inline bool ImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageDataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.source)
  return *source_;
}
inline void ImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.ImageDataParameter.source)
}
inline ::std::string* ImageDataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ImageDataParameter.source)
  return source_;
}
inline ::std::string* ImageDataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageDataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ImageDataParameter.source)
}

// optional uint32 batch_size = 4 [default = 1];
inline bool ImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.batch_size)
  return batch_size_;
}
inline void ImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.rand_skip)
  return rand_skip_;
}
inline void ImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.shuffle)
  return shuffle_;
}
inline void ImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
inline bool ImageDataParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageDataParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageDataParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.new_height)
  return new_height_;
}
inline void ImageDataParameter::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
inline bool ImageDataParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageDataParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageDataParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.new_width)
  return new_width_;
}
inline void ImageDataParameter::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.new_width)
}

// optional bool is_color = 11 [default = true];
inline bool ImageDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
inline bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.is_color)
  return is_color_;
}
inline void ImageDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.is_color)
}

// optional float scale = 2 [default = 1];
inline bool ImageDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.scale)
  return scale_;
}
inline void ImageDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.scale)
}

// optional string mean_file = 3;
inline bool ImageDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageDataParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.mean_file)
  return *mean_file_;
}
inline void ImageDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.ImageDataParameter.mean_file)
}
inline ::std::string* ImageDataParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ImageDataParameter.mean_file)
  return mean_file_;
}
inline ::std::string* ImageDataParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.crop_size)
  return crop_size_;
}
inline void ImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.mirror)
  return mirror_;
}
inline void ImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.mirror)
}

// optional string root_folder = 12 [default = ""];
inline bool ImageDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImageDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImageDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImageDataParameter::clear_root_folder() {
  if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_->clear();
  }
  clear_has_root_folder();
}
inline const ::std::string& ImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.root_folder)
  return *root_folder_;
}
inline void ImageDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.root_folder)
}
inline void ImageDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.ImageDataParameter.root_folder)
}
inline void ImageDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.ImageDataParameter.root_folder)
}
inline ::std::string* ImageDataParameter::mutable_root_folder() {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ImageDataParameter.root_folder)
  return root_folder_;
}
inline ::std::string* ImageDataParameter::release_root_folder() {
  clear_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = root_folder_;
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete root_folder_;
  }
  if (root_folder) {
    set_has_root_folder();
    root_folder_ = root_folder;
  } else {
    clear_has_root_folder();
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ImageDataParameter.root_folder)
}

// optional uint32 prefetch = 20 [default = 4];
inline bool ImageDataParameter::has_prefetch() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ImageDataParameter::set_has_prefetch() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ImageDataParameter::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ImageDataParameter::clear_prefetch() {
  prefetch_ = 4u;
  clear_has_prefetch();
}
inline ::google::protobuf::uint32 ImageDataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.prefetch)
  return prefetch_;
}
inline void ImageDataParameter::set_prefetch(::google::protobuf::uint32 value) {
  set_has_prefetch();
  prefetch_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ImageDataParameter.prefetch)
}

// repeated .apollo.perception.inference.DatasetParameter image_set = 100;
inline int ImageDataParameter::image_set_size() const {
  return image_set_.size();
}
inline void ImageDataParameter::clear_image_set() {
  image_set_.Clear();
}
inline const ::apollo::perception::inference::DatasetParameter& ImageDataParameter::image_set(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ImageDataParameter.image_set)
  return image_set_.Get(index);
}
inline ::apollo::perception::inference::DatasetParameter* ImageDataParameter::mutable_image_set(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ImageDataParameter.image_set)
  return image_set_.Mutable(index);
}
inline ::apollo::perception::inference::DatasetParameter* ImageDataParameter::add_image_set() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.ImageDataParameter.image_set)
  return image_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::DatasetParameter >&
ImageDataParameter::image_set() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.ImageDataParameter.image_set)
  return image_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::DatasetParameter >*
ImageDataParameter::mutable_image_set() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.ImageDataParameter.image_set)
  return &image_set_;
}

// -------------------------------------------------------------------

// InfogainLossParameter

// optional string source = 1;
inline bool InfogainLossParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfogainLossParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfogainLossParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfogainLossParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InfogainLossParameter.source)
  return *source_;
}
inline void InfogainLossParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.InfogainLossParameter.source)
}
inline ::std::string* InfogainLossParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.InfogainLossParameter.source)
  return source_;
}
inline ::std::string* InfogainLossParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InfogainLossParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.InfogainLossParameter.source)
}

// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InnerProductParameter.num_output)
  return num_output_;
}
inline void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InnerProductParameter.bias_term)
  return bias_term_;
}
inline void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.InnerProductParameter.bias_term)
}

// optional .apollo.perception.inference.FillerParameter weight_filler = 3;
inline bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::apollo::perception::inference::FillerParameter& InnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InnerProductParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.InnerProductParameter.weight_filler)
  return weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* InnerProductParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::apollo::perception::inference::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.InnerProductParameter.weight_filler)
}

// optional .apollo.perception.inference.FillerParameter bias_filler = 4;
inline bool InnerProductParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerProductParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerProductParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::apollo::perception::inference::FillerParameter& InnerProductParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InnerProductParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.InnerProductParameter.bias_filler)
  return bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* InnerProductParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::apollo::perception::inference::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
inline bool InnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InnerProductParameter.axis)
  return axis_;
}
inline void InnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.InnerProductParameter.axis)
}

// optional bool transpose = 6 [default = false];
inline bool InnerProductParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InnerProductParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InnerProductParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InnerProductParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
inline bool InnerProductParameter::transpose() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InnerProductParameter.transpose)
  return transpose_;
}
inline void InnerProductParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.InnerProductParameter.transpose)
}

// -------------------------------------------------------------------

// InputParameter

// repeated .apollo.perception.inference.BlobShape shape = 1;
inline int InputParameter::shape_size() const {
  return shape_.size();
}
inline void InputParameter::clear_shape() {
  shape_.Clear();
}
inline const ::apollo::perception::inference::BlobShape& InputParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.InputParameter.shape)
  return shape_.Get(index);
}
inline ::apollo::perception::inference::BlobShape* InputParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.InputParameter.shape)
  return shape_.Mutable(index);
}
inline ::apollo::perception::inference::BlobShape* InputParameter::add_shape() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.InputParameter.shape)
  return shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape >&
InputParameter::shape() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.InputParameter.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobShape >*
InputParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.InputParameter.shape)
  return &shape_;
}

// -------------------------------------------------------------------

// LogParameter

// optional float base = 1 [default = -1];
inline bool LogParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float LogParameter::base() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LogParameter.base)
  return base_;
}
inline void LogParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LogParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool LogParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float LogParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LogParameter.scale)
  return scale_;
}
inline void LogParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LogParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool LogParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float LogParameter::shift() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LogParameter.shift)
  return shift_;
}
inline void LogParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LogParameter.shift)
}

// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LRNParameter.local_size)
  return local_size_;
}
inline void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
inline bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LRNParameter.alpha)
  return alpha_;
}
inline void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LRNParameter.beta)
  return beta_;
}
inline void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LRNParameter.beta)
}

// optional .apollo.perception.inference.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::apollo::perception::inference::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LRNParameter.norm_region)
  return static_cast< ::apollo::perception::inference::LRNParameter_NormRegion >(norm_region_);
}
inline void LRNParameter::set_norm_region(::apollo::perception::inference::LRNParameter_NormRegion value) {
  assert(::apollo::perception::inference::LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
inline bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LRNParameter.k)
  return k_;
}
inline void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LRNParameter.k)
}

// optional .apollo.perception.inference.LRNParameter.Engine engine = 6 [default = DEFAULT];
inline bool LRNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LRNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LRNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LRNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::apollo::perception::inference::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.LRNParameter.engine)
  return static_cast< ::apollo::perception::inference::LRNParameter_Engine >(engine_);
}
inline void LRNParameter::set_engine(::apollo::perception::inference::LRNParameter_Engine value) {
  assert(::apollo::perception::inference::LRNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.LRNParameter.engine)
}

// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;
inline bool MemoryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MemoryDataParameter.batch_size)
  return batch_size_;
}
inline void MemoryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
inline bool MemoryDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemoryDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
inline ::google::protobuf::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MemoryDataParameter.channels)
  return channels_;
}
inline void MemoryDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
inline bool MemoryDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemoryDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemoryDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MemoryDataParameter.height)
  return height_;
}
inline void MemoryDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MemoryDataParameter.height)
}

// optional uint32 width = 4;
inline bool MemoryDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemoryDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemoryDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MemoryDataParameter.width)
  return width_;
}
inline void MemoryDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MemoryDataParameter.width)
}

// -------------------------------------------------------------------

// MultiBoxLossParameter

// optional .apollo.perception.inference.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
inline bool MultiBoxLossParameter::has_loc_loss_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MultiBoxLossParameter::set_has_loc_loss_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MultiBoxLossParameter::clear_has_loc_loss_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MultiBoxLossParameter::clear_loc_loss_type() {
  loc_loss_type_ = 1;
  clear_has_loc_loss_type();
}
inline ::apollo::perception::inference::MultiBoxLossParameter_LocLossType MultiBoxLossParameter::loc_loss_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.loc_loss_type)
  return static_cast< ::apollo::perception::inference::MultiBoxLossParameter_LocLossType >(loc_loss_type_);
}
inline void MultiBoxLossParameter::set_loc_loss_type(::apollo::perception::inference::MultiBoxLossParameter_LocLossType value) {
  assert(::apollo::perception::inference::MultiBoxLossParameter_LocLossType_IsValid(value));
  set_has_loc_loss_type();
  loc_loss_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.loc_loss_type)
}

// optional .apollo.perception.inference.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
inline bool MultiBoxLossParameter::has_conf_loss_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MultiBoxLossParameter::set_has_conf_loss_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MultiBoxLossParameter::clear_has_conf_loss_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MultiBoxLossParameter::clear_conf_loss_type() {
  conf_loss_type_ = 0;
  clear_has_conf_loss_type();
}
inline ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType MultiBoxLossParameter::conf_loss_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.conf_loss_type)
  return static_cast< ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType >(conf_loss_type_);
}
inline void MultiBoxLossParameter::set_conf_loss_type(::apollo::perception::inference::MultiBoxLossParameter_ConfLossType value) {
  assert(::apollo::perception::inference::MultiBoxLossParameter_ConfLossType_IsValid(value));
  set_has_conf_loss_type();
  conf_loss_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.conf_loss_type)
}

// optional float loc_weight = 3 [default = 1];
inline bool MultiBoxLossParameter::has_loc_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MultiBoxLossParameter::set_has_loc_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MultiBoxLossParameter::clear_has_loc_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MultiBoxLossParameter::clear_loc_weight() {
  loc_weight_ = 1;
  clear_has_loc_weight();
}
inline float MultiBoxLossParameter::loc_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.loc_weight)
  return loc_weight_;
}
inline void MultiBoxLossParameter::set_loc_weight(float value) {
  set_has_loc_weight();
  loc_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.loc_weight)
}

// optional uint32 num_classes = 4;
inline bool MultiBoxLossParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MultiBoxLossParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MultiBoxLossParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MultiBoxLossParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 MultiBoxLossParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.num_classes)
  return num_classes_;
}
inline void MultiBoxLossParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.num_classes)
}

// optional bool share_location = 5 [default = true];
inline bool MultiBoxLossParameter::has_share_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MultiBoxLossParameter::set_has_share_location() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MultiBoxLossParameter::clear_has_share_location() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MultiBoxLossParameter::clear_share_location() {
  share_location_ = true;
  clear_has_share_location();
}
inline bool MultiBoxLossParameter::share_location() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.share_location)
  return share_location_;
}
inline void MultiBoxLossParameter::set_share_location(bool value) {
  set_has_share_location();
  share_location_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.share_location)
}

// optional .apollo.perception.inference.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
inline bool MultiBoxLossParameter::has_match_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MultiBoxLossParameter::set_has_match_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MultiBoxLossParameter::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MultiBoxLossParameter::clear_match_type() {
  match_type_ = 1;
  clear_has_match_type();
}
inline ::apollo::perception::inference::MultiBoxLossParameter_MatchType MultiBoxLossParameter::match_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.match_type)
  return static_cast< ::apollo::perception::inference::MultiBoxLossParameter_MatchType >(match_type_);
}
inline void MultiBoxLossParameter::set_match_type(::apollo::perception::inference::MultiBoxLossParameter_MatchType value) {
  assert(::apollo::perception::inference::MultiBoxLossParameter_MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.match_type)
}

// optional float overlap_threshold = 7 [default = 0.5];
inline bool MultiBoxLossParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MultiBoxLossParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MultiBoxLossParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MultiBoxLossParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.5f;
  clear_has_overlap_threshold();
}
inline float MultiBoxLossParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.overlap_threshold)
  return overlap_threshold_;
}
inline void MultiBoxLossParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.overlap_threshold)
}

// optional bool use_prior_for_matching = 8 [default = true];
inline bool MultiBoxLossParameter::has_use_prior_for_matching() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MultiBoxLossParameter::set_has_use_prior_for_matching() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MultiBoxLossParameter::clear_has_use_prior_for_matching() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MultiBoxLossParameter::clear_use_prior_for_matching() {
  use_prior_for_matching_ = true;
  clear_has_use_prior_for_matching();
}
inline bool MultiBoxLossParameter::use_prior_for_matching() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.use_prior_for_matching)
  return use_prior_for_matching_;
}
inline void MultiBoxLossParameter::set_use_prior_for_matching(bool value) {
  set_has_use_prior_for_matching();
  use_prior_for_matching_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.use_prior_for_matching)
}

// optional uint32 background_label_id = 9 [default = 0];
inline bool MultiBoxLossParameter::has_background_label_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MultiBoxLossParameter::set_has_background_label_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MultiBoxLossParameter::clear_has_background_label_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MultiBoxLossParameter::clear_background_label_id() {
  background_label_id_ = 0u;
  clear_has_background_label_id();
}
inline ::google::protobuf::uint32 MultiBoxLossParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.background_label_id)
  return background_label_id_;
}
inline void MultiBoxLossParameter::set_background_label_id(::google::protobuf::uint32 value) {
  set_has_background_label_id();
  background_label_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.background_label_id)
}

// optional bool use_difficult_gt = 10 [default = true];
inline bool MultiBoxLossParameter::has_use_difficult_gt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MultiBoxLossParameter::set_has_use_difficult_gt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MultiBoxLossParameter::clear_has_use_difficult_gt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MultiBoxLossParameter::clear_use_difficult_gt() {
  use_difficult_gt_ = true;
  clear_has_use_difficult_gt();
}
inline bool MultiBoxLossParameter::use_difficult_gt() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.use_difficult_gt)
  return use_difficult_gt_;
}
inline void MultiBoxLossParameter::set_use_difficult_gt(bool value) {
  set_has_use_difficult_gt();
  use_difficult_gt_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.use_difficult_gt)
}

// optional bool do_neg_mining = 11;
inline bool MultiBoxLossParameter::has_do_neg_mining() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MultiBoxLossParameter::set_has_do_neg_mining() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MultiBoxLossParameter::clear_has_do_neg_mining() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MultiBoxLossParameter::clear_do_neg_mining() {
  do_neg_mining_ = false;
  clear_has_do_neg_mining();
}
inline bool MultiBoxLossParameter::do_neg_mining() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.do_neg_mining)
  return do_neg_mining_;
}
inline void MultiBoxLossParameter::set_do_neg_mining(bool value) {
  set_has_do_neg_mining();
  do_neg_mining_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.do_neg_mining)
}

// optional float neg_pos_ratio = 12 [default = 3];
inline bool MultiBoxLossParameter::has_neg_pos_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MultiBoxLossParameter::set_has_neg_pos_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MultiBoxLossParameter::clear_has_neg_pos_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MultiBoxLossParameter::clear_neg_pos_ratio() {
  neg_pos_ratio_ = 3;
  clear_has_neg_pos_ratio();
}
inline float MultiBoxLossParameter::neg_pos_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.neg_pos_ratio)
  return neg_pos_ratio_;
}
inline void MultiBoxLossParameter::set_neg_pos_ratio(float value) {
  set_has_neg_pos_ratio();
  neg_pos_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.neg_pos_ratio)
}

// optional float neg_overlap = 13 [default = 0.5];
inline bool MultiBoxLossParameter::has_neg_overlap() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MultiBoxLossParameter::set_has_neg_overlap() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MultiBoxLossParameter::clear_has_neg_overlap() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MultiBoxLossParameter::clear_neg_overlap() {
  neg_overlap_ = 0.5f;
  clear_has_neg_overlap();
}
inline float MultiBoxLossParameter::neg_overlap() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.neg_overlap)
  return neg_overlap_;
}
inline void MultiBoxLossParameter::set_neg_overlap(float value) {
  set_has_neg_overlap();
  neg_overlap_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.neg_overlap)
}

// optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
inline bool MultiBoxLossParameter::has_code_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MultiBoxLossParameter::set_has_code_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MultiBoxLossParameter::clear_has_code_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MultiBoxLossParameter::clear_code_type() {
  code_type_ = 1;
  clear_has_code_type();
}
inline ::apollo::perception::inference::PriorBoxParameter_CodeType MultiBoxLossParameter::code_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.code_type)
  return static_cast< ::apollo::perception::inference::PriorBoxParameter_CodeType >(code_type_);
}
inline void MultiBoxLossParameter::set_code_type(::apollo::perception::inference::PriorBoxParameter_CodeType value) {
  assert(::apollo::perception::inference::PriorBoxParameter_CodeType_IsValid(value));
  set_has_code_type();
  code_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.code_type)
}

// optional bool encode_variance_in_target = 16 [default = false];
inline bool MultiBoxLossParameter::has_encode_variance_in_target() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MultiBoxLossParameter::set_has_encode_variance_in_target() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MultiBoxLossParameter::clear_has_encode_variance_in_target() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MultiBoxLossParameter::clear_encode_variance_in_target() {
  encode_variance_in_target_ = false;
  clear_has_encode_variance_in_target();
}
inline bool MultiBoxLossParameter::encode_variance_in_target() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.encode_variance_in_target)
  return encode_variance_in_target_;
}
inline void MultiBoxLossParameter::set_encode_variance_in_target(bool value) {
  set_has_encode_variance_in_target();
  encode_variance_in_target_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.encode_variance_in_target)
}

// optional bool map_object_to_agnostic = 17 [default = false];
inline bool MultiBoxLossParameter::has_map_object_to_agnostic() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MultiBoxLossParameter::set_has_map_object_to_agnostic() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MultiBoxLossParameter::clear_has_map_object_to_agnostic() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MultiBoxLossParameter::clear_map_object_to_agnostic() {
  map_object_to_agnostic_ = false;
  clear_has_map_object_to_agnostic();
}
inline bool MultiBoxLossParameter::map_object_to_agnostic() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.map_object_to_agnostic)
  return map_object_to_agnostic_;
}
inline void MultiBoxLossParameter::set_map_object_to_agnostic(bool value) {
  set_has_map_object_to_agnostic();
  map_object_to_agnostic_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.map_object_to_agnostic)
}

// optional bool ignore_cross_boundary_bbox = 18 [default = false];
inline bool MultiBoxLossParameter::has_ignore_cross_boundary_bbox() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MultiBoxLossParameter::set_has_ignore_cross_boundary_bbox() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MultiBoxLossParameter::clear_has_ignore_cross_boundary_bbox() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MultiBoxLossParameter::clear_ignore_cross_boundary_bbox() {
  ignore_cross_boundary_bbox_ = false;
  clear_has_ignore_cross_boundary_bbox();
}
inline bool MultiBoxLossParameter::ignore_cross_boundary_bbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.ignore_cross_boundary_bbox)
  return ignore_cross_boundary_bbox_;
}
inline void MultiBoxLossParameter::set_ignore_cross_boundary_bbox(bool value) {
  set_has_ignore_cross_boundary_bbox();
  ignore_cross_boundary_bbox_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.ignore_cross_boundary_bbox)
}

// optional bool bp_inside = 19 [default = false];
inline bool MultiBoxLossParameter::has_bp_inside() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MultiBoxLossParameter::set_has_bp_inside() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MultiBoxLossParameter::clear_has_bp_inside() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MultiBoxLossParameter::clear_bp_inside() {
  bp_inside_ = false;
  clear_has_bp_inside();
}
inline bool MultiBoxLossParameter::bp_inside() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.bp_inside)
  return bp_inside_;
}
inline void MultiBoxLossParameter::set_bp_inside(bool value) {
  set_has_bp_inside();
  bp_inside_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.bp_inside)
}

// optional .apollo.perception.inference.MultiBoxLossParameter.MiningType mining_type = 20 [default = MAX_NEGATIVE];
inline bool MultiBoxLossParameter::has_mining_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MultiBoxLossParameter::set_has_mining_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MultiBoxLossParameter::clear_has_mining_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MultiBoxLossParameter::clear_mining_type() {
  mining_type_ = 1;
  clear_has_mining_type();
}
inline ::apollo::perception::inference::MultiBoxLossParameter_MiningType MultiBoxLossParameter::mining_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.mining_type)
  return static_cast< ::apollo::perception::inference::MultiBoxLossParameter_MiningType >(mining_type_);
}
inline void MultiBoxLossParameter::set_mining_type(::apollo::perception::inference::MultiBoxLossParameter_MiningType value) {
  assert(::apollo::perception::inference::MultiBoxLossParameter_MiningType_IsValid(value));
  set_has_mining_type();
  mining_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.mining_type)
}

// optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 21;
inline bool MultiBoxLossParameter::has_nms_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MultiBoxLossParameter::set_has_nms_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MultiBoxLossParameter::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MultiBoxLossParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::apollo::perception::inference::NonMaximumSuppressionParameter::Clear();
  clear_has_nms_param();
}
inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& MultiBoxLossParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_ : *default_instance_->nms_param_;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* MultiBoxLossParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) nms_param_ = new ::apollo::perception::inference::NonMaximumSuppressionParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.MultiBoxLossParameter.nms_param)
  return nms_param_;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* MultiBoxLossParameter::release_nms_param() {
  clear_has_nms_param();
  ::apollo::perception::inference::NonMaximumSuppressionParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
inline void MultiBoxLossParameter::set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.MultiBoxLossParameter.nms_param)
}

// optional int32 sample_size = 22 [default = 64];
inline bool MultiBoxLossParameter::has_sample_size() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MultiBoxLossParameter::set_has_sample_size() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MultiBoxLossParameter::clear_has_sample_size() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MultiBoxLossParameter::clear_sample_size() {
  sample_size_ = 64;
  clear_has_sample_size();
}
inline ::google::protobuf::int32 MultiBoxLossParameter::sample_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.sample_size)
  return sample_size_;
}
inline void MultiBoxLossParameter::set_sample_size(::google::protobuf::int32 value) {
  set_has_sample_size();
  sample_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.sample_size)
}

// optional bool use_prior_for_nms = 23 [default = false];
inline bool MultiBoxLossParameter::has_use_prior_for_nms() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MultiBoxLossParameter::set_has_use_prior_for_nms() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MultiBoxLossParameter::clear_has_use_prior_for_nms() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MultiBoxLossParameter::clear_use_prior_for_nms() {
  use_prior_for_nms_ = false;
  clear_has_use_prior_for_nms();
}
inline bool MultiBoxLossParameter::use_prior_for_nms() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MultiBoxLossParameter.use_prior_for_nms)
  return use_prior_for_nms_;
}
inline void MultiBoxLossParameter::set_use_prior_for_nms(bool value) {
  set_has_use_prior_for_nms();
  use_prior_for_nms_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MultiBoxLossParameter.use_prior_for_nms)
}

// -------------------------------------------------------------------

// MVNParameter

// optional bool normalize_variance = 1 [default = true];
inline bool MVNParameter::has_normalize_variance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVNParameter::set_has_normalize_variance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVNParameter::clear_has_normalize_variance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVNParameter::clear_normalize_variance() {
  normalize_variance_ = true;
  clear_has_normalize_variance();
}
inline bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MVNParameter.normalize_variance)
  return normalize_variance_;
}
inline void MVNParameter::set_normalize_variance(bool value) {
  set_has_normalize_variance();
  normalize_variance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MVNParameter.normalize_variance)
}

// optional bool across_channels = 2 [default = false];
inline bool MVNParameter::has_across_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVNParameter::set_has_across_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVNParameter::clear_has_across_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVNParameter::clear_across_channels() {
  across_channels_ = false;
  clear_has_across_channels();
}
inline bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MVNParameter.across_channels)
  return across_channels_;
}
inline void MVNParameter::set_across_channels(bool value) {
  set_has_across_channels();
  across_channels_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MVNParameter.across_channels)
}

// optional float eps = 3 [default = 1e-09];
inline bool MVNParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVNParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVNParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MVNParameter::clear_eps() {
  eps_ = 1e-09f;
  clear_has_eps();
}
inline float MVNParameter::eps() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.MVNParameter.eps)
  return eps_;
}
inline void MVNParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.MVNParameter.eps)
}

// -------------------------------------------------------------------

// NormalizeParameter

// optional bool across_spatial = 1 [default = true];
inline bool NormalizeParameter::has_across_spatial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalizeParameter::set_has_across_spatial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalizeParameter::clear_has_across_spatial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalizeParameter::clear_across_spatial() {
  across_spatial_ = true;
  clear_has_across_spatial();
}
inline bool NormalizeParameter::across_spatial() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizeParameter.across_spatial)
  return across_spatial_;
}
inline void NormalizeParameter::set_across_spatial(bool value) {
  set_has_across_spatial();
  across_spatial_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizeParameter.across_spatial)
}

// optional .apollo.perception.inference.FillerParameter scale_filler = 2;
inline bool NormalizeParameter::has_scale_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalizeParameter::set_has_scale_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalizeParameter::clear_has_scale_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalizeParameter::clear_scale_filler() {
  if (scale_filler_ != NULL) scale_filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_scale_filler();
}
inline const ::apollo::perception::inference::FillerParameter& NormalizeParameter::scale_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizeParameter.scale_filler)
  return scale_filler_ != NULL ? *scale_filler_ : *default_instance_->scale_filler_;
}
inline ::apollo::perception::inference::FillerParameter* NormalizeParameter::mutable_scale_filler() {
  set_has_scale_filler();
  if (scale_filler_ == NULL) scale_filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.NormalizeParameter.scale_filler)
  return scale_filler_;
}
inline ::apollo::perception::inference::FillerParameter* NormalizeParameter::release_scale_filler() {
  clear_has_scale_filler();
  ::apollo::perception::inference::FillerParameter* temp = scale_filler_;
  scale_filler_ = NULL;
  return temp;
}
inline void NormalizeParameter::set_allocated_scale_filler(::apollo::perception::inference::FillerParameter* scale_filler) {
  delete scale_filler_;
  scale_filler_ = scale_filler;
  if (scale_filler) {
    set_has_scale_filler();
  } else {
    clear_has_scale_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.NormalizeParameter.scale_filler)
}

// optional bool channel_shared = 3 [default = true];
inline bool NormalizeParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NormalizeParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NormalizeParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NormalizeParameter::clear_channel_shared() {
  channel_shared_ = true;
  clear_has_channel_shared();
}
inline bool NormalizeParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizeParameter.channel_shared)
  return channel_shared_;
}
inline void NormalizeParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizeParameter.channel_shared)
}

// optional float eps = 4 [default = 1e-10];
inline bool NormalizeParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NormalizeParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NormalizeParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NormalizeParameter::clear_eps() {
  eps_ = 1e-10f;
  clear_has_eps();
}
inline float NormalizeParameter::eps() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.NormalizeParameter.eps)
  return eps_;
}
inline void NormalizeParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.NormalizeParameter.eps)
}

// -------------------------------------------------------------------

// ParameterParameter

// optional .apollo.perception.inference.BlobShape shape = 1;
inline bool ParameterParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParameterParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParameterParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParameterParameter::clear_shape() {
  if (shape_ != NULL) shape_->::apollo::perception::inference::BlobShape::Clear();
  clear_has_shape();
}
inline const ::apollo::perception::inference::BlobShape& ParameterParameter::shape() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ParameterParameter.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::apollo::perception::inference::BlobShape* ParameterParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::apollo::perception::inference::BlobShape;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ParameterParameter.shape)
  return shape_;
}
inline ::apollo::perception::inference::BlobShape* ParameterParameter::release_shape() {
  clear_has_shape();
  ::apollo::perception::inference::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void ParameterParameter::set_allocated_shape(::apollo::perception::inference::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ParameterParameter.shape)
}

// -------------------------------------------------------------------

// PermuteParameter

// repeated uint32 order = 1;
inline int PermuteParameter::order_size() const {
  return order_.size();
}
inline void PermuteParameter::clear_order() {
  order_.Clear();
}
inline ::google::protobuf::uint32 PermuteParameter::order(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PermuteParameter.order)
  return order_.Get(index);
}
inline void PermuteParameter::set_order(int index, ::google::protobuf::uint32 value) {
  order_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PermuteParameter.order)
}
inline void PermuteParameter::add_order(::google::protobuf::uint32 value) {
  order_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.PermuteParameter.order)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PermuteParameter::order() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.PermuteParameter.order)
  return order_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PermuteParameter::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.PermuteParameter.order)
  return &order_;
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .apollo.perception.inference.PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::apollo::perception::inference::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.pool)
  return static_cast< ::apollo::perception::inference::PoolingParameter_PoolMethod >(pool_);
}
inline void PoolingParameter::set_pool(::apollo::perception::inference::PoolingParameter_PoolMethod value) {
  assert(::apollo::perception::inference::PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.pad)
  return pad_;
}
inline void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.pad_h)
  return pad_h_;
}
inline void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.pad_w)
  return pad_w_;
}
inline void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
inline bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.kernel_size)
  return kernel_size_;
}
inline void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
inline bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.kernel_h)
  return kernel_h_;
}
inline void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
inline bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.kernel_w)
  return kernel_w_;
}
inline void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.stride)
  return stride_;
}
inline void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
inline bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.stride_h)
  return stride_h_;
}
inline void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
inline bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.stride_w)
  return stride_w_;
}
inline void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.stride_w)
}

// optional .apollo.perception.inference.PoolingParameter.Engine engine = 11 [default = DEFAULT];
inline bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::apollo::perception::inference::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.engine)
  return static_cast< ::apollo::perception::inference::PoolingParameter_Engine >(engine_);
}
inline void PoolingParameter::set_engine(::apollo::perception::inference::PoolingParameter_Engine value) {
  assert(::apollo::perception::inference::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
inline bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.global_pooling)
  return global_pooling_;
}
inline void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.global_pooling)
}

// optional bool cmp_out_shape_floor_as_conv = 13 [default = false];
inline bool PoolingParameter::has_cmp_out_shape_floor_as_conv() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PoolingParameter::set_has_cmp_out_shape_floor_as_conv() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PoolingParameter::clear_has_cmp_out_shape_floor_as_conv() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PoolingParameter::clear_cmp_out_shape_floor_as_conv() {
  cmp_out_shape_floor_as_conv_ = false;
  clear_has_cmp_out_shape_floor_as_conv();
}
inline bool PoolingParameter::cmp_out_shape_floor_as_conv() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PoolingParameter.cmp_out_shape_floor_as_conv)
  return cmp_out_shape_floor_as_conv_;
}
inline void PoolingParameter::set_cmp_out_shape_floor_as_conv(bool value) {
  set_has_cmp_out_shape_floor_as_conv();
  cmp_out_shape_floor_as_conv_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PoolingParameter.cmp_out_shape_floor_as_conv)
}

// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];
inline bool PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PowerParameter.power)
  return power_;
}
inline void PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
inline bool PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PowerParameter.scale)
  return scale_;
}
inline void PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PowerParameter.shift)
  return shift_;
}
inline void PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PowerParameter.shift)
}

// -------------------------------------------------------------------

// PriorBoxParameter

// repeated float min_size = 1;
inline int PriorBoxParameter::min_size_size() const {
  return min_size_.size();
}
inline void PriorBoxParameter::clear_min_size() {
  min_size_.Clear();
}
inline float PriorBoxParameter::min_size(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.min_size)
  return min_size_.Get(index);
}
inline void PriorBoxParameter::set_min_size(int index, float value) {
  min_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.min_size)
}
inline void PriorBoxParameter::add_min_size(float value) {
  min_size_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.PriorBoxParameter.min_size)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::min_size() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.PriorBoxParameter.min_size)
  return min_size_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_min_size() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.PriorBoxParameter.min_size)
  return &min_size_;
}

// repeated float max_size = 2;
inline int PriorBoxParameter::max_size_size() const {
  return max_size_.size();
}
inline void PriorBoxParameter::clear_max_size() {
  max_size_.Clear();
}
inline float PriorBoxParameter::max_size(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.max_size)
  return max_size_.Get(index);
}
inline void PriorBoxParameter::set_max_size(int index, float value) {
  max_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.max_size)
}
inline void PriorBoxParameter::add_max_size(float value) {
  max_size_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.PriorBoxParameter.max_size)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::max_size() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.PriorBoxParameter.max_size)
  return max_size_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_max_size() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.PriorBoxParameter.max_size)
  return &max_size_;
}

// repeated float aspect_ratio = 3;
inline int PriorBoxParameter::aspect_ratio_size() const {
  return aspect_ratio_.size();
}
inline void PriorBoxParameter::clear_aspect_ratio() {
  aspect_ratio_.Clear();
}
inline float PriorBoxParameter::aspect_ratio(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.aspect_ratio)
  return aspect_ratio_.Get(index);
}
inline void PriorBoxParameter::set_aspect_ratio(int index, float value) {
  aspect_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.aspect_ratio)
}
inline void PriorBoxParameter::add_aspect_ratio(float value) {
  aspect_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.PriorBoxParameter.aspect_ratio)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::aspect_ratio() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.PriorBoxParameter.aspect_ratio)
  return aspect_ratio_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_aspect_ratio() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.PriorBoxParameter.aspect_ratio)
  return &aspect_ratio_;
}

// optional bool flip = 4 [default = true];
inline bool PriorBoxParameter::has_flip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PriorBoxParameter::set_has_flip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PriorBoxParameter::clear_has_flip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PriorBoxParameter::clear_flip() {
  flip_ = true;
  clear_has_flip();
}
inline bool PriorBoxParameter::flip() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.flip)
  return flip_;
}
inline void PriorBoxParameter::set_flip(bool value) {
  set_has_flip();
  flip_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.flip)
}

// optional bool clip = 5 [default = false];
inline bool PriorBoxParameter::has_clip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PriorBoxParameter::set_has_clip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PriorBoxParameter::clear_has_clip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PriorBoxParameter::clear_clip() {
  clip_ = false;
  clear_has_clip();
}
inline bool PriorBoxParameter::clip() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.clip)
  return clip_;
}
inline void PriorBoxParameter::set_clip(bool value) {
  set_has_clip();
  clip_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.clip)
}

// repeated float variance = 6;
inline int PriorBoxParameter::variance_size() const {
  return variance_.size();
}
inline void PriorBoxParameter::clear_variance() {
  variance_.Clear();
}
inline float PriorBoxParameter::variance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.variance)
  return variance_.Get(index);
}
inline void PriorBoxParameter::set_variance(int index, float value) {
  variance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.variance)
}
inline void PriorBoxParameter::add_variance(float value) {
  variance_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.PriorBoxParameter.variance)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::variance() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.PriorBoxParameter.variance)
  return variance_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_variance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.PriorBoxParameter.variance)
  return &variance_;
}

// optional uint32 img_size = 7;
inline bool PriorBoxParameter::has_img_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PriorBoxParameter::set_has_img_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PriorBoxParameter::clear_has_img_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PriorBoxParameter::clear_img_size() {
  img_size_ = 0u;
  clear_has_img_size();
}
inline ::google::protobuf::uint32 PriorBoxParameter::img_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.img_size)
  return img_size_;
}
inline void PriorBoxParameter::set_img_size(::google::protobuf::uint32 value) {
  set_has_img_size();
  img_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.img_size)
}

// optional uint32 img_h = 8;
inline bool PriorBoxParameter::has_img_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PriorBoxParameter::set_has_img_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PriorBoxParameter::clear_has_img_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PriorBoxParameter::clear_img_h() {
  img_h_ = 0u;
  clear_has_img_h();
}
inline ::google::protobuf::uint32 PriorBoxParameter::img_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.img_h)
  return img_h_;
}
inline void PriorBoxParameter::set_img_h(::google::protobuf::uint32 value) {
  set_has_img_h();
  img_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.img_h)
}

// optional uint32 img_w = 9;
inline bool PriorBoxParameter::has_img_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PriorBoxParameter::set_has_img_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PriorBoxParameter::clear_has_img_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PriorBoxParameter::clear_img_w() {
  img_w_ = 0u;
  clear_has_img_w();
}
inline ::google::protobuf::uint32 PriorBoxParameter::img_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.img_w)
  return img_w_;
}
inline void PriorBoxParameter::set_img_w(::google::protobuf::uint32 value) {
  set_has_img_w();
  img_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.img_w)
}

// optional float step = 10;
inline bool PriorBoxParameter::has_step() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PriorBoxParameter::set_has_step() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PriorBoxParameter::clear_has_step() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PriorBoxParameter::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline float PriorBoxParameter::step() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.step)
  return step_;
}
inline void PriorBoxParameter::set_step(float value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.step)
}

// optional float step_h = 11;
inline bool PriorBoxParameter::has_step_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PriorBoxParameter::set_has_step_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PriorBoxParameter::clear_has_step_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PriorBoxParameter::clear_step_h() {
  step_h_ = 0;
  clear_has_step_h();
}
inline float PriorBoxParameter::step_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.step_h)
  return step_h_;
}
inline void PriorBoxParameter::set_step_h(float value) {
  set_has_step_h();
  step_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.step_h)
}

// optional float step_w = 12;
inline bool PriorBoxParameter::has_step_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PriorBoxParameter::set_has_step_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PriorBoxParameter::clear_has_step_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PriorBoxParameter::clear_step_w() {
  step_w_ = 0;
  clear_has_step_w();
}
inline float PriorBoxParameter::step_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.step_w)
  return step_w_;
}
inline void PriorBoxParameter::set_step_w(float value) {
  set_has_step_w();
  step_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.step_w)
}

// optional float offset = 13 [default = 0.5];
inline bool PriorBoxParameter::has_offset() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PriorBoxParameter::set_has_offset() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PriorBoxParameter::clear_has_offset() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PriorBoxParameter::clear_offset() {
  offset_ = 0.5f;
  clear_has_offset();
}
inline float PriorBoxParameter::offset() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PriorBoxParameter.offset)
  return offset_;
}
inline void PriorBoxParameter::set_offset(float value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PriorBoxParameter.offset)
}

// -------------------------------------------------------------------

// PythonParameter

// optional string module = 1;
inline bool PythonParameter::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PythonParameter::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PythonParameter::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PythonParameter::clear_module() {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_->clear();
  }
  clear_has_module();
}
inline const ::std::string& PythonParameter::module() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PythonParameter.module)
  return *module_;
}
inline void PythonParameter::set_module(const ::std::string& value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  module_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  module_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value, size_t size) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  module_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.PythonParameter.module)
}
inline ::std::string* PythonParameter::mutable_module() {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.PythonParameter.module)
  return module_;
}
inline ::std::string* PythonParameter::release_module() {
  clear_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = module_;
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PythonParameter::set_allocated_module(::std::string* module) {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_;
  }
  if (module) {
    set_has_module();
    module_ = module;
  } else {
    clear_has_module();
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.PythonParameter.module)
}

// optional string layer = 2;
inline bool PythonParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PythonParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PythonParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PythonParameter::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& PythonParameter::layer() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PythonParameter.layer)
  return *layer_;
}
inline void PythonParameter::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.PythonParameter.layer)
}
inline ::std::string* PythonParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.PythonParameter.layer)
  return layer_;
}
inline ::std::string* PythonParameter::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PythonParameter::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
inline bool PythonParameter::has_param_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PythonParameter::set_has_param_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PythonParameter::clear_has_param_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PythonParameter::clear_param_str() {
  if (param_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_->clear();
  }
  clear_has_param_str();
}
inline const ::std::string& PythonParameter::param_str() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PythonParameter.param_str)
  return *param_str_;
}
inline void PythonParameter::set_param_str(const ::std::string& value) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value, size_t size) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.PythonParameter.param_str)
}
inline ::std::string* PythonParameter::mutable_param_str() {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.PythonParameter.param_str)
  return param_str_;
}
inline ::std::string* PythonParameter::release_param_str() {
  clear_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param_str_;
    param_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PythonParameter::set_allocated_param_str(::std::string* param_str) {
  if (param_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param_str_;
  }
  if (param_str) {
    set_has_param_str();
    param_str_ = param_str;
  } else {
    clear_has_param_str();
    param_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
inline bool PythonParameter::has_share_in_parallel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PythonParameter::set_has_share_in_parallel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PythonParameter::clear_has_share_in_parallel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PythonParameter::clear_share_in_parallel() {
  share_in_parallel_ = false;
  clear_has_share_in_parallel();
}
inline bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PythonParameter.share_in_parallel)
  return share_in_parallel_;
}
inline void PythonParameter::set_share_in_parallel(bool value) {
  set_has_share_in_parallel();
  share_in_parallel_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PythonParameter.share_in_parallel)
}

// -------------------------------------------------------------------

// RecurrentParameter

// optional uint32 num_output = 1 [default = 0];
inline bool RecurrentParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecurrentParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecurrentParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecurrentParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 RecurrentParameter::num_output() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RecurrentParameter.num_output)
  return num_output_;
}
inline void RecurrentParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RecurrentParameter.num_output)
}

// optional .apollo.perception.inference.FillerParameter weight_filler = 2;
inline bool RecurrentParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecurrentParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecurrentParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecurrentParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::apollo::perception::inference::FillerParameter& RecurrentParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RecurrentParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* RecurrentParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RecurrentParameter.weight_filler)
  return weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* RecurrentParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::apollo::perception::inference::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void RecurrentParameter::set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.RecurrentParameter.weight_filler)
}

// optional .apollo.perception.inference.FillerParameter bias_filler = 3;
inline bool RecurrentParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecurrentParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecurrentParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecurrentParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::apollo::perception::inference::FillerParameter& RecurrentParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RecurrentParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* RecurrentParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RecurrentParameter.bias_filler)
  return bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* RecurrentParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::apollo::perception::inference::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void RecurrentParameter::set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.RecurrentParameter.bias_filler)
}

// optional bool debug_info = 4 [default = false];
inline bool RecurrentParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecurrentParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecurrentParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecurrentParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool RecurrentParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RecurrentParameter.debug_info)
  return debug_info_;
}
inline void RecurrentParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RecurrentParameter.debug_info)
}

// optional bool expose_hidden = 5 [default = false];
inline bool RecurrentParameter::has_expose_hidden() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecurrentParameter::set_has_expose_hidden() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecurrentParameter::clear_has_expose_hidden() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecurrentParameter::clear_expose_hidden() {
  expose_hidden_ = false;
  clear_has_expose_hidden();
}
inline bool RecurrentParameter::expose_hidden() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RecurrentParameter.expose_hidden)
  return expose_hidden_;
}
inline void RecurrentParameter::set_expose_hidden(bool value) {
  set_has_expose_hidden();
  expose_hidden_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RecurrentParameter.expose_hidden)
}

// -------------------------------------------------------------------

// ReductionParameter

// optional .apollo.perception.inference.ReductionParameter.ReductionOp operation = 1 [default = SUM];
inline bool ReductionParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReductionParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReductionParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReductionParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::apollo::perception::inference::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReductionParameter.operation)
  return static_cast< ::apollo::perception::inference::ReductionParameter_ReductionOp >(operation_);
}
inline void ReductionParameter::set_operation(::apollo::perception::inference::ReductionParameter_ReductionOp value) {
  assert(::apollo::perception::inference::ReductionParameter_ReductionOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReductionParameter.operation)
}

// optional int32 axis = 2 [default = 0];
inline bool ReductionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReductionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReductionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReductionParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReductionParameter.axis)
  return axis_;
}
inline void ReductionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReductionParameter.axis)
}

// optional float coeff = 3 [default = 1];
inline bool ReductionParameter::has_coeff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReductionParameter::set_has_coeff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReductionParameter::clear_has_coeff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReductionParameter::clear_coeff() {
  coeff_ = 1;
  clear_has_coeff();
}
inline float ReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReductionParameter.coeff)
  return coeff_;
}
inline void ReductionParameter::set_coeff(float value) {
  set_has_coeff();
  coeff_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReductionParameter.coeff)
}

// -------------------------------------------------------------------

// ReLUParameter

// optional float negative_slope = 1 [default = 0];
inline bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReLUParameter.negative_slope)
  return negative_slope_;
}
inline void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReLUParameter.negative_slope)
}

// optional .apollo.perception.inference.ReLUParameter.Engine engine = 2 [default = DEFAULT];
inline bool ReLUParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReLUParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReLUParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReLUParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::apollo::perception::inference::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReLUParameter.engine)
  return static_cast< ::apollo::perception::inference::ReLUParameter_Engine >(engine_);
}
inline void ReLUParameter::set_engine(::apollo::perception::inference::ReLUParameter_Engine value) {
  assert(::apollo::perception::inference::ReLUParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReLUParameter.engine)
}

// -------------------------------------------------------------------

// ReshapeParameter

// optional .apollo.perception.inference.BlobShape shape = 1;
inline bool ReshapeParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReshapeParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReshapeParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReshapeParameter::clear_shape() {
  if (shape_ != NULL) shape_->::apollo::perception::inference::BlobShape::Clear();
  clear_has_shape();
}
inline const ::apollo::perception::inference::BlobShape& ReshapeParameter::shape() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReshapeParameter.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::apollo::perception::inference::BlobShape* ReshapeParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::apollo::perception::inference::BlobShape;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ReshapeParameter.shape)
  return shape_;
}
inline ::apollo::perception::inference::BlobShape* ReshapeParameter::release_shape() {
  clear_has_shape();
  ::apollo::perception::inference::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void ReshapeParameter::set_allocated_shape(::apollo::perception::inference::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
inline bool ReshapeParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReshapeParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReshapeParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReshapeParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReshapeParameter.axis)
  return axis_;
}
inline void ReshapeParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReshapeParameter.axis)
}

// optional int32 num_axes = 3 [default = -1];
inline bool ReshapeParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReshapeParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReshapeParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReshapeParameter::clear_num_axes() {
  num_axes_ = -1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReshapeParameter.num_axes)
  return num_axes_;
}
inline void ReshapeParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReshapeParameter.num_axes)
}

// -------------------------------------------------------------------

// ROIPoolingParameter

// optional uint32 pooled_h = 1 [default = 0];
inline bool ROIPoolingParameter::has_pooled_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROIPoolingParameter::set_has_pooled_h() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROIPoolingParameter::clear_has_pooled_h() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROIPoolingParameter::clear_pooled_h() {
  pooled_h_ = 0u;
  clear_has_pooled_h();
}
inline ::google::protobuf::uint32 ROIPoolingParameter::pooled_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ROIPoolingParameter.pooled_h)
  return pooled_h_;
}
inline void ROIPoolingParameter::set_pooled_h(::google::protobuf::uint32 value) {
  set_has_pooled_h();
  pooled_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ROIPoolingParameter.pooled_h)
}

// optional uint32 pooled_w = 2 [default = 0];
inline bool ROIPoolingParameter::has_pooled_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROIPoolingParameter::set_has_pooled_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROIPoolingParameter::clear_has_pooled_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROIPoolingParameter::clear_pooled_w() {
  pooled_w_ = 0u;
  clear_has_pooled_w();
}
inline ::google::protobuf::uint32 ROIPoolingParameter::pooled_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ROIPoolingParameter.pooled_w)
  return pooled_w_;
}
inline void ROIPoolingParameter::set_pooled_w(::google::protobuf::uint32 value) {
  set_has_pooled_w();
  pooled_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ROIPoolingParameter.pooled_w)
}

// optional float spatial_scale = 3 [default = 1];
inline bool ROIPoolingParameter::has_spatial_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROIPoolingParameter::set_has_spatial_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROIPoolingParameter::clear_has_spatial_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ROIPoolingParameter::clear_spatial_scale() {
  spatial_scale_ = 1;
  clear_has_spatial_scale();
}
inline float ROIPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ROIPoolingParameter.spatial_scale)
  return spatial_scale_;
}
inline void ROIPoolingParameter::set_spatial_scale(float value) {
  set_has_spatial_scale();
  spatial_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ROIPoolingParameter.spatial_scale)
}

// optional bool use_floor = 10 [default = false];
inline bool ROIPoolingParameter::has_use_floor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ROIPoolingParameter::set_has_use_floor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ROIPoolingParameter::clear_has_use_floor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ROIPoolingParameter::clear_use_floor() {
  use_floor_ = false;
  clear_has_use_floor();
}
inline bool ROIPoolingParameter::use_floor() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ROIPoolingParameter.use_floor)
  return use_floor_;
}
inline void ROIPoolingParameter::set_use_floor(bool value) {
  set_has_use_floor();
  use_floor_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ROIPoolingParameter.use_floor)
}

// -------------------------------------------------------------------

// ScaleParameter

// optional int32 axis = 1 [default = 1];
inline bool ScaleParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScaleParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScaleParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScaleParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ScaleParameter.axis)
  return axis_;
}
inline void ScaleParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ScaleParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool ScaleParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScaleParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScaleParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScaleParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ScaleParameter.num_axes)
  return num_axes_;
}
inline void ScaleParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ScaleParameter.num_axes)
}

// optional .apollo.perception.inference.FillerParameter filler = 3;
inline bool ScaleParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScaleParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScaleParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScaleParameter::clear_filler() {
  if (filler_ != NULL) filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::apollo::perception::inference::FillerParameter& ScaleParameter::filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ScaleParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::apollo::perception::inference::FillerParameter* ScaleParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ScaleParameter.filler)
  return filler_;
}
inline ::apollo::perception::inference::FillerParameter* ScaleParameter::release_filler() {
  clear_has_filler();
  ::apollo::perception::inference::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void ScaleParameter::set_allocated_filler(::apollo::perception::inference::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ScaleParameter.filler)
}

// optional bool bias_term = 4 [default = false];
inline bool ScaleParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScaleParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScaleParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScaleParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
inline bool ScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ScaleParameter.bias_term)
  return bias_term_;
}
inline void ScaleParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ScaleParameter.bias_term)
}

// optional .apollo.perception.inference.FillerParameter bias_filler = 5;
inline bool ScaleParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScaleParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScaleParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScaleParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::apollo::perception::inference::FillerParameter& ScaleParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ScaleParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* ScaleParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.ScaleParameter.bias_filler)
  return bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* ScaleParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::apollo::perception::inference::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ScaleParameter::set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.ScaleParameter.bias_filler)
}

// -------------------------------------------------------------------

// SigmoidParameter

// optional .apollo.perception.inference.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
inline bool SigmoidParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigmoidParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SigmoidParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SigmoidParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::apollo::perception::inference::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SigmoidParameter.engine)
  return static_cast< ::apollo::perception::inference::SigmoidParameter_Engine >(engine_);
}
inline void SigmoidParameter::set_engine(::apollo::perception::inference::SigmoidParameter_Engine value) {
  assert(::apollo::perception::inference::SigmoidParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SigmoidParameter.engine)
}

// -------------------------------------------------------------------

// SliceParameter

// optional int32 axis = 3 [default = 1];
inline bool SliceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SliceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SliceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SliceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SliceParameter.axis)
  return axis_;
}
inline void SliceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SliceParameter.axis)
}

// repeated uint32 slice_point = 2;
inline int SliceParameter::slice_point_size() const {
  return slice_point_.size();
}
inline void SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
inline ::google::protobuf::uint32 SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SliceParameter.slice_point)
  return slice_point_.Get(index);
}
inline void SliceParameter::set_slice_point(int index, ::google::protobuf::uint32 value) {
  slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SliceParameter.slice_point)
}
inline void SliceParameter::add_slice_point(::google::protobuf::uint32 value) {
  slice_point_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.SliceParameter.slice_point)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.SliceParameter.slice_point)
  return slice_point_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.SliceParameter.slice_point)
  return &slice_point_;
}

// optional uint32 slice_dim = 1 [default = 1];
inline bool SliceParameter::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SliceParameter::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SliceParameter::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  clear_has_slice_dim();
}
inline ::google::protobuf::uint32 SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SliceParameter.slice_dim)
  return slice_dim_;
}
inline void SliceParameter::set_slice_dim(::google::protobuf::uint32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SliceParameter.slice_dim)
}

// -------------------------------------------------------------------

// SoftmaxParameter

// optional .apollo.perception.inference.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
inline bool SoftmaxParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftmaxParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftmaxParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::apollo::perception::inference::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SoftmaxParameter.engine)
  return static_cast< ::apollo::perception::inference::SoftmaxParameter_Engine >(engine_);
}
inline void SoftmaxParameter::set_engine(::apollo::perception::inference::SoftmaxParameter_Engine value) {
  assert(::apollo::perception::inference::SoftmaxParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SoftmaxParameter.engine)
}

// optional int32 axis = 2 [default = 1];
inline bool SoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SoftmaxParameter.axis)
  return axis_;
}
inline void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SoftmaxParameter.axis)
}

// -------------------------------------------------------------------

// TanHParameter

// optional .apollo.perception.inference.TanHParameter.Engine engine = 1 [default = DEFAULT];
inline bool TanHParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TanHParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TanHParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TanHParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::apollo::perception::inference::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TanHParameter.engine)
  return static_cast< ::apollo::perception::inference::TanHParameter_Engine >(engine_);
}
inline void TanHParameter::set_engine(::apollo::perception::inference::TanHParameter_Engine value) {
  assert(::apollo::perception::inference::TanHParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TanHParameter.engine)
}

// -------------------------------------------------------------------

// TileParameter

// optional int32 axis = 1 [default = 1];
inline bool TileParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TileParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TileParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TileParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 TileParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TileParameter.axis)
  return axis_;
}
inline void TileParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TileParameter.axis)
}

// optional int32 tiles = 2;
inline bool TileParameter::has_tiles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TileParameter::set_has_tiles() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TileParameter::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TileParameter::clear_tiles() {
  tiles_ = 0;
  clear_has_tiles();
}
inline ::google::protobuf::int32 TileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.TileParameter.tiles)
  return tiles_;
}
inline void TileParameter::set_tiles(::google::protobuf::int32 value) {
  set_has_tiles();
  tiles_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.TileParameter.tiles)
}

// -------------------------------------------------------------------

// ThresholdParameter

// optional float threshold = 1 [default = 0];
inline bool ThresholdParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThresholdParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThresholdParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThresholdParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ThresholdParameter.threshold)
  return threshold_;
}
inline void ThresholdParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ThresholdParameter.threshold)
}

// -------------------------------------------------------------------

// VideoDataParameter

// optional .apollo.perception.inference.VideoDataParameter.VideoType video_type = 1 [default = WEBCAM];
inline bool VideoDataParameter::has_video_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoDataParameter::set_has_video_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoDataParameter::clear_has_video_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoDataParameter::clear_video_type() {
  video_type_ = 0;
  clear_has_video_type();
}
inline ::apollo::perception::inference::VideoDataParameter_VideoType VideoDataParameter::video_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.VideoDataParameter.video_type)
  return static_cast< ::apollo::perception::inference::VideoDataParameter_VideoType >(video_type_);
}
inline void VideoDataParameter::set_video_type(::apollo::perception::inference::VideoDataParameter_VideoType value) {
  assert(::apollo::perception::inference::VideoDataParameter_VideoType_IsValid(value));
  set_has_video_type();
  video_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.VideoDataParameter.video_type)
}

// optional int32 device_id = 2 [default = 0];
inline bool VideoDataParameter::has_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoDataParameter::set_has_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoDataParameter::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoDataParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 VideoDataParameter::device_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.VideoDataParameter.device_id)
  return device_id_;
}
inline void VideoDataParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.VideoDataParameter.device_id)
}

// optional string video_file = 3;
inline bool VideoDataParameter::has_video_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoDataParameter::set_has_video_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoDataParameter::clear_has_video_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoDataParameter::clear_video_file() {
  if (video_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_file_->clear();
  }
  clear_has_video_file();
}
inline const ::std::string& VideoDataParameter::video_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.VideoDataParameter.video_file)
  return *video_file_;
}
inline void VideoDataParameter::set_video_file(const ::std::string& value) {
  set_has_video_file();
  if (video_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_file_ = new ::std::string;
  }
  video_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.VideoDataParameter.video_file)
}
inline void VideoDataParameter::set_video_file(const char* value) {
  set_has_video_file();
  if (video_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_file_ = new ::std::string;
  }
  video_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.VideoDataParameter.video_file)
}
inline void VideoDataParameter::set_video_file(const char* value, size_t size) {
  set_has_video_file();
  if (video_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_file_ = new ::std::string;
  }
  video_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.VideoDataParameter.video_file)
}
inline ::std::string* VideoDataParameter::mutable_video_file() {
  set_has_video_file();
  if (video_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.VideoDataParameter.video_file)
  return video_file_;
}
inline ::std::string* VideoDataParameter::release_video_file() {
  clear_has_video_file();
  if (video_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = video_file_;
    video_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoDataParameter::set_allocated_video_file(::std::string* video_file) {
  if (video_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete video_file_;
  }
  if (video_file) {
    set_has_video_file();
    video_file_ = video_file;
  } else {
    clear_has_video_file();
    video_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.VideoDataParameter.video_file)
}

// optional uint32 skip_frames = 4 [default = 0];
inline bool VideoDataParameter::has_skip_frames() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoDataParameter::set_has_skip_frames() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoDataParameter::clear_has_skip_frames() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoDataParameter::clear_skip_frames() {
  skip_frames_ = 0u;
  clear_has_skip_frames();
}
inline ::google::protobuf::uint32 VideoDataParameter::skip_frames() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.VideoDataParameter.skip_frames)
  return skip_frames_;
}
inline void VideoDataParameter::set_skip_frames(::google::protobuf::uint32 value) {
  set_has_skip_frames();
  skip_frames_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.VideoDataParameter.skip_frames)
}

// -------------------------------------------------------------------

// WindowDataParameter

// optional string source = 1;
inline bool WindowDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WindowDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WindowDataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.source)
  return *source_;
}
inline void WindowDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.WindowDataParameter.source)
}
inline ::std::string* WindowDataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.WindowDataParameter.source)
  return source_;
}
inline ::std::string* WindowDataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WindowDataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
inline bool WindowDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WindowDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WindowDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.scale)
  return scale_;
}
inline void WindowDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.scale)
}

// optional string mean_file = 3;
inline bool WindowDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WindowDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WindowDataParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.mean_file)
  return *mean_file_;
}
inline void WindowDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.WindowDataParameter.mean_file)
}
inline ::std::string* WindowDataParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.WindowDataParameter.mean_file)
  return mean_file_;
}
inline ::std::string* WindowDataParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WindowDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
inline bool WindowDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindowDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WindowDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.batch_size)
  return batch_size_;
}
inline void WindowDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool WindowDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WindowDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WindowDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.crop_size)
  return crop_size_;
}
inline void WindowDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool WindowDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WindowDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WindowDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.mirror)
  return mirror_;
}
inline void WindowDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
inline bool WindowDataParameter::has_fg_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WindowDataParameter::set_has_fg_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WindowDataParameter::clear_has_fg_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  clear_has_fg_threshold();
}
inline float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.fg_threshold)
  return fg_threshold_;
}
inline void WindowDataParameter::set_fg_threshold(float value) {
  set_has_fg_threshold();
  fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
inline bool WindowDataParameter::has_bg_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WindowDataParameter::set_has_bg_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WindowDataParameter::clear_has_bg_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  clear_has_bg_threshold();
}
inline float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.bg_threshold)
  return bg_threshold_;
}
inline void WindowDataParameter::set_bg_threshold(float value) {
  set_has_bg_threshold();
  bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
inline bool WindowDataParameter::has_fg_fraction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WindowDataParameter::set_has_fg_fraction() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WindowDataParameter::clear_has_fg_fraction() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  clear_has_fg_fraction();
}
inline float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.fg_fraction)
  return fg_fraction_;
}
inline void WindowDataParameter::set_fg_fraction(float value) {
  set_has_fg_fraction();
  fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
inline bool WindowDataParameter::has_context_pad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WindowDataParameter::set_has_context_pad() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WindowDataParameter::clear_has_context_pad() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  clear_has_context_pad();
}
inline ::google::protobuf::uint32 WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.context_pad)
  return context_pad_;
}
inline void WindowDataParameter::set_context_pad(::google::protobuf::uint32 value) {
  set_has_context_pad();
  context_pad_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
inline bool WindowDataParameter::has_crop_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WindowDataParameter::set_has_crop_mode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WindowDataParameter::clear_has_crop_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WindowDataParameter::clear_crop_mode() {
  if (crop_mode_ != _default_crop_mode_) {
    crop_mode_->assign(*_default_crop_mode_);
  }
  clear_has_crop_mode();
}
inline const ::std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.crop_mode)
  return *crop_mode_;
}
inline void WindowDataParameter::set_crop_mode(const ::std::string& value) {
  set_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    crop_mode_ = new ::std::string;
  }
  crop_mode_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value) {
  set_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    crop_mode_ = new ::std::string;
  }
  crop_mode_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value, size_t size) {
  set_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    crop_mode_ = new ::std::string;
  }
  crop_mode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.WindowDataParameter.crop_mode)
}
inline ::std::string* WindowDataParameter::mutable_crop_mode() {
  set_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    crop_mode_ = new ::std::string(*_default_crop_mode_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.WindowDataParameter.crop_mode)
  return crop_mode_;
}
inline ::std::string* WindowDataParameter::release_crop_mode() {
  clear_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    return NULL;
  } else {
    ::std::string* temp = crop_mode_;
    crop_mode_ = const_cast< ::std::string*>(_default_crop_mode_);
    return temp;
  }
}
inline void WindowDataParameter::set_allocated_crop_mode(::std::string* crop_mode) {
  if (crop_mode_ != _default_crop_mode_) {
    delete crop_mode_;
  }
  if (crop_mode) {
    set_has_crop_mode();
    crop_mode_ = crop_mode;
  } else {
    clear_has_crop_mode();
    crop_mode_ = const_cast< ::std::string*>(_default_crop_mode_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
inline bool WindowDataParameter::has_cache_images() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WindowDataParameter::set_has_cache_images() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WindowDataParameter::clear_has_cache_images() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WindowDataParameter::clear_cache_images() {
  cache_images_ = false;
  clear_has_cache_images();
}
inline bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.cache_images)
  return cache_images_;
}
inline void WindowDataParameter::set_cache_images(bool value) {
  set_has_cache_images();
  cache_images_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.cache_images)
}

// optional string root_folder = 13 [default = ""];
inline bool WindowDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WindowDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WindowDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WindowDataParameter::clear_root_folder() {
  if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_->clear();
  }
  clear_has_root_folder();
}
inline const ::std::string& WindowDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.WindowDataParameter.root_folder)
  return *root_folder_;
}
inline void WindowDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.WindowDataParameter.root_folder)
}
inline void WindowDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.WindowDataParameter.root_folder)
}
inline void WindowDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.WindowDataParameter.root_folder)
}
inline ::std::string* WindowDataParameter::mutable_root_folder() {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.WindowDataParameter.root_folder)
  return root_folder_;
}
inline ::std::string* WindowDataParameter::release_root_folder() {
  clear_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = root_folder_;
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WindowDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete root_folder_;
  }
  if (root_folder) {
    set_has_root_folder();
    root_folder_ = root_folder;
  } else {
    clear_has_root_folder();
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.WindowDataParameter.root_folder)
}

// -------------------------------------------------------------------

// SPPParameter

// optional uint32 pyramid_height = 1;
inline bool SPPParameter::has_pyramid_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPPParameter::set_has_pyramid_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPPParameter::clear_has_pyramid_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPPParameter::clear_pyramid_height() {
  pyramid_height_ = 0u;
  clear_has_pyramid_height();
}
inline ::google::protobuf::uint32 SPPParameter::pyramid_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SPPParameter.pyramid_height)
  return pyramid_height_;
}
inline void SPPParameter::set_pyramid_height(::google::protobuf::uint32 value) {
  set_has_pyramid_height();
  pyramid_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SPPParameter.pyramid_height)
}

// optional .apollo.perception.inference.SPPParameter.PoolMethod pool = 2 [default = MAX];
inline bool SPPParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPPParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPPParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPPParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::apollo::perception::inference::SPPParameter_PoolMethod SPPParameter::pool() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SPPParameter.pool)
  return static_cast< ::apollo::perception::inference::SPPParameter_PoolMethod >(pool_);
}
inline void SPPParameter::set_pool(::apollo::perception::inference::SPPParameter_PoolMethod value) {
  assert(::apollo::perception::inference::SPPParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SPPParameter.pool)
}

// optional .apollo.perception.inference.SPPParameter.Engine engine = 6 [default = DEFAULT];
inline bool SPPParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPPParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPPParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPPParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::apollo::perception::inference::SPPParameter_Engine SPPParameter::engine() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.SPPParameter.engine)
  return static_cast< ::apollo::perception::inference::SPPParameter_Engine >(engine_);
}
inline void SPPParameter::set_engine(::apollo::perception::inference::SPPParameter_Engine value) {
  assert(::apollo::perception::inference::SPPParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.SPPParameter.engine)
}

// -------------------------------------------------------------------

// V1LayerParameter

// repeated string bottom = 2;
inline int V1LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void V1LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& V1LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void V1LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.V1LayerParameter.bottom)
}
inline ::std::string* V1LayerParameter::add_bottom() {
  return bottom_.Add();
}
inline void V1LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.V1LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 3;
inline int V1LayerParameter::top_size() const {
  return top_.size();
}
inline void V1LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& V1LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.top)
  return top_.Mutable(index);
}
inline void V1LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.V1LayerParameter.top)
}
inline ::std::string* V1LayerParameter::add_top() {
  return top_.Add();
}
inline void V1LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.V1LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.top)
  return &top_;
}

// optional string name = 4;
inline bool V1LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& V1LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.name)
  return *name_;
}
inline void V1LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.name)
}
inline void V1LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.V1LayerParameter.name)
}
inline void V1LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.V1LayerParameter.name)
}
inline ::std::string* V1LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.name)
  return name_;
}
inline ::std::string* V1LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void V1LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.name)
}

// repeated .apollo.perception.inference.NetStateRule include = 32;
inline int V1LayerParameter::include_size() const {
  return include_.size();
}
inline void V1LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::apollo::perception::inference::NetStateRule& V1LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.include)
  return include_.Get(index);
}
inline ::apollo::perception::inference::NetStateRule* V1LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.include)
  return include_.Mutable(index);
}
inline ::apollo::perception::inference::NetStateRule* V1LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.include)
  return include_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
V1LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.include)
  return include_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
V1LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.include)
  return &include_;
}

// repeated .apollo.perception.inference.NetStateRule exclude = 33;
inline int V1LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void V1LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::apollo::perception::inference::NetStateRule& V1LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::apollo::perception::inference::NetStateRule* V1LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::apollo::perception::inference::NetStateRule* V1LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.exclude)
  return exclude_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >&
V1LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.exclude)
  return exclude_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::NetStateRule >*
V1LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.exclude)
  return &exclude_;
}

// optional .apollo.perception.inference.V1LayerParameter.LayerType type = 5;
inline bool V1LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V1LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V1LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V1LayerParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::perception::inference::V1LayerParameter_LayerType V1LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.type)
  return static_cast< ::apollo::perception::inference::V1LayerParameter_LayerType >(type_);
}
inline void V1LayerParameter::set_type(::apollo::perception::inference::V1LayerParameter_LayerType value) {
  assert(::apollo::perception::inference::V1LayerParameter_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.type)
}

// repeated .apollo.perception.inference.BlobProto blobs = 6;
inline int V1LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V1LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::apollo::perception::inference::BlobProto& V1LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::apollo::perception::inference::BlobProto* V1LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::apollo::perception::inference::BlobProto* V1LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.blobs)
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto >&
V1LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.blobs)
  return blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto >*
V1LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.blobs)
  return &blobs_;
}

// repeated string param = 1001;
inline int V1LayerParameter::param_size() const {
  return param_.size();
}
inline void V1LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::std::string& V1LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.param)
  return param_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.param)
  return param_.Mutable(index);
}
inline void V1LayerParameter::set_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.param)
  param_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_param(int index, const char* value) {
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.V1LayerParameter.param)
}
inline ::std::string* V1LayerParameter::add_param() {
  return param_.Add();
}
inline void V1LayerParameter::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.inference.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.inference.V1LayerParameter.param)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.param)
  return &param_;
}

// repeated .apollo.perception.inference.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
inline int V1LayerParameter::blob_share_mode_size() const {
  return blob_share_mode_.size();
}
inline void V1LayerParameter::clear_blob_share_mode() {
  blob_share_mode_.Clear();
}
inline ::apollo::perception::inference::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.blob_share_mode)
  return static_cast< ::apollo::perception::inference::V1LayerParameter_DimCheckMode >(blob_share_mode_.Get(index));
}
inline void V1LayerParameter::set_blob_share_mode(int index, ::apollo::perception::inference::V1LayerParameter_DimCheckMode value) {
  assert(::apollo::perception::inference::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.blob_share_mode)
}
inline void V1LayerParameter::add_blob_share_mode(::apollo::perception::inference::V1LayerParameter_DimCheckMode value) {
  assert(::apollo::perception::inference::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.blob_share_mode)
}
inline const ::google::protobuf::RepeatedField<int>&
V1LayerParameter::blob_share_mode() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.blob_share_mode)
  return blob_share_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
V1LayerParameter::mutable_blob_share_mode() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.blob_share_mode)
  return &blob_share_mode_;
}

// repeated float blobs_lr = 7;
inline int V1LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V1LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V1LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void V1LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.blobs_lr)
}
inline void V1LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 8;
inline int V1LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V1LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V1LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void V1LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.weight_decay)
}
inline void V1LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.weight_decay)
  return &weight_decay_;
}

// repeated float loss_weight = 35;
inline int V1LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void V1LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float V1LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void V1LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V1LayerParameter.loss_weight)
}
inline void V1LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V1LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V1LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V1LayerParameter.loss_weight)
  return &loss_weight_;
}

// optional .apollo.perception.inference.AccuracyParameter accuracy_param = 27;
inline bool V1LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V1LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V1LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V1LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::apollo::perception::inference::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
inline const ::apollo::perception::inference::AccuracyParameter& V1LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_ : *default_instance_->accuracy_param_;
}
inline ::apollo::perception::inference::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) accuracy_param_ = new ::apollo::perception::inference::AccuracyParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline ::apollo::perception::inference::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  clear_has_accuracy_param();
  ::apollo::perception::inference::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_accuracy_param(::apollo::perception::inference::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.accuracy_param)
}

// optional .apollo.perception.inference.ArgMaxParameter argmax_param = 23;
inline bool V1LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V1LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V1LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V1LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::apollo::perception::inference::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
inline const ::apollo::perception::inference::ArgMaxParameter& V1LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_ : *default_instance_->argmax_param_;
}
inline ::apollo::perception::inference::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) argmax_param_ = new ::apollo::perception::inference::ArgMaxParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.argmax_param)
  return argmax_param_;
}
inline ::apollo::perception::inference::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  clear_has_argmax_param();
  ::apollo::perception::inference::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_argmax_param(::apollo::perception::inference::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.argmax_param)
}

// optional .apollo.perception.inference.ConcatParameter concat_param = 9;
inline bool V1LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V1LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V1LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V1LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::apollo::perception::inference::ConcatParameter::Clear();
  clear_has_concat_param();
}
inline const ::apollo::perception::inference::ConcatParameter& V1LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_ : *default_instance_->concat_param_;
}
inline ::apollo::perception::inference::ConcatParameter* V1LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) concat_param_ = new ::apollo::perception::inference::ConcatParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.concat_param)
  return concat_param_;
}
inline ::apollo::perception::inference::ConcatParameter* V1LayerParameter::release_concat_param() {
  clear_has_concat_param();
  ::apollo::perception::inference::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_concat_param(::apollo::perception::inference::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.concat_param)
}

// optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 40;
inline bool V1LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V1LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V1LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V1LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::apollo::perception::inference::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
inline const ::apollo::perception::inference::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_ : *default_instance_->contrastive_loss_param_;
}
inline ::apollo::perception::inference::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) contrastive_loss_param_ = new ::apollo::perception::inference::ContrastiveLossParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
inline ::apollo::perception::inference::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  clear_has_contrastive_loss_param();
  ::apollo::perception::inference::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_contrastive_loss_param(::apollo::perception::inference::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.contrastive_loss_param)
}

// optional .apollo.perception.inference.ConvolutionParameter convolution_param = 10;
inline bool V1LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V1LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V1LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V1LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::apollo::perception::inference::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::apollo::perception::inference::ConvolutionParameter& V1LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
inline ::apollo::perception::inference::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) convolution_param_ = new ::apollo::perception::inference::ConvolutionParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.convolution_param)
  return convolution_param_;
}
inline ::apollo::perception::inference::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  clear_has_convolution_param();
  ::apollo::perception::inference::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_convolution_param(::apollo::perception::inference::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.convolution_param)
}

// optional .apollo.perception.inference.DataParameter data_param = 11;
inline bool V1LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V1LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V1LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V1LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::apollo::perception::inference::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::apollo::perception::inference::DataParameter& V1LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::apollo::perception::inference::DataParameter* V1LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) data_param_ = new ::apollo::perception::inference::DataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.data_param)
  return data_param_;
}
inline ::apollo::perception::inference::DataParameter* V1LayerParameter::release_data_param() {
  clear_has_data_param();
  ::apollo::perception::inference::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_data_param(::apollo::perception::inference::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.data_param)
}

// optional .apollo.perception.inference.DropoutParameter dropout_param = 12;
inline bool V1LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V1LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V1LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V1LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::apollo::perception::inference::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::apollo::perception::inference::DropoutParameter& V1LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_ : *default_instance_->dropout_param_;
}
inline ::apollo::perception::inference::DropoutParameter* V1LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) dropout_param_ = new ::apollo::perception::inference::DropoutParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.dropout_param)
  return dropout_param_;
}
inline ::apollo::perception::inference::DropoutParameter* V1LayerParameter::release_dropout_param() {
  clear_has_dropout_param();
  ::apollo::perception::inference::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_dropout_param(::apollo::perception::inference::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.dropout_param)
}

// optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 26;
inline bool V1LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V1LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V1LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V1LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::apollo::perception::inference::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
inline const ::apollo::perception::inference::DummyDataParameter& V1LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_ : *default_instance_->dummy_data_param_;
}
inline ::apollo::perception::inference::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) dummy_data_param_ = new ::apollo::perception::inference::DummyDataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
inline ::apollo::perception::inference::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  clear_has_dummy_data_param();
  ::apollo::perception::inference::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_dummy_data_param(::apollo::perception::inference::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.dummy_data_param)
}

// optional .apollo.perception.inference.EltwiseParameter eltwise_param = 24;
inline bool V1LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V1LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V1LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V1LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::apollo::perception::inference::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::apollo::perception::inference::EltwiseParameter& V1LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_ : *default_instance_->eltwise_param_;
}
inline ::apollo::perception::inference::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) eltwise_param_ = new ::apollo::perception::inference::EltwiseParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline ::apollo::perception::inference::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  clear_has_eltwise_param();
  ::apollo::perception::inference::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_eltwise_param(::apollo::perception::inference::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.eltwise_param)
}

// optional .apollo.perception.inference.ExpParameter exp_param = 41;
inline bool V1LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V1LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V1LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V1LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::apollo::perception::inference::ExpParameter::Clear();
  clear_has_exp_param();
}
inline const ::apollo::perception::inference::ExpParameter& V1LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_ : *default_instance_->exp_param_;
}
inline ::apollo::perception::inference::ExpParameter* V1LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) exp_param_ = new ::apollo::perception::inference::ExpParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.exp_param)
  return exp_param_;
}
inline ::apollo::perception::inference::ExpParameter* V1LayerParameter::release_exp_param() {
  clear_has_exp_param();
  ::apollo::perception::inference::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_exp_param(::apollo::perception::inference::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.exp_param)
}

// optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 13;
inline bool V1LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void V1LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void V1LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::apollo::perception::inference::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
inline const ::apollo::perception::inference::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_ : *default_instance_->hdf5_data_param_;
}
inline ::apollo::perception::inference::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) hdf5_data_param_ = new ::apollo::perception::inference::HDF5DataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
inline ::apollo::perception::inference::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  clear_has_hdf5_data_param();
  ::apollo::perception::inference::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hdf5_data_param(::apollo::perception::inference::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.hdf5_data_param)
}

// optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 14;
inline bool V1LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void V1LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void V1LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::apollo::perception::inference::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::apollo::perception::inference::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
inline ::apollo::perception::inference::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) hdf5_output_param_ = new ::apollo::perception::inference::HDF5OutputParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::apollo::perception::inference::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  clear_has_hdf5_output_param();
  ::apollo::perception::inference::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hdf5_output_param(::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.hdf5_output_param)
}

// optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 29;
inline bool V1LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void V1LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void V1LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void V1LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::apollo::perception::inference::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
inline const ::apollo::perception::inference::HingeLossParameter& V1LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_ : *default_instance_->hinge_loss_param_;
}
inline ::apollo::perception::inference::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) hinge_loss_param_ = new ::apollo::perception::inference::HingeLossParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
inline ::apollo::perception::inference::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  clear_has_hinge_loss_param();
  ::apollo::perception::inference::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hinge_loss_param(::apollo::perception::inference::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.hinge_loss_param)
}

// optional .apollo.perception.inference.ImageDataParameter image_data_param = 15;
inline bool V1LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V1LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V1LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V1LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::apollo::perception::inference::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
inline const ::apollo::perception::inference::ImageDataParameter& V1LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_ : *default_instance_->image_data_param_;
}
inline ::apollo::perception::inference::ImageDataParameter* V1LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) image_data_param_ = new ::apollo::perception::inference::ImageDataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.image_data_param)
  return image_data_param_;
}
inline ::apollo::perception::inference::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  clear_has_image_data_param();
  ::apollo::perception::inference::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_image_data_param(::apollo::perception::inference::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.image_data_param)
}

// optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 16;
inline bool V1LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V1LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V1LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V1LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::apollo::perception::inference::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
inline const ::apollo::perception::inference::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_ : *default_instance_->infogain_loss_param_;
}
inline ::apollo::perception::inference::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) infogain_loss_param_ = new ::apollo::perception::inference::InfogainLossParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
inline ::apollo::perception::inference::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  clear_has_infogain_loss_param();
  ::apollo::perception::inference::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_infogain_loss_param(::apollo::perception::inference::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.infogain_loss_param)
}

// optional .apollo.perception.inference.InnerProductParameter inner_product_param = 17;
inline bool V1LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V1LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V1LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V1LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::apollo::perception::inference::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::apollo::perception::inference::InnerProductParameter& V1LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
inline ::apollo::perception::inference::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) inner_product_param_ = new ::apollo::perception::inference::InnerProductParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline ::apollo::perception::inference::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  clear_has_inner_product_param();
  ::apollo::perception::inference::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_inner_product_param(::apollo::perception::inference::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.inner_product_param)
}

// optional .apollo.perception.inference.LRNParameter lrn_param = 18;
inline bool V1LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V1LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V1LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V1LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::apollo::perception::inference::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::apollo::perception::inference::LRNParameter& V1LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
inline ::apollo::perception::inference::LRNParameter* V1LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) lrn_param_ = new ::apollo::perception::inference::LRNParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.lrn_param)
  return lrn_param_;
}
inline ::apollo::perception::inference::LRNParameter* V1LayerParameter::release_lrn_param() {
  clear_has_lrn_param();
  ::apollo::perception::inference::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_lrn_param(::apollo::perception::inference::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.lrn_param)
}

// optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 22;
inline bool V1LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V1LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V1LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V1LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::apollo::perception::inference::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
inline const ::apollo::perception::inference::MemoryDataParameter& V1LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_ : *default_instance_->memory_data_param_;
}
inline ::apollo::perception::inference::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) memory_data_param_ = new ::apollo::perception::inference::MemoryDataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline ::apollo::perception::inference::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  clear_has_memory_data_param();
  ::apollo::perception::inference::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_memory_data_param(::apollo::perception::inference::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.memory_data_param)
}

// optional .apollo.perception.inference.MVNParameter mvn_param = 34;
inline bool V1LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V1LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V1LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V1LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::apollo::perception::inference::MVNParameter::Clear();
  clear_has_mvn_param();
}
inline const ::apollo::perception::inference::MVNParameter& V1LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_ : *default_instance_->mvn_param_;
}
inline ::apollo::perception::inference::MVNParameter* V1LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) mvn_param_ = new ::apollo::perception::inference::MVNParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.mvn_param)
  return mvn_param_;
}
inline ::apollo::perception::inference::MVNParameter* V1LayerParameter::release_mvn_param() {
  clear_has_mvn_param();
  ::apollo::perception::inference::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_mvn_param(::apollo::perception::inference::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.mvn_param)
}

// optional .apollo.perception.inference.PoolingParameter pooling_param = 19;
inline bool V1LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V1LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V1LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V1LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::apollo::perception::inference::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::apollo::perception::inference::PoolingParameter& V1LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::apollo::perception::inference::PoolingParameter* V1LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) pooling_param_ = new ::apollo::perception::inference::PoolingParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::apollo::perception::inference::PoolingParameter* V1LayerParameter::release_pooling_param() {
  clear_has_pooling_param();
  ::apollo::perception::inference::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_pooling_param(::apollo::perception::inference::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.pooling_param)
}

// optional .apollo.perception.inference.PowerParameter power_param = 21;
inline bool V1LayerParameter::has_power_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V1LayerParameter::set_has_power_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V1LayerParameter::clear_has_power_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V1LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::apollo::perception::inference::PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::apollo::perception::inference::PowerParameter& V1LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_ : *default_instance_->power_param_;
}
inline ::apollo::perception::inference::PowerParameter* V1LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) power_param_ = new ::apollo::perception::inference::PowerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.power_param)
  return power_param_;
}
inline ::apollo::perception::inference::PowerParameter* V1LayerParameter::release_power_param() {
  clear_has_power_param();
  ::apollo::perception::inference::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_power_param(::apollo::perception::inference::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.power_param)
}

// optional .apollo.perception.inference.ReLUParameter relu_param = 30;
inline bool V1LayerParameter::has_relu_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V1LayerParameter::set_has_relu_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V1LayerParameter::clear_has_relu_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V1LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::apollo::perception::inference::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::apollo::perception::inference::ReLUParameter& V1LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::apollo::perception::inference::ReLUParameter* V1LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) relu_param_ = new ::apollo::perception::inference::ReLUParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.relu_param)
  return relu_param_;
}
inline ::apollo::perception::inference::ReLUParameter* V1LayerParameter::release_relu_param() {
  clear_has_relu_param();
  ::apollo::perception::inference::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_relu_param(::apollo::perception::inference::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.relu_param)
}

// optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 38;
inline bool V1LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_sigmoid_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::apollo::perception::inference::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::apollo::perception::inference::SigmoidParameter& V1LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_ : *default_instance_->sigmoid_param_;
}
inline ::apollo::perception::inference::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) sigmoid_param_ = new ::apollo::perception::inference::SigmoidParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline ::apollo::perception::inference::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  clear_has_sigmoid_param();
  ::apollo::perception::inference::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_sigmoid_param(::apollo::perception::inference::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.sigmoid_param)
}

// optional .apollo.perception.inference.SoftmaxParameter softmax_param = 39;
inline bool V1LayerParameter::has_softmax_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void V1LayerParameter::set_has_softmax_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void V1LayerParameter::clear_has_softmax_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void V1LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::apollo::perception::inference::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::apollo::perception::inference::SoftmaxParameter& V1LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
inline ::apollo::perception::inference::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) softmax_param_ = new ::apollo::perception::inference::SoftmaxParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::apollo::perception::inference::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  clear_has_softmax_param();
  ::apollo::perception::inference::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_softmax_param(::apollo::perception::inference::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.softmax_param)
}

// optional .apollo.perception.inference.SliceParameter slice_param = 31;
inline bool V1LayerParameter::has_slice_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void V1LayerParameter::set_has_slice_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void V1LayerParameter::clear_has_slice_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void V1LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::apollo::perception::inference::SliceParameter::Clear();
  clear_has_slice_param();
}
inline const ::apollo::perception::inference::SliceParameter& V1LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_ : *default_instance_->slice_param_;
}
inline ::apollo::perception::inference::SliceParameter* V1LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) slice_param_ = new ::apollo::perception::inference::SliceParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.slice_param)
  return slice_param_;
}
inline ::apollo::perception::inference::SliceParameter* V1LayerParameter::release_slice_param() {
  clear_has_slice_param();
  ::apollo::perception::inference::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_slice_param(::apollo::perception::inference::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.slice_param)
}

// optional .apollo.perception.inference.TanHParameter tanh_param = 37;
inline bool V1LayerParameter::has_tanh_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void V1LayerParameter::set_has_tanh_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void V1LayerParameter::clear_has_tanh_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void V1LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::apollo::perception::inference::TanHParameter::Clear();
  clear_has_tanh_param();
}
inline const ::apollo::perception::inference::TanHParameter& V1LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_ : *default_instance_->tanh_param_;
}
inline ::apollo::perception::inference::TanHParameter* V1LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) tanh_param_ = new ::apollo::perception::inference::TanHParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.tanh_param)
  return tanh_param_;
}
inline ::apollo::perception::inference::TanHParameter* V1LayerParameter::release_tanh_param() {
  clear_has_tanh_param();
  ::apollo::perception::inference::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_tanh_param(::apollo::perception::inference::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.tanh_param)
}

// optional .apollo.perception.inference.ThresholdParameter threshold_param = 25;
inline bool V1LayerParameter::has_threshold_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void V1LayerParameter::set_has_threshold_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void V1LayerParameter::clear_has_threshold_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void V1LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::apollo::perception::inference::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
inline const ::apollo::perception::inference::ThresholdParameter& V1LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_ : *default_instance_->threshold_param_;
}
inline ::apollo::perception::inference::ThresholdParameter* V1LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) threshold_param_ = new ::apollo::perception::inference::ThresholdParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.threshold_param)
  return threshold_param_;
}
inline ::apollo::perception::inference::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  clear_has_threshold_param();
  ::apollo::perception::inference::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_threshold_param(::apollo::perception::inference::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.threshold_param)
}

// optional .apollo.perception.inference.WindowDataParameter window_data_param = 20;
inline bool V1LayerParameter::has_window_data_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void V1LayerParameter::set_has_window_data_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void V1LayerParameter::clear_has_window_data_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void V1LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::apollo::perception::inference::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
inline const ::apollo::perception::inference::WindowDataParameter& V1LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_ : *default_instance_->window_data_param_;
}
inline ::apollo::perception::inference::WindowDataParameter* V1LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) window_data_param_ = new ::apollo::perception::inference::WindowDataParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.window_data_param)
  return window_data_param_;
}
inline ::apollo::perception::inference::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  clear_has_window_data_param();
  ::apollo::perception::inference::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_window_data_param(::apollo::perception::inference::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.window_data_param)
}

// optional .apollo.perception.inference.TransformationParameter transform_param = 36;
inline bool V1LayerParameter::has_transform_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void V1LayerParameter::set_has_transform_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void V1LayerParameter::clear_has_transform_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void V1LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::apollo::perception::inference::TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::apollo::perception::inference::TransformationParameter& V1LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_ : *default_instance_->transform_param_;
}
inline ::apollo::perception::inference::TransformationParameter* V1LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) transform_param_ = new ::apollo::perception::inference::TransformationParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.transform_param)
  return transform_param_;
}
inline ::apollo::perception::inference::TransformationParameter* V1LayerParameter::release_transform_param() {
  clear_has_transform_param();
  ::apollo::perception::inference::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_transform_param(::apollo::perception::inference::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.transform_param)
}

// optional .apollo.perception.inference.LossParameter loss_param = 42;
inline bool V1LayerParameter::has_loss_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void V1LayerParameter::set_has_loss_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void V1LayerParameter::clear_has_loss_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void V1LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::apollo::perception::inference::LossParameter::Clear();
  clear_has_loss_param();
}
inline const ::apollo::perception::inference::LossParameter& V1LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_ : *default_instance_->loss_param_;
}
inline ::apollo::perception::inference::LossParameter* V1LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) loss_param_ = new ::apollo::perception::inference::LossParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.loss_param)
  return loss_param_;
}
inline ::apollo::perception::inference::LossParameter* V1LayerParameter::release_loss_param() {
  clear_has_loss_param();
  ::apollo::perception::inference::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_loss_param(::apollo::perception::inference::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.loss_param)
}

// optional .apollo.perception.inference.V0LayerParameter layer = 1;
inline bool V1LayerParameter::has_layer() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void V1LayerParameter::set_has_layer() {
  _has_bits_[1] |= 0x00000400u;
}
inline void V1LayerParameter::clear_has_layer() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void V1LayerParameter::clear_layer() {
  if (layer_ != NULL) layer_->::apollo::perception::inference::V0LayerParameter::Clear();
  clear_has_layer();
}
inline const ::apollo::perception::inference::V0LayerParameter& V1LayerParameter::layer() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V1LayerParameter.layer)
  return layer_ != NULL ? *layer_ : *default_instance_->layer_;
}
inline ::apollo::perception::inference::V0LayerParameter* V1LayerParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) layer_ = new ::apollo::perception::inference::V0LayerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V1LayerParameter.layer)
  return layer_;
}
inline ::apollo::perception::inference::V0LayerParameter* V1LayerParameter::release_layer() {
  clear_has_layer();
  ::apollo::perception::inference::V0LayerParameter* temp = layer_;
  layer_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_layer(::apollo::perception::inference::V0LayerParameter* layer) {
  delete layer_;
  layer_ = layer;
  if (layer) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V1LayerParameter.layer)
}

// -------------------------------------------------------------------

// V0LayerParameter

// optional string name = 1;
inline bool V0LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.name)
  return *name_;
}
inline void V0LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.V0LayerParameter.name)
}
inline ::std::string* V0LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.name)
  return name_;
}
inline ::std::string* V0LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.name)
}

// optional string type = 2;
inline bool V0LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.type)
  return *type_;
}
inline void V0LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.V0LayerParameter.type)
}
inline ::std::string* V0LayerParameter::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.type)
  return type_;
}
inline ::std::string* V0LayerParameter::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
inline bool V0LayerParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.num_output)
  return num_output_;
}
inline void V0LayerParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
inline bool V0LayerParameter::has_biasterm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void V0LayerParameter::set_has_biasterm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void V0LayerParameter::clear_has_biasterm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  clear_has_biasterm();
}
inline bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.biasterm)
  return biasterm_;
}
inline void V0LayerParameter::set_biasterm(bool value) {
  set_has_biasterm();
  biasterm_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.biasterm)
}

// optional .apollo.perception.inference.FillerParameter weight_filler = 5;
inline bool V0LayerParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void V0LayerParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void V0LayerParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::apollo::perception::inference::FillerParameter& V0LayerParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.weight_filler)
  return weight_filler_;
}
inline ::apollo::perception::inference::FillerParameter* V0LayerParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::apollo::perception::inference::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_weight_filler(::apollo::perception::inference::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.weight_filler)
}

// optional .apollo.perception.inference.FillerParameter bias_filler = 6;
inline bool V0LayerParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V0LayerParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V0LayerParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::apollo::perception::inference::FillerParameter& V0LayerParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.bias_filler)
  return bias_filler_;
}
inline ::apollo::perception::inference::FillerParameter* V0LayerParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::apollo::perception::inference::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_bias_filler(::apollo::perception::inference::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
inline bool V0LayerParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void V0LayerParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000040u;
}
inline void V0LayerParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.pad)
  return pad_;
}
inline void V0LayerParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
inline bool V0LayerParameter::has_kernelsize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void V0LayerParameter::set_has_kernelsize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void V0LayerParameter::clear_has_kernelsize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  clear_has_kernelsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.kernelsize)
  return kernelsize_;
}
inline void V0LayerParameter::set_kernelsize(::google::protobuf::uint32 value) {
  set_has_kernelsize();
  kernelsize_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
inline bool V0LayerParameter::has_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void V0LayerParameter::set_has_group() {
  _has_bits_[0] |= 0x00000100u;
}
inline void V0LayerParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void V0LayerParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.group)
  return group_;
}
inline void V0LayerParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
inline bool V0LayerParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void V0LayerParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000200u;
}
inline void V0LayerParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.stride)
  return stride_;
}
inline void V0LayerParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.stride)
}

// optional .apollo.perception.inference.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
inline bool V0LayerParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void V0LayerParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000400u;
}
inline void V0LayerParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void V0LayerParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::apollo::perception::inference::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.pool)
  return static_cast< ::apollo::perception::inference::V0LayerParameter_PoolMethod >(pool_);
}
inline void V0LayerParameter::set_pool(::apollo::perception::inference::V0LayerParameter_PoolMethod value) {
  assert(::apollo::perception::inference::V0LayerParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
inline bool V0LayerParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void V0LayerParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void V0LayerParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void V0LayerParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
inline bool V0LayerParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V0LayerParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V0LayerParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.local_size)
  return local_size_;
}
inline void V0LayerParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
inline bool V0LayerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V0LayerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V0LayerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.alpha)
  return alpha_;
}
inline void V0LayerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
inline bool V0LayerParameter::has_beta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V0LayerParameter::set_has_beta() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V0LayerParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.beta)
  return beta_;
}
inline void V0LayerParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.beta)
}

// optional float k = 22 [default = 1];
inline bool V0LayerParameter::has_k() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V0LayerParameter::set_has_k() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V0LayerParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V0LayerParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.k)
  return k_;
}
inline void V0LayerParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.k)
}

// optional string source = 16;
inline bool V0LayerParameter::has_source() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V0LayerParameter::set_has_source() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V0LayerParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V0LayerParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.source)
  return *source_;
}
inline void V0LayerParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.V0LayerParameter.source)
}
inline ::std::string* V0LayerParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.source)
  return source_;
}
inline ::std::string* V0LayerParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
inline bool V0LayerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V0LayerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V0LayerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V0LayerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.scale)
  return scale_;
}
inline void V0LayerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.scale)
}

// optional string meanfile = 18;
inline bool V0LayerParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V0LayerParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V0LayerParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V0LayerParameter::clear_meanfile() {
  if (meanfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meanfile_->clear();
  }
  clear_has_meanfile();
}
inline const ::std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.meanfile)
  return *meanfile_;
}
inline void V0LayerParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meanfile_ = new ::std::string;
  }
  meanfile_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value) {
  set_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meanfile_ = new ::std::string;
  }
  meanfile_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meanfile_ = new ::std::string;
  }
  meanfile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.V0LayerParameter.meanfile)
}
inline ::std::string* V0LayerParameter::mutable_meanfile() {
  set_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meanfile_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.meanfile)
  return meanfile_;
}
inline ::std::string* V0LayerParameter::release_meanfile() {
  clear_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = meanfile_;
    meanfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete meanfile_;
  }
  if (meanfile) {
    set_has_meanfile();
    meanfile_ = meanfile;
  } else {
    clear_has_meanfile();
    meanfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
inline bool V0LayerParameter::has_batchsize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V0LayerParameter::set_has_batchsize() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V0LayerParameter::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  clear_has_batchsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.batchsize)
  return batchsize_;
}
inline void V0LayerParameter::set_batchsize(::google::protobuf::uint32 value) {
  set_has_batchsize();
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
inline bool V0LayerParameter::has_cropsize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V0LayerParameter::set_has_cropsize() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V0LayerParameter::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  clear_has_cropsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.cropsize)
  return cropsize_;
}
inline void V0LayerParameter::set_cropsize(::google::protobuf::uint32 value) {
  set_has_cropsize();
  cropsize_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
inline bool V0LayerParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V0LayerParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V0LayerParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.mirror)
  return mirror_;
}
inline void V0LayerParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.mirror)
}

// repeated .apollo.perception.inference.BlobProto blobs = 50;
inline int V0LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::apollo::perception::inference::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::apollo::perception::inference::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::apollo::perception::inference::BlobProto* V0LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V0LayerParameter.blobs)
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V0LayerParameter.blobs)
  return blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V0LayerParameter.blobs)
  return &blobs_;
}

// repeated float blobs_lr = 51;
inline int V0LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.blobs_lr)
}
inline void V0LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V0LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V0LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V0LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 52;
inline int V0LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.weight_decay)
}
inline void V0LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.V0LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.V0LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.V0LayerParameter.weight_decay)
  return &weight_decay_;
}

// optional uint32 rand_skip = 53 [default = 0];
inline bool V0LayerParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V0LayerParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V0LayerParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.rand_skip)
  return rand_skip_;
}
inline void V0LayerParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
inline bool V0LayerParameter::has_det_fg_threshold() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_threshold() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V0LayerParameter::clear_has_det_fg_threshold() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  clear_has_det_fg_threshold();
}
inline float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.det_fg_threshold)
  return det_fg_threshold_;
}
inline void V0LayerParameter::set_det_fg_threshold(float value) {
  set_has_det_fg_threshold();
  det_fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
inline bool V0LayerParameter::has_det_bg_threshold() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V0LayerParameter::set_has_det_bg_threshold() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V0LayerParameter::clear_has_det_bg_threshold() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  clear_has_det_bg_threshold();
}
inline float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.det_bg_threshold)
  return det_bg_threshold_;
}
inline void V0LayerParameter::set_det_bg_threshold(float value) {
  set_has_det_bg_threshold();
  det_bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
inline bool V0LayerParameter::has_det_fg_fraction() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_fraction() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V0LayerParameter::clear_has_det_fg_fraction() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  clear_has_det_fg_fraction();
}
inline float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.det_fg_fraction)
  return det_fg_fraction_;
}
inline void V0LayerParameter::set_det_fg_fraction(float value) {
  set_has_det_fg_fraction();
  det_fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
inline bool V0LayerParameter::has_det_context_pad() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V0LayerParameter::set_has_det_context_pad() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V0LayerParameter::clear_has_det_context_pad() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  clear_has_det_context_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.det_context_pad)
  return det_context_pad_;
}
inline void V0LayerParameter::set_det_context_pad(::google::protobuf::uint32 value) {
  set_has_det_context_pad();
  det_context_pad_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
inline bool V0LayerParameter::has_det_crop_mode() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V0LayerParameter::set_has_det_crop_mode() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V0LayerParameter::clear_has_det_crop_mode() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V0LayerParameter::clear_det_crop_mode() {
  if (det_crop_mode_ != _default_det_crop_mode_) {
    det_crop_mode_->assign(*_default_det_crop_mode_);
  }
  clear_has_det_crop_mode();
}
inline const ::std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.det_crop_mode)
  return *det_crop_mode_;
}
inline void V0LayerParameter::set_det_crop_mode(const ::std::string& value) {
  set_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    det_crop_mode_ = new ::std::string;
  }
  det_crop_mode_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value) {
  set_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    det_crop_mode_ = new ::std::string;
  }
  det_crop_mode_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value, size_t size) {
  set_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    det_crop_mode_ = new ::std::string;
  }
  det_crop_mode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.V0LayerParameter.det_crop_mode)
}
inline ::std::string* V0LayerParameter::mutable_det_crop_mode() {
  set_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    det_crop_mode_ = new ::std::string(*_default_det_crop_mode_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.det_crop_mode)
  return det_crop_mode_;
}
inline ::std::string* V0LayerParameter::release_det_crop_mode() {
  clear_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    return NULL;
  } else {
    ::std::string* temp = det_crop_mode_;
    det_crop_mode_ = const_cast< ::std::string*>(_default_det_crop_mode_);
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_det_crop_mode(::std::string* det_crop_mode) {
  if (det_crop_mode_ != _default_det_crop_mode_) {
    delete det_crop_mode_;
  }
  if (det_crop_mode) {
    set_has_det_crop_mode();
    det_crop_mode_ = det_crop_mode;
  } else {
    clear_has_det_crop_mode();
    det_crop_mode_ = const_cast< ::std::string*>(_default_det_crop_mode_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
inline bool V0LayerParameter::has_new_num() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V0LayerParameter::set_has_new_num() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V0LayerParameter::clear_has_new_num() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  clear_has_new_num();
}
inline ::google::protobuf::int32 V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.new_num)
  return new_num_;
}
inline void V0LayerParameter::set_new_num(::google::protobuf::int32 value) {
  set_has_new_num();
  new_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
inline bool V0LayerParameter::has_new_channels() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_new_channels() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_new_channels() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  clear_has_new_channels();
}
inline ::google::protobuf::int32 V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.new_channels)
  return new_channels_;
}
inline void V0LayerParameter::set_new_channels(::google::protobuf::int32 value) {
  set_has_new_channels();
  new_channels_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
inline bool V0LayerParameter::has_new_height() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_new_height() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_new_height() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  clear_has_new_height();
}
inline ::google::protobuf::int32 V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.new_height)
  return new_height_;
}
inline void V0LayerParameter::set_new_height(::google::protobuf::int32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
inline bool V0LayerParameter::has_new_width() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_new_width() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_new_width() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  clear_has_new_width();
}
inline ::google::protobuf::int32 V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.new_width)
  return new_width_;
}
inline void V0LayerParameter::set_new_width(::google::protobuf::int32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
inline bool V0LayerParameter::has_shuffle_images() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void V0LayerParameter::set_has_shuffle_images() {
  _has_bits_[1] |= 0x00000008u;
}
inline void V0LayerParameter::clear_has_shuffle_images() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  clear_has_shuffle_images();
}
inline bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.shuffle_images)
  return shuffle_images_;
}
inline void V0LayerParameter::set_shuffle_images(bool value) {
  set_has_shuffle_images();
  shuffle_images_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
inline bool V0LayerParameter::has_concat_dim() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void V0LayerParameter::set_has_concat_dim() {
  _has_bits_[1] |= 0x00000010u;
}
inline void V0LayerParameter::clear_has_concat_dim() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.concat_dim)
  return concat_dim_;
}
inline void V0LayerParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.V0LayerParameter.concat_dim)
}

// optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 1001;
inline bool V0LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void V0LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void V0LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::apollo::perception::inference::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::apollo::perception::inference::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
inline ::apollo::perception::inference::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) hdf5_output_param_ = new ::apollo::perception::inference::HDF5OutputParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::apollo::perception::inference::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  clear_has_hdf5_output_param();
  ::apollo::perception::inference::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_hdf5_output_param(::apollo::perception::inference::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.V0LayerParameter.hdf5_output_param)
}

// -------------------------------------------------------------------

// PReLUParameter

// optional .apollo.perception.inference.FillerParameter filler = 1;
inline bool PReLUParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PReLUParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PReLUParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PReLUParameter::clear_filler() {
  if (filler_ != NULL) filler_->::apollo::perception::inference::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::apollo::perception::inference::FillerParameter& PReLUParameter::filler() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PReLUParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::apollo::perception::inference::FillerParameter* PReLUParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) filler_ = new ::apollo::perception::inference::FillerParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.PReLUParameter.filler)
  return filler_;
}
inline ::apollo::perception::inference::FillerParameter* PReLUParameter::release_filler() {
  clear_has_filler();
  ::apollo::perception::inference::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void PReLUParameter::set_allocated_filler(::apollo::perception::inference::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.PReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
inline bool PReLUParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PReLUParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PReLUParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PReLUParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool PReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PReLUParameter.channel_shared)
  return channel_shared_;
}
inline void PReLUParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PReLUParameter.channel_shared)
}

// -------------------------------------------------------------------

// PaddingParameter

// optional uint32 pad_t = 1 [default = 0];
inline bool PaddingParameter::has_pad_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaddingParameter::set_has_pad_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PaddingParameter::clear_has_pad_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PaddingParameter::clear_pad_t() {
  pad_t_ = 0u;
  clear_has_pad_t();
}
inline ::google::protobuf::uint32 PaddingParameter::pad_t() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PaddingParameter.pad_t)
  return pad_t_;
}
inline void PaddingParameter::set_pad_t(::google::protobuf::uint32 value) {
  set_has_pad_t();
  pad_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PaddingParameter.pad_t)
}

// optional uint32 pad_b = 2 [default = 0];
inline bool PaddingParameter::has_pad_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaddingParameter::set_has_pad_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PaddingParameter::clear_has_pad_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PaddingParameter::clear_pad_b() {
  pad_b_ = 0u;
  clear_has_pad_b();
}
inline ::google::protobuf::uint32 PaddingParameter::pad_b() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PaddingParameter.pad_b)
  return pad_b_;
}
inline void PaddingParameter::set_pad_b(::google::protobuf::uint32 value) {
  set_has_pad_b();
  pad_b_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PaddingParameter.pad_b)
}

// optional uint32 pad_l = 3 [default = 0];
inline bool PaddingParameter::has_pad_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PaddingParameter::set_has_pad_l() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PaddingParameter::clear_has_pad_l() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PaddingParameter::clear_pad_l() {
  pad_l_ = 0u;
  clear_has_pad_l();
}
inline ::google::protobuf::uint32 PaddingParameter::pad_l() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PaddingParameter.pad_l)
  return pad_l_;
}
inline void PaddingParameter::set_pad_l(::google::protobuf::uint32 value) {
  set_has_pad_l();
  pad_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PaddingParameter.pad_l)
}

// optional uint32 pad_r = 4 [default = 0];
inline bool PaddingParameter::has_pad_r() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PaddingParameter::set_has_pad_r() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PaddingParameter::clear_has_pad_r() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PaddingParameter::clear_pad_r() {
  pad_r_ = 0u;
  clear_has_pad_r();
}
inline ::google::protobuf::uint32 PaddingParameter::pad_r() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PaddingParameter.pad_r)
  return pad_r_;
}
inline void PaddingParameter::set_pad_r(::google::protobuf::uint32 value) {
  set_has_pad_r();
  pad_r_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PaddingParameter.pad_r)
}

// optional float val = 5 [default = 0];
inline bool PaddingParameter::has_val() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PaddingParameter::set_has_val() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PaddingParameter::clear_has_val() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PaddingParameter::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline float PaddingParameter::val() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.PaddingParameter.val)
  return val_;
}
inline void PaddingParameter::set_val(float value) {
  set_has_val();
  val_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.PaddingParameter.val)
}

// -------------------------------------------------------------------

// YoloLossParameter

// optional .apollo.perception.inference.YoloLossParameter.RegLossType reg_loss_type = 1 [default = SMOOTH_L1];
inline bool YoloLossParameter::has_reg_loss_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YoloLossParameter::set_has_reg_loss_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YoloLossParameter::clear_has_reg_loss_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YoloLossParameter::clear_reg_loss_type() {
  reg_loss_type_ = 2;
  clear_has_reg_loss_type();
}
inline ::apollo::perception::inference::YoloLossParameter_RegLossType YoloLossParameter::reg_loss_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloLossParameter.reg_loss_type)
  return static_cast< ::apollo::perception::inference::YoloLossParameter_RegLossType >(reg_loss_type_);
}
inline void YoloLossParameter::set_reg_loss_type(::apollo::perception::inference::YoloLossParameter_RegLossType value) {
  assert(::apollo::perception::inference::YoloLossParameter_RegLossType_IsValid(value));
  set_has_reg_loss_type();
  reg_loss_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloLossParameter.reg_loss_type)
}

// optional int32 target_axis = 2 [default = -1];
inline bool YoloLossParameter::has_target_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YoloLossParameter::set_has_target_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YoloLossParameter::clear_has_target_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YoloLossParameter::clear_target_axis() {
  target_axis_ = -1;
  clear_has_target_axis();
}
inline ::google::protobuf::int32 YoloLossParameter::target_axis() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloLossParameter.target_axis)
  return target_axis_;
}
inline void YoloLossParameter::set_target_axis(::google::protobuf::int32 value) {
  set_has_target_axis();
  target_axis_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloLossParameter.target_axis)
}

// -------------------------------------------------------------------

// YoloDumpParameter

// optional string dump_dir = 1;
inline bool YoloDumpParameter::has_dump_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YoloDumpParameter::set_has_dump_dir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YoloDumpParameter::clear_has_dump_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YoloDumpParameter::clear_dump_dir() {
  if (dump_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dump_dir_->clear();
  }
  clear_has_dump_dir();
}
inline const ::std::string& YoloDumpParameter::dump_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloDumpParameter.dump_dir)
  return *dump_dir_;
}
inline void YoloDumpParameter::set_dump_dir(const ::std::string& value) {
  set_has_dump_dir();
  if (dump_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dump_dir_ = new ::std::string;
  }
  dump_dir_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloDumpParameter.dump_dir)
}
inline void YoloDumpParameter::set_dump_dir(const char* value) {
  set_has_dump_dir();
  if (dump_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dump_dir_ = new ::std::string;
  }
  dump_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.YoloDumpParameter.dump_dir)
}
inline void YoloDumpParameter::set_dump_dir(const char* value, size_t size) {
  set_has_dump_dir();
  if (dump_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dump_dir_ = new ::std::string;
  }
  dump_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.YoloDumpParameter.dump_dir)
}
inline ::std::string* YoloDumpParameter::mutable_dump_dir() {
  set_has_dump_dir();
  if (dump_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dump_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.YoloDumpParameter.dump_dir)
  return dump_dir_;
}
inline ::std::string* YoloDumpParameter::release_dump_dir() {
  clear_has_dump_dir();
  if (dump_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dump_dir_;
    dump_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void YoloDumpParameter::set_allocated_dump_dir(::std::string* dump_dir) {
  if (dump_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dump_dir_;
  }
  if (dump_dir) {
    set_has_dump_dir();
    dump_dir_ = dump_dir;
  } else {
    clear_has_dump_dir();
    dump_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.YoloDumpParameter.dump_dir)
}

// -------------------------------------------------------------------

// YoloAnchorsParameter

// optional string anchors_file = 1;
inline bool YoloAnchorsParameter::has_anchors_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YoloAnchorsParameter::set_has_anchors_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YoloAnchorsParameter::clear_has_anchors_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YoloAnchorsParameter::clear_anchors_file() {
  if (anchors_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anchors_file_->clear();
  }
  clear_has_anchors_file();
}
inline const ::std::string& YoloAnchorsParameter::anchors_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloAnchorsParameter.anchors_file)
  return *anchors_file_;
}
inline void YoloAnchorsParameter::set_anchors_file(const ::std::string& value) {
  set_has_anchors_file();
  if (anchors_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anchors_file_ = new ::std::string;
  }
  anchors_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloAnchorsParameter.anchors_file)
}
inline void YoloAnchorsParameter::set_anchors_file(const char* value) {
  set_has_anchors_file();
  if (anchors_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anchors_file_ = new ::std::string;
  }
  anchors_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.YoloAnchorsParameter.anchors_file)
}
inline void YoloAnchorsParameter::set_anchors_file(const char* value, size_t size) {
  set_has_anchors_file();
  if (anchors_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anchors_file_ = new ::std::string;
  }
  anchors_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.YoloAnchorsParameter.anchors_file)
}
inline ::std::string* YoloAnchorsParameter::mutable_anchors_file() {
  set_has_anchors_file();
  if (anchors_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anchors_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.YoloAnchorsParameter.anchors_file)
  return anchors_file_;
}
inline ::std::string* YoloAnchorsParameter::release_anchors_file() {
  clear_has_anchors_file();
  if (anchors_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = anchors_file_;
    anchors_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void YoloAnchorsParameter::set_allocated_anchors_file(::std::string* anchors_file) {
  if (anchors_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete anchors_file_;
  }
  if (anchors_file) {
    set_has_anchors_file();
    anchors_file_ = anchors_file;
  } else {
    clear_has_anchors_file();
    anchors_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.YoloAnchorsParameter.anchors_file)
}

// optional int32 ref_w = 2 [default = 1];
inline bool YoloAnchorsParameter::has_ref_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YoloAnchorsParameter::set_has_ref_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YoloAnchorsParameter::clear_has_ref_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YoloAnchorsParameter::clear_ref_w() {
  ref_w_ = 1;
  clear_has_ref_w();
}
inline ::google::protobuf::int32 YoloAnchorsParameter::ref_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloAnchorsParameter.ref_w)
  return ref_w_;
}
inline void YoloAnchorsParameter::set_ref_w(::google::protobuf::int32 value) {
  set_has_ref_w();
  ref_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloAnchorsParameter.ref_w)
}

// optional int32 ref_h = 3 [default = 1];
inline bool YoloAnchorsParameter::has_ref_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YoloAnchorsParameter::set_has_ref_h() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YoloAnchorsParameter::clear_has_ref_h() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YoloAnchorsParameter::clear_ref_h() {
  ref_h_ = 1;
  clear_has_ref_h();
}
inline ::google::protobuf::int32 YoloAnchorsParameter::ref_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloAnchorsParameter.ref_h)
  return ref_h_;
}
inline void YoloAnchorsParameter::set_ref_h(::google::protobuf::int32 value) {
  set_has_ref_h();
  ref_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloAnchorsParameter.ref_h)
}

// -------------------------------------------------------------------

// DimensionStatistics

// optional float mean_h = 1 [default = 0];
inline bool DimensionStatistics::has_mean_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DimensionStatistics::set_has_mean_h() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DimensionStatistics::clear_has_mean_h() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DimensionStatistics::clear_mean_h() {
  mean_h_ = 0;
  clear_has_mean_h();
}
inline float DimensionStatistics::mean_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DimensionStatistics.mean_h)
  return mean_h_;
}
inline void DimensionStatistics::set_mean_h(float value) {
  set_has_mean_h();
  mean_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DimensionStatistics.mean_h)
}

// optional float mean_w = 2 [default = 0];
inline bool DimensionStatistics::has_mean_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DimensionStatistics::set_has_mean_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DimensionStatistics::clear_has_mean_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DimensionStatistics::clear_mean_w() {
  mean_w_ = 0;
  clear_has_mean_w();
}
inline float DimensionStatistics::mean_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DimensionStatistics.mean_w)
  return mean_w_;
}
inline void DimensionStatistics::set_mean_w(float value) {
  set_has_mean_w();
  mean_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DimensionStatistics.mean_w)
}

// optional float mean_l = 3 [default = 0];
inline bool DimensionStatistics::has_mean_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DimensionStatistics::set_has_mean_l() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DimensionStatistics::clear_has_mean_l() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DimensionStatistics::clear_mean_l() {
  mean_l_ = 0;
  clear_has_mean_l();
}
inline float DimensionStatistics::mean_l() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DimensionStatistics.mean_l)
  return mean_l_;
}
inline void DimensionStatistics::set_mean_l(float value) {
  set_has_mean_l();
  mean_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DimensionStatistics.mean_l)
}

// optional float std_h = 4 [default = 1];
inline bool DimensionStatistics::has_std_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DimensionStatistics::set_has_std_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DimensionStatistics::clear_has_std_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DimensionStatistics::clear_std_h() {
  std_h_ = 1;
  clear_has_std_h();
}
inline float DimensionStatistics::std_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DimensionStatistics.std_h)
  return std_h_;
}
inline void DimensionStatistics::set_std_h(float value) {
  set_has_std_h();
  std_h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DimensionStatistics.std_h)
}

// optional float std_w = 5 [default = 1];
inline bool DimensionStatistics::has_std_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DimensionStatistics::set_has_std_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DimensionStatistics::clear_has_std_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DimensionStatistics::clear_std_w() {
  std_w_ = 1;
  clear_has_std_w();
}
inline float DimensionStatistics::std_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DimensionStatistics.std_w)
  return std_w_;
}
inline void DimensionStatistics::set_std_w(float value) {
  set_has_std_w();
  std_w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DimensionStatistics.std_w)
}

// optional float std_l = 6 [default = 1];
inline bool DimensionStatistics::has_std_l() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DimensionStatistics::set_has_std_l() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DimensionStatistics::clear_has_std_l() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DimensionStatistics::clear_std_l() {
  std_l_ = 1;
  clear_has_std_l();
}
inline float DimensionStatistics::std_l() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.DimensionStatistics.std_l)
  return std_l_;
}
inline void DimensionStatistics::set_std_l(float value) {
  set_has_std_l();
  std_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.DimensionStatistics.std_l)
}

// -------------------------------------------------------------------

// YoloTargetParameter

// optional float neg_rois_ratio = 1 [default = 1];
inline bool YoloTargetParameter::has_neg_rois_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YoloTargetParameter::set_has_neg_rois_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YoloTargetParameter::clear_has_neg_rois_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YoloTargetParameter::clear_neg_rois_ratio() {
  neg_rois_ratio_ = 1;
  clear_has_neg_rois_ratio();
}
inline float YoloTargetParameter::neg_rois_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.neg_rois_ratio)
  return neg_rois_ratio_;
}
inline void YoloTargetParameter::set_neg_rois_ratio(float value) {
  set_has_neg_rois_ratio();
  neg_rois_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.neg_rois_ratio)
}

// optional float ign_threshold = 2 [default = 0.6];
inline bool YoloTargetParameter::has_ign_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YoloTargetParameter::set_has_ign_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YoloTargetParameter::clear_has_ign_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YoloTargetParameter::clear_ign_threshold() {
  ign_threshold_ = 0.6f;
  clear_has_ign_threshold();
}
inline float YoloTargetParameter::ign_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.ign_threshold)
  return ign_threshold_;
}
inline void YoloTargetParameter::set_ign_threshold(float value) {
  set_has_ign_threshold();
  ign_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.ign_threshold)
}

// optional float neg_threshold = 3 [default = 0.1];
inline bool YoloTargetParameter::has_neg_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YoloTargetParameter::set_has_neg_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YoloTargetParameter::clear_has_neg_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YoloTargetParameter::clear_neg_threshold() {
  neg_threshold_ = 0.1f;
  clear_has_neg_threshold();
}
inline float YoloTargetParameter::neg_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.neg_threshold)
  return neg_threshold_;
}
inline void YoloTargetParameter::set_neg_threshold(float value) {
  set_has_neg_threshold();
  neg_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.neg_threshold)
}

// optional float min_height = 4 [default = 0.05];
inline bool YoloTargetParameter::has_min_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YoloTargetParameter::set_has_min_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YoloTargetParameter::clear_has_min_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YoloTargetParameter::clear_min_height() {
  min_height_ = 0.05f;
  clear_has_min_height();
}
inline float YoloTargetParameter::min_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.min_height)
  return min_height_;
}
inline void YoloTargetParameter::set_min_height(float value) {
  set_has_min_height();
  min_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.min_height)
}

// optional bool bias_match = 5 [default = true];
inline bool YoloTargetParameter::has_bias_match() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YoloTargetParameter::set_has_bias_match() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YoloTargetParameter::clear_has_bias_match() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YoloTargetParameter::clear_bias_match() {
  bias_match_ = true;
  clear_has_bias_match();
}
inline bool YoloTargetParameter::bias_match() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.bias_match)
  return bias_match_;
}
inline void YoloTargetParameter::set_bias_match(bool value) {
  set_has_bias_match();
  bias_match_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.bias_match)
}

// optional bool rescore = 6 [default = true];
inline bool YoloTargetParameter::has_rescore() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YoloTargetParameter::set_has_rescore() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YoloTargetParameter::clear_has_rescore() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YoloTargetParameter::clear_rescore() {
  rescore_ = true;
  clear_has_rescore();
}
inline bool YoloTargetParameter::rescore() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.rescore)
  return rescore_;
}
inline void YoloTargetParameter::set_rescore(bool value) {
  set_has_rescore();
  rescore_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.rescore)
}

// optional int32 ori_cyc = 7 [default = 1];
inline bool YoloTargetParameter::has_ori_cyc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YoloTargetParameter::set_has_ori_cyc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YoloTargetParameter::clear_has_ori_cyc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YoloTargetParameter::clear_ori_cyc() {
  ori_cyc_ = 1;
  clear_has_ori_cyc();
}
inline ::google::protobuf::int32 YoloTargetParameter::ori_cyc() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.ori_cyc)
  return ori_cyc_;
}
inline void YoloTargetParameter::set_ori_cyc(::google::protobuf::int32 value) {
  set_has_ori_cyc();
  ori_cyc_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.ori_cyc)
}

// optional float obj_weight = 8 [default = 10];
inline bool YoloTargetParameter::has_obj_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YoloTargetParameter::set_has_obj_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YoloTargetParameter::clear_has_obj_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YoloTargetParameter::clear_obj_weight() {
  obj_weight_ = 10;
  clear_has_obj_weight();
}
inline float YoloTargetParameter::obj_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.obj_weight)
  return obj_weight_;
}
inline void YoloTargetParameter::set_obj_weight(float value) {
  set_has_obj_weight();
  obj_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.obj_weight)
}

// optional float noobj_weight = 9 [default = 1];
inline bool YoloTargetParameter::has_noobj_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void YoloTargetParameter::set_has_noobj_weight() {
  _has_bits_[0] |= 0x00000100u;
}
inline void YoloTargetParameter::clear_has_noobj_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void YoloTargetParameter::clear_noobj_weight() {
  noobj_weight_ = 1;
  clear_has_noobj_weight();
}
inline float YoloTargetParameter::noobj_weight() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.noobj_weight)
  return noobj_weight_;
}
inline void YoloTargetParameter::set_noobj_weight(float value) {
  set_has_noobj_weight();
  noobj_weight_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.noobj_weight)
}

// optional int32 num_classes = 10 [default = 0];
inline bool YoloTargetParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void YoloTargetParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void YoloTargetParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void YoloTargetParameter::clear_num_classes() {
  num_classes_ = 0;
  clear_has_num_classes();
}
inline ::google::protobuf::int32 YoloTargetParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.num_classes)
  return num_classes_;
}
inline void YoloTargetParameter::set_num_classes(::google::protobuf::int32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.YoloTargetParameter.num_classes)
}

// repeated .apollo.perception.inference.DimensionStatistics dimension_statistics = 11;
inline int YoloTargetParameter::dimension_statistics_size() const {
  return dimension_statistics_.size();
}
inline void YoloTargetParameter::clear_dimension_statistics() {
  dimension_statistics_.Clear();
}
inline const ::apollo::perception::inference::DimensionStatistics& YoloTargetParameter::dimension_statistics(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.YoloTargetParameter.dimension_statistics)
  return dimension_statistics_.Get(index);
}
inline ::apollo::perception::inference::DimensionStatistics* YoloTargetParameter::mutable_dimension_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.YoloTargetParameter.dimension_statistics)
  return dimension_statistics_.Mutable(index);
}
inline ::apollo::perception::inference::DimensionStatistics* YoloTargetParameter::add_dimension_statistics() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.YoloTargetParameter.dimension_statistics)
  return dimension_statistics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::DimensionStatistics >&
YoloTargetParameter::dimension_statistics() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.YoloTargetParameter.dimension_statistics)
  return dimension_statistics_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::DimensionStatistics >*
YoloTargetParameter::mutable_dimension_statistics() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.YoloTargetParameter.dimension_statistics)
  return &dimension_statistics_;
}

// -------------------------------------------------------------------

// RegionProposalParameter

// repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
inline int RegionProposalParameter::anchorbox_size() const {
  return anchorbox_.size();
}
inline void RegionProposalParameter::clear_anchorbox() {
  anchorbox_.Clear();
}
inline const ::apollo::perception::inference::AnchorBox& RegionProposalParameter::anchorbox(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.anchorbox)
  return anchorbox_.Get(index);
}
inline ::apollo::perception::inference::AnchorBox* RegionProposalParameter::mutable_anchorbox(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RegionProposalParameter.anchorbox)
  return anchorbox_.Mutable(index);
}
inline ::apollo::perception::inference::AnchorBox* RegionProposalParameter::add_anchorbox() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.RegionProposalParameter.anchorbox)
  return anchorbox_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >&
RegionProposalParameter::anchorbox() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.RegionProposalParameter.anchorbox)
  return anchorbox_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >*
RegionProposalParameter::mutable_anchorbox() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.RegionProposalParameter.anchorbox)
  return &anchorbox_;
}

// repeated float thresholds = 2;
inline int RegionProposalParameter::thresholds_size() const {
  return thresholds_.size();
}
inline void RegionProposalParameter::clear_thresholds() {
  thresholds_.Clear();
}
inline float RegionProposalParameter::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.thresholds)
  return thresholds_.Get(index);
}
inline void RegionProposalParameter::set_thresholds(int index, float value) {
  thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.thresholds)
}
inline void RegionProposalParameter::add_thresholds(float value) {
  thresholds_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.RegionProposalParameter.thresholds)
}
inline const ::google::protobuf::RepeatedField< float >&
RegionProposalParameter::thresholds() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.RegionProposalParameter.thresholds)
  return thresholds_;
}
inline ::google::protobuf::RepeatedField< float >*
RegionProposalParameter::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.RegionProposalParameter.thresholds)
  return &thresholds_;
}

// optional float orientation_scale = 14 [default = 0];
inline bool RegionProposalParameter::has_orientation_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegionProposalParameter::set_has_orientation_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegionProposalParameter::clear_has_orientation_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegionProposalParameter::clear_orientation_scale() {
  orientation_scale_ = 0;
  clear_has_orientation_scale();
}
inline float RegionProposalParameter::orientation_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.orientation_scale)
  return orientation_scale_;
}
inline void RegionProposalParameter::set_orientation_scale(float value) {
  set_has_orientation_scale();
  orientation_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.orientation_scale)
}

// optional uint32 object_scale = 3;
inline bool RegionProposalParameter::has_object_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegionProposalParameter::set_has_object_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegionProposalParameter::clear_has_object_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegionProposalParameter::clear_object_scale() {
  object_scale_ = 0u;
  clear_has_object_scale();
}
inline ::google::protobuf::uint32 RegionProposalParameter::object_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.object_scale)
  return object_scale_;
}
inline void RegionProposalParameter::set_object_scale(::google::protobuf::uint32 value) {
  set_has_object_scale();
  object_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.object_scale)
}

// optional uint32 noobject_scale = 4;
inline bool RegionProposalParameter::has_noobject_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegionProposalParameter::set_has_noobject_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegionProposalParameter::clear_has_noobject_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegionProposalParameter::clear_noobject_scale() {
  noobject_scale_ = 0u;
  clear_has_noobject_scale();
}
inline ::google::protobuf::uint32 RegionProposalParameter::noobject_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.noobject_scale)
  return noobject_scale_;
}
inline void RegionProposalParameter::set_noobject_scale(::google::protobuf::uint32 value) {
  set_has_noobject_scale();
  noobject_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.noobject_scale)
}

// optional uint32 class_scale = 5;
inline bool RegionProposalParameter::has_class_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegionProposalParameter::set_has_class_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegionProposalParameter::clear_has_class_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegionProposalParameter::clear_class_scale() {
  class_scale_ = 0u;
  clear_has_class_scale();
}
inline ::google::protobuf::uint32 RegionProposalParameter::class_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.class_scale)
  return class_scale_;
}
inline void RegionProposalParameter::set_class_scale(::google::protobuf::uint32 value) {
  set_has_class_scale();
  class_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.class_scale)
}

// optional uint32 coord_scale = 6;
inline bool RegionProposalParameter::has_coord_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegionProposalParameter::set_has_coord_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegionProposalParameter::clear_has_coord_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegionProposalParameter::clear_coord_scale() {
  coord_scale_ = 0u;
  clear_has_coord_scale();
}
inline ::google::protobuf::uint32 RegionProposalParameter::coord_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.coord_scale)
  return coord_scale_;
}
inline void RegionProposalParameter::set_coord_scale(::google::protobuf::uint32 value) {
  set_has_coord_scale();
  coord_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.coord_scale)
}

// optional float jitter = 7;
inline bool RegionProposalParameter::has_jitter() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegionProposalParameter::set_has_jitter() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegionProposalParameter::clear_has_jitter() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegionProposalParameter::clear_jitter() {
  jitter_ = 0;
  clear_has_jitter();
}
inline float RegionProposalParameter::jitter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.jitter)
  return jitter_;
}
inline void RegionProposalParameter::set_jitter(float value) {
  set_has_jitter();
  jitter_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.jitter)
}

// optional float bias = 8;
inline bool RegionProposalParameter::has_bias() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RegionProposalParameter::set_has_bias() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RegionProposalParameter::clear_has_bias() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RegionProposalParameter::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline float RegionProposalParameter::bias() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.bias)
  return bias_;
}
inline void RegionProposalParameter::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.bias)
}

// optional bool rescore = 9;
inline bool RegionProposalParameter::has_rescore() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RegionProposalParameter::set_has_rescore() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RegionProposalParameter::clear_has_rescore() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RegionProposalParameter::clear_rescore() {
  rescore_ = false;
  clear_has_rescore();
}
inline bool RegionProposalParameter::rescore() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.rescore)
  return rescore_;
}
inline void RegionProposalParameter::set_rescore(bool value) {
  set_has_rescore();
  rescore_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.rescore)
}

// optional uint32 num_classes = 10;
inline bool RegionProposalParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RegionProposalParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RegionProposalParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RegionProposalParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 RegionProposalParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.num_classes)
  return num_classes_;
}
inline void RegionProposalParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.num_classes)
}

// optional bool bias_match = 11;
inline bool RegionProposalParameter::has_bias_match() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RegionProposalParameter::set_has_bias_match() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RegionProposalParameter::clear_has_bias_match() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RegionProposalParameter::clear_bias_match() {
  bias_match_ = false;
  clear_has_bias_match();
}
inline bool RegionProposalParameter::bias_match() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.bias_match)
  return bias_match_;
}
inline void RegionProposalParameter::set_bias_match(bool value) {
  set_has_bias_match();
  bias_match_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.bias_match)
}

// optional float threshold = 12;
inline bool RegionProposalParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RegionProposalParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RegionProposalParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RegionProposalParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float RegionProposalParameter::threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.threshold)
  return threshold_;
}
inline void RegionProposalParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.threshold)
}

// optional uint32 tricky_iter = 13 [default = 400];
inline bool RegionProposalParameter::has_tricky_iter() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RegionProposalParameter::set_has_tricky_iter() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RegionProposalParameter::clear_has_tricky_iter() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RegionProposalParameter::clear_tricky_iter() {
  tricky_iter_ = 400u;
  clear_has_tricky_iter();
}
inline ::google::protobuf::uint32 RegionProposalParameter::tricky_iter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.tricky_iter)
  return tricky_iter_;
}
inline void RegionProposalParameter::set_tricky_iter(::google::protobuf::uint32 value) {
  set_has_tricky_iter();
  tricky_iter_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.tricky_iter)
}

// optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 15;
inline bool RegionProposalParameter::has_nms_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RegionProposalParameter::set_has_nms_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RegionProposalParameter::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RegionProposalParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::apollo::perception::inference::NonMaximumSuppressionParameter::Clear();
  clear_has_nms_param();
}
inline const ::apollo::perception::inference::NonMaximumSuppressionParameter& RegionProposalParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_ : *default_instance_->nms_param_;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* RegionProposalParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) nms_param_ = new ::apollo::perception::inference::NonMaximumSuppressionParameter;
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RegionProposalParameter.nms_param)
  return nms_param_;
}
inline ::apollo::perception::inference::NonMaximumSuppressionParameter* RegionProposalParameter::release_nms_param() {
  clear_has_nms_param();
  ::apollo::perception::inference::NonMaximumSuppressionParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
inline void RegionProposalParameter::set_allocated_nms_param(::apollo::perception::inference::NonMaximumSuppressionParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.RegionProposalParameter.nms_param)
}

// optional int32 keep_top_k = 16 [default = -1];
inline bool RegionProposalParameter::has_keep_top_k() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RegionProposalParameter::set_has_keep_top_k() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RegionProposalParameter::clear_has_keep_top_k() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RegionProposalParameter::clear_keep_top_k() {
  keep_top_k_ = -1;
  clear_has_keep_top_k();
}
inline ::google::protobuf::int32 RegionProposalParameter::keep_top_k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.keep_top_k)
  return keep_top_k_;
}
inline void RegionProposalParameter::set_keep_top_k(::google::protobuf::int32 value) {
  set_has_keep_top_k();
  keep_top_k_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.keep_top_k)
}

// optional float pos_threshold = 17;
inline bool RegionProposalParameter::has_pos_threshold() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RegionProposalParameter::set_has_pos_threshold() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RegionProposalParameter::clear_has_pos_threshold() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RegionProposalParameter::clear_pos_threshold() {
  pos_threshold_ = 0;
  clear_has_pos_threshold();
}
inline float RegionProposalParameter::pos_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.pos_threshold)
  return pos_threshold_;
}
inline void RegionProposalParameter::set_pos_threshold(float value) {
  set_has_pos_threshold();
  pos_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.pos_threshold)
}

// optional float neg_threshold = 18;
inline bool RegionProposalParameter::has_neg_threshold() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RegionProposalParameter::set_has_neg_threshold() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RegionProposalParameter::clear_has_neg_threshold() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RegionProposalParameter::clear_neg_threshold() {
  neg_threshold_ = 0;
  clear_has_neg_threshold();
}
inline float RegionProposalParameter::neg_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.neg_threshold)
  return neg_threshold_;
}
inline void RegionProposalParameter::set_neg_threshold(float value) {
  set_has_neg_threshold();
  neg_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.neg_threshold)
}

// optional int32 neg_ratio = 19 [default = 3];
inline bool RegionProposalParameter::has_neg_ratio() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RegionProposalParameter::set_has_neg_ratio() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RegionProposalParameter::clear_has_neg_ratio() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RegionProposalParameter::clear_neg_ratio() {
  neg_ratio_ = 3;
  clear_has_neg_ratio();
}
inline ::google::protobuf::int32 RegionProposalParameter::neg_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionProposalParameter.neg_ratio)
  return neg_ratio_;
}
inline void RegionProposalParameter::set_neg_ratio(::google::protobuf::int32 value) {
  set_has_neg_ratio();
  neg_ratio_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionProposalParameter.neg_ratio)
}

// -------------------------------------------------------------------

// RegionParameter

// repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
inline int RegionParameter::anchorbox_size() const {
  return anchorbox_.size();
}
inline void RegionParameter::clear_anchorbox() {
  anchorbox_.Clear();
}
inline const ::apollo::perception::inference::AnchorBox& RegionParameter::anchorbox(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.anchorbox)
  return anchorbox_.Get(index);
}
inline ::apollo::perception::inference::AnchorBox* RegionParameter::mutable_anchorbox(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RegionParameter.anchorbox)
  return anchorbox_.Mutable(index);
}
inline ::apollo::perception::inference::AnchorBox* RegionParameter::add_anchorbox() {
  // @@protoc_insertion_point(field_add:apollo.perception.inference.RegionParameter.anchorbox)
  return anchorbox_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >&
RegionParameter::anchorbox() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.RegionParameter.anchorbox)
  return anchorbox_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::inference::AnchorBox >*
RegionParameter::mutable_anchorbox() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.RegionParameter.anchorbox)
  return &anchorbox_;
}

// repeated float thresholds = 2;
inline int RegionParameter::thresholds_size() const {
  return thresholds_.size();
}
inline void RegionParameter::clear_thresholds() {
  thresholds_.Clear();
}
inline float RegionParameter::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.thresholds)
  return thresholds_.Get(index);
}
inline void RegionParameter::set_thresholds(int index, float value) {
  thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.thresholds)
}
inline void RegionParameter::add_thresholds(float value) {
  thresholds_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.RegionParameter.thresholds)
}
inline const ::google::protobuf::RepeatedField< float >&
RegionParameter::thresholds() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.RegionParameter.thresholds)
  return thresholds_;
}
inline ::google::protobuf::RepeatedField< float >*
RegionParameter::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.RegionParameter.thresholds)
  return &thresholds_;
}

// optional float orientation_scale = 14 [default = 0];
inline bool RegionParameter::has_orientation_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegionParameter::set_has_orientation_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegionParameter::clear_has_orientation_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegionParameter::clear_orientation_scale() {
  orientation_scale_ = 0;
  clear_has_orientation_scale();
}
inline float RegionParameter::orientation_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.orientation_scale)
  return orientation_scale_;
}
inline void RegionParameter::set_orientation_scale(float value) {
  set_has_orientation_scale();
  orientation_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.orientation_scale)
}

// optional float dimension_scale = 15 [default = 0];
inline bool RegionParameter::has_dimension_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegionParameter::set_has_dimension_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegionParameter::clear_has_dimension_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegionParameter::clear_dimension_scale() {
  dimension_scale_ = 0;
  clear_has_dimension_scale();
}
inline float RegionParameter::dimension_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.dimension_scale)
  return dimension_scale_;
}
inline void RegionParameter::set_dimension_scale(float value) {
  set_has_dimension_scale();
  dimension_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.dimension_scale)
}

// optional float front_scale = 19 [default = 0];
inline bool RegionParameter::has_front_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegionParameter::set_has_front_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegionParameter::clear_has_front_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegionParameter::clear_front_scale() {
  front_scale_ = 0;
  clear_has_front_scale();
}
inline float RegionParameter::front_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.front_scale)
  return front_scale_;
}
inline void RegionParameter::set_front_scale(float value) {
  set_has_front_scale();
  front_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.front_scale)
}

// optional float rear_scale = 20 [default = 0];
inline bool RegionParameter::has_rear_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegionParameter::set_has_rear_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegionParameter::clear_has_rear_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegionParameter::clear_rear_scale() {
  rear_scale_ = 0;
  clear_has_rear_scale();
}
inline float RegionParameter::rear_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.rear_scale)
  return rear_scale_;
}
inline void RegionParameter::set_rear_scale(float value) {
  set_has_rear_scale();
  rear_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.rear_scale)
}

// optional uint32 object_scale = 3;
inline bool RegionParameter::has_object_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegionParameter::set_has_object_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegionParameter::clear_has_object_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegionParameter::clear_object_scale() {
  object_scale_ = 0u;
  clear_has_object_scale();
}
inline ::google::protobuf::uint32 RegionParameter::object_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.object_scale)
  return object_scale_;
}
inline void RegionParameter::set_object_scale(::google::protobuf::uint32 value) {
  set_has_object_scale();
  object_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.object_scale)
}

// optional uint32 noobject_scale = 4;
inline bool RegionParameter::has_noobject_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegionParameter::set_has_noobject_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegionParameter::clear_has_noobject_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegionParameter::clear_noobject_scale() {
  noobject_scale_ = 0u;
  clear_has_noobject_scale();
}
inline ::google::protobuf::uint32 RegionParameter::noobject_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.noobject_scale)
  return noobject_scale_;
}
inline void RegionParameter::set_noobject_scale(::google::protobuf::uint32 value) {
  set_has_noobject_scale();
  noobject_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.noobject_scale)
}

// optional float class_scale = 5;
inline bool RegionParameter::has_class_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RegionParameter::set_has_class_scale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RegionParameter::clear_has_class_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RegionParameter::clear_class_scale() {
  class_scale_ = 0;
  clear_has_class_scale();
}
inline float RegionParameter::class_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.class_scale)
  return class_scale_;
}
inline void RegionParameter::set_class_scale(float value) {
  set_has_class_scale();
  class_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.class_scale)
}

// optional uint32 coord_scale = 6;
inline bool RegionParameter::has_coord_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RegionParameter::set_has_coord_scale() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RegionParameter::clear_has_coord_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RegionParameter::clear_coord_scale() {
  coord_scale_ = 0u;
  clear_has_coord_scale();
}
inline ::google::protobuf::uint32 RegionParameter::coord_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.coord_scale)
  return coord_scale_;
}
inline void RegionParameter::set_coord_scale(::google::protobuf::uint32 value) {
  set_has_coord_scale();
  coord_scale_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.coord_scale)
}

// optional float jitter = 7;
inline bool RegionParameter::has_jitter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RegionParameter::set_has_jitter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RegionParameter::clear_has_jitter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RegionParameter::clear_jitter() {
  jitter_ = 0;
  clear_has_jitter();
}
inline float RegionParameter::jitter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.jitter)
  return jitter_;
}
inline void RegionParameter::set_jitter(float value) {
  set_has_jitter();
  jitter_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.jitter)
}

// optional float bias = 8;
inline bool RegionParameter::has_bias() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RegionParameter::set_has_bias() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RegionParameter::clear_has_bias() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RegionParameter::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline float RegionParameter::bias() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.bias)
  return bias_;
}
inline void RegionParameter::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.bias)
}

// optional bool rescore = 9;
inline bool RegionParameter::has_rescore() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RegionParameter::set_has_rescore() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RegionParameter::clear_has_rescore() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RegionParameter::clear_rescore() {
  rescore_ = false;
  clear_has_rescore();
}
inline bool RegionParameter::rescore() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.rescore)
  return rescore_;
}
inline void RegionParameter::set_rescore(bool value) {
  set_has_rescore();
  rescore_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.rescore)
}

// optional uint32 num_classes = 10;
inline bool RegionParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RegionParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RegionParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RegionParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 RegionParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.num_classes)
  return num_classes_;
}
inline void RegionParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.num_classes)
}

// optional bool bias_match = 11;
inline bool RegionParameter::has_bias_match() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RegionParameter::set_has_bias_match() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RegionParameter::clear_has_bias_match() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RegionParameter::clear_bias_match() {
  bias_match_ = false;
  clear_has_bias_match();
}
inline bool RegionParameter::bias_match() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.bias_match)
  return bias_match_;
}
inline void RegionParameter::set_bias_match(bool value) {
  set_has_bias_match();
  bias_match_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.bias_match)
}

// optional float threshold = 12;
inline bool RegionParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RegionParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RegionParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RegionParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float RegionParameter::threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.threshold)
  return threshold_;
}
inline void RegionParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.threshold)
}

// optional uint32 tricky_iter = 13 [default = 400];
inline bool RegionParameter::has_tricky_iter() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RegionParameter::set_has_tricky_iter() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RegionParameter::clear_has_tricky_iter() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RegionParameter::clear_tricky_iter() {
  tricky_iter_ = 400u;
  clear_has_tricky_iter();
}
inline ::google::protobuf::uint32 RegionParameter::tricky_iter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.tricky_iter)
  return tricky_iter_;
}
inline void RegionParameter::set_tricky_iter(::google::protobuf::uint32 value) {
  set_has_tricky_iter();
  tricky_iter_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.tricky_iter)
}

// optional bool use_l1_loss = 16 [default = false];
inline bool RegionParameter::has_use_l1_loss() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RegionParameter::set_has_use_l1_loss() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RegionParameter::clear_has_use_l1_loss() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RegionParameter::clear_use_l1_loss() {
  use_l1_loss_ = false;
  clear_has_use_l1_loss();
}
inline bool RegionParameter::use_l1_loss() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.use_l1_loss)
  return use_l1_loss_;
}
inline void RegionParameter::set_use_l1_loss(bool value) {
  set_has_use_l1_loss();
  use_l1_loss_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.use_l1_loss)
}

// optional bool use_twice_softmax = 17 [default = false];
inline bool RegionParameter::has_use_twice_softmax() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RegionParameter::set_has_use_twice_softmax() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RegionParameter::clear_has_use_twice_softmax() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RegionParameter::clear_use_twice_softmax() {
  use_twice_softmax_ = false;
  clear_has_use_twice_softmax();
}
inline bool RegionParameter::use_twice_softmax() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.use_twice_softmax)
  return use_twice_softmax_;
}
inline void RegionParameter::set_use_twice_softmax(bool value) {
  set_has_use_twice_softmax();
  use_twice_softmax_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.use_twice_softmax)
}

// optional bool is_anchor_normalized = 18 [default = false];
inline bool RegionParameter::has_is_anchor_normalized() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RegionParameter::set_has_is_anchor_normalized() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RegionParameter::clear_has_is_anchor_normalized() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RegionParameter::clear_is_anchor_normalized() {
  is_anchor_normalized_ = false;
  clear_has_is_anchor_normalized();
}
inline bool RegionParameter::is_anchor_normalized() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.is_anchor_normalized)
  return is_anchor_normalized_;
}
inline void RegionParameter::set_is_anchor_normalized(bool value) {
  set_has_is_anchor_normalized();
  is_anchor_normalized_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.is_anchor_normalized)
}

// repeated bool ori_enable = 21;
inline int RegionParameter::ori_enable_size() const {
  return ori_enable_.size();
}
inline void RegionParameter::clear_ori_enable() {
  ori_enable_.Clear();
}
inline bool RegionParameter::ori_enable(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.ori_enable)
  return ori_enable_.Get(index);
}
inline void RegionParameter::set_ori_enable(int index, bool value) {
  ori_enable_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.ori_enable)
}
inline void RegionParameter::add_ori_enable(bool value) {
  ori_enable_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.inference.RegionParameter.ori_enable)
}
inline const ::google::protobuf::RepeatedField< bool >&
RegionParameter::ori_enable() const {
  // @@protoc_insertion_point(field_list:apollo.perception.inference.RegionParameter.ori_enable)
  return ori_enable_;
}
inline ::google::protobuf::RepeatedField< bool >*
RegionParameter::mutable_ori_enable() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.inference.RegionParameter.ori_enable)
  return &ori_enable_;
}

// optional string anchorfile = 22 [default = "anchor.txt"];
inline bool RegionParameter::has_anchorfile() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RegionParameter::set_has_anchorfile() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RegionParameter::clear_has_anchorfile() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RegionParameter::clear_anchorfile() {
  if (anchorfile_ != _default_anchorfile_) {
    anchorfile_->assign(*_default_anchorfile_);
  }
  clear_has_anchorfile();
}
inline const ::std::string& RegionParameter::anchorfile() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.anchorfile)
  return *anchorfile_;
}
inline void RegionParameter::set_anchorfile(const ::std::string& value) {
  set_has_anchorfile();
  if (anchorfile_ == _default_anchorfile_) {
    anchorfile_ = new ::std::string;
  }
  anchorfile_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.anchorfile)
}
inline void RegionParameter::set_anchorfile(const char* value) {
  set_has_anchorfile();
  if (anchorfile_ == _default_anchorfile_) {
    anchorfile_ = new ::std::string;
  }
  anchorfile_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.inference.RegionParameter.anchorfile)
}
inline void RegionParameter::set_anchorfile(const char* value, size_t size) {
  set_has_anchorfile();
  if (anchorfile_ == _default_anchorfile_) {
    anchorfile_ = new ::std::string;
  }
  anchorfile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.inference.RegionParameter.anchorfile)
}
inline ::std::string* RegionParameter::mutable_anchorfile() {
  set_has_anchorfile();
  if (anchorfile_ == _default_anchorfile_) {
    anchorfile_ = new ::std::string(*_default_anchorfile_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.inference.RegionParameter.anchorfile)
  return anchorfile_;
}
inline ::std::string* RegionParameter::release_anchorfile() {
  clear_has_anchorfile();
  if (anchorfile_ == _default_anchorfile_) {
    return NULL;
  } else {
    ::std::string* temp = anchorfile_;
    anchorfile_ = const_cast< ::std::string*>(_default_anchorfile_);
    return temp;
  }
}
inline void RegionParameter::set_allocated_anchorfile(::std::string* anchorfile) {
  if (anchorfile_ != _default_anchorfile_) {
    delete anchorfile_;
  }
  if (anchorfile) {
    set_has_anchorfile();
    anchorfile_ = anchorfile;
  } else {
    clear_has_anchorfile();
    anchorfile_ = const_cast< ::std::string*>(_default_anchorfile_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.inference.RegionParameter.anchorfile)
}

// optional bool use_side_box_v2 = 23 [default = false];
inline bool RegionParameter::has_use_side_box_v2() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RegionParameter::set_has_use_side_box_v2() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RegionParameter::clear_has_use_side_box_v2() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RegionParameter::clear_use_side_box_v2() {
  use_side_box_v2_ = false;
  clear_has_use_side_box_v2();
}
inline bool RegionParameter::use_side_box_v2() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.use_side_box_v2)
  return use_side_box_v2_;
}
inline void RegionParameter::set_use_side_box_v2(bool value) {
  set_has_use_side_box_v2();
  use_side_box_v2_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.use_side_box_v2)
}

// optional bool use_side_box_v3 = 24 [default = false];
inline bool RegionParameter::has_use_side_box_v3() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RegionParameter::set_has_use_side_box_v3() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RegionParameter::clear_has_use_side_box_v3() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RegionParameter::clear_use_side_box_v3() {
  use_side_box_v3_ = false;
  clear_has_use_side_box_v3();
}
inline bool RegionParameter::use_side_box_v3() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.use_side_box_v3)
  return use_side_box_v3_;
}
inline void RegionParameter::set_use_side_box_v3(bool value) {
  set_has_use_side_box_v3();
  use_side_box_v3_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.use_side_box_v3)
}

// optional int32 ori_cycle = 25 [default = 1];
inline bool RegionParameter::has_ori_cycle() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RegionParameter::set_has_ori_cycle() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RegionParameter::clear_has_ori_cycle() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RegionParameter::clear_ori_cycle() {
  ori_cycle_ = 1;
  clear_has_ori_cycle();
}
inline ::google::protobuf::int32 RegionParameter::ori_cycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.RegionParameter.ori_cycle)
  return ori_cycle_;
}
inline void RegionParameter::set_ori_cycle(::google::protobuf::int32 value) {
  set_has_ori_cycle();
  ori_cycle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.RegionParameter.ori_cycle)
}

// -------------------------------------------------------------------

// AnchorBox

// optional float w = 1;
inline bool AnchorBox::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnchorBox::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnchorBox::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnchorBox::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float AnchorBox::w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnchorBox.w)
  return w_;
}
inline void AnchorBox::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnchorBox.w)
}

// optional float h = 2;
inline bool AnchorBox::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnchorBox::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnchorBox::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnchorBox::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline float AnchorBox::h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.AnchorBox.h)
  return h_;
}
inline void AnchorBox::set_h(float value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.AnchorBox.h)
}

// -------------------------------------------------------------------

// ReorgParameter

// optional uint32 stride = 1;
inline bool ReorgParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReorgParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReorgParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReorgParameter::clear_stride() {
  stride_ = 0u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 ReorgParameter::stride() const {
  // @@protoc_insertion_point(field_get:apollo.perception.inference.ReorgParameter.stride)
  return stride_;
}
inline void ReorgParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.inference.ReorgParameter.stride)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace inference
}  // namespace perception
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::perception::inference::EmitConstraint_EmitType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::EmitConstraint_EmitType>() {
  return ::apollo::perception::inference::EmitConstraint_EmitType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::AnnotatedDatum_AnnotationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::AnnotatedDatum_AnnotationType>() {
  return ::apollo::perception::inference::AnnotatedDatum_AnnotationType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::FillerParameter_VarianceNorm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::FillerParameter_VarianceNorm>() {
  return ::apollo::perception::inference::FillerParameter_VarianceNorm_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ParamSpec_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ParamSpec_DimCheckMode>() {
  return ::apollo::perception::inference::ParamSpec_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ResizeParameter_Resize_mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ResizeParameter_Resize_mode>() {
  return ::apollo::perception::inference::ResizeParameter_Resize_mode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ResizeParameter_Pad_mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ResizeParameter_Pad_mode>() {
  return ::apollo::perception::inference::ResizeParameter_Pad_mode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ResizeParameter_Interp_mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ResizeParameter_Interp_mode>() {
  return ::apollo::perception::inference::ResizeParameter_Interp_mode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::LossParameter_NormalizationMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::LossParameter_NormalizationMode>() {
  return ::apollo::perception::inference::LossParameter_NormalizationMode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ConvolutionParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ConvolutionParameter_Engine>() {
  return ::apollo::perception::inference::ConvolutionParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::DataParameter_DB> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::DataParameter_DB>() {
  return ::apollo::perception::inference::DataParameter_DB_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::EltwiseParameter_EltwiseOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::EltwiseParameter_EltwiseOp>() {
  return ::apollo::perception::inference::EltwiseParameter_EltwiseOp_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::HingeLossParameter_Norm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::HingeLossParameter_Norm>() {
  return ::apollo::perception::inference::HingeLossParameter_Norm_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::DatasetParameter_DatasetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::DatasetParameter_DatasetType>() {
  return ::apollo::perception::inference::DatasetParameter_DatasetType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::LRNParameter_NormRegion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::LRNParameter_NormRegion>() {
  return ::apollo::perception::inference::LRNParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::LRNParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::LRNParameter_Engine>() {
  return ::apollo::perception::inference::LRNParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::MultiBoxLossParameter_LocLossType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::MultiBoxLossParameter_LocLossType>() {
  return ::apollo::perception::inference::MultiBoxLossParameter_LocLossType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType>() {
  return ::apollo::perception::inference::MultiBoxLossParameter_ConfLossType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::MultiBoxLossParameter_MatchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::MultiBoxLossParameter_MatchType>() {
  return ::apollo::perception::inference::MultiBoxLossParameter_MatchType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::MultiBoxLossParameter_MiningType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::MultiBoxLossParameter_MiningType>() {
  return ::apollo::perception::inference::MultiBoxLossParameter_MiningType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::PoolingParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::PoolingParameter_PoolMethod>() {
  return ::apollo::perception::inference::PoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::PoolingParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::PoolingParameter_Engine>() {
  return ::apollo::perception::inference::PoolingParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::PriorBoxParameter_CodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::PriorBoxParameter_CodeType>() {
  return ::apollo::perception::inference::PriorBoxParameter_CodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ReductionParameter_ReductionOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ReductionParameter_ReductionOp>() {
  return ::apollo::perception::inference::ReductionParameter_ReductionOp_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::ReLUParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::ReLUParameter_Engine>() {
  return ::apollo::perception::inference::ReLUParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::SigmoidParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::SigmoidParameter_Engine>() {
  return ::apollo::perception::inference::SigmoidParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::SoftmaxParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::SoftmaxParameter_Engine>() {
  return ::apollo::perception::inference::SoftmaxParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::TanHParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::TanHParameter_Engine>() {
  return ::apollo::perception::inference::TanHParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::VideoDataParameter_VideoType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::VideoDataParameter_VideoType>() {
  return ::apollo::perception::inference::VideoDataParameter_VideoType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::SPPParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::SPPParameter_PoolMethod>() {
  return ::apollo::perception::inference::SPPParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::SPPParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::SPPParameter_Engine>() {
  return ::apollo::perception::inference::SPPParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::V1LayerParameter_LayerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::V1LayerParameter_LayerType>() {
  return ::apollo::perception::inference::V1LayerParameter_LayerType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::V1LayerParameter_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::V1LayerParameter_DimCheckMode>() {
  return ::apollo::perception::inference::V1LayerParameter_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::V0LayerParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::V0LayerParameter_PoolMethod>() {
  return ::apollo::perception::inference::V0LayerParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::YoloLossParameter_RegLossType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::YoloLossParameter_RegLossType>() {
  return ::apollo::perception::inference::YoloLossParameter_RegLossType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::inference::Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::inference::Phase>() {
  return ::apollo::perception::inference::Phase_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_2eproto__INCLUDED
