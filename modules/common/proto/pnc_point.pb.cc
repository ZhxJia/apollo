// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pnc_point.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pnc_point.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {

namespace {

const ::google::protobuf::Descriptor* SLPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SLPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrenetFramePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrenetFramePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleMotionPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleMotionPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleMotion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleMotion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pnc_5fpoint_2eproto() {
  protobuf_AddDesc_pnc_5fpoint_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pnc_point.proto");
  GOOGLE_CHECK(file != NULL);
  SLPoint_descriptor_ = file->message_type(0);
  static const int SLPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLPoint, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLPoint, l_),
  };
  SLPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SLPoint_descriptor_,
      SLPoint::default_instance_,
      SLPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SLPoint));
  FrenetFramePoint_descriptor_ = file->message_type(1);
  static const int FrenetFramePoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, dl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, ddl_),
  };
  FrenetFramePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrenetFramePoint_descriptor_,
      FrenetFramePoint::default_instance_,
      FrenetFramePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrenetFramePoint));
  SpeedPoint_descriptor_ = file->message_type(2);
  static const int SpeedPoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, da_),
  };
  SpeedPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeedPoint_descriptor_,
      SpeedPoint::default_instance_,
      SpeedPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeedPoint));
  PathPoint_descriptor_ = file->message_type(3);
  static const int PathPoint_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, kappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, dkappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, ddkappa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, lane_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, x_derivative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, y_derivative_),
  };
  PathPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathPoint_descriptor_,
      PathPoint::default_instance_,
      PathPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathPoint));
  Path_descriptor_ = file->message_type(4);
  static const int Path_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, path_point_),
  };
  Path_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Path_descriptor_,
      Path::default_instance_,
      Path_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Path));
  TrajectoryPoint_descriptor_ = file->message_type(5);
  static const int TrajectoryPoint_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, path_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, relative_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, da_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, steer_),
  };
  TrajectoryPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryPoint_descriptor_,
      TrajectoryPoint::default_instance_,
      TrajectoryPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryPoint));
  Trajectory_descriptor_ = file->message_type(6);
  static const int Trajectory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, trajectory_point_),
  };
  Trajectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trajectory_descriptor_,
      Trajectory::default_instance_,
      Trajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trajectory));
  VehicleMotionPoint_descriptor_ = file->message_type(7);
  static const int VehicleMotionPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotionPoint, trajectory_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotionPoint, steer_),
  };
  VehicleMotionPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VehicleMotionPoint_descriptor_,
      VehicleMotionPoint::default_instance_,
      VehicleMotionPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotionPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotionPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VehicleMotionPoint));
  VehicleMotion_descriptor_ = file->message_type(8);
  static const int VehicleMotion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotion, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotion, vehicle_motion_point_),
  };
  VehicleMotion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VehicleMotion_descriptor_,
      VehicleMotion::default_instance_,
      VehicleMotion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VehicleMotion));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pnc_5fpoint_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SLPoint_descriptor_, &SLPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrenetFramePoint_descriptor_, &FrenetFramePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeedPoint_descriptor_, &SpeedPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathPoint_descriptor_, &PathPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Path_descriptor_, &Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryPoint_descriptor_, &TrajectoryPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trajectory_descriptor_, &Trajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VehicleMotionPoint_descriptor_, &VehicleMotionPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VehicleMotion_descriptor_, &VehicleMotion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pnc_5fpoint_2eproto() {
  delete SLPoint::default_instance_;
  delete SLPoint_reflection_;
  delete FrenetFramePoint::default_instance_;
  delete FrenetFramePoint_reflection_;
  delete SpeedPoint::default_instance_;
  delete SpeedPoint_reflection_;
  delete PathPoint::default_instance_;
  delete PathPoint_reflection_;
  delete Path::default_instance_;
  delete Path_reflection_;
  delete TrajectoryPoint::default_instance_;
  delete TrajectoryPoint_reflection_;
  delete Trajectory::default_instance_;
  delete Trajectory_reflection_;
  delete VehicleMotionPoint::default_instance_;
  delete VehicleMotionPoint_reflection_;
  delete VehicleMotion::default_instance_;
  delete VehicleMotion_reflection_;
}

void protobuf_AddDesc_pnc_5fpoint_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017pnc_point.proto\022\rapollo.common\"\037\n\007SLPo"
    "int\022\t\n\001s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\"A\n\020FrenetFrame"
    "Point\022\t\n\001s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\022\n\n\002dl\030\003 \001(\001\022"
    "\013\n\003ddl\030\004 \001(\001\"D\n\nSpeedPoint\022\t\n\001s\030\001 \001(\001\022\t\n"
    "\001t\030\002 \001(\001\022\t\n\001v\030\003 \001(\001\022\t\n\001a\030\004 \001(\001\022\n\n\002da\030\005 \001"
    "(\001\"\263\001\n\tPathPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t"
    "\n\001z\030\003 \001(\001\022\r\n\005theta\030\004 \001(\001\022\r\n\005kappa\030\005 \001(\001\022"
    "\t\n\001s\030\006 \001(\001\022\016\n\006dkappa\030\007 \001(\001\022\017\n\007ddkappa\030\010 "
    "\001(\001\022\017\n\007lane_id\030\t \001(\t\022\024\n\014x_derivative\030\n \001"
    "(\001\022\024\n\014y_derivative\030\013 \001(\001\"B\n\004Path\022\014\n\004name"
    "\030\001 \001(\t\022,\n\npath_point\030\002 \003(\0132\030.apollo.comm"
    "on.PathPoint\"\207\001\n\017TrajectoryPoint\022,\n\npath"
    "_point\030\001 \001(\0132\030.apollo.common.PathPoint\022\t"
    "\n\001v\030\002 \001(\001\022\t\n\001a\030\003 \001(\001\022\025\n\rrelative_time\030\004 "
    "\001(\001\022\n\n\002da\030\005 \001(\001\022\r\n\005steer\030\006 \001(\001\"T\n\nTrajec"
    "tory\022\014\n\004name\030\001 \001(\t\0228\n\020trajectory_point\030\002"
    " \003(\0132\036.apollo.common.TrajectoryPoint\"]\n\022"
    "VehicleMotionPoint\0228\n\020trajectory_point\030\001"
    " \001(\0132\036.apollo.common.TrajectoryPoint\022\r\n\005"
    "steer\030\002 \001(\001\"^\n\rVehicleMotion\022\014\n\004name\030\001 \001"
    "(\t\022\?\n\024vehicle_motion_point\030\002 \003(\0132!.apoll"
    "o.common.VehicleMotionPoint", 867);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pnc_point.proto", &protobuf_RegisterTypes);
  SLPoint::default_instance_ = new SLPoint();
  FrenetFramePoint::default_instance_ = new FrenetFramePoint();
  SpeedPoint::default_instance_ = new SpeedPoint();
  PathPoint::default_instance_ = new PathPoint();
  Path::default_instance_ = new Path();
  TrajectoryPoint::default_instance_ = new TrajectoryPoint();
  Trajectory::default_instance_ = new Trajectory();
  VehicleMotionPoint::default_instance_ = new VehicleMotionPoint();
  VehicleMotion::default_instance_ = new VehicleMotion();
  SLPoint::default_instance_->InitAsDefaultInstance();
  FrenetFramePoint::default_instance_->InitAsDefaultInstance();
  SpeedPoint::default_instance_->InitAsDefaultInstance();
  PathPoint::default_instance_->InitAsDefaultInstance();
  Path::default_instance_->InitAsDefaultInstance();
  TrajectoryPoint::default_instance_->InitAsDefaultInstance();
  Trajectory::default_instance_->InitAsDefaultInstance();
  VehicleMotionPoint::default_instance_->InitAsDefaultInstance();
  VehicleMotion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pnc_5fpoint_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pnc_5fpoint_2eproto {
  StaticDescriptorInitializer_pnc_5fpoint_2eproto() {
    protobuf_AddDesc_pnc_5fpoint_2eproto();
  }
} static_descriptor_initializer_pnc_5fpoint_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SLPoint::kSFieldNumber;
const int SLPoint::kLFieldNumber;
#endif  // !_MSC_VER

SLPoint::SLPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.SLPoint)
}

void SLPoint::InitAsDefaultInstance() {
}

SLPoint::SLPoint(const SLPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.SLPoint)
}

void SLPoint::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
  l_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SLPoint::~SLPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.SLPoint)
  SharedDtor();
}

void SLPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SLPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SLPoint_descriptor_;
}

const SLPoint& SLPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pnc_5fpoint_2eproto();
  return *default_instance_;
}

SLPoint* SLPoint::default_instance_ = NULL;

SLPoint* SLPoint::New() const {
  return new SLPoint;
}

void SLPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SLPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(s_, l_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SLPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.SLPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_l;
        break;
      }

      // optional double l = 2;
      case 2: {
        if (tag == 17) {
         parse_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
          set_has_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.SLPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.SLPoint)
  return false;
#undef DO_
}

void SLPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.SLPoint)
  // optional double s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double l = 2;
  if (has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->l(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.SLPoint)
}

::google::protobuf::uint8* SLPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.SLPoint)
  // optional double s = 1;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double l = 2;
  if (has_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->l(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.SLPoint)
  return target;
}

int SLPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double l = 2;
    if (has_l()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SLPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SLPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SLPoint::MergeFrom(const SLPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_l()) {
      set_l(from.l());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SLPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLPoint::CopyFrom(const SLPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPoint::IsInitialized() const {

  return true;
}

void SLPoint::Swap(SLPoint* other) {
  if (other != this) {
    std::swap(s_, other->s_);
    std::swap(l_, other->l_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SLPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SLPoint_descriptor_;
  metadata.reflection = SLPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrenetFramePoint::kSFieldNumber;
const int FrenetFramePoint::kLFieldNumber;
const int FrenetFramePoint::kDlFieldNumber;
const int FrenetFramePoint::kDdlFieldNumber;
#endif  // !_MSC_VER

FrenetFramePoint::FrenetFramePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.FrenetFramePoint)
}

void FrenetFramePoint::InitAsDefaultInstance() {
}

FrenetFramePoint::FrenetFramePoint(const FrenetFramePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.FrenetFramePoint)
}

void FrenetFramePoint::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
  l_ = 0;
  dl_ = 0;
  ddl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrenetFramePoint::~FrenetFramePoint() {
  // @@protoc_insertion_point(destructor:apollo.common.FrenetFramePoint)
  SharedDtor();
}

void FrenetFramePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrenetFramePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrenetFramePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrenetFramePoint_descriptor_;
}

const FrenetFramePoint& FrenetFramePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pnc_5fpoint_2eproto();
  return *default_instance_;
}

FrenetFramePoint* FrenetFramePoint::default_instance_ = NULL;

FrenetFramePoint* FrenetFramePoint::New() const {
  return new FrenetFramePoint;
}

void FrenetFramePoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FrenetFramePoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(s_, ddl_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrenetFramePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.FrenetFramePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_l;
        break;
      }

      // optional double l = 2;
      case 2: {
        if (tag == 17) {
         parse_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
          set_has_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_dl;
        break;
      }

      // optional double dl = 3;
      case 3: {
        if (tag == 25) {
         parse_dl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dl_)));
          set_has_dl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_ddl;
        break;
      }

      // optional double ddl = 4;
      case 4: {
        if (tag == 33) {
         parse_ddl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddl_)));
          set_has_ddl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.FrenetFramePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.FrenetFramePoint)
  return false;
#undef DO_
}

void FrenetFramePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.FrenetFramePoint)
  // optional double s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double l = 2;
  if (has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->l(), output);
  }

  // optional double dl = 3;
  if (has_dl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dl(), output);
  }

  // optional double ddl = 4;
  if (has_ddl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ddl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.FrenetFramePoint)
}

::google::protobuf::uint8* FrenetFramePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.FrenetFramePoint)
  // optional double s = 1;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double l = 2;
  if (has_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->l(), target);
  }

  // optional double dl = 3;
  if (has_dl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dl(), target);
  }

  // optional double ddl = 4;
  if (has_ddl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ddl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.FrenetFramePoint)
  return target;
}

int FrenetFramePoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double l = 2;
    if (has_l()) {
      total_size += 1 + 8;
    }

    // optional double dl = 3;
    if (has_dl()) {
      total_size += 1 + 8;
    }

    // optional double ddl = 4;
    if (has_ddl()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrenetFramePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrenetFramePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrenetFramePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrenetFramePoint::MergeFrom(const FrenetFramePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_l()) {
      set_l(from.l());
    }
    if (from.has_dl()) {
      set_dl(from.dl());
    }
    if (from.has_ddl()) {
      set_ddl(from.ddl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrenetFramePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrenetFramePoint::CopyFrom(const FrenetFramePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrenetFramePoint::IsInitialized() const {

  return true;
}

void FrenetFramePoint::Swap(FrenetFramePoint* other) {
  if (other != this) {
    std::swap(s_, other->s_);
    std::swap(l_, other->l_);
    std::swap(dl_, other->dl_);
    std::swap(ddl_, other->ddl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrenetFramePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrenetFramePoint_descriptor_;
  metadata.reflection = FrenetFramePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedPoint::kSFieldNumber;
const int SpeedPoint::kTFieldNumber;
const int SpeedPoint::kVFieldNumber;
const int SpeedPoint::kAFieldNumber;
const int SpeedPoint::kDaFieldNumber;
#endif  // !_MSC_VER

SpeedPoint::SpeedPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.SpeedPoint)
}

void SpeedPoint::InitAsDefaultInstance() {
}

SpeedPoint::SpeedPoint(const SpeedPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.SpeedPoint)
}

void SpeedPoint::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
  t_ = 0;
  v_ = 0;
  a_ = 0;
  da_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedPoint::~SpeedPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.SpeedPoint)
  SharedDtor();
}

void SpeedPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeedPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedPoint_descriptor_;
}

const SpeedPoint& SpeedPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pnc_5fpoint_2eproto();
  return *default_instance_;
}

SpeedPoint* SpeedPoint::default_instance_ = NULL;

SpeedPoint* SpeedPoint::New() const {
  return new SpeedPoint;
}

void SpeedPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpeedPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(s_, da_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeedPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.SpeedPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_t;
        break;
      }

      // optional double t = 2;
      case 2: {
        if (tag == 17) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_v;
        break;
      }

      // optional double v = 3;
      case 3: {
        if (tag == 25) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_a;
        break;
      }

      // optional double a = 4;
      case 4: {
        if (tag == 33) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_da;
        break;
      }

      // optional double da = 5;
      case 5: {
        if (tag == 41) {
         parse_da:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &da_)));
          set_has_da();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.SpeedPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.SpeedPoint)
  return false;
#undef DO_
}

void SpeedPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.SpeedPoint)
  // optional double s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double t = 2;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // optional double v = 3;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v(), output);
  }

  // optional double a = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }

  // optional double da = 5;
  if (has_da()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->da(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.SpeedPoint)
}

::google::protobuf::uint8* SpeedPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.SpeedPoint)
  // optional double s = 1;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double t = 2;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // optional double v = 3;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v(), target);
  }

  // optional double a = 4;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a(), target);
  }

  // optional double da = 5;
  if (has_da()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->da(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.SpeedPoint)
  return target;
}

int SpeedPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double t = 2;
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double v = 3;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 4;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double da = 5;
    if (has_da()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeedPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeedPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeedPoint::MergeFrom(const SpeedPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_da()) {
      set_da(from.da());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeedPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPoint::CopyFrom(const SpeedPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPoint::IsInitialized() const {

  return true;
}

void SpeedPoint::Swap(SpeedPoint* other) {
  if (other != this) {
    std::swap(s_, other->s_);
    std::swap(t_, other->t_);
    std::swap(v_, other->v_);
    std::swap(a_, other->a_);
    std::swap(da_, other->da_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeedPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedPoint_descriptor_;
  metadata.reflection = SpeedPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathPoint::kXFieldNumber;
const int PathPoint::kYFieldNumber;
const int PathPoint::kZFieldNumber;
const int PathPoint::kThetaFieldNumber;
const int PathPoint::kKappaFieldNumber;
const int PathPoint::kSFieldNumber;
const int PathPoint::kDkappaFieldNumber;
const int PathPoint::kDdkappaFieldNumber;
const int PathPoint::kLaneIdFieldNumber;
const int PathPoint::kXDerivativeFieldNumber;
const int PathPoint::kYDerivativeFieldNumber;
#endif  // !_MSC_VER

PathPoint::PathPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.PathPoint)
}

void PathPoint::InitAsDefaultInstance() {
}

PathPoint::PathPoint(const PathPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.PathPoint)
}

void PathPoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  theta_ = 0;
  kappa_ = 0;
  s_ = 0;
  dkappa_ = 0;
  ddkappa_ = 0;
  lane_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_derivative_ = 0;
  y_derivative_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathPoint::~PathPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.PathPoint)
  SharedDtor();
}

void PathPoint::SharedDtor() {
  if (lane_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lane_id_;
  }
  if (this != default_instance_) {
  }
}

void PathPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPoint_descriptor_;
}

const PathPoint& PathPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pnc_5fpoint_2eproto();
  return *default_instance_;
}

PathPoint* PathPoint::default_instance_ = NULL;

PathPoint* PathPoint::New() const {
  return new PathPoint;
}

void PathPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PathPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(x_, ddkappa_);
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(x_derivative_, y_derivative_);
    if (has_lane_id()) {
      if (lane_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lane_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.PathPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_theta;
        break;
      }

      // optional double theta = 4;
      case 4: {
        if (tag == 33) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_kappa;
        break;
      }

      // optional double kappa = 5;
      case 5: {
        if (tag == 41) {
         parse_kappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
          set_has_kappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_s;
        break;
      }

      // optional double s = 6;
      case 6: {
        if (tag == 49) {
         parse_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_dkappa;
        break;
      }

      // optional double dkappa = 7;
      case 7: {
        if (tag == 57) {
         parse_dkappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dkappa_)));
          set_has_dkappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_ddkappa;
        break;
      }

      // optional double ddkappa = 8;
      case 8: {
        if (tag == 65) {
         parse_ddkappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddkappa_)));
          set_has_ddkappa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_lane_id;
        break;
      }

      // optional string lane_id = 9;
      case 9: {
        if (tag == 74) {
         parse_lane_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), this->lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lane_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_x_derivative;
        break;
      }

      // optional double x_derivative = 10;
      case 10: {
        if (tag == 81) {
         parse_x_derivative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_derivative_)));
          set_has_x_derivative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_y_derivative;
        break;
      }

      // optional double y_derivative = 11;
      case 11: {
        if (tag == 89) {
         parse_y_derivative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_derivative_)));
          set_has_y_derivative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.PathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.PathPoint)
  return false;
#undef DO_
}

void PathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.PathPoint)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double theta = 4;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // optional double kappa = 5;
  if (has_kappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->kappa(), output);
  }

  // optional double s = 6;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->s(), output);
  }

  // optional double dkappa = 7;
  if (has_dkappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->dkappa(), output);
  }

  // optional double ddkappa = 8;
  if (has_ddkappa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ddkappa(), output);
  }

  // optional string lane_id = 9;
  if (has_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->lane_id(), output);
  }

  // optional double x_derivative = 10;
  if (has_x_derivative()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->x_derivative(), output);
  }

  // optional double y_derivative = 11;
  if (has_y_derivative()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->y_derivative(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.PathPoint)
}

::google::protobuf::uint8* PathPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.PathPoint)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double theta = 4;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // optional double kappa = 5;
  if (has_kappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->kappa(), target);
  }

  // optional double s = 6;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->s(), target);
  }

  // optional double dkappa = 7;
  if (has_dkappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->dkappa(), target);
  }

  // optional double ddkappa = 8;
  if (has_ddkappa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ddkappa(), target);
  }

  // optional string lane_id = 9;
  if (has_lane_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lane_id(), target);
  }

  // optional double x_derivative = 10;
  if (has_x_derivative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->x_derivative(), target);
  }

  // optional double y_derivative = 11;
  if (has_y_derivative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->y_derivative(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.PathPoint)
  return target;
}

int PathPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double theta = 4;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double kappa = 5;
    if (has_kappa()) {
      total_size += 1 + 8;
    }

    // optional double s = 6;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double dkappa = 7;
    if (has_dkappa()) {
      total_size += 1 + 8;
    }

    // optional double ddkappa = 8;
    if (has_ddkappa()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string lane_id = 9;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double x_derivative = 10;
    if (has_x_derivative()) {
      total_size += 1 + 8;
    }

    // optional double y_derivative = 11;
    if (has_y_derivative()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathPoint::MergeFrom(const PathPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_kappa()) {
      set_kappa(from.kappa());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_dkappa()) {
      set_dkappa(from.dkappa());
    }
    if (from.has_ddkappa()) {
      set_ddkappa(from.ddkappa());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lane_id()) {
      set_lane_id(from.lane_id());
    }
    if (from.has_x_derivative()) {
      set_x_derivative(from.x_derivative());
    }
    if (from.has_y_derivative()) {
      set_y_derivative(from.y_derivative());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPoint::CopyFrom(const PathPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPoint::IsInitialized() const {

  return true;
}

void PathPoint::Swap(PathPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(theta_, other->theta_);
    std::swap(kappa_, other->kappa_);
    std::swap(s_, other->s_);
    std::swap(dkappa_, other->dkappa_);
    std::swap(ddkappa_, other->ddkappa_);
    std::swap(lane_id_, other->lane_id_);
    std::swap(x_derivative_, other->x_derivative_);
    std::swap(y_derivative_, other->y_derivative_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPoint_descriptor_;
  metadata.reflection = PathPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Path::kNameFieldNumber;
const int Path::kPathPointFieldNumber;
#endif  // !_MSC_VER

Path::Path()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Path)
}

void Path::InitAsDefaultInstance() {
}

Path::Path(const Path& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.Path)
}

void Path::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:apollo.common.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_descriptor_;
}

const Path& Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pnc_5fpoint_2eproto();
  return *default_instance_;
}

Path* Path::default_instance_ = NULL;

Path* Path::New() const {
  return new Path;
}

void Path::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  path_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path_point;
        break;
      }

      // repeated .apollo.common.PathPoint path_point = 2;
      case 2: {
        if (tag == 18) {
         parse_path_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path_point;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Path)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.common.PathPoint path_point = 2;
  for (int i = 0; i < this->path_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path_point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Path)
}

::google::protobuf::uint8* Path::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Path)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.common.PathPoint path_point = 2;
  for (int i = 0; i < this->path_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->path_point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Path)
  return target;
}

int Path::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .apollo.common.PathPoint path_point = 2;
  total_size += 1 * this->path_point_size();
  for (int i = 0; i < this->path_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Path* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Path*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_point_.MergeFrom(from.path_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {

  return true;
}

void Path::Swap(Path* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    path_point_.Swap(&other->path_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_descriptor_;
  metadata.reflection = Path_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajectoryPoint::kPathPointFieldNumber;
const int TrajectoryPoint::kVFieldNumber;
const int TrajectoryPoint::kAFieldNumber;
const int TrajectoryPoint::kRelativeTimeFieldNumber;
const int TrajectoryPoint::kDaFieldNumber;
const int TrajectoryPoint::kSteerFieldNumber;
#endif  // !_MSC_VER

TrajectoryPoint::TrajectoryPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.TrajectoryPoint)
}

void TrajectoryPoint::InitAsDefaultInstance() {
  path_point_ = const_cast< ::apollo::common::PathPoint*>(&::apollo::common::PathPoint::default_instance());
}

TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.TrajectoryPoint)
}

void TrajectoryPoint::SharedCtor() {
  _cached_size_ = 0;
  path_point_ = NULL;
  v_ = 0;
  a_ = 0;
  relative_time_ = 0;
  da_ = 0;
  steer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.TrajectoryPoint)
  SharedDtor();
}

void TrajectoryPoint::SharedDtor() {
  if (this != default_instance_) {
    delete path_point_;
  }
}

void TrajectoryPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryPoint_descriptor_;
}

const TrajectoryPoint& TrajectoryPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pnc_5fpoint_2eproto();
  return *default_instance_;
}

TrajectoryPoint* TrajectoryPoint::default_instance_ = NULL;

TrajectoryPoint* TrajectoryPoint::New() const {
  return new TrajectoryPoint;
}

void TrajectoryPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TrajectoryPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(v_, steer_);
    if (has_path_point()) {
      if (path_point_ != NULL) path_point_->::apollo::common::PathPoint::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.TrajectoryPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.PathPoint path_point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_v;
        break;
      }

      // optional double v = 2;
      case 2: {
        if (tag == 17) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_a;
        break;
      }

      // optional double a = 3;
      case 3: {
        if (tag == 25) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_relative_time;
        break;
      }

      // optional double relative_time = 4;
      case 4: {
        if (tag == 33) {
         parse_relative_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_time_)));
          set_has_relative_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_da;
        break;
      }

      // optional double da = 5;
      case 5: {
        if (tag == 41) {
         parse_da:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &da_)));
          set_has_da();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_steer;
        break;
      }

      // optional double steer = 6;
      case 6: {
        if (tag == 49) {
         parse_steer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_)));
          set_has_steer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.TrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.TrajectoryPoint)
  return false;
#undef DO_
}

void TrajectoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.TrajectoryPoint)
  // optional .apollo.common.PathPoint path_point = 1;
  if (has_path_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->path_point(), output);
  }

  // optional double v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }

  // optional double a = 3;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->a(), output);
  }

  // optional double relative_time = 4;
  if (has_relative_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relative_time(), output);
  }

  // optional double da = 5;
  if (has_da()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->da(), output);
  }

  // optional double steer = 6;
  if (has_steer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->steer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.TrajectoryPoint)
}

::google::protobuf::uint8* TrajectoryPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.TrajectoryPoint)
  // optional .apollo.common.PathPoint path_point = 1;
  if (has_path_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->path_point(), target);
  }

  // optional double v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }

  // optional double a = 3;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->a(), target);
  }

  // optional double relative_time = 4;
  if (has_relative_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->relative_time(), target);
  }

  // optional double da = 5;
  if (has_da()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->da(), target);
  }

  // optional double steer = 6;
  if (has_steer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->steer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.TrajectoryPoint)
  return target;
}

int TrajectoryPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.common.PathPoint path_point = 1;
    if (has_path_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path_point());
    }

    // optional double v = 2;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 3;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 4;
    if (has_relative_time()) {
      total_size += 1 + 8;
    }

    // optional double da = 5;
    if (has_da()) {
      total_size += 1 + 8;
    }

    // optional double steer = 6;
    if (has_steer()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path_point()) {
      mutable_path_point()->::apollo::common::PathPoint::MergeFrom(from.path_point());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_relative_time()) {
      set_relative_time(from.relative_time());
    }
    if (from.has_da()) {
      set_da(from.da());
    }
    if (from.has_steer()) {
      set_steer(from.steer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {

  return true;
}

void TrajectoryPoint::Swap(TrajectoryPoint* other) {
  if (other != this) {
    std::swap(path_point_, other->path_point_);
    std::swap(v_, other->v_);
    std::swap(a_, other->a_);
    std::swap(relative_time_, other->relative_time_);
    std::swap(da_, other->da_);
    std::swap(steer_, other->steer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryPoint_descriptor_;
  metadata.reflection = TrajectoryPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Trajectory::kNameFieldNumber;
const int Trajectory::kTrajectoryPointFieldNumber;
#endif  // !_MSC_VER

Trajectory::Trajectory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Trajectory)
}

void Trajectory::InitAsDefaultInstance() {
}

Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.Trajectory)
}

void Trajectory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:apollo.common.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trajectory_descriptor_;
}

const Trajectory& Trajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pnc_5fpoint_2eproto();
  return *default_instance_;
}

Trajectory* Trajectory::default_instance_ = NULL;

Trajectory* Trajectory::New() const {
  return new Trajectory;
}

void Trajectory::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  trajectory_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trajectory_point;
        break;
      }

      // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
      case 2: {
        if (tag == 18) {
         parse_trajectory_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trajectory_point;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Trajectory)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (int i = 0; i < this->trajectory_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trajectory_point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Trajectory)
}

::google::protobuf::uint8* Trajectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Trajectory)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (int i = 0; i < this->trajectory_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trajectory_point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Trajectory)
  return target;
}

int Trajectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  total_size += 1 * this->trajectory_point_size();
  for (int i = 0; i < this->trajectory_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trajectory_point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trajectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trajectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {

  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    trajectory_point_.Swap(&other->trajectory_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trajectory_descriptor_;
  metadata.reflection = Trajectory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VehicleMotionPoint::kTrajectoryPointFieldNumber;
const int VehicleMotionPoint::kSteerFieldNumber;
#endif  // !_MSC_VER

VehicleMotionPoint::VehicleMotionPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.VehicleMotionPoint)
}

void VehicleMotionPoint::InitAsDefaultInstance() {
  trajectory_point_ = const_cast< ::apollo::common::TrajectoryPoint*>(&::apollo::common::TrajectoryPoint::default_instance());
}

VehicleMotionPoint::VehicleMotionPoint(const VehicleMotionPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleMotionPoint)
}

void VehicleMotionPoint::SharedCtor() {
  _cached_size_ = 0;
  trajectory_point_ = NULL;
  steer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleMotionPoint::~VehicleMotionPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleMotionPoint)
  SharedDtor();
}

void VehicleMotionPoint::SharedDtor() {
  if (this != default_instance_) {
    delete trajectory_point_;
  }
}

void VehicleMotionPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleMotionPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleMotionPoint_descriptor_;
}

const VehicleMotionPoint& VehicleMotionPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pnc_5fpoint_2eproto();
  return *default_instance_;
}

VehicleMotionPoint* VehicleMotionPoint::default_instance_ = NULL;

VehicleMotionPoint* VehicleMotionPoint::New() const {
  return new VehicleMotionPoint;
}

void VehicleMotionPoint::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_trajectory_point()) {
      if (trajectory_point_ != NULL) trajectory_point_->::apollo::common::TrajectoryPoint::Clear();
    }
    steer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VehicleMotionPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.VehicleMotionPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.TrajectoryPoint trajectory_point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_steer;
        break;
      }

      // optional double steer = 2;
      case 2: {
        if (tag == 17) {
         parse_steer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_)));
          set_has_steer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.VehicleMotionPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.VehicleMotionPoint)
  return false;
#undef DO_
}

void VehicleMotionPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.VehicleMotionPoint)
  // optional .apollo.common.TrajectoryPoint trajectory_point = 1;
  if (has_trajectory_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trajectory_point(), output);
  }

  // optional double steer = 2;
  if (has_steer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->steer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.VehicleMotionPoint)
}

::google::protobuf::uint8* VehicleMotionPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleMotionPoint)
  // optional .apollo.common.TrajectoryPoint trajectory_point = 1;
  if (has_trajectory_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trajectory_point(), target);
  }

  // optional double steer = 2;
  if (has_steer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->steer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleMotionPoint)
  return target;
}

int VehicleMotionPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.common.TrajectoryPoint trajectory_point = 1;
    if (has_trajectory_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory_point());
    }

    // optional double steer = 2;
    if (has_steer()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleMotionPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VehicleMotionPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VehicleMotionPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleMotionPoint::MergeFrom(const VehicleMotionPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trajectory_point()) {
      mutable_trajectory_point()->::apollo::common::TrajectoryPoint::MergeFrom(from.trajectory_point());
    }
    if (from.has_steer()) {
      set_steer(from.steer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VehicleMotionPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMotionPoint::CopyFrom(const VehicleMotionPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMotionPoint::IsInitialized() const {

  return true;
}

void VehicleMotionPoint::Swap(VehicleMotionPoint* other) {
  if (other != this) {
    std::swap(trajectory_point_, other->trajectory_point_);
    std::swap(steer_, other->steer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VehicleMotionPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleMotionPoint_descriptor_;
  metadata.reflection = VehicleMotionPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VehicleMotion::kNameFieldNumber;
const int VehicleMotion::kVehicleMotionPointFieldNumber;
#endif  // !_MSC_VER

VehicleMotion::VehicleMotion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.VehicleMotion)
}

void VehicleMotion::InitAsDefaultInstance() {
}

VehicleMotion::VehicleMotion(const VehicleMotion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleMotion)
}

void VehicleMotion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleMotion::~VehicleMotion() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleMotion)
  SharedDtor();
}

void VehicleMotion::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VehicleMotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleMotion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleMotion_descriptor_;
}

const VehicleMotion& VehicleMotion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pnc_5fpoint_2eproto();
  return *default_instance_;
}

VehicleMotion* VehicleMotion::default_instance_ = NULL;

VehicleMotion* VehicleMotion::New() const {
  return new VehicleMotion;
}

void VehicleMotion::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  vehicle_motion_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VehicleMotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.VehicleMotion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vehicle_motion_point;
        break;
      }

      // repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
      case 2: {
        if (tag == 18) {
         parse_vehicle_motion_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vehicle_motion_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vehicle_motion_point;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.VehicleMotion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.VehicleMotion)
  return false;
#undef DO_
}

void VehicleMotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.VehicleMotion)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
  for (int i = 0; i < this->vehicle_motion_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vehicle_motion_point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.VehicleMotion)
}

::google::protobuf::uint8* VehicleMotion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleMotion)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
  for (int i = 0; i < this->vehicle_motion_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vehicle_motion_point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleMotion)
  return target;
}

int VehicleMotion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
  total_size += 1 * this->vehicle_motion_point_size();
  for (int i = 0; i < this->vehicle_motion_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehicle_motion_point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleMotion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VehicleMotion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VehicleMotion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleMotion::MergeFrom(const VehicleMotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  vehicle_motion_point_.MergeFrom(from.vehicle_motion_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VehicleMotion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMotion::CopyFrom(const VehicleMotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMotion::IsInitialized() const {

  return true;
}

void VehicleMotion::Swap(VehicleMotion* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    vehicle_motion_point_.Swap(&other->vehicle_motion_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VehicleMotion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleMotion_descriptor_;
  metadata.reflection = VehicleMotion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
