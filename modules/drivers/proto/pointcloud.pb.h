// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pointcloud.proto

#ifndef PROTOBUF_pointcloud_2eproto__INCLUDED
#define PROTOBUF_pointcloud_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pointcloud_2eproto();
void protobuf_AssignDesc_pointcloud_2eproto();
void protobuf_ShutdownFile_pointcloud_2eproto();

class PointXYZIT;
class PointCloud;

// ===================================================================

class PointXYZIT : public ::google::protobuf::Message {
 public:
  PointXYZIT();
  virtual ~PointXYZIT();

  PointXYZIT(const PointXYZIT& from);

  inline PointXYZIT& operator=(const PointXYZIT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointXYZIT& default_instance();

  void Swap(PointXYZIT* other);

  // implements Message ----------------------------------------------

  PointXYZIT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointXYZIT& from);
  void MergeFrom(const PointXYZIT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1 [default = nan];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2 [default = nan];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3 [default = nan];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // optional uint32 intensity = 4 [default = 0];
  inline bool has_intensity() const;
  inline void clear_intensity();
  static const int kIntensityFieldNumber = 4;
  inline ::google::protobuf::uint32 intensity() const;
  inline void set_intensity(::google::protobuf::uint32 value);

  // optional uint64 timestamp = 5 [default = 0];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.PointXYZIT)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_intensity();
  inline void clear_has_intensity();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  ::google::protobuf::uint32 intensity_;
  ::google::protobuf::uint64 timestamp_;
  friend void  protobuf_AddDesc_pointcloud_2eproto();
  friend void protobuf_AssignDesc_pointcloud_2eproto();
  friend void protobuf_ShutdownFile_pointcloud_2eproto();

  void InitAsDefaultInstance();
  static PointXYZIT* default_instance_;
};
// -------------------------------------------------------------------

class PointCloud : public ::google::protobuf::Message {
 public:
  PointCloud();
  virtual ~PointCloud();

  PointCloud(const PointCloud& from);

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloud& default_instance();

  void Swap(PointCloud* other);

  // implements Message ----------------------------------------------

  PointCloud* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::apollo::common::Header& header() const;
  inline ::apollo::common::Header* mutable_header();
  inline ::apollo::common::Header* release_header();
  inline void set_allocated_header(::apollo::common::Header* header);

  // optional string frame_id = 2;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  inline const ::std::string& frame_id() const;
  inline void set_frame_id(const ::std::string& value);
  inline void set_frame_id(const char* value);
  inline void set_frame_id(const char* value, size_t size);
  inline ::std::string* mutable_frame_id();
  inline ::std::string* release_frame_id();
  inline void set_allocated_frame_id(::std::string* frame_id);

  // optional bool is_dense = 3;
  inline bool has_is_dense() const;
  inline void clear_is_dense();
  static const int kIsDenseFieldNumber = 3;
  inline bool is_dense() const;
  inline void set_is_dense(bool value);

  // repeated .apollo.drivers.PointXYZIT point = 4;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 4;
  inline const ::apollo::drivers::PointXYZIT& point(int index) const;
  inline ::apollo::drivers::PointXYZIT* mutable_point(int index);
  inline ::apollo::drivers::PointXYZIT* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::PointXYZIT >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::drivers::PointXYZIT >*
      mutable_point();

  // optional double measurement_time = 5;
  inline bool has_measurement_time() const;
  inline void clear_measurement_time();
  static const int kMeasurementTimeFieldNumber = 5;
  inline double measurement_time() const;
  inline void set_measurement_time(double value);

  // optional uint32 width = 6;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 6;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 7;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 7;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.PointCloud)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_is_dense();
  inline void clear_has_is_dense();
  inline void set_has_measurement_time();
  inline void clear_has_measurement_time();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::Header* header_;
  ::std::string* frame_id_;
  ::google::protobuf::RepeatedPtrField< ::apollo::drivers::PointXYZIT > point_;
  bool is_dense_;
  ::google::protobuf::uint32 width_;
  double measurement_time_;
  ::google::protobuf::uint32 height_;
  friend void  protobuf_AddDesc_pointcloud_2eproto();
  friend void protobuf_AssignDesc_pointcloud_2eproto();
  friend void protobuf_ShutdownFile_pointcloud_2eproto();

  void InitAsDefaultInstance();
  static PointCloud* default_instance_;
};
// ===================================================================


// ===================================================================

// PointXYZIT

// optional float x = 1 [default = nan];
inline bool PointXYZIT::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointXYZIT::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointXYZIT::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointXYZIT::clear_x() {
  x_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_x();
}
inline float PointXYZIT::x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.x)
  return x_;
}
inline void PointXYZIT::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.x)
}

// optional float y = 2 [default = nan];
inline bool PointXYZIT::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointXYZIT::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointXYZIT::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointXYZIT::clear_y() {
  y_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_y();
}
inline float PointXYZIT::y() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.y)
  return y_;
}
inline void PointXYZIT::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.y)
}

// optional float z = 3 [default = nan];
inline bool PointXYZIT::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointXYZIT::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointXYZIT::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointXYZIT::clear_z() {
  z_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_z();
}
inline float PointXYZIT::z() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.z)
  return z_;
}
inline void PointXYZIT::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.z)
}

// optional uint32 intensity = 4 [default = 0];
inline bool PointXYZIT::has_intensity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PointXYZIT::set_has_intensity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PointXYZIT::clear_has_intensity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PointXYZIT::clear_intensity() {
  intensity_ = 0u;
  clear_has_intensity();
}
inline ::google::protobuf::uint32 PointXYZIT::intensity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.intensity)
  return intensity_;
}
inline void PointXYZIT::set_intensity(::google::protobuf::uint32 value) {
  set_has_intensity();
  intensity_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.intensity)
}

// optional uint64 timestamp = 5 [default = 0];
inline bool PointXYZIT::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PointXYZIT::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PointXYZIT::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PointXYZIT::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 PointXYZIT::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointXYZIT.timestamp)
  return timestamp_;
}
inline void PointXYZIT::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointXYZIT.timestamp)
}

// -------------------------------------------------------------------

// PointCloud

// optional .apollo.common.Header header = 1;
inline bool PointCloud::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointCloud::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointCloud::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointCloud::clear_header() {
  if (header_ != NULL) header_->::apollo::common::Header::Clear();
  clear_has_header();
}
inline const ::apollo::common::Header& PointCloud::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::apollo::common::Header* PointCloud::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::apollo::common::Header;
  // @@protoc_insertion_point(field_mutable:apollo.drivers.PointCloud.header)
  return header_;
}
inline ::apollo::common::Header* PointCloud::release_header() {
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PointCloud::set_allocated_header(::apollo::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.PointCloud.header)
}

// optional string frame_id = 2;
inline bool PointCloud::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointCloud::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointCloud::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointCloud::clear_frame_id() {
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_->clear();
  }
  clear_has_frame_id();
}
inline const ::std::string& PointCloud::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.frame_id)
  return *frame_id_;
}
inline void PointCloud::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.PointCloud.frame_id)
}
inline void PointCloud::set_frame_id(const char* value) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.drivers.PointCloud.frame_id)
}
inline void PointCloud::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.PointCloud.frame_id)
}
inline ::std::string* PointCloud::mutable_frame_id() {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.PointCloud.frame_id)
  return frame_id_;
}
inline ::std::string* PointCloud::release_frame_id() {
  clear_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = frame_id_;
    frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PointCloud::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frame_id_;
  }
  if (frame_id) {
    set_has_frame_id();
    frame_id_ = frame_id;
  } else {
    clear_has_frame_id();
    frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.PointCloud.frame_id)
}

// optional bool is_dense = 3;
inline bool PointCloud::has_is_dense() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointCloud::set_has_is_dense() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointCloud::clear_has_is_dense() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointCloud::clear_is_dense() {
  is_dense_ = false;
  clear_has_is_dense();
}
inline bool PointCloud::is_dense() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.is_dense)
  return is_dense_;
}
inline void PointCloud::set_is_dense(bool value) {
  set_has_is_dense();
  is_dense_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointCloud.is_dense)
}

// repeated .apollo.drivers.PointXYZIT point = 4;
inline int PointCloud::point_size() const {
  return point_.size();
}
inline void PointCloud::clear_point() {
  point_.Clear();
}
inline const ::apollo::drivers::PointXYZIT& PointCloud::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.point)
  return point_.Get(index);
}
inline ::apollo::drivers::PointXYZIT* PointCloud::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.PointCloud.point)
  return point_.Mutable(index);
}
inline ::apollo::drivers::PointXYZIT* PointCloud::add_point() {
  // @@protoc_insertion_point(field_add:apollo.drivers.PointCloud.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::drivers::PointXYZIT >&
PointCloud::point() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.PointCloud.point)
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::drivers::PointXYZIT >*
PointCloud::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.PointCloud.point)
  return &point_;
}

// optional double measurement_time = 5;
inline bool PointCloud::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PointCloud::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PointCloud::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PointCloud::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
inline double PointCloud::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.measurement_time)
  return measurement_time_;
}
inline void PointCloud::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointCloud.measurement_time)
}

// optional uint32 width = 6;
inline bool PointCloud::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PointCloud::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PointCloud::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PointCloud::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 PointCloud::width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.width)
  return width_;
}
inline void PointCloud::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointCloud.width)
}

// optional uint32 height = 7;
inline bool PointCloud::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PointCloud::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PointCloud::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PointCloud::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 PointCloud::height() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.PointCloud.height)
  return height_;
}
inline void PointCloud::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.PointCloud.height)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pointcloud_2eproto__INCLUDED
