// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: conti_radar_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "conti_radar_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace drivers {
namespace conti_radar {

namespace {

const ::google::protobuf::Descriptor* CanConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CanConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContiRadarConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContiRadarConf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OutputType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RcsThreshold_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_conti_5fradar_5fconf_2eproto() {
  protobuf_AddDesc_conti_5fradar_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "conti_radar_conf.proto");
  GOOGLE_CHECK(file != NULL);
  CanConf_descriptor_ = file->message_type(0);
  static const int CanConf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanConf, can_card_parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanConf, enable_debug_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanConf, enable_receiver_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanConf, enable_sender_log_),
  };
  CanConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CanConf_descriptor_,
      CanConf::default_instance_,
      CanConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CanConf));
  RadarConf_descriptor_ = file->message_type(1);
  static const int RadarConf_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, max_distance_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, sensor_id_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, radar_power_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, output_type_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, send_quality_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, send_ext_info_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, sort_index_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, store_in_nvm_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, ctrl_relay_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, rcs_threshold_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, max_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, output_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, radar_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, ctrl_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, send_ext_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, send_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, sort_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, store_in_nvm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, rcs_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, input_send_interval_),
  };
  RadarConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarConf_descriptor_,
      RadarConf::default_instance_,
      RadarConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarConf));
  ContiRadarConf_descriptor_ = file->message_type(2);
  static const int ContiRadarConf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarConf, can_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarConf, radar_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarConf, radar_channel_),
  };
  ContiRadarConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContiRadarConf_descriptor_,
      ContiRadarConf::default_instance_,
      ContiRadarConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContiRadarConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContiRadarConf));
  OutputType_descriptor_ = file->enum_type(0);
  RcsThreshold_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_conti_5fradar_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CanConf_descriptor_, &CanConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarConf_descriptor_, &RadarConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContiRadarConf_descriptor_, &ContiRadarConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_conti_5fradar_5fconf_2eproto() {
  delete CanConf::default_instance_;
  delete CanConf_reflection_;
  delete RadarConf::default_instance_;
  delete RadarConf_reflection_;
  delete ContiRadarConf::default_instance_;
  delete ContiRadarConf_reflection_;
}

void protobuf_AddDesc_conti_5fradar_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::drivers::canbus::protobuf_AddDesc_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026conti_radar_conf.proto\022\032apollo.drivers"
    ".conti_radar\0325modules/drivers/canbus/pro"
    "to/can_card_parameter.proto\"\266\001\n\007CanConf\022"
    "C\n\022can_card_parameter\030\001 \001(\0132\'.apollo.dri"
    "vers.canbus.CANCardParameter\022 \n\021enable_d"
    "ebug_mode\030\002 \001(\010:\005false\022\"\n\023enable_receive"
    "r_log\030\003 \001(\010:\005false\022 \n\021enable_sender_log\030"
    "\004 \001(\010:\005false\"\356\005\n\tRadarConf\022!\n\022max_distan"
    "ce_valid\030\001 \001(\010:\005false\022\036\n\017sensor_id_valid"
    "\030\002 \001(\010:\005false\022 \n\021radar_power_valid\030\003 \001(\010"
    ":\005false\022\037\n\021output_type_valid\030\004 \001(\010:\004true"
    "\022 \n\022send_quality_valid\030\005 \001(\010:\004true\022!\n\023se"
    "nd_ext_info_valid\030\006 \001(\010:\004true\022\037\n\020sort_in"
    "dex_valid\030\007 \001(\010:\005false\022 \n\022store_in_nvm_v"
    "alid\030\010 \001(\010:\004true\022\037\n\020ctrl_relay_valid\030\t \001"
    "(\010:\005false\022!\n\023rcs_threshold_valid\030\n \001(\010:\004"
    "true\022\031\n\014max_distance\030\013 \001(\r:\003248\022\024\n\tsenso"
    "r_id\030\014 \001(\r:\0010\022P\n\013output_type\030\r \001(\0162&.apo"
    "llo.drivers.conti_radar.OutputType:\023OUTP"
    "UT_TYPE_OBJECTS\022\026\n\013radar_power\030\016 \001(\r:\0010\022"
    "\025\n\nctrl_relay\030\017 \001(\r:\0010\022\033\n\rsend_ext_info\030"
    "\020 \001(\010:\004true\022\032\n\014send_quality\030\021 \001(\010:\004true\022"
    "\025\n\nsort_index\030\022 \001(\r:\0010\022\027\n\014store_in_nvm\030\023"
    " \001(\r:\0011\022W\n\rrcs_threshold\030\024 \001(\0162(.apollo."
    "drivers.conti_radar.RcsThreshold:\026RCS_TH"
    "RESHOLD_STANDARD\022\033\n\023input_send_interval\030"
    "\025 \001(\004\"\231\001\n\016ContiRadarConf\0225\n\010can_conf\030\001 \001"
    "(\0132#.apollo.drivers.conti_radar.CanConf\022"
    "9\n\nradar_conf\030\002 \001(\0132%.apollo.drivers.con"
    "ti_radar.RadarConf\022\025\n\rradar_channel\030\003 \001("
    "\t*l\n\nOutputType\022\024\n\020OUTPUT_TYPE_NONE\020\000\022\027\n"
    "\023OUTPUT_TYPE_OBJECTS\020\001\022\030\n\024OUTPUT_TYPE_CL"
    "USTERS\020\002\022\025\n\021OUTPUT_TYPE_ERROR\020\003*g\n\014RcsTh"
    "reshold\022\032\n\026RCS_THRESHOLD_STANDARD\020\000\022\"\n\036R"
    "CS_THRESHOLD_HIGH_SENSITIVITY\020\001\022\027\n\023RCS_T"
    "HRESHOLD_ERROR\020\002", 1416);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "conti_radar_conf.proto", &protobuf_RegisterTypes);
  CanConf::default_instance_ = new CanConf();
  RadarConf::default_instance_ = new RadarConf();
  ContiRadarConf::default_instance_ = new ContiRadarConf();
  CanConf::default_instance_->InitAsDefaultInstance();
  RadarConf::default_instance_->InitAsDefaultInstance();
  ContiRadarConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_conti_5fradar_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_conti_5fradar_5fconf_2eproto {
  StaticDescriptorInitializer_conti_5fradar_5fconf_2eproto() {
    protobuf_AddDesc_conti_5fradar_5fconf_2eproto();
  }
} static_descriptor_initializer_conti_5fradar_5fconf_2eproto_;
const ::google::protobuf::EnumDescriptor* OutputType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputType_descriptor_;
}
bool OutputType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RcsThreshold_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RcsThreshold_descriptor_;
}
bool RcsThreshold_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CanConf::kCanCardParameterFieldNumber;
const int CanConf::kEnableDebugModeFieldNumber;
const int CanConf::kEnableReceiverLogFieldNumber;
const int CanConf::kEnableSenderLogFieldNumber;
#endif  // !_MSC_VER

CanConf::CanConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.conti_radar.CanConf)
}

void CanConf::InitAsDefaultInstance() {
  can_card_parameter_ = const_cast< ::apollo::drivers::canbus::CANCardParameter*>(&::apollo::drivers::canbus::CANCardParameter::default_instance());
}

CanConf::CanConf(const CanConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.conti_radar.CanConf)
}

void CanConf::SharedCtor() {
  _cached_size_ = 0;
  can_card_parameter_ = NULL;
  enable_debug_mode_ = false;
  enable_receiver_log_ = false;
  enable_sender_log_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CanConf::~CanConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.conti_radar.CanConf)
  SharedDtor();
}

void CanConf::SharedDtor() {
  if (this != default_instance_) {
    delete can_card_parameter_;
  }
}

void CanConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CanConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CanConf_descriptor_;
}

const CanConf& CanConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_conti_5fradar_5fconf_2eproto();
  return *default_instance_;
}

CanConf* CanConf::default_instance_ = NULL;

CanConf* CanConf::New() const {
  return new CanConf;
}

void CanConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CanConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(enable_debug_mode_, enable_sender_log_);
    if (has_can_card_parameter()) {
      if (can_card_parameter_ != NULL) can_card_parameter_->::apollo::drivers::canbus::CANCardParameter::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CanConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.conti_radar.CanConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_can_card_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enable_debug_mode;
        break;
      }

      // optional bool enable_debug_mode = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_enable_debug_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_debug_mode_)));
          set_has_enable_debug_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enable_receiver_log;
        break;
      }

      // optional bool enable_receiver_log = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_enable_receiver_log:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_receiver_log_)));
          set_has_enable_receiver_log();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enable_sender_log;
        break;
      }

      // optional bool enable_sender_log = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_enable_sender_log:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_sender_log_)));
          set_has_enable_sender_log();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.conti_radar.CanConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.conti_radar.CanConf)
  return false;
#undef DO_
}

void CanConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.conti_radar.CanConf)
  // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
  if (has_can_card_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->can_card_parameter(), output);
  }

  // optional bool enable_debug_mode = 2 [default = false];
  if (has_enable_debug_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_debug_mode(), output);
  }

  // optional bool enable_receiver_log = 3 [default = false];
  if (has_enable_receiver_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_receiver_log(), output);
  }

  // optional bool enable_sender_log = 4 [default = false];
  if (has_enable_sender_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable_sender_log(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.conti_radar.CanConf)
}

::google::protobuf::uint8* CanConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.conti_radar.CanConf)
  // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
  if (has_can_card_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->can_card_parameter(), target);
  }

  // optional bool enable_debug_mode = 2 [default = false];
  if (has_enable_debug_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_debug_mode(), target);
  }

  // optional bool enable_receiver_log = 3 [default = false];
  if (has_enable_receiver_log()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_receiver_log(), target);
  }

  // optional bool enable_sender_log = 4 [default = false];
  if (has_enable_sender_log()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enable_sender_log(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.conti_radar.CanConf)
  return target;
}

int CanConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
    if (has_can_card_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->can_card_parameter());
    }

    // optional bool enable_debug_mode = 2 [default = false];
    if (has_enable_debug_mode()) {
      total_size += 1 + 1;
    }

    // optional bool enable_receiver_log = 3 [default = false];
    if (has_enable_receiver_log()) {
      total_size += 1 + 1;
    }

    // optional bool enable_sender_log = 4 [default = false];
    if (has_enable_sender_log()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CanConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CanConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CanConf::MergeFrom(const CanConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_can_card_parameter()) {
      mutable_can_card_parameter()->::apollo::drivers::canbus::CANCardParameter::MergeFrom(from.can_card_parameter());
    }
    if (from.has_enable_debug_mode()) {
      set_enable_debug_mode(from.enable_debug_mode());
    }
    if (from.has_enable_receiver_log()) {
      set_enable_receiver_log(from.enable_receiver_log());
    }
    if (from.has_enable_sender_log()) {
      set_enable_sender_log(from.enable_sender_log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CanConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanConf::CopyFrom(const CanConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanConf::IsInitialized() const {

  return true;
}

void CanConf::Swap(CanConf* other) {
  if (other != this) {
    std::swap(can_card_parameter_, other->can_card_parameter_);
    std::swap(enable_debug_mode_, other->enable_debug_mode_);
    std::swap(enable_receiver_log_, other->enable_receiver_log_);
    std::swap(enable_sender_log_, other->enable_sender_log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CanConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CanConf_descriptor_;
  metadata.reflection = CanConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarConf::kMaxDistanceValidFieldNumber;
const int RadarConf::kSensorIdValidFieldNumber;
const int RadarConf::kRadarPowerValidFieldNumber;
const int RadarConf::kOutputTypeValidFieldNumber;
const int RadarConf::kSendQualityValidFieldNumber;
const int RadarConf::kSendExtInfoValidFieldNumber;
const int RadarConf::kSortIndexValidFieldNumber;
const int RadarConf::kStoreInNvmValidFieldNumber;
const int RadarConf::kCtrlRelayValidFieldNumber;
const int RadarConf::kRcsThresholdValidFieldNumber;
const int RadarConf::kMaxDistanceFieldNumber;
const int RadarConf::kSensorIdFieldNumber;
const int RadarConf::kOutputTypeFieldNumber;
const int RadarConf::kRadarPowerFieldNumber;
const int RadarConf::kCtrlRelayFieldNumber;
const int RadarConf::kSendExtInfoFieldNumber;
const int RadarConf::kSendQualityFieldNumber;
const int RadarConf::kSortIndexFieldNumber;
const int RadarConf::kStoreInNvmFieldNumber;
const int RadarConf::kRcsThresholdFieldNumber;
const int RadarConf::kInputSendIntervalFieldNumber;
#endif  // !_MSC_VER

RadarConf::RadarConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.conti_radar.RadarConf)
}

void RadarConf::InitAsDefaultInstance() {
}

RadarConf::RadarConf(const RadarConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.conti_radar.RadarConf)
}

void RadarConf::SharedCtor() {
  _cached_size_ = 0;
  max_distance_valid_ = false;
  sensor_id_valid_ = false;
  radar_power_valid_ = false;
  output_type_valid_ = true;
  send_quality_valid_ = true;
  send_ext_info_valid_ = true;
  sort_index_valid_ = false;
  store_in_nvm_valid_ = true;
  ctrl_relay_valid_ = false;
  rcs_threshold_valid_ = true;
  max_distance_ = 248u;
  sensor_id_ = 0u;
  output_type_ = 1;
  radar_power_ = 0u;
  ctrl_relay_ = 0u;
  send_ext_info_ = true;
  send_quality_ = true;
  sort_index_ = 0u;
  store_in_nvm_ = 1u;
  rcs_threshold_ = 0;
  input_send_interval_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarConf::~RadarConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.conti_radar.RadarConf)
  SharedDtor();
}

void RadarConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RadarConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarConf_descriptor_;
}

const RadarConf& RadarConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_conti_5fradar_5fconf_2eproto();
  return *default_instance_;
}

RadarConf* RadarConf::default_instance_ = NULL;

RadarConf* RadarConf::New() const {
  return new RadarConf;
}

void RadarConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(max_distance_valid_, radar_power_valid_);
    output_type_valid_ = true;
    send_quality_valid_ = true;
    send_ext_info_valid_ = true;
    sort_index_valid_ = false;
    store_in_nvm_valid_ = true;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(radar_power_, ctrl_relay_);
    ctrl_relay_valid_ = false;
    rcs_threshold_valid_ = true;
    max_distance_ = 248u;
    sensor_id_ = 0u;
    output_type_ = 1;
    send_ext_info_ = true;
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(input_send_interval_, rcs_threshold_);
    send_quality_ = true;
    sort_index_ = 0u;
    store_in_nvm_ = 1u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.conti_radar.RadarConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool max_distance_valid = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &max_distance_valid_)));
          set_has_max_distance_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sensor_id_valid;
        break;
      }

      // optional bool sensor_id_valid = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_sensor_id_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sensor_id_valid_)));
          set_has_sensor_id_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_radar_power_valid;
        break;
      }

      // optional bool radar_power_valid = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_radar_power_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radar_power_valid_)));
          set_has_radar_power_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_output_type_valid;
        break;
      }

      // optional bool output_type_valid = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_output_type_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_type_valid_)));
          set_has_output_type_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_send_quality_valid;
        break;
      }

      // optional bool send_quality_valid = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_send_quality_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_quality_valid_)));
          set_has_send_quality_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_send_ext_info_valid;
        break;
      }

      // optional bool send_ext_info_valid = 6 [default = true];
      case 6: {
        if (tag == 48) {
         parse_send_ext_info_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_ext_info_valid_)));
          set_has_send_ext_info_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sort_index_valid;
        break;
      }

      // optional bool sort_index_valid = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_sort_index_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sort_index_valid_)));
          set_has_sort_index_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_store_in_nvm_valid;
        break;
      }

      // optional bool store_in_nvm_valid = 8 [default = true];
      case 8: {
        if (tag == 64) {
         parse_store_in_nvm_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &store_in_nvm_valid_)));
          set_has_store_in_nvm_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ctrl_relay_valid;
        break;
      }

      // optional bool ctrl_relay_valid = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_ctrl_relay_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ctrl_relay_valid_)));
          set_has_ctrl_relay_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_rcs_threshold_valid;
        break;
      }

      // optional bool rcs_threshold_valid = 10 [default = true];
      case 10: {
        if (tag == 80) {
         parse_rcs_threshold_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rcs_threshold_valid_)));
          set_has_rcs_threshold_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_max_distance;
        break;
      }

      // optional uint32 max_distance = 11 [default = 248];
      case 11: {
        if (tag == 88) {
         parse_max_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_distance_)));
          set_has_max_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_sensor_id;
        break;
      }

      // optional uint32 sensor_id = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_sensor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_id_)));
          set_has_sensor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_output_type;
        break;
      }

      // optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
      case 13: {
        if (tag == 104) {
         parse_output_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::conti_radar::OutputType_IsValid(value)) {
            set_output_type(static_cast< ::apollo::drivers::conti_radar::OutputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_radar_power;
        break;
      }

      // optional uint32 radar_power = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_radar_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radar_power_)));
          set_has_radar_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ctrl_relay;
        break;
      }

      // optional uint32 ctrl_relay = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_ctrl_relay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctrl_relay_)));
          set_has_ctrl_relay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_send_ext_info;
        break;
      }

      // optional bool send_ext_info = 16 [default = true];
      case 16: {
        if (tag == 128) {
         parse_send_ext_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_ext_info_)));
          set_has_send_ext_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_send_quality;
        break;
      }

      // optional bool send_quality = 17 [default = true];
      case 17: {
        if (tag == 136) {
         parse_send_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_quality_)));
          set_has_send_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_sort_index;
        break;
      }

      // optional uint32 sort_index = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_sort_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_index_)));
          set_has_sort_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_store_in_nvm;
        break;
      }

      // optional uint32 store_in_nvm = 19 [default = 1];
      case 19: {
        if (tag == 152) {
         parse_store_in_nvm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_in_nvm_)));
          set_has_store_in_nvm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_rcs_threshold;
        break;
      }

      // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
      case 20: {
        if (tag == 160) {
         parse_rcs_threshold:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::conti_radar::RcsThreshold_IsValid(value)) {
            set_rcs_threshold(static_cast< ::apollo::drivers::conti_radar::RcsThreshold >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_input_send_interval;
        break;
      }

      // optional uint64 input_send_interval = 21;
      case 21: {
        if (tag == 168) {
         parse_input_send_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &input_send_interval_)));
          set_has_input_send_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.conti_radar.RadarConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.conti_radar.RadarConf)
  return false;
#undef DO_
}

void RadarConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.conti_radar.RadarConf)
  // optional bool max_distance_valid = 1 [default = false];
  if (has_max_distance_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->max_distance_valid(), output);
  }

  // optional bool sensor_id_valid = 2 [default = false];
  if (has_sensor_id_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sensor_id_valid(), output);
  }

  // optional bool radar_power_valid = 3 [default = false];
  if (has_radar_power_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->radar_power_valid(), output);
  }

  // optional bool output_type_valid = 4 [default = true];
  if (has_output_type_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->output_type_valid(), output);
  }

  // optional bool send_quality_valid = 5 [default = true];
  if (has_send_quality_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->send_quality_valid(), output);
  }

  // optional bool send_ext_info_valid = 6 [default = true];
  if (has_send_ext_info_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->send_ext_info_valid(), output);
  }

  // optional bool sort_index_valid = 7 [default = false];
  if (has_sort_index_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sort_index_valid(), output);
  }

  // optional bool store_in_nvm_valid = 8 [default = true];
  if (has_store_in_nvm_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->store_in_nvm_valid(), output);
  }

  // optional bool ctrl_relay_valid = 9 [default = false];
  if (has_ctrl_relay_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ctrl_relay_valid(), output);
  }

  // optional bool rcs_threshold_valid = 10 [default = true];
  if (has_rcs_threshold_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->rcs_threshold_valid(), output);
  }

  // optional uint32 max_distance = 11 [default = 248];
  if (has_max_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max_distance(), output);
  }

  // optional uint32 sensor_id = 12 [default = 0];
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sensor_id(), output);
  }

  // optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
  if (has_output_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->output_type(), output);
  }

  // optional uint32 radar_power = 14 [default = 0];
  if (has_radar_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->radar_power(), output);
  }

  // optional uint32 ctrl_relay = 15 [default = 0];
  if (has_ctrl_relay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ctrl_relay(), output);
  }

  // optional bool send_ext_info = 16 [default = true];
  if (has_send_ext_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->send_ext_info(), output);
  }

  // optional bool send_quality = 17 [default = true];
  if (has_send_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->send_quality(), output);
  }

  // optional uint32 sort_index = 18 [default = 0];
  if (has_sort_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->sort_index(), output);
  }

  // optional uint32 store_in_nvm = 19 [default = 1];
  if (has_store_in_nvm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->store_in_nvm(), output);
  }

  // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
  if (has_rcs_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->rcs_threshold(), output);
  }

  // optional uint64 input_send_interval = 21;
  if (has_input_send_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->input_send_interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.conti_radar.RadarConf)
}

::google::protobuf::uint8* RadarConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.conti_radar.RadarConf)
  // optional bool max_distance_valid = 1 [default = false];
  if (has_max_distance_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->max_distance_valid(), target);
  }

  // optional bool sensor_id_valid = 2 [default = false];
  if (has_sensor_id_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sensor_id_valid(), target);
  }

  // optional bool radar_power_valid = 3 [default = false];
  if (has_radar_power_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->radar_power_valid(), target);
  }

  // optional bool output_type_valid = 4 [default = true];
  if (has_output_type_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->output_type_valid(), target);
  }

  // optional bool send_quality_valid = 5 [default = true];
  if (has_send_quality_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->send_quality_valid(), target);
  }

  // optional bool send_ext_info_valid = 6 [default = true];
  if (has_send_ext_info_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->send_ext_info_valid(), target);
  }

  // optional bool sort_index_valid = 7 [default = false];
  if (has_sort_index_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sort_index_valid(), target);
  }

  // optional bool store_in_nvm_valid = 8 [default = true];
  if (has_store_in_nvm_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->store_in_nvm_valid(), target);
  }

  // optional bool ctrl_relay_valid = 9 [default = false];
  if (has_ctrl_relay_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ctrl_relay_valid(), target);
  }

  // optional bool rcs_threshold_valid = 10 [default = true];
  if (has_rcs_threshold_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->rcs_threshold_valid(), target);
  }

  // optional uint32 max_distance = 11 [default = 248];
  if (has_max_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max_distance(), target);
  }

  // optional uint32 sensor_id = 12 [default = 0];
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sensor_id(), target);
  }

  // optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
  if (has_output_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->output_type(), target);
  }

  // optional uint32 radar_power = 14 [default = 0];
  if (has_radar_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->radar_power(), target);
  }

  // optional uint32 ctrl_relay = 15 [default = 0];
  if (has_ctrl_relay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ctrl_relay(), target);
  }

  // optional bool send_ext_info = 16 [default = true];
  if (has_send_ext_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->send_ext_info(), target);
  }

  // optional bool send_quality = 17 [default = true];
  if (has_send_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->send_quality(), target);
  }

  // optional uint32 sort_index = 18 [default = 0];
  if (has_sort_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->sort_index(), target);
  }

  // optional uint32 store_in_nvm = 19 [default = 1];
  if (has_store_in_nvm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->store_in_nvm(), target);
  }

  // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
  if (has_rcs_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->rcs_threshold(), target);
  }

  // optional uint64 input_send_interval = 21;
  if (has_input_send_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->input_send_interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.conti_radar.RadarConf)
  return target;
}

int RadarConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool max_distance_valid = 1 [default = false];
    if (has_max_distance_valid()) {
      total_size += 1 + 1;
    }

    // optional bool sensor_id_valid = 2 [default = false];
    if (has_sensor_id_valid()) {
      total_size += 1 + 1;
    }

    // optional bool radar_power_valid = 3 [default = false];
    if (has_radar_power_valid()) {
      total_size += 1 + 1;
    }

    // optional bool output_type_valid = 4 [default = true];
    if (has_output_type_valid()) {
      total_size += 1 + 1;
    }

    // optional bool send_quality_valid = 5 [default = true];
    if (has_send_quality_valid()) {
      total_size += 1 + 1;
    }

    // optional bool send_ext_info_valid = 6 [default = true];
    if (has_send_ext_info_valid()) {
      total_size += 1 + 1;
    }

    // optional bool sort_index_valid = 7 [default = false];
    if (has_sort_index_valid()) {
      total_size += 1 + 1;
    }

    // optional bool store_in_nvm_valid = 8 [default = true];
    if (has_store_in_nvm_valid()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool ctrl_relay_valid = 9 [default = false];
    if (has_ctrl_relay_valid()) {
      total_size += 1 + 1;
    }

    // optional bool rcs_threshold_valid = 10 [default = true];
    if (has_rcs_threshold_valid()) {
      total_size += 1 + 1;
    }

    // optional uint32 max_distance = 11 [default = 248];
    if (has_max_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_distance());
    }

    // optional uint32 sensor_id = 12 [default = 0];
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor_id());
    }

    // optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
    if (has_output_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_type());
    }

    // optional uint32 radar_power = 14 [default = 0];
    if (has_radar_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radar_power());
    }

    // optional uint32 ctrl_relay = 15 [default = 0];
    if (has_ctrl_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ctrl_relay());
    }

    // optional bool send_ext_info = 16 [default = true];
    if (has_send_ext_info()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool send_quality = 17 [default = true];
    if (has_send_quality()) {
      total_size += 2 + 1;
    }

    // optional uint32 sort_index = 18 [default = 0];
    if (has_sort_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sort_index());
    }

    // optional uint32 store_in_nvm = 19 [default = 1];
    if (has_store_in_nvm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_in_nvm());
    }

    // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
    if (has_rcs_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rcs_threshold());
    }

    // optional uint64 input_send_interval = 21;
    if (has_input_send_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->input_send_interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarConf::MergeFrom(const RadarConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_distance_valid()) {
      set_max_distance_valid(from.max_distance_valid());
    }
    if (from.has_sensor_id_valid()) {
      set_sensor_id_valid(from.sensor_id_valid());
    }
    if (from.has_radar_power_valid()) {
      set_radar_power_valid(from.radar_power_valid());
    }
    if (from.has_output_type_valid()) {
      set_output_type_valid(from.output_type_valid());
    }
    if (from.has_send_quality_valid()) {
      set_send_quality_valid(from.send_quality_valid());
    }
    if (from.has_send_ext_info_valid()) {
      set_send_ext_info_valid(from.send_ext_info_valid());
    }
    if (from.has_sort_index_valid()) {
      set_sort_index_valid(from.sort_index_valid());
    }
    if (from.has_store_in_nvm_valid()) {
      set_store_in_nvm_valid(from.store_in_nvm_valid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ctrl_relay_valid()) {
      set_ctrl_relay_valid(from.ctrl_relay_valid());
    }
    if (from.has_rcs_threshold_valid()) {
      set_rcs_threshold_valid(from.rcs_threshold_valid());
    }
    if (from.has_max_distance()) {
      set_max_distance(from.max_distance());
    }
    if (from.has_sensor_id()) {
      set_sensor_id(from.sensor_id());
    }
    if (from.has_output_type()) {
      set_output_type(from.output_type());
    }
    if (from.has_radar_power()) {
      set_radar_power(from.radar_power());
    }
    if (from.has_ctrl_relay()) {
      set_ctrl_relay(from.ctrl_relay());
    }
    if (from.has_send_ext_info()) {
      set_send_ext_info(from.send_ext_info());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_send_quality()) {
      set_send_quality(from.send_quality());
    }
    if (from.has_sort_index()) {
      set_sort_index(from.sort_index());
    }
    if (from.has_store_in_nvm()) {
      set_store_in_nvm(from.store_in_nvm());
    }
    if (from.has_rcs_threshold()) {
      set_rcs_threshold(from.rcs_threshold());
    }
    if (from.has_input_send_interval()) {
      set_input_send_interval(from.input_send_interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarConf::CopyFrom(const RadarConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarConf::IsInitialized() const {

  return true;
}

void RadarConf::Swap(RadarConf* other) {
  if (other != this) {
    std::swap(max_distance_valid_, other->max_distance_valid_);
    std::swap(sensor_id_valid_, other->sensor_id_valid_);
    std::swap(radar_power_valid_, other->radar_power_valid_);
    std::swap(output_type_valid_, other->output_type_valid_);
    std::swap(send_quality_valid_, other->send_quality_valid_);
    std::swap(send_ext_info_valid_, other->send_ext_info_valid_);
    std::swap(sort_index_valid_, other->sort_index_valid_);
    std::swap(store_in_nvm_valid_, other->store_in_nvm_valid_);
    std::swap(ctrl_relay_valid_, other->ctrl_relay_valid_);
    std::swap(rcs_threshold_valid_, other->rcs_threshold_valid_);
    std::swap(max_distance_, other->max_distance_);
    std::swap(sensor_id_, other->sensor_id_);
    std::swap(output_type_, other->output_type_);
    std::swap(radar_power_, other->radar_power_);
    std::swap(ctrl_relay_, other->ctrl_relay_);
    std::swap(send_ext_info_, other->send_ext_info_);
    std::swap(send_quality_, other->send_quality_);
    std::swap(sort_index_, other->sort_index_);
    std::swap(store_in_nvm_, other->store_in_nvm_);
    std::swap(rcs_threshold_, other->rcs_threshold_);
    std::swap(input_send_interval_, other->input_send_interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarConf_descriptor_;
  metadata.reflection = RadarConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContiRadarConf::kCanConfFieldNumber;
const int ContiRadarConf::kRadarConfFieldNumber;
const int ContiRadarConf::kRadarChannelFieldNumber;
#endif  // !_MSC_VER

ContiRadarConf::ContiRadarConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.conti_radar.ContiRadarConf)
}

void ContiRadarConf::InitAsDefaultInstance() {
  can_conf_ = const_cast< ::apollo::drivers::conti_radar::CanConf*>(&::apollo::drivers::conti_radar::CanConf::default_instance());
  radar_conf_ = const_cast< ::apollo::drivers::conti_radar::RadarConf*>(&::apollo::drivers::conti_radar::RadarConf::default_instance());
}

ContiRadarConf::ContiRadarConf(const ContiRadarConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.conti_radar.ContiRadarConf)
}

void ContiRadarConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  can_conf_ = NULL;
  radar_conf_ = NULL;
  radar_channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContiRadarConf::~ContiRadarConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.conti_radar.ContiRadarConf)
  SharedDtor();
}

void ContiRadarConf::SharedDtor() {
  if (radar_channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radar_channel_;
  }
  if (this != default_instance_) {
    delete can_conf_;
    delete radar_conf_;
  }
}

void ContiRadarConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContiRadarConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContiRadarConf_descriptor_;
}

const ContiRadarConf& ContiRadarConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_conti_5fradar_5fconf_2eproto();
  return *default_instance_;
}

ContiRadarConf* ContiRadarConf::default_instance_ = NULL;

ContiRadarConf* ContiRadarConf::New() const {
  return new ContiRadarConf;
}

void ContiRadarConf::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_can_conf()) {
      if (can_conf_ != NULL) can_conf_->::apollo::drivers::conti_radar::CanConf::Clear();
    }
    if (has_radar_conf()) {
      if (radar_conf_ != NULL) radar_conf_->::apollo::drivers::conti_radar::RadarConf::Clear();
    }
    if (has_radar_channel()) {
      if (radar_channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radar_channel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContiRadarConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.conti_radar.ContiRadarConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_can_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_radar_conf;
        break;
      }

      // optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
      case 2: {
        if (tag == 18) {
         parse_radar_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radar_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_radar_channel;
        break;
      }

      // optional string radar_channel = 3;
      case 3: {
        if (tag == 26) {
         parse_radar_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radar_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radar_channel().data(), this->radar_channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radar_channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.conti_radar.ContiRadarConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.conti_radar.ContiRadarConf)
  return false;
#undef DO_
}

void ContiRadarConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.conti_radar.ContiRadarConf)
  // optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
  if (has_can_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->can_conf(), output);
  }

  // optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
  if (has_radar_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->radar_conf(), output);
  }

  // optional string radar_channel = 3;
  if (has_radar_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radar_channel().data(), this->radar_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radar_channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->radar_channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.conti_radar.ContiRadarConf)
}

::google::protobuf::uint8* ContiRadarConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.conti_radar.ContiRadarConf)
  // optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
  if (has_can_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->can_conf(), target);
  }

  // optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
  if (has_radar_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->radar_conf(), target);
  }

  // optional string radar_channel = 3;
  if (has_radar_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radar_channel().data(), this->radar_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radar_channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->radar_channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.conti_radar.ContiRadarConf)
  return target;
}

int ContiRadarConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
    if (has_can_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->can_conf());
    }

    // optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
    if (has_radar_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radar_conf());
    }

    // optional string radar_channel = 3;
    if (has_radar_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radar_channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContiRadarConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContiRadarConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContiRadarConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContiRadarConf::MergeFrom(const ContiRadarConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_can_conf()) {
      mutable_can_conf()->::apollo::drivers::conti_radar::CanConf::MergeFrom(from.can_conf());
    }
    if (from.has_radar_conf()) {
      mutable_radar_conf()->::apollo::drivers::conti_radar::RadarConf::MergeFrom(from.radar_conf());
    }
    if (from.has_radar_channel()) {
      set_radar_channel(from.radar_channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContiRadarConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContiRadarConf::CopyFrom(const ContiRadarConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContiRadarConf::IsInitialized() const {

  return true;
}

void ContiRadarConf::Swap(ContiRadarConf* other) {
  if (other != this) {
    std::swap(can_conf_, other->can_conf_);
    std::swap(radar_conf_, other->radar_conf_);
    std::swap(radar_channel_, other->radar_channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContiRadarConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContiRadarConf_descriptor_;
  metadata.reflection = ContiRadarConf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace conti_radar
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
