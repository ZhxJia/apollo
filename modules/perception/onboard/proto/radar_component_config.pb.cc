// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: radar_component_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "radar_component_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace onboard {

namespace {

const ::google::protobuf::Descriptor* RadarComponentConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarComponentConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_radar_5fcomponent_5fconfig_2eproto() {
  protobuf_AddDesc_radar_5fcomponent_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "radar_component_config.proto");
  GOOGLE_CHECK(file != NULL);
  RadarComponentConfig_descriptor_ = file->message_type(0);
  static const int RadarComponentConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarComponentConfig, radar_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarComponentConfig, tf_child_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarComponentConfig, radar_forward_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarComponentConfig, radar_preprocessor_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarComponentConfig, radar_perception_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarComponentConfig, radar_pipeline_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarComponentConfig, odometry_channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarComponentConfig, output_channel_name_),
  };
  RadarComponentConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarComponentConfig_descriptor_,
      RadarComponentConfig::default_instance_,
      RadarComponentConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarComponentConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarComponentConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarComponentConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_radar_5fcomponent_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarComponentConfig_descriptor_, &RadarComponentConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_radar_5fcomponent_5fconfig_2eproto() {
  delete RadarComponentConfig::default_instance_;
  delete RadarComponentConfig_reflection_;
}

void protobuf_AddDesc_radar_5fcomponent_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034radar_component_config.proto\022\031apollo.p"
    "erception.onboard\"\202\002\n\024RadarComponentConf"
    "ig\022\022\n\nradar_name\030\001 \001(\t\022\031\n\021tf_child_frame"
    "_id\030\002 \001(\t\022\036\n\026radar_forward_distance\030\003 \001("
    "\001\022!\n\031radar_preprocessor_method\030\004 \001(\t\022\037\n\027"
    "radar_perception_method\030\005 \001(\t\022\033\n\023radar_p"
    "ipeline_name\030\006 \001(\t\022\035\n\025odometry_channel_n"
    "ame\030\007 \001(\t\022\033\n\023output_channel_name\030\010 \001(\t", 318);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "radar_component_config.proto", &protobuf_RegisterTypes);
  RadarComponentConfig::default_instance_ = new RadarComponentConfig();
  RadarComponentConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_radar_5fcomponent_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_radar_5fcomponent_5fconfig_2eproto {
  StaticDescriptorInitializer_radar_5fcomponent_5fconfig_2eproto() {
    protobuf_AddDesc_radar_5fcomponent_5fconfig_2eproto();
  }
} static_descriptor_initializer_radar_5fcomponent_5fconfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RadarComponentConfig::kRadarNameFieldNumber;
const int RadarComponentConfig::kTfChildFrameIdFieldNumber;
const int RadarComponentConfig::kRadarForwardDistanceFieldNumber;
const int RadarComponentConfig::kRadarPreprocessorMethodFieldNumber;
const int RadarComponentConfig::kRadarPerceptionMethodFieldNumber;
const int RadarComponentConfig::kRadarPipelineNameFieldNumber;
const int RadarComponentConfig::kOdometryChannelNameFieldNumber;
const int RadarComponentConfig::kOutputChannelNameFieldNumber;
#endif  // !_MSC_VER

RadarComponentConfig::RadarComponentConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.onboard.RadarComponentConfig)
}

void RadarComponentConfig::InitAsDefaultInstance() {
}

RadarComponentConfig::RadarComponentConfig(const RadarComponentConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.onboard.RadarComponentConfig)
}

void RadarComponentConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  radar_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tf_child_frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radar_forward_distance_ = 0;
  radar_preprocessor_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radar_perception_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radar_pipeline_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  odometry_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarComponentConfig::~RadarComponentConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.onboard.RadarComponentConfig)
  SharedDtor();
}

void RadarComponentConfig::SharedDtor() {
  if (radar_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radar_name_;
  }
  if (tf_child_frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tf_child_frame_id_;
  }
  if (radar_preprocessor_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radar_preprocessor_method_;
  }
  if (radar_perception_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radar_perception_method_;
  }
  if (radar_pipeline_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radar_pipeline_name_;
  }
  if (odometry_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete odometry_channel_name_;
  }
  if (output_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete output_channel_name_;
  }
  if (this != default_instance_) {
  }
}

void RadarComponentConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarComponentConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarComponentConfig_descriptor_;
}

const RadarComponentConfig& RadarComponentConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_radar_5fcomponent_5fconfig_2eproto();
  return *default_instance_;
}

RadarComponentConfig* RadarComponentConfig::default_instance_ = NULL;

RadarComponentConfig* RadarComponentConfig::New() const {
  return new RadarComponentConfig;
}

void RadarComponentConfig::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_radar_name()) {
      if (radar_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radar_name_->clear();
      }
    }
    if (has_tf_child_frame_id()) {
      if (tf_child_frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tf_child_frame_id_->clear();
      }
    }
    radar_forward_distance_ = 0;
    if (has_radar_preprocessor_method()) {
      if (radar_preprocessor_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radar_preprocessor_method_->clear();
      }
    }
    if (has_radar_perception_method()) {
      if (radar_perception_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radar_perception_method_->clear();
      }
    }
    if (has_radar_pipeline_name()) {
      if (radar_pipeline_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radar_pipeline_name_->clear();
      }
    }
    if (has_odometry_channel_name()) {
      if (odometry_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        odometry_channel_name_->clear();
      }
    }
    if (has_output_channel_name()) {
      if (output_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        output_channel_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarComponentConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.onboard.RadarComponentConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string radar_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radar_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radar_name().data(), this->radar_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radar_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tf_child_frame_id;
        break;
      }

      // optional string tf_child_frame_id = 2;
      case 2: {
        if (tag == 18) {
         parse_tf_child_frame_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tf_child_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tf_child_frame_id().data(), this->tf_child_frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tf_child_frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_radar_forward_distance;
        break;
      }

      // optional double radar_forward_distance = 3;
      case 3: {
        if (tag == 25) {
         parse_radar_forward_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radar_forward_distance_)));
          set_has_radar_forward_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_radar_preprocessor_method;
        break;
      }

      // optional string radar_preprocessor_method = 4;
      case 4: {
        if (tag == 34) {
         parse_radar_preprocessor_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radar_preprocessor_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radar_preprocessor_method().data(), this->radar_preprocessor_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radar_preprocessor_method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_radar_perception_method;
        break;
      }

      // optional string radar_perception_method = 5;
      case 5: {
        if (tag == 42) {
         parse_radar_perception_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radar_perception_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radar_perception_method().data(), this->radar_perception_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radar_perception_method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_radar_pipeline_name;
        break;
      }

      // optional string radar_pipeline_name = 6;
      case 6: {
        if (tag == 50) {
         parse_radar_pipeline_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radar_pipeline_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radar_pipeline_name().data(), this->radar_pipeline_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radar_pipeline_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_odometry_channel_name;
        break;
      }

      // optional string odometry_channel_name = 7;
      case 7: {
        if (tag == 58) {
         parse_odometry_channel_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_odometry_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->odometry_channel_name().data(), this->odometry_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "odometry_channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_output_channel_name;
        break;
      }

      // optional string output_channel_name = 8;
      case 8: {
        if (tag == 66) {
         parse_output_channel_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_channel_name().data(), this->output_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "output_channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.onboard.RadarComponentConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.onboard.RadarComponentConfig)
  return false;
#undef DO_
}

void RadarComponentConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.onboard.RadarComponentConfig)
  // optional string radar_name = 1;
  if (has_radar_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radar_name().data(), this->radar_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radar_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->radar_name(), output);
  }

  // optional string tf_child_frame_id = 2;
  if (has_tf_child_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tf_child_frame_id().data(), this->tf_child_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tf_child_frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tf_child_frame_id(), output);
  }

  // optional double radar_forward_distance = 3;
  if (has_radar_forward_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radar_forward_distance(), output);
  }

  // optional string radar_preprocessor_method = 4;
  if (has_radar_preprocessor_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radar_preprocessor_method().data(), this->radar_preprocessor_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radar_preprocessor_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->radar_preprocessor_method(), output);
  }

  // optional string radar_perception_method = 5;
  if (has_radar_perception_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radar_perception_method().data(), this->radar_perception_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radar_perception_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->radar_perception_method(), output);
  }

  // optional string radar_pipeline_name = 6;
  if (has_radar_pipeline_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radar_pipeline_name().data(), this->radar_pipeline_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radar_pipeline_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->radar_pipeline_name(), output);
  }

  // optional string odometry_channel_name = 7;
  if (has_odometry_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->odometry_channel_name().data(), this->odometry_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "odometry_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->odometry_channel_name(), output);
  }

  // optional string output_channel_name = 8;
  if (has_output_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_channel_name().data(), this->output_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "output_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->output_channel_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.onboard.RadarComponentConfig)
}

::google::protobuf::uint8* RadarComponentConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.onboard.RadarComponentConfig)
  // optional string radar_name = 1;
  if (has_radar_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radar_name().data(), this->radar_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radar_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->radar_name(), target);
  }

  // optional string tf_child_frame_id = 2;
  if (has_tf_child_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tf_child_frame_id().data(), this->tf_child_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tf_child_frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tf_child_frame_id(), target);
  }

  // optional double radar_forward_distance = 3;
  if (has_radar_forward_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radar_forward_distance(), target);
  }

  // optional string radar_preprocessor_method = 4;
  if (has_radar_preprocessor_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radar_preprocessor_method().data(), this->radar_preprocessor_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radar_preprocessor_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->radar_preprocessor_method(), target);
  }

  // optional string radar_perception_method = 5;
  if (has_radar_perception_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radar_perception_method().data(), this->radar_perception_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radar_perception_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->radar_perception_method(), target);
  }

  // optional string radar_pipeline_name = 6;
  if (has_radar_pipeline_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radar_pipeline_name().data(), this->radar_pipeline_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radar_pipeline_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->radar_pipeline_name(), target);
  }

  // optional string odometry_channel_name = 7;
  if (has_odometry_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->odometry_channel_name().data(), this->odometry_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "odometry_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->odometry_channel_name(), target);
  }

  // optional string output_channel_name = 8;
  if (has_output_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_channel_name().data(), this->output_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "output_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->output_channel_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.onboard.RadarComponentConfig)
  return target;
}

int RadarComponentConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string radar_name = 1;
    if (has_radar_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radar_name());
    }

    // optional string tf_child_frame_id = 2;
    if (has_tf_child_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tf_child_frame_id());
    }

    // optional double radar_forward_distance = 3;
    if (has_radar_forward_distance()) {
      total_size += 1 + 8;
    }

    // optional string radar_preprocessor_method = 4;
    if (has_radar_preprocessor_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radar_preprocessor_method());
    }

    // optional string radar_perception_method = 5;
    if (has_radar_perception_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radar_perception_method());
    }

    // optional string radar_pipeline_name = 6;
    if (has_radar_pipeline_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radar_pipeline_name());
    }

    // optional string odometry_channel_name = 7;
    if (has_odometry_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->odometry_channel_name());
    }

    // optional string output_channel_name = 8;
    if (has_output_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_channel_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarComponentConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarComponentConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarComponentConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarComponentConfig::MergeFrom(const RadarComponentConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radar_name()) {
      set_radar_name(from.radar_name());
    }
    if (from.has_tf_child_frame_id()) {
      set_tf_child_frame_id(from.tf_child_frame_id());
    }
    if (from.has_radar_forward_distance()) {
      set_radar_forward_distance(from.radar_forward_distance());
    }
    if (from.has_radar_preprocessor_method()) {
      set_radar_preprocessor_method(from.radar_preprocessor_method());
    }
    if (from.has_radar_perception_method()) {
      set_radar_perception_method(from.radar_perception_method());
    }
    if (from.has_radar_pipeline_name()) {
      set_radar_pipeline_name(from.radar_pipeline_name());
    }
    if (from.has_odometry_channel_name()) {
      set_odometry_channel_name(from.odometry_channel_name());
    }
    if (from.has_output_channel_name()) {
      set_output_channel_name(from.output_channel_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarComponentConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarComponentConfig::CopyFrom(const RadarComponentConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarComponentConfig::IsInitialized() const {

  return true;
}

void RadarComponentConfig::Swap(RadarComponentConfig* other) {
  if (other != this) {
    std::swap(radar_name_, other->radar_name_);
    std::swap(tf_child_frame_id_, other->tf_child_frame_id_);
    std::swap(radar_forward_distance_, other->radar_forward_distance_);
    std::swap(radar_preprocessor_method_, other->radar_preprocessor_method_);
    std::swap(radar_perception_method_, other->radar_perception_method_);
    std::swap(radar_pipeline_name_, other->radar_pipeline_name_);
    std::swap(odometry_channel_name_, other->odometry_channel_name_);
    std::swap(output_channel_name_, other->output_channel_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarComponentConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarComponentConfig_descriptor_;
  metadata.reflection = RadarComponentConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace onboard
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
