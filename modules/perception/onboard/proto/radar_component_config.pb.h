// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: radar_component_config.proto

#ifndef PROTOBUF_radar_5fcomponent_5fconfig_2eproto__INCLUDED
#define PROTOBUF_radar_5fcomponent_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace onboard {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_radar_5fcomponent_5fconfig_2eproto();
void protobuf_AssignDesc_radar_5fcomponent_5fconfig_2eproto();
void protobuf_ShutdownFile_radar_5fcomponent_5fconfig_2eproto();

class RadarComponentConfig;

// ===================================================================

class RadarComponentConfig : public ::google::protobuf::Message {
 public:
  RadarComponentConfig();
  virtual ~RadarComponentConfig();

  RadarComponentConfig(const RadarComponentConfig& from);

  inline RadarComponentConfig& operator=(const RadarComponentConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarComponentConfig& default_instance();

  void Swap(RadarComponentConfig* other);

  // implements Message ----------------------------------------------

  RadarComponentConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarComponentConfig& from);
  void MergeFrom(const RadarComponentConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string radar_name = 1;
  inline bool has_radar_name() const;
  inline void clear_radar_name();
  static const int kRadarNameFieldNumber = 1;
  inline const ::std::string& radar_name() const;
  inline void set_radar_name(const ::std::string& value);
  inline void set_radar_name(const char* value);
  inline void set_radar_name(const char* value, size_t size);
  inline ::std::string* mutable_radar_name();
  inline ::std::string* release_radar_name();
  inline void set_allocated_radar_name(::std::string* radar_name);

  // optional string tf_child_frame_id = 2;
  inline bool has_tf_child_frame_id() const;
  inline void clear_tf_child_frame_id();
  static const int kTfChildFrameIdFieldNumber = 2;
  inline const ::std::string& tf_child_frame_id() const;
  inline void set_tf_child_frame_id(const ::std::string& value);
  inline void set_tf_child_frame_id(const char* value);
  inline void set_tf_child_frame_id(const char* value, size_t size);
  inline ::std::string* mutable_tf_child_frame_id();
  inline ::std::string* release_tf_child_frame_id();
  inline void set_allocated_tf_child_frame_id(::std::string* tf_child_frame_id);

  // optional double radar_forward_distance = 3;
  inline bool has_radar_forward_distance() const;
  inline void clear_radar_forward_distance();
  static const int kRadarForwardDistanceFieldNumber = 3;
  inline double radar_forward_distance() const;
  inline void set_radar_forward_distance(double value);

  // optional string radar_preprocessor_method = 4;
  inline bool has_radar_preprocessor_method() const;
  inline void clear_radar_preprocessor_method();
  static const int kRadarPreprocessorMethodFieldNumber = 4;
  inline const ::std::string& radar_preprocessor_method() const;
  inline void set_radar_preprocessor_method(const ::std::string& value);
  inline void set_radar_preprocessor_method(const char* value);
  inline void set_radar_preprocessor_method(const char* value, size_t size);
  inline ::std::string* mutable_radar_preprocessor_method();
  inline ::std::string* release_radar_preprocessor_method();
  inline void set_allocated_radar_preprocessor_method(::std::string* radar_preprocessor_method);

  // optional string radar_perception_method = 5;
  inline bool has_radar_perception_method() const;
  inline void clear_radar_perception_method();
  static const int kRadarPerceptionMethodFieldNumber = 5;
  inline const ::std::string& radar_perception_method() const;
  inline void set_radar_perception_method(const ::std::string& value);
  inline void set_radar_perception_method(const char* value);
  inline void set_radar_perception_method(const char* value, size_t size);
  inline ::std::string* mutable_radar_perception_method();
  inline ::std::string* release_radar_perception_method();
  inline void set_allocated_radar_perception_method(::std::string* radar_perception_method);

  // optional string radar_pipeline_name = 6;
  inline bool has_radar_pipeline_name() const;
  inline void clear_radar_pipeline_name();
  static const int kRadarPipelineNameFieldNumber = 6;
  inline const ::std::string& radar_pipeline_name() const;
  inline void set_radar_pipeline_name(const ::std::string& value);
  inline void set_radar_pipeline_name(const char* value);
  inline void set_radar_pipeline_name(const char* value, size_t size);
  inline ::std::string* mutable_radar_pipeline_name();
  inline ::std::string* release_radar_pipeline_name();
  inline void set_allocated_radar_pipeline_name(::std::string* radar_pipeline_name);

  // optional string odometry_channel_name = 7;
  inline bool has_odometry_channel_name() const;
  inline void clear_odometry_channel_name();
  static const int kOdometryChannelNameFieldNumber = 7;
  inline const ::std::string& odometry_channel_name() const;
  inline void set_odometry_channel_name(const ::std::string& value);
  inline void set_odometry_channel_name(const char* value);
  inline void set_odometry_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_odometry_channel_name();
  inline ::std::string* release_odometry_channel_name();
  inline void set_allocated_odometry_channel_name(::std::string* odometry_channel_name);

  // optional string output_channel_name = 8;
  inline bool has_output_channel_name() const;
  inline void clear_output_channel_name();
  static const int kOutputChannelNameFieldNumber = 8;
  inline const ::std::string& output_channel_name() const;
  inline void set_output_channel_name(const ::std::string& value);
  inline void set_output_channel_name(const char* value);
  inline void set_output_channel_name(const char* value, size_t size);
  inline ::std::string* mutable_output_channel_name();
  inline ::std::string* release_output_channel_name();
  inline void set_allocated_output_channel_name(::std::string* output_channel_name);

  // @@protoc_insertion_point(class_scope:apollo.perception.onboard.RadarComponentConfig)
 private:
  inline void set_has_radar_name();
  inline void clear_has_radar_name();
  inline void set_has_tf_child_frame_id();
  inline void clear_has_tf_child_frame_id();
  inline void set_has_radar_forward_distance();
  inline void clear_has_radar_forward_distance();
  inline void set_has_radar_preprocessor_method();
  inline void clear_has_radar_preprocessor_method();
  inline void set_has_radar_perception_method();
  inline void clear_has_radar_perception_method();
  inline void set_has_radar_pipeline_name();
  inline void clear_has_radar_pipeline_name();
  inline void set_has_odometry_channel_name();
  inline void clear_has_odometry_channel_name();
  inline void set_has_output_channel_name();
  inline void clear_has_output_channel_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* radar_name_;
  ::std::string* tf_child_frame_id_;
  double radar_forward_distance_;
  ::std::string* radar_preprocessor_method_;
  ::std::string* radar_perception_method_;
  ::std::string* radar_pipeline_name_;
  ::std::string* odometry_channel_name_;
  ::std::string* output_channel_name_;
  friend void  protobuf_AddDesc_radar_5fcomponent_5fconfig_2eproto();
  friend void protobuf_AssignDesc_radar_5fcomponent_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_radar_5fcomponent_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static RadarComponentConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// RadarComponentConfig

// optional string radar_name = 1;
inline bool RadarComponentConfig::has_radar_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarComponentConfig::set_has_radar_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarComponentConfig::clear_has_radar_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarComponentConfig::clear_radar_name() {
  if (radar_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_name_->clear();
  }
  clear_has_radar_name();
}
inline const ::std::string& RadarComponentConfig::radar_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.RadarComponentConfig.radar_name)
  return *radar_name_;
}
inline void RadarComponentConfig::set_radar_name(const ::std::string& value) {
  set_has_radar_name();
  if (radar_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_name_ = new ::std::string;
  }
  radar_name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.RadarComponentConfig.radar_name)
}
inline void RadarComponentConfig::set_radar_name(const char* value) {
  set_has_radar_name();
  if (radar_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_name_ = new ::std::string;
  }
  radar_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.RadarComponentConfig.radar_name)
}
inline void RadarComponentConfig::set_radar_name(const char* value, size_t size) {
  set_has_radar_name();
  if (radar_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_name_ = new ::std::string;
  }
  radar_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.RadarComponentConfig.radar_name)
}
inline ::std::string* RadarComponentConfig::mutable_radar_name() {
  set_has_radar_name();
  if (radar_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.RadarComponentConfig.radar_name)
  return radar_name_;
}
inline ::std::string* RadarComponentConfig::release_radar_name() {
  clear_has_radar_name();
  if (radar_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radar_name_;
    radar_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarComponentConfig::set_allocated_radar_name(::std::string* radar_name) {
  if (radar_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radar_name_;
  }
  if (radar_name) {
    set_has_radar_name();
    radar_name_ = radar_name;
  } else {
    clear_has_radar_name();
    radar_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.RadarComponentConfig.radar_name)
}

// optional string tf_child_frame_id = 2;
inline bool RadarComponentConfig::has_tf_child_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarComponentConfig::set_has_tf_child_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarComponentConfig::clear_has_tf_child_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarComponentConfig::clear_tf_child_frame_id() {
  if (tf_child_frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_child_frame_id_->clear();
  }
  clear_has_tf_child_frame_id();
}
inline const ::std::string& RadarComponentConfig::tf_child_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.RadarComponentConfig.tf_child_frame_id)
  return *tf_child_frame_id_;
}
inline void RadarComponentConfig::set_tf_child_frame_id(const ::std::string& value) {
  set_has_tf_child_frame_id();
  if (tf_child_frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_child_frame_id_ = new ::std::string;
  }
  tf_child_frame_id_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.RadarComponentConfig.tf_child_frame_id)
}
inline void RadarComponentConfig::set_tf_child_frame_id(const char* value) {
  set_has_tf_child_frame_id();
  if (tf_child_frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_child_frame_id_ = new ::std::string;
  }
  tf_child_frame_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.RadarComponentConfig.tf_child_frame_id)
}
inline void RadarComponentConfig::set_tf_child_frame_id(const char* value, size_t size) {
  set_has_tf_child_frame_id();
  if (tf_child_frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_child_frame_id_ = new ::std::string;
  }
  tf_child_frame_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.RadarComponentConfig.tf_child_frame_id)
}
inline ::std::string* RadarComponentConfig::mutable_tf_child_frame_id() {
  set_has_tf_child_frame_id();
  if (tf_child_frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tf_child_frame_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.RadarComponentConfig.tf_child_frame_id)
  return tf_child_frame_id_;
}
inline ::std::string* RadarComponentConfig::release_tf_child_frame_id() {
  clear_has_tf_child_frame_id();
  if (tf_child_frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tf_child_frame_id_;
    tf_child_frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarComponentConfig::set_allocated_tf_child_frame_id(::std::string* tf_child_frame_id) {
  if (tf_child_frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tf_child_frame_id_;
  }
  if (tf_child_frame_id) {
    set_has_tf_child_frame_id();
    tf_child_frame_id_ = tf_child_frame_id;
  } else {
    clear_has_tf_child_frame_id();
    tf_child_frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.RadarComponentConfig.tf_child_frame_id)
}

// optional double radar_forward_distance = 3;
inline bool RadarComponentConfig::has_radar_forward_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarComponentConfig::set_has_radar_forward_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarComponentConfig::clear_has_radar_forward_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarComponentConfig::clear_radar_forward_distance() {
  radar_forward_distance_ = 0;
  clear_has_radar_forward_distance();
}
inline double RadarComponentConfig::radar_forward_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.RadarComponentConfig.radar_forward_distance)
  return radar_forward_distance_;
}
inline void RadarComponentConfig::set_radar_forward_distance(double value) {
  set_has_radar_forward_distance();
  radar_forward_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.RadarComponentConfig.radar_forward_distance)
}

// optional string radar_preprocessor_method = 4;
inline bool RadarComponentConfig::has_radar_preprocessor_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarComponentConfig::set_has_radar_preprocessor_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarComponentConfig::clear_has_radar_preprocessor_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarComponentConfig::clear_radar_preprocessor_method() {
  if (radar_preprocessor_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_preprocessor_method_->clear();
  }
  clear_has_radar_preprocessor_method();
}
inline const ::std::string& RadarComponentConfig::radar_preprocessor_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.RadarComponentConfig.radar_preprocessor_method)
  return *radar_preprocessor_method_;
}
inline void RadarComponentConfig::set_radar_preprocessor_method(const ::std::string& value) {
  set_has_radar_preprocessor_method();
  if (radar_preprocessor_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_preprocessor_method_ = new ::std::string;
  }
  radar_preprocessor_method_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.RadarComponentConfig.radar_preprocessor_method)
}
inline void RadarComponentConfig::set_radar_preprocessor_method(const char* value) {
  set_has_radar_preprocessor_method();
  if (radar_preprocessor_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_preprocessor_method_ = new ::std::string;
  }
  radar_preprocessor_method_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.RadarComponentConfig.radar_preprocessor_method)
}
inline void RadarComponentConfig::set_radar_preprocessor_method(const char* value, size_t size) {
  set_has_radar_preprocessor_method();
  if (radar_preprocessor_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_preprocessor_method_ = new ::std::string;
  }
  radar_preprocessor_method_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.RadarComponentConfig.radar_preprocessor_method)
}
inline ::std::string* RadarComponentConfig::mutable_radar_preprocessor_method() {
  set_has_radar_preprocessor_method();
  if (radar_preprocessor_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_preprocessor_method_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.RadarComponentConfig.radar_preprocessor_method)
  return radar_preprocessor_method_;
}
inline ::std::string* RadarComponentConfig::release_radar_preprocessor_method() {
  clear_has_radar_preprocessor_method();
  if (radar_preprocessor_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radar_preprocessor_method_;
    radar_preprocessor_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarComponentConfig::set_allocated_radar_preprocessor_method(::std::string* radar_preprocessor_method) {
  if (radar_preprocessor_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radar_preprocessor_method_;
  }
  if (radar_preprocessor_method) {
    set_has_radar_preprocessor_method();
    radar_preprocessor_method_ = radar_preprocessor_method;
  } else {
    clear_has_radar_preprocessor_method();
    radar_preprocessor_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.RadarComponentConfig.radar_preprocessor_method)
}

// optional string radar_perception_method = 5;
inline bool RadarComponentConfig::has_radar_perception_method() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarComponentConfig::set_has_radar_perception_method() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarComponentConfig::clear_has_radar_perception_method() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarComponentConfig::clear_radar_perception_method() {
  if (radar_perception_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_perception_method_->clear();
  }
  clear_has_radar_perception_method();
}
inline const ::std::string& RadarComponentConfig::radar_perception_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.RadarComponentConfig.radar_perception_method)
  return *radar_perception_method_;
}
inline void RadarComponentConfig::set_radar_perception_method(const ::std::string& value) {
  set_has_radar_perception_method();
  if (radar_perception_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_perception_method_ = new ::std::string;
  }
  radar_perception_method_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.RadarComponentConfig.radar_perception_method)
}
inline void RadarComponentConfig::set_radar_perception_method(const char* value) {
  set_has_radar_perception_method();
  if (radar_perception_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_perception_method_ = new ::std::string;
  }
  radar_perception_method_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.RadarComponentConfig.radar_perception_method)
}
inline void RadarComponentConfig::set_radar_perception_method(const char* value, size_t size) {
  set_has_radar_perception_method();
  if (radar_perception_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_perception_method_ = new ::std::string;
  }
  radar_perception_method_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.RadarComponentConfig.radar_perception_method)
}
inline ::std::string* RadarComponentConfig::mutable_radar_perception_method() {
  set_has_radar_perception_method();
  if (radar_perception_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_perception_method_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.RadarComponentConfig.radar_perception_method)
  return radar_perception_method_;
}
inline ::std::string* RadarComponentConfig::release_radar_perception_method() {
  clear_has_radar_perception_method();
  if (radar_perception_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radar_perception_method_;
    radar_perception_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarComponentConfig::set_allocated_radar_perception_method(::std::string* radar_perception_method) {
  if (radar_perception_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radar_perception_method_;
  }
  if (radar_perception_method) {
    set_has_radar_perception_method();
    radar_perception_method_ = radar_perception_method;
  } else {
    clear_has_radar_perception_method();
    radar_perception_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.RadarComponentConfig.radar_perception_method)
}

// optional string radar_pipeline_name = 6;
inline bool RadarComponentConfig::has_radar_pipeline_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarComponentConfig::set_has_radar_pipeline_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarComponentConfig::clear_has_radar_pipeline_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarComponentConfig::clear_radar_pipeline_name() {
  if (radar_pipeline_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_pipeline_name_->clear();
  }
  clear_has_radar_pipeline_name();
}
inline const ::std::string& RadarComponentConfig::radar_pipeline_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.RadarComponentConfig.radar_pipeline_name)
  return *radar_pipeline_name_;
}
inline void RadarComponentConfig::set_radar_pipeline_name(const ::std::string& value) {
  set_has_radar_pipeline_name();
  if (radar_pipeline_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_pipeline_name_ = new ::std::string;
  }
  radar_pipeline_name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.RadarComponentConfig.radar_pipeline_name)
}
inline void RadarComponentConfig::set_radar_pipeline_name(const char* value) {
  set_has_radar_pipeline_name();
  if (radar_pipeline_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_pipeline_name_ = new ::std::string;
  }
  radar_pipeline_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.RadarComponentConfig.radar_pipeline_name)
}
inline void RadarComponentConfig::set_radar_pipeline_name(const char* value, size_t size) {
  set_has_radar_pipeline_name();
  if (radar_pipeline_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_pipeline_name_ = new ::std::string;
  }
  radar_pipeline_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.RadarComponentConfig.radar_pipeline_name)
}
inline ::std::string* RadarComponentConfig::mutable_radar_pipeline_name() {
  set_has_radar_pipeline_name();
  if (radar_pipeline_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radar_pipeline_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.RadarComponentConfig.radar_pipeline_name)
  return radar_pipeline_name_;
}
inline ::std::string* RadarComponentConfig::release_radar_pipeline_name() {
  clear_has_radar_pipeline_name();
  if (radar_pipeline_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radar_pipeline_name_;
    radar_pipeline_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarComponentConfig::set_allocated_radar_pipeline_name(::std::string* radar_pipeline_name) {
  if (radar_pipeline_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radar_pipeline_name_;
  }
  if (radar_pipeline_name) {
    set_has_radar_pipeline_name();
    radar_pipeline_name_ = radar_pipeline_name;
  } else {
    clear_has_radar_pipeline_name();
    radar_pipeline_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.RadarComponentConfig.radar_pipeline_name)
}

// optional string odometry_channel_name = 7;
inline bool RadarComponentConfig::has_odometry_channel_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarComponentConfig::set_has_odometry_channel_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarComponentConfig::clear_has_odometry_channel_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarComponentConfig::clear_odometry_channel_name() {
  if (odometry_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    odometry_channel_name_->clear();
  }
  clear_has_odometry_channel_name();
}
inline const ::std::string& RadarComponentConfig::odometry_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.RadarComponentConfig.odometry_channel_name)
  return *odometry_channel_name_;
}
inline void RadarComponentConfig::set_odometry_channel_name(const ::std::string& value) {
  set_has_odometry_channel_name();
  if (odometry_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    odometry_channel_name_ = new ::std::string;
  }
  odometry_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.RadarComponentConfig.odometry_channel_name)
}
inline void RadarComponentConfig::set_odometry_channel_name(const char* value) {
  set_has_odometry_channel_name();
  if (odometry_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    odometry_channel_name_ = new ::std::string;
  }
  odometry_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.RadarComponentConfig.odometry_channel_name)
}
inline void RadarComponentConfig::set_odometry_channel_name(const char* value, size_t size) {
  set_has_odometry_channel_name();
  if (odometry_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    odometry_channel_name_ = new ::std::string;
  }
  odometry_channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.RadarComponentConfig.odometry_channel_name)
}
inline ::std::string* RadarComponentConfig::mutable_odometry_channel_name() {
  set_has_odometry_channel_name();
  if (odometry_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    odometry_channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.RadarComponentConfig.odometry_channel_name)
  return odometry_channel_name_;
}
inline ::std::string* RadarComponentConfig::release_odometry_channel_name() {
  clear_has_odometry_channel_name();
  if (odometry_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = odometry_channel_name_;
    odometry_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarComponentConfig::set_allocated_odometry_channel_name(::std::string* odometry_channel_name) {
  if (odometry_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete odometry_channel_name_;
  }
  if (odometry_channel_name) {
    set_has_odometry_channel_name();
    odometry_channel_name_ = odometry_channel_name;
  } else {
    clear_has_odometry_channel_name();
    odometry_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.RadarComponentConfig.odometry_channel_name)
}

// optional string output_channel_name = 8;
inline bool RadarComponentConfig::has_output_channel_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarComponentConfig::set_has_output_channel_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarComponentConfig::clear_has_output_channel_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarComponentConfig::clear_output_channel_name() {
  if (output_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_channel_name_->clear();
  }
  clear_has_output_channel_name();
}
inline const ::std::string& RadarComponentConfig::output_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.RadarComponentConfig.output_channel_name)
  return *output_channel_name_;
}
inline void RadarComponentConfig::set_output_channel_name(const ::std::string& value) {
  set_has_output_channel_name();
  if (output_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_channel_name_ = new ::std::string;
  }
  output_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.RadarComponentConfig.output_channel_name)
}
inline void RadarComponentConfig::set_output_channel_name(const char* value) {
  set_has_output_channel_name();
  if (output_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_channel_name_ = new ::std::string;
  }
  output_channel_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.RadarComponentConfig.output_channel_name)
}
inline void RadarComponentConfig::set_output_channel_name(const char* value, size_t size) {
  set_has_output_channel_name();
  if (output_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_channel_name_ = new ::std::string;
  }
  output_channel_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.RadarComponentConfig.output_channel_name)
}
inline ::std::string* RadarComponentConfig::mutable_output_channel_name() {
  set_has_output_channel_name();
  if (output_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_channel_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.RadarComponentConfig.output_channel_name)
  return output_channel_name_;
}
inline ::std::string* RadarComponentConfig::release_output_channel_name() {
  clear_has_output_channel_name();
  if (output_channel_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = output_channel_name_;
    output_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarComponentConfig::set_allocated_output_channel_name(::std::string* output_channel_name) {
  if (output_channel_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete output_channel_name_;
  }
  if (output_channel_name) {
    set_has_output_channel_name();
    output_channel_name_ = output_channel_name;
  } else {
    clear_has_output_channel_name();
    output_channel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.RadarComponentConfig.output_channel_name)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace onboard
}  // namespace perception
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_radar_5fcomponent_5fconfig_2eproto__INCLUDED
