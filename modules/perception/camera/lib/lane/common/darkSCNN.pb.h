// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: darkSCNN.proto

#ifndef PROTOBUF_darkSCNN_2eproto__INCLUDED
#define PROTOBUF_darkSCNN_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace camera {
namespace darkSCNN {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_darkSCNN_2eproto();
void protobuf_AssignDesc_darkSCNN_2eproto();
void protobuf_ShutdownFile_darkSCNN_2eproto();

class DarkSCNNParam;
class ModelParam;
class NetworkParam;

// ===================================================================

class DarkSCNNParam : public ::google::protobuf::Message {
 public:
  DarkSCNNParam();
  virtual ~DarkSCNNParam();

  DarkSCNNParam(const DarkSCNNParam& from);

  inline DarkSCNNParam& operator=(const DarkSCNNParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DarkSCNNParam& default_instance();

  void Swap(DarkSCNNParam* other);

  // implements Message ----------------------------------------------

  DarkSCNNParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DarkSCNNParam& from);
  void MergeFrom(const DarkSCNNParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.camera.darkSCNN.ModelParam model_param = 1;
  inline bool has_model_param() const;
  inline void clear_model_param();
  static const int kModelParamFieldNumber = 1;
  inline const ::apollo::perception::camera::darkSCNN::ModelParam& model_param() const;
  inline ::apollo::perception::camera::darkSCNN::ModelParam* mutable_model_param();
  inline ::apollo::perception::camera::darkSCNN::ModelParam* release_model_param();
  inline void set_allocated_model_param(::apollo::perception::camera::darkSCNN::ModelParam* model_param);

  // optional .apollo.perception.camera.darkSCNN.NetworkParam net_param = 2;
  inline bool has_net_param() const;
  inline void clear_net_param();
  static const int kNetParamFieldNumber = 2;
  inline const ::apollo::perception::camera::darkSCNN::NetworkParam& net_param() const;
  inline ::apollo::perception::camera::darkSCNN::NetworkParam* mutable_net_param();
  inline ::apollo::perception::camera::darkSCNN::NetworkParam* release_net_param();
  inline void set_allocated_net_param(::apollo::perception::camera::darkSCNN::NetworkParam* net_param);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.darkSCNN.DarkSCNNParam)
 private:
  inline void set_has_model_param();
  inline void clear_has_model_param();
  inline void set_has_net_param();
  inline void clear_has_net_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::camera::darkSCNN::ModelParam* model_param_;
  ::apollo::perception::camera::darkSCNN::NetworkParam* net_param_;
  friend void  protobuf_AddDesc_darkSCNN_2eproto();
  friend void protobuf_AssignDesc_darkSCNN_2eproto();
  friend void protobuf_ShutdownFile_darkSCNN_2eproto();

  void InitAsDefaultInstance();
  static DarkSCNNParam* default_instance_;
};
// -------------------------------------------------------------------

class ModelParam : public ::google::protobuf::Message {
 public:
  ModelParam();
  virtual ~ModelParam();

  ModelParam(const ModelParam& from);

  inline ModelParam& operator=(const ModelParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelParam& default_instance();

  void Swap(ModelParam* other);

  // implements Message ----------------------------------------------

  ModelParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelParam& from);
  void MergeFrom(const ModelParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 1 [default = "darkSCNN"];
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional string proto_file = 2 [default = "deploy.prototxt"];
  inline bool has_proto_file() const;
  inline void clear_proto_file();
  static const int kProtoFileFieldNumber = 2;
  inline const ::std::string& proto_file() const;
  inline void set_proto_file(const ::std::string& value);
  inline void set_proto_file(const char* value);
  inline void set_proto_file(const char* value, size_t size);
  inline ::std::string* mutable_proto_file();
  inline ::std::string* release_proto_file();
  inline void set_allocated_proto_file(::std::string* proto_file);

  // optional string weight_file = 3 [default = "deploy.caffemodel"];
  inline bool has_weight_file() const;
  inline void clear_weight_file();
  static const int kWeightFileFieldNumber = 3;
  inline const ::std::string& weight_file() const;
  inline void set_weight_file(const ::std::string& value);
  inline void set_weight_file(const char* value);
  inline void set_weight_file(const char* value, size_t size);
  inline ::std::string* mutable_weight_file();
  inline ::std::string* release_weight_file();
  inline void set_allocated_weight_file(::std::string* weight_file);

  // optional uint32 input_offset_y = 4 [default = 0];
  inline bool has_input_offset_y() const;
  inline void clear_input_offset_y();
  static const int kInputOffsetYFieldNumber = 4;
  inline ::google::protobuf::uint32 input_offset_y() const;
  inline void set_input_offset_y(::google::protobuf::uint32 value);

  // optional uint32 input_offset_x = 5 [default = 0];
  inline bool has_input_offset_x() const;
  inline void clear_input_offset_x();
  static const int kInputOffsetXFieldNumber = 5;
  inline ::google::protobuf::uint32 input_offset_x() const;
  inline void set_input_offset_x(::google::protobuf::uint32 value);

  // optional uint32 crop_height = 6 [default = 1080];
  inline bool has_crop_height() const;
  inline void clear_crop_height();
  static const int kCropHeightFieldNumber = 6;
  inline ::google::protobuf::uint32 crop_height() const;
  inline void set_crop_height(::google::protobuf::uint32 value);

  // optional uint32 crop_width = 7 [default = 1920];
  inline bool has_crop_width() const;
  inline void clear_crop_width();
  static const int kCropWidthFieldNumber = 7;
  inline ::google::protobuf::uint32 crop_width() const;
  inline void set_crop_width(::google::protobuf::uint32 value);

  // optional uint32 resize_height = 8 [default = 512];
  inline bool has_resize_height() const;
  inline void clear_resize_height();
  static const int kResizeHeightFieldNumber = 8;
  inline ::google::protobuf::uint32 resize_height() const;
  inline void set_resize_height(::google::protobuf::uint32 value);

  // optional uint32 resize_width = 9 [default = 512];
  inline bool has_resize_width() const;
  inline void clear_resize_width();
  static const int kResizeWidthFieldNumber = 9;
  inline ::google::protobuf::uint32 resize_width() const;
  inline void set_resize_width(::google::protobuf::uint32 value);

  // optional uint32 mean_b = 10 [default = 95];
  inline bool has_mean_b() const;
  inline void clear_mean_b();
  static const int kMeanBFieldNumber = 10;
  inline ::google::protobuf::uint32 mean_b() const;
  inline void set_mean_b(::google::protobuf::uint32 value);

  // optional uint32 mean_g = 11 [default = 99];
  inline bool has_mean_g() const;
  inline void clear_mean_g();
  static const int kMeanGFieldNumber = 11;
  inline ::google::protobuf::uint32 mean_g() const;
  inline void set_mean_g(::google::protobuf::uint32 value);

  // optional uint32 mean_r = 12 [default = 96];
  inline bool has_mean_r() const;
  inline void clear_mean_r();
  static const int kMeanRFieldNumber = 12;
  inline ::google::protobuf::uint32 mean_r() const;
  inline void set_mean_r(::google::protobuf::uint32 value);

  // optional bool is_bgr = 13 [default = true];
  inline bool has_is_bgr() const;
  inline void clear_is_bgr();
  static const int kIsBgrFieldNumber = 13;
  inline bool is_bgr() const;
  inline void set_is_bgr(bool value);

  // optional float confidence_threshold = 14 [default = 0.5];
  inline bool has_confidence_threshold() const;
  inline void clear_confidence_threshold();
  static const int kConfidenceThresholdFieldNumber = 14;
  inline float confidence_threshold() const;
  inline void set_confidence_threshold(float value);

  // optional float vpt_mean_dx = 15 [default = 0];
  inline bool has_vpt_mean_dx() const;
  inline void clear_vpt_mean_dx();
  static const int kVptMeanDxFieldNumber = 15;
  inline float vpt_mean_dx() const;
  inline void set_vpt_mean_dx(float value);

  // optional float vpt_mean_dy = 16 [default = -77.284];
  inline bool has_vpt_mean_dy() const;
  inline void clear_vpt_mean_dy();
  static const int kVptMeanDyFieldNumber = 16;
  inline float vpt_mean_dy() const;
  inline void set_vpt_mean_dy(float value);

  // optional float vpt_std_dx = 17 [default = 103.109];
  inline bool has_vpt_std_dx() const;
  inline void clear_vpt_std_dx();
  static const int kVptStdDxFieldNumber = 17;
  inline float vpt_std_dx() const;
  inline void set_vpt_std_dx(float value);

  // optional float vpt_std_dy = 18 [default = 95.273];
  inline bool has_vpt_std_dy() const;
  inline void clear_vpt_std_dy();
  static const int kVptStdDyFieldNumber = 18;
  inline float vpt_std_dy() const;
  inline void set_vpt_std_dy(float value);

  // optional string model_type = 19 [default = "CaffeNet"];
  inline bool has_model_type() const;
  inline void clear_model_type();
  static const int kModelTypeFieldNumber = 19;
  inline const ::std::string& model_type() const;
  inline void set_model_type(const ::std::string& value);
  inline void set_model_type(const char* value);
  inline void set_model_type(const char* value, size_t size);
  inline ::std::string* mutable_model_type();
  inline ::std::string* release_model_type();
  inline void set_allocated_model_type(::std::string* model_type);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.darkSCNN.ModelParam)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_proto_file();
  inline void clear_has_proto_file();
  inline void set_has_weight_file();
  inline void clear_has_weight_file();
  inline void set_has_input_offset_y();
  inline void clear_has_input_offset_y();
  inline void set_has_input_offset_x();
  inline void clear_has_input_offset_x();
  inline void set_has_crop_height();
  inline void clear_has_crop_height();
  inline void set_has_crop_width();
  inline void clear_has_crop_width();
  inline void set_has_resize_height();
  inline void clear_has_resize_height();
  inline void set_has_resize_width();
  inline void clear_has_resize_width();
  inline void set_has_mean_b();
  inline void clear_has_mean_b();
  inline void set_has_mean_g();
  inline void clear_has_mean_g();
  inline void set_has_mean_r();
  inline void clear_has_mean_r();
  inline void set_has_is_bgr();
  inline void clear_has_is_bgr();
  inline void set_has_confidence_threshold();
  inline void clear_has_confidence_threshold();
  inline void set_has_vpt_mean_dx();
  inline void clear_has_vpt_mean_dx();
  inline void set_has_vpt_mean_dy();
  inline void clear_has_vpt_mean_dy();
  inline void set_has_vpt_std_dx();
  inline void clear_has_vpt_std_dx();
  inline void set_has_vpt_std_dy();
  inline void clear_has_vpt_std_dy();
  inline void set_has_model_type();
  inline void clear_has_model_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_model_name_;
  ::std::string* model_name_;
  static ::std::string* _default_proto_file_;
  ::std::string* proto_file_;
  static ::std::string* _default_weight_file_;
  ::std::string* weight_file_;
  ::google::protobuf::uint32 input_offset_y_;
  ::google::protobuf::uint32 input_offset_x_;
  ::google::protobuf::uint32 crop_height_;
  ::google::protobuf::uint32 crop_width_;
  ::google::protobuf::uint32 resize_height_;
  ::google::protobuf::uint32 resize_width_;
  ::google::protobuf::uint32 mean_b_;
  ::google::protobuf::uint32 mean_g_;
  ::google::protobuf::uint32 mean_r_;
  bool is_bgr_;
  float confidence_threshold_;
  float vpt_mean_dx_;
  float vpt_mean_dy_;
  float vpt_std_dx_;
  static ::std::string* _default_model_type_;
  ::std::string* model_type_;
  float vpt_std_dy_;
  friend void  protobuf_AddDesc_darkSCNN_2eproto();
  friend void protobuf_AssignDesc_darkSCNN_2eproto();
  friend void protobuf_ShutdownFile_darkSCNN_2eproto();

  void InitAsDefaultInstance();
  static ModelParam* default_instance_;
};
// -------------------------------------------------------------------

class NetworkParam : public ::google::protobuf::Message {
 public:
  NetworkParam();
  virtual ~NetworkParam();

  NetworkParam(const NetworkParam& from);

  inline NetworkParam& operator=(const NetworkParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkParam& default_instance();

  void Swap(NetworkParam* other);

  // implements Message ----------------------------------------------

  NetworkParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkParam& from);
  void MergeFrom(const NetworkParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string seg_blob = 1 [default = "softmax"];
  inline bool has_seg_blob() const;
  inline void clear_seg_blob();
  static const int kSegBlobFieldNumber = 1;
  inline const ::std::string& seg_blob() const;
  inline void set_seg_blob(const ::std::string& value);
  inline void set_seg_blob(const char* value);
  inline void set_seg_blob(const char* value, size_t size);
  inline ::std::string* mutable_seg_blob();
  inline ::std::string* release_seg_blob();
  inline void set_allocated_seg_blob(::std::string* seg_blob);

  // optional string vpt_blob = 2 [default = "fc_out"];
  inline bool has_vpt_blob() const;
  inline void clear_vpt_blob();
  static const int kVptBlobFieldNumber = 2;
  inline const ::std::string& vpt_blob() const;
  inline void set_vpt_blob(const ::std::string& value);
  inline void set_vpt_blob(const char* value);
  inline void set_vpt_blob(const char* value, size_t size);
  inline ::std::string* mutable_vpt_blob();
  inline ::std::string* release_vpt_blob();
  inline void set_allocated_vpt_blob(::std::string* vpt_blob);

  // optional string input_blob = 3 [default = "data"];
  inline bool has_input_blob() const;
  inline void clear_input_blob();
  static const int kInputBlobFieldNumber = 3;
  inline const ::std::string& input_blob() const;
  inline void set_input_blob(const ::std::string& value);
  inline void set_input_blob(const char* value);
  inline void set_input_blob(const char* value, size_t size);
  inline ::std::string* mutable_input_blob();
  inline ::std::string* release_input_blob();
  inline void set_allocated_input_blob(::std::string* input_blob);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.darkSCNN.NetworkParam)
 private:
  inline void set_has_seg_blob();
  inline void clear_has_seg_blob();
  inline void set_has_vpt_blob();
  inline void clear_has_vpt_blob();
  inline void set_has_input_blob();
  inline void clear_has_input_blob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_seg_blob_;
  ::std::string* seg_blob_;
  static ::std::string* _default_vpt_blob_;
  ::std::string* vpt_blob_;
  static ::std::string* _default_input_blob_;
  ::std::string* input_blob_;
  friend void  protobuf_AddDesc_darkSCNN_2eproto();
  friend void protobuf_AssignDesc_darkSCNN_2eproto();
  friend void protobuf_ShutdownFile_darkSCNN_2eproto();

  void InitAsDefaultInstance();
  static NetworkParam* default_instance_;
};
// ===================================================================


// ===================================================================

// DarkSCNNParam

// optional .apollo.perception.camera.darkSCNN.ModelParam model_param = 1;
inline bool DarkSCNNParam::has_model_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DarkSCNNParam::set_has_model_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DarkSCNNParam::clear_has_model_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DarkSCNNParam::clear_model_param() {
  if (model_param_ != NULL) model_param_->::apollo::perception::camera::darkSCNN::ModelParam::Clear();
  clear_has_model_param();
}
inline const ::apollo::perception::camera::darkSCNN::ModelParam& DarkSCNNParam::model_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.DarkSCNNParam.model_param)
  return model_param_ != NULL ? *model_param_ : *default_instance_->model_param_;
}
inline ::apollo::perception::camera::darkSCNN::ModelParam* DarkSCNNParam::mutable_model_param() {
  set_has_model_param();
  if (model_param_ == NULL) model_param_ = new ::apollo::perception::camera::darkSCNN::ModelParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.DarkSCNNParam.model_param)
  return model_param_;
}
inline ::apollo::perception::camera::darkSCNN::ModelParam* DarkSCNNParam::release_model_param() {
  clear_has_model_param();
  ::apollo::perception::camera::darkSCNN::ModelParam* temp = model_param_;
  model_param_ = NULL;
  return temp;
}
inline void DarkSCNNParam::set_allocated_model_param(::apollo::perception::camera::darkSCNN::ModelParam* model_param) {
  delete model_param_;
  model_param_ = model_param;
  if (model_param) {
    set_has_model_param();
  } else {
    clear_has_model_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.DarkSCNNParam.model_param)
}

// optional .apollo.perception.camera.darkSCNN.NetworkParam net_param = 2;
inline bool DarkSCNNParam::has_net_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DarkSCNNParam::set_has_net_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DarkSCNNParam::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DarkSCNNParam::clear_net_param() {
  if (net_param_ != NULL) net_param_->::apollo::perception::camera::darkSCNN::NetworkParam::Clear();
  clear_has_net_param();
}
inline const ::apollo::perception::camera::darkSCNN::NetworkParam& DarkSCNNParam::net_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.DarkSCNNParam.net_param)
  return net_param_ != NULL ? *net_param_ : *default_instance_->net_param_;
}
inline ::apollo::perception::camera::darkSCNN::NetworkParam* DarkSCNNParam::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) net_param_ = new ::apollo::perception::camera::darkSCNN::NetworkParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.DarkSCNNParam.net_param)
  return net_param_;
}
inline ::apollo::perception::camera::darkSCNN::NetworkParam* DarkSCNNParam::release_net_param() {
  clear_has_net_param();
  ::apollo::perception::camera::darkSCNN::NetworkParam* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
inline void DarkSCNNParam::set_allocated_net_param(::apollo::perception::camera::darkSCNN::NetworkParam* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.DarkSCNNParam.net_param)
}

// -------------------------------------------------------------------

// ModelParam

// optional string model_name = 1 [default = "darkSCNN"];
inline bool ModelParam::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelParam::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelParam::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelParam::clear_model_name() {
  if (model_name_ != _default_model_name_) {
    model_name_->assign(*_default_model_name_);
  }
  clear_has_model_name();
}
inline const ::std::string& ModelParam::model_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.model_name)
  return *model_name_;
}
inline void ModelParam::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == _default_model_name_) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.model_name)
}
inline void ModelParam::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == _default_model_name_) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.darkSCNN.ModelParam.model_name)
}
inline void ModelParam::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == _default_model_name_) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.darkSCNN.ModelParam.model_name)
}
inline ::std::string* ModelParam::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == _default_model_name_) {
    model_name_ = new ::std::string(*_default_model_name_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.ModelParam.model_name)
  return model_name_;
}
inline ::std::string* ModelParam::release_model_name() {
  clear_has_model_name();
  if (model_name_ == _default_model_name_) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(_default_model_name_);
    return temp;
  }
}
inline void ModelParam::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != _default_model_name_) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(_default_model_name_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.ModelParam.model_name)
}

// optional string proto_file = 2 [default = "deploy.prototxt"];
inline bool ModelParam::has_proto_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelParam::set_has_proto_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelParam::clear_has_proto_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelParam::clear_proto_file() {
  if (proto_file_ != _default_proto_file_) {
    proto_file_->assign(*_default_proto_file_);
  }
  clear_has_proto_file();
}
inline const ::std::string& ModelParam::proto_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.proto_file)
  return *proto_file_;
}
inline void ModelParam::set_proto_file(const ::std::string& value) {
  set_has_proto_file();
  if (proto_file_ == _default_proto_file_) {
    proto_file_ = new ::std::string;
  }
  proto_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.proto_file)
}
inline void ModelParam::set_proto_file(const char* value) {
  set_has_proto_file();
  if (proto_file_ == _default_proto_file_) {
    proto_file_ = new ::std::string;
  }
  proto_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.darkSCNN.ModelParam.proto_file)
}
inline void ModelParam::set_proto_file(const char* value, size_t size) {
  set_has_proto_file();
  if (proto_file_ == _default_proto_file_) {
    proto_file_ = new ::std::string;
  }
  proto_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.darkSCNN.ModelParam.proto_file)
}
inline ::std::string* ModelParam::mutable_proto_file() {
  set_has_proto_file();
  if (proto_file_ == _default_proto_file_) {
    proto_file_ = new ::std::string(*_default_proto_file_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.ModelParam.proto_file)
  return proto_file_;
}
inline ::std::string* ModelParam::release_proto_file() {
  clear_has_proto_file();
  if (proto_file_ == _default_proto_file_) {
    return NULL;
  } else {
    ::std::string* temp = proto_file_;
    proto_file_ = const_cast< ::std::string*>(_default_proto_file_);
    return temp;
  }
}
inline void ModelParam::set_allocated_proto_file(::std::string* proto_file) {
  if (proto_file_ != _default_proto_file_) {
    delete proto_file_;
  }
  if (proto_file) {
    set_has_proto_file();
    proto_file_ = proto_file;
  } else {
    clear_has_proto_file();
    proto_file_ = const_cast< ::std::string*>(_default_proto_file_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.ModelParam.proto_file)
}

// optional string weight_file = 3 [default = "deploy.caffemodel"];
inline bool ModelParam::has_weight_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelParam::set_has_weight_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelParam::clear_has_weight_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelParam::clear_weight_file() {
  if (weight_file_ != _default_weight_file_) {
    weight_file_->assign(*_default_weight_file_);
  }
  clear_has_weight_file();
}
inline const ::std::string& ModelParam::weight_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.weight_file)
  return *weight_file_;
}
inline void ModelParam::set_weight_file(const ::std::string& value) {
  set_has_weight_file();
  if (weight_file_ == _default_weight_file_) {
    weight_file_ = new ::std::string;
  }
  weight_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.weight_file)
}
inline void ModelParam::set_weight_file(const char* value) {
  set_has_weight_file();
  if (weight_file_ == _default_weight_file_) {
    weight_file_ = new ::std::string;
  }
  weight_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.darkSCNN.ModelParam.weight_file)
}
inline void ModelParam::set_weight_file(const char* value, size_t size) {
  set_has_weight_file();
  if (weight_file_ == _default_weight_file_) {
    weight_file_ = new ::std::string;
  }
  weight_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.darkSCNN.ModelParam.weight_file)
}
inline ::std::string* ModelParam::mutable_weight_file() {
  set_has_weight_file();
  if (weight_file_ == _default_weight_file_) {
    weight_file_ = new ::std::string(*_default_weight_file_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.ModelParam.weight_file)
  return weight_file_;
}
inline ::std::string* ModelParam::release_weight_file() {
  clear_has_weight_file();
  if (weight_file_ == _default_weight_file_) {
    return NULL;
  } else {
    ::std::string* temp = weight_file_;
    weight_file_ = const_cast< ::std::string*>(_default_weight_file_);
    return temp;
  }
}
inline void ModelParam::set_allocated_weight_file(::std::string* weight_file) {
  if (weight_file_ != _default_weight_file_) {
    delete weight_file_;
  }
  if (weight_file) {
    set_has_weight_file();
    weight_file_ = weight_file;
  } else {
    clear_has_weight_file();
    weight_file_ = const_cast< ::std::string*>(_default_weight_file_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.ModelParam.weight_file)
}

// optional uint32 input_offset_y = 4 [default = 0];
inline bool ModelParam::has_input_offset_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelParam::set_has_input_offset_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelParam::clear_has_input_offset_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelParam::clear_input_offset_y() {
  input_offset_y_ = 0u;
  clear_has_input_offset_y();
}
inline ::google::protobuf::uint32 ModelParam::input_offset_y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.input_offset_y)
  return input_offset_y_;
}
inline void ModelParam::set_input_offset_y(::google::protobuf::uint32 value) {
  set_has_input_offset_y();
  input_offset_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.input_offset_y)
}

// optional uint32 input_offset_x = 5 [default = 0];
inline bool ModelParam::has_input_offset_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModelParam::set_has_input_offset_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModelParam::clear_has_input_offset_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModelParam::clear_input_offset_x() {
  input_offset_x_ = 0u;
  clear_has_input_offset_x();
}
inline ::google::protobuf::uint32 ModelParam::input_offset_x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.input_offset_x)
  return input_offset_x_;
}
inline void ModelParam::set_input_offset_x(::google::protobuf::uint32 value) {
  set_has_input_offset_x();
  input_offset_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.input_offset_x)
}

// optional uint32 crop_height = 6 [default = 1080];
inline bool ModelParam::has_crop_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModelParam::set_has_crop_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModelParam::clear_has_crop_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModelParam::clear_crop_height() {
  crop_height_ = 1080u;
  clear_has_crop_height();
}
inline ::google::protobuf::uint32 ModelParam::crop_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.crop_height)
  return crop_height_;
}
inline void ModelParam::set_crop_height(::google::protobuf::uint32 value) {
  set_has_crop_height();
  crop_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.crop_height)
}

// optional uint32 crop_width = 7 [default = 1920];
inline bool ModelParam::has_crop_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModelParam::set_has_crop_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModelParam::clear_has_crop_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModelParam::clear_crop_width() {
  crop_width_ = 1920u;
  clear_has_crop_width();
}
inline ::google::protobuf::uint32 ModelParam::crop_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.crop_width)
  return crop_width_;
}
inline void ModelParam::set_crop_width(::google::protobuf::uint32 value) {
  set_has_crop_width();
  crop_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.crop_width)
}

// optional uint32 resize_height = 8 [default = 512];
inline bool ModelParam::has_resize_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ModelParam::set_has_resize_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ModelParam::clear_has_resize_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ModelParam::clear_resize_height() {
  resize_height_ = 512u;
  clear_has_resize_height();
}
inline ::google::protobuf::uint32 ModelParam::resize_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.resize_height)
  return resize_height_;
}
inline void ModelParam::set_resize_height(::google::protobuf::uint32 value) {
  set_has_resize_height();
  resize_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.resize_height)
}

// optional uint32 resize_width = 9 [default = 512];
inline bool ModelParam::has_resize_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ModelParam::set_has_resize_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ModelParam::clear_has_resize_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ModelParam::clear_resize_width() {
  resize_width_ = 512u;
  clear_has_resize_width();
}
inline ::google::protobuf::uint32 ModelParam::resize_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.resize_width)
  return resize_width_;
}
inline void ModelParam::set_resize_width(::google::protobuf::uint32 value) {
  set_has_resize_width();
  resize_width_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.resize_width)
}

// optional uint32 mean_b = 10 [default = 95];
inline bool ModelParam::has_mean_b() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ModelParam::set_has_mean_b() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ModelParam::clear_has_mean_b() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ModelParam::clear_mean_b() {
  mean_b_ = 95u;
  clear_has_mean_b();
}
inline ::google::protobuf::uint32 ModelParam::mean_b() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.mean_b)
  return mean_b_;
}
inline void ModelParam::set_mean_b(::google::protobuf::uint32 value) {
  set_has_mean_b();
  mean_b_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.mean_b)
}

// optional uint32 mean_g = 11 [default = 99];
inline bool ModelParam::has_mean_g() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ModelParam::set_has_mean_g() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ModelParam::clear_has_mean_g() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ModelParam::clear_mean_g() {
  mean_g_ = 99u;
  clear_has_mean_g();
}
inline ::google::protobuf::uint32 ModelParam::mean_g() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.mean_g)
  return mean_g_;
}
inline void ModelParam::set_mean_g(::google::protobuf::uint32 value) {
  set_has_mean_g();
  mean_g_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.mean_g)
}

// optional uint32 mean_r = 12 [default = 96];
inline bool ModelParam::has_mean_r() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ModelParam::set_has_mean_r() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ModelParam::clear_has_mean_r() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ModelParam::clear_mean_r() {
  mean_r_ = 96u;
  clear_has_mean_r();
}
inline ::google::protobuf::uint32 ModelParam::mean_r() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.mean_r)
  return mean_r_;
}
inline void ModelParam::set_mean_r(::google::protobuf::uint32 value) {
  set_has_mean_r();
  mean_r_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.mean_r)
}

// optional bool is_bgr = 13 [default = true];
inline bool ModelParam::has_is_bgr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ModelParam::set_has_is_bgr() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ModelParam::clear_has_is_bgr() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ModelParam::clear_is_bgr() {
  is_bgr_ = true;
  clear_has_is_bgr();
}
inline bool ModelParam::is_bgr() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.is_bgr)
  return is_bgr_;
}
inline void ModelParam::set_is_bgr(bool value) {
  set_has_is_bgr();
  is_bgr_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.is_bgr)
}

// optional float confidence_threshold = 14 [default = 0.5];
inline bool ModelParam::has_confidence_threshold() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ModelParam::set_has_confidence_threshold() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ModelParam::clear_has_confidence_threshold() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ModelParam::clear_confidence_threshold() {
  confidence_threshold_ = 0.5f;
  clear_has_confidence_threshold();
}
inline float ModelParam::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.confidence_threshold)
  return confidence_threshold_;
}
inline void ModelParam::set_confidence_threshold(float value) {
  set_has_confidence_threshold();
  confidence_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.confidence_threshold)
}

// optional float vpt_mean_dx = 15 [default = 0];
inline bool ModelParam::has_vpt_mean_dx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ModelParam::set_has_vpt_mean_dx() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ModelParam::clear_has_vpt_mean_dx() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ModelParam::clear_vpt_mean_dx() {
  vpt_mean_dx_ = 0;
  clear_has_vpt_mean_dx();
}
inline float ModelParam::vpt_mean_dx() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.vpt_mean_dx)
  return vpt_mean_dx_;
}
inline void ModelParam::set_vpt_mean_dx(float value) {
  set_has_vpt_mean_dx();
  vpt_mean_dx_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.vpt_mean_dx)
}

// optional float vpt_mean_dy = 16 [default = -77.284];
inline bool ModelParam::has_vpt_mean_dy() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ModelParam::set_has_vpt_mean_dy() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ModelParam::clear_has_vpt_mean_dy() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ModelParam::clear_vpt_mean_dy() {
  vpt_mean_dy_ = -77.284f;
  clear_has_vpt_mean_dy();
}
inline float ModelParam::vpt_mean_dy() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.vpt_mean_dy)
  return vpt_mean_dy_;
}
inline void ModelParam::set_vpt_mean_dy(float value) {
  set_has_vpt_mean_dy();
  vpt_mean_dy_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.vpt_mean_dy)
}

// optional float vpt_std_dx = 17 [default = 103.109];
inline bool ModelParam::has_vpt_std_dx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ModelParam::set_has_vpt_std_dx() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ModelParam::clear_has_vpt_std_dx() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ModelParam::clear_vpt_std_dx() {
  vpt_std_dx_ = 103.109f;
  clear_has_vpt_std_dx();
}
inline float ModelParam::vpt_std_dx() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.vpt_std_dx)
  return vpt_std_dx_;
}
inline void ModelParam::set_vpt_std_dx(float value) {
  set_has_vpt_std_dx();
  vpt_std_dx_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.vpt_std_dx)
}

// optional float vpt_std_dy = 18 [default = 95.273];
inline bool ModelParam::has_vpt_std_dy() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ModelParam::set_has_vpt_std_dy() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ModelParam::clear_has_vpt_std_dy() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ModelParam::clear_vpt_std_dy() {
  vpt_std_dy_ = 95.273f;
  clear_has_vpt_std_dy();
}
inline float ModelParam::vpt_std_dy() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.vpt_std_dy)
  return vpt_std_dy_;
}
inline void ModelParam::set_vpt_std_dy(float value) {
  set_has_vpt_std_dy();
  vpt_std_dy_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.vpt_std_dy)
}

// optional string model_type = 19 [default = "CaffeNet"];
inline bool ModelParam::has_model_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ModelParam::set_has_model_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ModelParam::clear_has_model_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ModelParam::clear_model_type() {
  if (model_type_ != _default_model_type_) {
    model_type_->assign(*_default_model_type_);
  }
  clear_has_model_type();
}
inline const ::std::string& ModelParam::model_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.ModelParam.model_type)
  return *model_type_;
}
inline void ModelParam::set_model_type(const ::std::string& value) {
  set_has_model_type();
  if (model_type_ == _default_model_type_) {
    model_type_ = new ::std::string;
  }
  model_type_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.ModelParam.model_type)
}
inline void ModelParam::set_model_type(const char* value) {
  set_has_model_type();
  if (model_type_ == _default_model_type_) {
    model_type_ = new ::std::string;
  }
  model_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.darkSCNN.ModelParam.model_type)
}
inline void ModelParam::set_model_type(const char* value, size_t size) {
  set_has_model_type();
  if (model_type_ == _default_model_type_) {
    model_type_ = new ::std::string;
  }
  model_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.darkSCNN.ModelParam.model_type)
}
inline ::std::string* ModelParam::mutable_model_type() {
  set_has_model_type();
  if (model_type_ == _default_model_type_) {
    model_type_ = new ::std::string(*_default_model_type_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.ModelParam.model_type)
  return model_type_;
}
inline ::std::string* ModelParam::release_model_type() {
  clear_has_model_type();
  if (model_type_ == _default_model_type_) {
    return NULL;
  } else {
    ::std::string* temp = model_type_;
    model_type_ = const_cast< ::std::string*>(_default_model_type_);
    return temp;
  }
}
inline void ModelParam::set_allocated_model_type(::std::string* model_type) {
  if (model_type_ != _default_model_type_) {
    delete model_type_;
  }
  if (model_type) {
    set_has_model_type();
    model_type_ = model_type;
  } else {
    clear_has_model_type();
    model_type_ = const_cast< ::std::string*>(_default_model_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.ModelParam.model_type)
}

// -------------------------------------------------------------------

// NetworkParam

// optional string seg_blob = 1 [default = "softmax"];
inline bool NetworkParam::has_seg_blob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkParam::set_has_seg_blob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkParam::clear_has_seg_blob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkParam::clear_seg_blob() {
  if (seg_blob_ != _default_seg_blob_) {
    seg_blob_->assign(*_default_seg_blob_);
  }
  clear_has_seg_blob();
}
inline const ::std::string& NetworkParam::seg_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.NetworkParam.seg_blob)
  return *seg_blob_;
}
inline void NetworkParam::set_seg_blob(const ::std::string& value) {
  set_has_seg_blob();
  if (seg_blob_ == _default_seg_blob_) {
    seg_blob_ = new ::std::string;
  }
  seg_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.NetworkParam.seg_blob)
}
inline void NetworkParam::set_seg_blob(const char* value) {
  set_has_seg_blob();
  if (seg_blob_ == _default_seg_blob_) {
    seg_blob_ = new ::std::string;
  }
  seg_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.darkSCNN.NetworkParam.seg_blob)
}
inline void NetworkParam::set_seg_blob(const char* value, size_t size) {
  set_has_seg_blob();
  if (seg_blob_ == _default_seg_blob_) {
    seg_blob_ = new ::std::string;
  }
  seg_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.darkSCNN.NetworkParam.seg_blob)
}
inline ::std::string* NetworkParam::mutable_seg_blob() {
  set_has_seg_blob();
  if (seg_blob_ == _default_seg_blob_) {
    seg_blob_ = new ::std::string(*_default_seg_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.NetworkParam.seg_blob)
  return seg_blob_;
}
inline ::std::string* NetworkParam::release_seg_blob() {
  clear_has_seg_blob();
  if (seg_blob_ == _default_seg_blob_) {
    return NULL;
  } else {
    ::std::string* temp = seg_blob_;
    seg_blob_ = const_cast< ::std::string*>(_default_seg_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_seg_blob(::std::string* seg_blob) {
  if (seg_blob_ != _default_seg_blob_) {
    delete seg_blob_;
  }
  if (seg_blob) {
    set_has_seg_blob();
    seg_blob_ = seg_blob;
  } else {
    clear_has_seg_blob();
    seg_blob_ = const_cast< ::std::string*>(_default_seg_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.NetworkParam.seg_blob)
}

// optional string vpt_blob = 2 [default = "fc_out"];
inline bool NetworkParam::has_vpt_blob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkParam::set_has_vpt_blob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkParam::clear_has_vpt_blob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkParam::clear_vpt_blob() {
  if (vpt_blob_ != _default_vpt_blob_) {
    vpt_blob_->assign(*_default_vpt_blob_);
  }
  clear_has_vpt_blob();
}
inline const ::std::string& NetworkParam::vpt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.NetworkParam.vpt_blob)
  return *vpt_blob_;
}
inline void NetworkParam::set_vpt_blob(const ::std::string& value) {
  set_has_vpt_blob();
  if (vpt_blob_ == _default_vpt_blob_) {
    vpt_blob_ = new ::std::string;
  }
  vpt_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.NetworkParam.vpt_blob)
}
inline void NetworkParam::set_vpt_blob(const char* value) {
  set_has_vpt_blob();
  if (vpt_blob_ == _default_vpt_blob_) {
    vpt_blob_ = new ::std::string;
  }
  vpt_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.darkSCNN.NetworkParam.vpt_blob)
}
inline void NetworkParam::set_vpt_blob(const char* value, size_t size) {
  set_has_vpt_blob();
  if (vpt_blob_ == _default_vpt_blob_) {
    vpt_blob_ = new ::std::string;
  }
  vpt_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.darkSCNN.NetworkParam.vpt_blob)
}
inline ::std::string* NetworkParam::mutable_vpt_blob() {
  set_has_vpt_blob();
  if (vpt_blob_ == _default_vpt_blob_) {
    vpt_blob_ = new ::std::string(*_default_vpt_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.NetworkParam.vpt_blob)
  return vpt_blob_;
}
inline ::std::string* NetworkParam::release_vpt_blob() {
  clear_has_vpt_blob();
  if (vpt_blob_ == _default_vpt_blob_) {
    return NULL;
  } else {
    ::std::string* temp = vpt_blob_;
    vpt_blob_ = const_cast< ::std::string*>(_default_vpt_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_vpt_blob(::std::string* vpt_blob) {
  if (vpt_blob_ != _default_vpt_blob_) {
    delete vpt_blob_;
  }
  if (vpt_blob) {
    set_has_vpt_blob();
    vpt_blob_ = vpt_blob;
  } else {
    clear_has_vpt_blob();
    vpt_blob_ = const_cast< ::std::string*>(_default_vpt_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.NetworkParam.vpt_blob)
}

// optional string input_blob = 3 [default = "data"];
inline bool NetworkParam::has_input_blob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkParam::set_has_input_blob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkParam::clear_has_input_blob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkParam::clear_input_blob() {
  if (input_blob_ != _default_input_blob_) {
    input_blob_->assign(*_default_input_blob_);
  }
  clear_has_input_blob();
}
inline const ::std::string& NetworkParam::input_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.darkSCNN.NetworkParam.input_blob)
  return *input_blob_;
}
inline void NetworkParam::set_input_blob(const ::std::string& value) {
  set_has_input_blob();
  if (input_blob_ == _default_input_blob_) {
    input_blob_ = new ::std::string;
  }
  input_blob_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.darkSCNN.NetworkParam.input_blob)
}
inline void NetworkParam::set_input_blob(const char* value) {
  set_has_input_blob();
  if (input_blob_ == _default_input_blob_) {
    input_blob_ = new ::std::string;
  }
  input_blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.darkSCNN.NetworkParam.input_blob)
}
inline void NetworkParam::set_input_blob(const char* value, size_t size) {
  set_has_input_blob();
  if (input_blob_ == _default_input_blob_) {
    input_blob_ = new ::std::string;
  }
  input_blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.darkSCNN.NetworkParam.input_blob)
}
inline ::std::string* NetworkParam::mutable_input_blob() {
  set_has_input_blob();
  if (input_blob_ == _default_input_blob_) {
    input_blob_ = new ::std::string(*_default_input_blob_);
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.darkSCNN.NetworkParam.input_blob)
  return input_blob_;
}
inline ::std::string* NetworkParam::release_input_blob() {
  clear_has_input_blob();
  if (input_blob_ == _default_input_blob_) {
    return NULL;
  } else {
    ::std::string* temp = input_blob_;
    input_blob_ = const_cast< ::std::string*>(_default_input_blob_);
    return temp;
  }
}
inline void NetworkParam::set_allocated_input_blob(::std::string* input_blob) {
  if (input_blob_ != _default_input_blob_) {
    delete input_blob_;
  }
  if (input_blob) {
    set_has_input_blob();
    input_blob_ = input_blob;
  } else {
    clear_has_input_blob();
    input_blob_ = const_cast< ::std::string*>(_default_input_blob_);
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.darkSCNN.NetworkParam.input_blob)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace darkSCNN
}  // namespace camera
}  // namespace perception
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_darkSCNN_2eproto__INCLUDED
