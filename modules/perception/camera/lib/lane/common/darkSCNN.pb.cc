// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: darkSCNN.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "darkSCNN.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace camera {
namespace darkSCNN {

namespace {

const ::google::protobuf::Descriptor* DarkSCNNParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DarkSCNNParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_darkSCNN_2eproto() {
  protobuf_AddDesc_darkSCNN_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "darkSCNN.proto");
  GOOGLE_CHECK(file != NULL);
  DarkSCNNParam_descriptor_ = file->message_type(0);
  static const int DarkSCNNParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkSCNNParam, model_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkSCNNParam, net_param_),
  };
  DarkSCNNParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DarkSCNNParam_descriptor_,
      DarkSCNNParam::default_instance_,
      DarkSCNNParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkSCNNParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DarkSCNNParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DarkSCNNParam));
  ModelParam_descriptor_ = file->message_type(1);
  static const int ModelParam_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, proto_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, weight_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, input_offset_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, input_offset_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, crop_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, crop_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, resize_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, resize_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, mean_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, mean_g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, mean_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, is_bgr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, confidence_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, vpt_mean_dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, vpt_mean_dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, vpt_std_dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, vpt_std_dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, model_type_),
  };
  ModelParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelParam_descriptor_,
      ModelParam::default_instance_,
      ModelParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelParam));
  NetworkParam_descriptor_ = file->message_type(2);
  static const int NetworkParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, seg_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, vpt_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, input_blob_),
  };
  NetworkParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkParam_descriptor_,
      NetworkParam::default_instance_,
      NetworkParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_darkSCNN_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DarkSCNNParam_descriptor_, &DarkSCNNParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelParam_descriptor_, &ModelParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkParam_descriptor_, &NetworkParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_darkSCNN_2eproto() {
  delete DarkSCNNParam::default_instance_;
  delete DarkSCNNParam_reflection_;
  delete ModelParam::default_instance_;
  delete ModelParam_reflection_;
  delete ModelParam::_default_model_name_;
  delete ModelParam::_default_proto_file_;
  delete ModelParam::_default_weight_file_;
  delete ModelParam::_default_model_type_;
  delete NetworkParam::default_instance_;
  delete NetworkParam_reflection_;
  delete NetworkParam::_default_seg_blob_;
  delete NetworkParam::_default_vpt_blob_;
  delete NetworkParam::_default_input_blob_;
}

void protobuf_AddDesc_darkSCNN_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016darkSCNN.proto\022!apollo.perception.came"
    "ra.darkSCNN\"\227\001\n\rDarkSCNNParam\022B\n\013model_p"
    "aram\030\001 \001(\0132-.apollo.perception.camera.da"
    "rkSCNN.ModelParam\022B\n\tnet_param\030\002 \001(\0132/.a"
    "pollo.perception.camera.darkSCNN.Network"
    "Param\"\233\004\n\nModelParam\022\034\n\nmodel_name\030\001 \001(\t"
    ":\010darkSCNN\022#\n\nproto_file\030\002 \001(\t:\017deploy.p"
    "rototxt\022&\n\013weight_file\030\003 \001(\t:\021deploy.caf"
    "femodel\022\031\n\016input_offset_y\030\004 \001(\r:\0010\022\031\n\016in"
    "put_offset_x\030\005 \001(\r:\0010\022\031\n\013crop_height\030\006 \001"
    "(\r:\0041080\022\030\n\ncrop_width\030\007 \001(\r:\0041920\022\032\n\rre"
    "size_height\030\010 \001(\r:\003512\022\031\n\014resize_width\030\t"
    " \001(\r:\003512\022\022\n\006mean_b\030\n \001(\r:\00295\022\022\n\006mean_g\030"
    "\013 \001(\r:\00299\022\022\n\006mean_r\030\014 \001(\r:\00296\022\024\n\006is_bgr\030"
    "\r \001(\010:\004true\022!\n\024confidence_threshold\030\016 \001("
    "\002:\0030.5\022\026\n\013vpt_mean_dx\030\017 \001(\002:\0010\022\034\n\013vpt_me"
    "an_dy\030\020 \001(\002:\007-77.284\022\033\n\nvpt_std_dx\030\021 \001(\002"
    ":\007103.109\022\032\n\nvpt_std_dy\030\022 \001(\002:\00695.273\022\034\n"
    "\nmodel_type\030\023 \001(\t:\010CaffeNet\"]\n\014NetworkPa"
    "ram\022\031\n\010seg_blob\030\001 \001(\t:\007softmax\022\030\n\010vpt_bl"
    "ob\030\002 \001(\t:\006fc_out\022\030\n\ninput_blob\030\003 \001(\t:\004da"
    "ta", 842);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "darkSCNN.proto", &protobuf_RegisterTypes);
  DarkSCNNParam::default_instance_ = new DarkSCNNParam();
  ModelParam::_default_model_name_ =
      new ::std::string("darkSCNN", 8);
  ModelParam::_default_proto_file_ =
      new ::std::string("deploy.prototxt", 15);
  ModelParam::_default_weight_file_ =
      new ::std::string("deploy.caffemodel", 17);
  ModelParam::_default_model_type_ =
      new ::std::string("CaffeNet", 8);
  ModelParam::default_instance_ = new ModelParam();
  NetworkParam::_default_seg_blob_ =
      new ::std::string("softmax", 7);
  NetworkParam::_default_vpt_blob_ =
      new ::std::string("fc_out", 6);
  NetworkParam::_default_input_blob_ =
      new ::std::string("data", 4);
  NetworkParam::default_instance_ = new NetworkParam();
  DarkSCNNParam::default_instance_->InitAsDefaultInstance();
  ModelParam::default_instance_->InitAsDefaultInstance();
  NetworkParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_darkSCNN_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_darkSCNN_2eproto {
  StaticDescriptorInitializer_darkSCNN_2eproto() {
    protobuf_AddDesc_darkSCNN_2eproto();
  }
} static_descriptor_initializer_darkSCNN_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DarkSCNNParam::kModelParamFieldNumber;
const int DarkSCNNParam::kNetParamFieldNumber;
#endif  // !_MSC_VER

DarkSCNNParam::DarkSCNNParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.darkSCNN.DarkSCNNParam)
}

void DarkSCNNParam::InitAsDefaultInstance() {
  model_param_ = const_cast< ::apollo::perception::camera::darkSCNN::ModelParam*>(&::apollo::perception::camera::darkSCNN::ModelParam::default_instance());
  net_param_ = const_cast< ::apollo::perception::camera::darkSCNN::NetworkParam*>(&::apollo::perception::camera::darkSCNN::NetworkParam::default_instance());
}

DarkSCNNParam::DarkSCNNParam(const DarkSCNNParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.darkSCNN.DarkSCNNParam)
}

void DarkSCNNParam::SharedCtor() {
  _cached_size_ = 0;
  model_param_ = NULL;
  net_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DarkSCNNParam::~DarkSCNNParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.darkSCNN.DarkSCNNParam)
  SharedDtor();
}

void DarkSCNNParam::SharedDtor() {
  if (this != default_instance_) {
    delete model_param_;
    delete net_param_;
  }
}

void DarkSCNNParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DarkSCNNParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DarkSCNNParam_descriptor_;
}

const DarkSCNNParam& DarkSCNNParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_darkSCNN_2eproto();
  return *default_instance_;
}

DarkSCNNParam* DarkSCNNParam::default_instance_ = NULL;

DarkSCNNParam* DarkSCNNParam::New() const {
  return new DarkSCNNParam;
}

void DarkSCNNParam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_model_param()) {
      if (model_param_ != NULL) model_param_->::apollo::perception::camera::darkSCNN::ModelParam::Clear();
    }
    if (has_net_param()) {
      if (net_param_ != NULL) net_param_->::apollo::perception::camera::darkSCNN::NetworkParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DarkSCNNParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.darkSCNN.DarkSCNNParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.camera.darkSCNN.ModelParam model_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_net_param;
        break;
      }

      // optional .apollo.perception.camera.darkSCNN.NetworkParam net_param = 2;
      case 2: {
        if (tag == 18) {
         parse_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.darkSCNN.DarkSCNNParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.darkSCNN.DarkSCNNParam)
  return false;
#undef DO_
}

void DarkSCNNParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.darkSCNN.DarkSCNNParam)
  // optional .apollo.perception.camera.darkSCNN.ModelParam model_param = 1;
  if (has_model_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->model_param(), output);
  }

  // optional .apollo.perception.camera.darkSCNN.NetworkParam net_param = 2;
  if (has_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->net_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.darkSCNN.DarkSCNNParam)
}

::google::protobuf::uint8* DarkSCNNParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.darkSCNN.DarkSCNNParam)
  // optional .apollo.perception.camera.darkSCNN.ModelParam model_param = 1;
  if (has_model_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->model_param(), target);
  }

  // optional .apollo.perception.camera.darkSCNN.NetworkParam net_param = 2;
  if (has_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->net_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.darkSCNN.DarkSCNNParam)
  return target;
}

int DarkSCNNParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.perception.camera.darkSCNN.ModelParam model_param = 1;
    if (has_model_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model_param());
    }

    // optional .apollo.perception.camera.darkSCNN.NetworkParam net_param = 2;
    if (has_net_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->net_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DarkSCNNParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DarkSCNNParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DarkSCNNParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DarkSCNNParam::MergeFrom(const DarkSCNNParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_param()) {
      mutable_model_param()->::apollo::perception::camera::darkSCNN::ModelParam::MergeFrom(from.model_param());
    }
    if (from.has_net_param()) {
      mutable_net_param()->::apollo::perception::camera::darkSCNN::NetworkParam::MergeFrom(from.net_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DarkSCNNParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DarkSCNNParam::CopyFrom(const DarkSCNNParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DarkSCNNParam::IsInitialized() const {

  return true;
}

void DarkSCNNParam::Swap(DarkSCNNParam* other) {
  if (other != this) {
    std::swap(model_param_, other->model_param_);
    std::swap(net_param_, other->net_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DarkSCNNParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DarkSCNNParam_descriptor_;
  metadata.reflection = DarkSCNNParam_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ModelParam::_default_model_name_ = NULL;
::std::string* ModelParam::_default_proto_file_ = NULL;
::std::string* ModelParam::_default_weight_file_ = NULL;
::std::string* ModelParam::_default_model_type_ = NULL;
#ifndef _MSC_VER
const int ModelParam::kModelNameFieldNumber;
const int ModelParam::kProtoFileFieldNumber;
const int ModelParam::kWeightFileFieldNumber;
const int ModelParam::kInputOffsetYFieldNumber;
const int ModelParam::kInputOffsetXFieldNumber;
const int ModelParam::kCropHeightFieldNumber;
const int ModelParam::kCropWidthFieldNumber;
const int ModelParam::kResizeHeightFieldNumber;
const int ModelParam::kResizeWidthFieldNumber;
const int ModelParam::kMeanBFieldNumber;
const int ModelParam::kMeanGFieldNumber;
const int ModelParam::kMeanRFieldNumber;
const int ModelParam::kIsBgrFieldNumber;
const int ModelParam::kConfidenceThresholdFieldNumber;
const int ModelParam::kVptMeanDxFieldNumber;
const int ModelParam::kVptMeanDyFieldNumber;
const int ModelParam::kVptStdDxFieldNumber;
const int ModelParam::kVptStdDyFieldNumber;
const int ModelParam::kModelTypeFieldNumber;
#endif  // !_MSC_VER

ModelParam::ModelParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.darkSCNN.ModelParam)
}

void ModelParam::InitAsDefaultInstance() {
}

ModelParam::ModelParam(const ModelParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.darkSCNN.ModelParam)
}

void ModelParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(_default_model_name_);
  proto_file_ = const_cast< ::std::string*>(_default_proto_file_);
  weight_file_ = const_cast< ::std::string*>(_default_weight_file_);
  input_offset_y_ = 0u;
  input_offset_x_ = 0u;
  crop_height_ = 1080u;
  crop_width_ = 1920u;
  resize_height_ = 512u;
  resize_width_ = 512u;
  mean_b_ = 95u;
  mean_g_ = 99u;
  mean_r_ = 96u;
  is_bgr_ = true;
  confidence_threshold_ = 0.5f;
  vpt_mean_dx_ = 0;
  vpt_mean_dy_ = -77.284f;
  vpt_std_dx_ = 103.109f;
  vpt_std_dy_ = 95.273f;
  model_type_ = const_cast< ::std::string*>(_default_model_type_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelParam::~ModelParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.darkSCNN.ModelParam)
  SharedDtor();
}

void ModelParam::SharedDtor() {
  if (model_name_ != _default_model_name_) {
    delete model_name_;
  }
  if (proto_file_ != _default_proto_file_) {
    delete proto_file_;
  }
  if (weight_file_ != _default_weight_file_) {
    delete weight_file_;
  }
  if (model_type_ != _default_model_type_) {
    delete model_type_;
  }
  if (this != default_instance_) {
  }
}

void ModelParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelParam_descriptor_;
}

const ModelParam& ModelParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_darkSCNN_2eproto();
  return *default_instance_;
}

ModelParam* ModelParam::default_instance_ = NULL;

ModelParam* ModelParam::New() const {
  return new ModelParam;
}

void ModelParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ModelParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(input_offset_y_, input_offset_x_);
    if (has_model_name()) {
      if (model_name_ != _default_model_name_) {
        model_name_->assign(*_default_model_name_);
      }
    }
    if (has_proto_file()) {
      if (proto_file_ != _default_proto_file_) {
        proto_file_->assign(*_default_proto_file_);
      }
    }
    if (has_weight_file()) {
      if (weight_file_ != _default_weight_file_) {
        weight_file_->assign(*_default_weight_file_);
      }
    }
    crop_height_ = 1080u;
    crop_width_ = 1920u;
    resize_height_ = 512u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    resize_width_ = 512u;
    mean_b_ = 95u;
    mean_g_ = 99u;
    mean_r_ = 96u;
    is_bgr_ = true;
    confidence_threshold_ = 0.5f;
    vpt_mean_dx_ = 0;
    vpt_mean_dy_ = -77.284f;
  }
  if (_has_bits_[16 / 32] & 458752) {
    vpt_std_dx_ = 103.109f;
    vpt_std_dy_ = 95.273f;
    if (has_model_type()) {
      if (model_type_ != _default_model_type_) {
        model_type_->assign(*_default_model_type_);
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.darkSCNN.ModelParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1 [default = "darkSCNN"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_proto_file;
        break;
      }

      // optional string proto_file = 2 [default = "deploy.prototxt"];
      case 2: {
        if (tag == 18) {
         parse_proto_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto_file().data(), this->proto_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_file;
        break;
      }

      // optional string weight_file = 3 [default = "deploy.caffemodel"];
      case 3: {
        if (tag == 26) {
         parse_weight_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weight_file().data(), this->weight_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "weight_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_input_offset_y;
        break;
      }

      // optional uint32 input_offset_y = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_input_offset_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_offset_y_)));
          set_has_input_offset_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_input_offset_x;
        break;
      }

      // optional uint32 input_offset_x = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_input_offset_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_offset_x_)));
          set_has_input_offset_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_crop_height;
        break;
      }

      // optional uint32 crop_height = 6 [default = 1080];
      case 6: {
        if (tag == 48) {
         parse_crop_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_height_)));
          set_has_crop_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_crop_width;
        break;
      }

      // optional uint32 crop_width = 7 [default = 1920];
      case 7: {
        if (tag == 56) {
         parse_crop_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_width_)));
          set_has_crop_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_resize_height;
        break;
      }

      // optional uint32 resize_height = 8 [default = 512];
      case 8: {
        if (tag == 64) {
         parse_resize_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resize_height_)));
          set_has_resize_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_resize_width;
        break;
      }

      // optional uint32 resize_width = 9 [default = 512];
      case 9: {
        if (tag == 72) {
         parse_resize_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resize_width_)));
          set_has_resize_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mean_b;
        break;
      }

      // optional uint32 mean_b = 10 [default = 95];
      case 10: {
        if (tag == 80) {
         parse_mean_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mean_b_)));
          set_has_mean_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mean_g;
        break;
      }

      // optional uint32 mean_g = 11 [default = 99];
      case 11: {
        if (tag == 88) {
         parse_mean_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mean_g_)));
          set_has_mean_g();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mean_r;
        break;
      }

      // optional uint32 mean_r = 12 [default = 96];
      case 12: {
        if (tag == 96) {
         parse_mean_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mean_r_)));
          set_has_mean_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_bgr;
        break;
      }

      // optional bool is_bgr = 13 [default = true];
      case 13: {
        if (tag == 104) {
         parse_is_bgr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bgr_)));
          set_has_is_bgr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_confidence_threshold;
        break;
      }

      // optional float confidence_threshold = 14 [default = 0.5];
      case 14: {
        if (tag == 117) {
         parse_confidence_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_threshold_)));
          set_has_confidence_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_vpt_mean_dx;
        break;
      }

      // optional float vpt_mean_dx = 15 [default = 0];
      case 15: {
        if (tag == 125) {
         parse_vpt_mean_dx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vpt_mean_dx_)));
          set_has_vpt_mean_dx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_vpt_mean_dy;
        break;
      }

      // optional float vpt_mean_dy = 16 [default = -77.284];
      case 16: {
        if (tag == 133) {
         parse_vpt_mean_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vpt_mean_dy_)));
          set_has_vpt_mean_dy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_vpt_std_dx;
        break;
      }

      // optional float vpt_std_dx = 17 [default = 103.109];
      case 17: {
        if (tag == 141) {
         parse_vpt_std_dx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vpt_std_dx_)));
          set_has_vpt_std_dx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_vpt_std_dy;
        break;
      }

      // optional float vpt_std_dy = 18 [default = 95.273];
      case 18: {
        if (tag == 149) {
         parse_vpt_std_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vpt_std_dy_)));
          set_has_vpt_std_dy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_model_type;
        break;
      }

      // optional string model_type = 19 [default = "CaffeNet"];
      case 19: {
        if (tag == 154) {
         parse_model_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_type().data(), this->model_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.darkSCNN.ModelParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.darkSCNN.ModelParam)
  return false;
#undef DO_
}

void ModelParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.darkSCNN.ModelParam)
  // optional string model_name = 1 [default = "darkSCNN"];
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // optional string proto_file = 2 [default = "deploy.prototxt"];
  if (has_proto_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_file().data(), this->proto_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proto_file(), output);
  }

  // optional string weight_file = 3 [default = "deploy.caffemodel"];
  if (has_weight_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight_file().data(), this->weight_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "weight_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->weight_file(), output);
  }

  // optional uint32 input_offset_y = 4 [default = 0];
  if (has_input_offset_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->input_offset_y(), output);
  }

  // optional uint32 input_offset_x = 5 [default = 0];
  if (has_input_offset_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->input_offset_x(), output);
  }

  // optional uint32 crop_height = 6 [default = 1080];
  if (has_crop_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->crop_height(), output);
  }

  // optional uint32 crop_width = 7 [default = 1920];
  if (has_crop_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->crop_width(), output);
  }

  // optional uint32 resize_height = 8 [default = 512];
  if (has_resize_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->resize_height(), output);
  }

  // optional uint32 resize_width = 9 [default = 512];
  if (has_resize_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->resize_width(), output);
  }

  // optional uint32 mean_b = 10 [default = 95];
  if (has_mean_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->mean_b(), output);
  }

  // optional uint32 mean_g = 11 [default = 99];
  if (has_mean_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mean_g(), output);
  }

  // optional uint32 mean_r = 12 [default = 96];
  if (has_mean_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mean_r(), output);
  }

  // optional bool is_bgr = 13 [default = true];
  if (has_is_bgr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_bgr(), output);
  }

  // optional float confidence_threshold = 14 [default = 0.5];
  if (has_confidence_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->confidence_threshold(), output);
  }

  // optional float vpt_mean_dx = 15 [default = 0];
  if (has_vpt_mean_dx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->vpt_mean_dx(), output);
  }

  // optional float vpt_mean_dy = 16 [default = -77.284];
  if (has_vpt_mean_dy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->vpt_mean_dy(), output);
  }

  // optional float vpt_std_dx = 17 [default = 103.109];
  if (has_vpt_std_dx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->vpt_std_dx(), output);
  }

  // optional float vpt_std_dy = 18 [default = 95.273];
  if (has_vpt_std_dy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->vpt_std_dy(), output);
  }

  // optional string model_type = 19 [default = "CaffeNet"];
  if (has_model_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_type().data(), this->model_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->model_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.darkSCNN.ModelParam)
}

::google::protobuf::uint8* ModelParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.darkSCNN.ModelParam)
  // optional string model_name = 1 [default = "darkSCNN"];
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // optional string proto_file = 2 [default = "deploy.prototxt"];
  if (has_proto_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_file().data(), this->proto_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proto_file(), target);
  }

  // optional string weight_file = 3 [default = "deploy.caffemodel"];
  if (has_weight_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight_file().data(), this->weight_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "weight_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->weight_file(), target);
  }

  // optional uint32 input_offset_y = 4 [default = 0];
  if (has_input_offset_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->input_offset_y(), target);
  }

  // optional uint32 input_offset_x = 5 [default = 0];
  if (has_input_offset_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->input_offset_x(), target);
  }

  // optional uint32 crop_height = 6 [default = 1080];
  if (has_crop_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->crop_height(), target);
  }

  // optional uint32 crop_width = 7 [default = 1920];
  if (has_crop_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->crop_width(), target);
  }

  // optional uint32 resize_height = 8 [default = 512];
  if (has_resize_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->resize_height(), target);
  }

  // optional uint32 resize_width = 9 [default = 512];
  if (has_resize_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->resize_width(), target);
  }

  // optional uint32 mean_b = 10 [default = 95];
  if (has_mean_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->mean_b(), target);
  }

  // optional uint32 mean_g = 11 [default = 99];
  if (has_mean_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mean_g(), target);
  }

  // optional uint32 mean_r = 12 [default = 96];
  if (has_mean_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mean_r(), target);
  }

  // optional bool is_bgr = 13 [default = true];
  if (has_is_bgr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_bgr(), target);
  }

  // optional float confidence_threshold = 14 [default = 0.5];
  if (has_confidence_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->confidence_threshold(), target);
  }

  // optional float vpt_mean_dx = 15 [default = 0];
  if (has_vpt_mean_dx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->vpt_mean_dx(), target);
  }

  // optional float vpt_mean_dy = 16 [default = -77.284];
  if (has_vpt_mean_dy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->vpt_mean_dy(), target);
  }

  // optional float vpt_std_dx = 17 [default = 103.109];
  if (has_vpt_std_dx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->vpt_std_dx(), target);
  }

  // optional float vpt_std_dy = 18 [default = 95.273];
  if (has_vpt_std_dy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->vpt_std_dy(), target);
  }

  // optional string model_type = 19 [default = "CaffeNet"];
  if (has_model_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_type().data(), this->model_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->model_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.darkSCNN.ModelParam)
  return target;
}

int ModelParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_name = 1 [default = "darkSCNN"];
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string proto_file = 2 [default = "deploy.prototxt"];
    if (has_proto_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proto_file());
    }

    // optional string weight_file = 3 [default = "deploy.caffemodel"];
    if (has_weight_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weight_file());
    }

    // optional uint32 input_offset_y = 4 [default = 0];
    if (has_input_offset_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_offset_y());
    }

    // optional uint32 input_offset_x = 5 [default = 0];
    if (has_input_offset_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_offset_x());
    }

    // optional uint32 crop_height = 6 [default = 1080];
    if (has_crop_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_height());
    }

    // optional uint32 crop_width = 7 [default = 1920];
    if (has_crop_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_width());
    }

    // optional uint32 resize_height = 8 [default = 512];
    if (has_resize_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resize_height());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 resize_width = 9 [default = 512];
    if (has_resize_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resize_width());
    }

    // optional uint32 mean_b = 10 [default = 95];
    if (has_mean_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mean_b());
    }

    // optional uint32 mean_g = 11 [default = 99];
    if (has_mean_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mean_g());
    }

    // optional uint32 mean_r = 12 [default = 96];
    if (has_mean_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mean_r());
    }

    // optional bool is_bgr = 13 [default = true];
    if (has_is_bgr()) {
      total_size += 1 + 1;
    }

    // optional float confidence_threshold = 14 [default = 0.5];
    if (has_confidence_threshold()) {
      total_size += 1 + 4;
    }

    // optional float vpt_mean_dx = 15 [default = 0];
    if (has_vpt_mean_dx()) {
      total_size += 1 + 4;
    }

    // optional float vpt_mean_dy = 16 [default = -77.284];
    if (has_vpt_mean_dy()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float vpt_std_dx = 17 [default = 103.109];
    if (has_vpt_std_dx()) {
      total_size += 2 + 4;
    }

    // optional float vpt_std_dy = 18 [default = 95.273];
    if (has_vpt_std_dy()) {
      total_size += 2 + 4;
    }

    // optional string model_type = 19 [default = "CaffeNet"];
    if (has_model_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelParam::MergeFrom(const ModelParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_proto_file()) {
      set_proto_file(from.proto_file());
    }
    if (from.has_weight_file()) {
      set_weight_file(from.weight_file());
    }
    if (from.has_input_offset_y()) {
      set_input_offset_y(from.input_offset_y());
    }
    if (from.has_input_offset_x()) {
      set_input_offset_x(from.input_offset_x());
    }
    if (from.has_crop_height()) {
      set_crop_height(from.crop_height());
    }
    if (from.has_crop_width()) {
      set_crop_width(from.crop_width());
    }
    if (from.has_resize_height()) {
      set_resize_height(from.resize_height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resize_width()) {
      set_resize_width(from.resize_width());
    }
    if (from.has_mean_b()) {
      set_mean_b(from.mean_b());
    }
    if (from.has_mean_g()) {
      set_mean_g(from.mean_g());
    }
    if (from.has_mean_r()) {
      set_mean_r(from.mean_r());
    }
    if (from.has_is_bgr()) {
      set_is_bgr(from.is_bgr());
    }
    if (from.has_confidence_threshold()) {
      set_confidence_threshold(from.confidence_threshold());
    }
    if (from.has_vpt_mean_dx()) {
      set_vpt_mean_dx(from.vpt_mean_dx());
    }
    if (from.has_vpt_mean_dy()) {
      set_vpt_mean_dy(from.vpt_mean_dy());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vpt_std_dx()) {
      set_vpt_std_dx(from.vpt_std_dx());
    }
    if (from.has_vpt_std_dy()) {
      set_vpt_std_dy(from.vpt_std_dy());
    }
    if (from.has_model_type()) {
      set_model_type(from.model_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelParam::CopyFrom(const ModelParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelParam::IsInitialized() const {

  return true;
}

void ModelParam::Swap(ModelParam* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    std::swap(proto_file_, other->proto_file_);
    std::swap(weight_file_, other->weight_file_);
    std::swap(input_offset_y_, other->input_offset_y_);
    std::swap(input_offset_x_, other->input_offset_x_);
    std::swap(crop_height_, other->crop_height_);
    std::swap(crop_width_, other->crop_width_);
    std::swap(resize_height_, other->resize_height_);
    std::swap(resize_width_, other->resize_width_);
    std::swap(mean_b_, other->mean_b_);
    std::swap(mean_g_, other->mean_g_);
    std::swap(mean_r_, other->mean_r_);
    std::swap(is_bgr_, other->is_bgr_);
    std::swap(confidence_threshold_, other->confidence_threshold_);
    std::swap(vpt_mean_dx_, other->vpt_mean_dx_);
    std::swap(vpt_mean_dy_, other->vpt_mean_dy_);
    std::swap(vpt_std_dx_, other->vpt_std_dx_);
    std::swap(vpt_std_dy_, other->vpt_std_dy_);
    std::swap(model_type_, other->model_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelParam_descriptor_;
  metadata.reflection = ModelParam_reflection_;
  return metadata;
}


// ===================================================================

::std::string* NetworkParam::_default_seg_blob_ = NULL;
::std::string* NetworkParam::_default_vpt_blob_ = NULL;
::std::string* NetworkParam::_default_input_blob_ = NULL;
#ifndef _MSC_VER
const int NetworkParam::kSegBlobFieldNumber;
const int NetworkParam::kVptBlobFieldNumber;
const int NetworkParam::kInputBlobFieldNumber;
#endif  // !_MSC_VER

NetworkParam::NetworkParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.darkSCNN.NetworkParam)
}

void NetworkParam::InitAsDefaultInstance() {
}

NetworkParam::NetworkParam(const NetworkParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.darkSCNN.NetworkParam)
}

void NetworkParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seg_blob_ = const_cast< ::std::string*>(_default_seg_blob_);
  vpt_blob_ = const_cast< ::std::string*>(_default_vpt_blob_);
  input_blob_ = const_cast< ::std::string*>(_default_input_blob_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkParam::~NetworkParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.darkSCNN.NetworkParam)
  SharedDtor();
}

void NetworkParam::SharedDtor() {
  if (seg_blob_ != _default_seg_blob_) {
    delete seg_blob_;
  }
  if (vpt_blob_ != _default_vpt_blob_) {
    delete vpt_blob_;
  }
  if (input_blob_ != _default_input_blob_) {
    delete input_blob_;
  }
  if (this != default_instance_) {
  }
}

void NetworkParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkParam_descriptor_;
}

const NetworkParam& NetworkParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_darkSCNN_2eproto();
  return *default_instance_;
}

NetworkParam* NetworkParam::default_instance_ = NULL;

NetworkParam* NetworkParam::New() const {
  return new NetworkParam;
}

void NetworkParam::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_seg_blob()) {
      if (seg_blob_ != _default_seg_blob_) {
        seg_blob_->assign(*_default_seg_blob_);
      }
    }
    if (has_vpt_blob()) {
      if (vpt_blob_ != _default_vpt_blob_) {
        vpt_blob_->assign(*_default_vpt_blob_);
      }
    }
    if (has_input_blob()) {
      if (input_blob_ != _default_input_blob_) {
        input_blob_->assign(*_default_input_blob_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.darkSCNN.NetworkParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string seg_blob = 1 [default = "softmax"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seg_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seg_blob().data(), this->seg_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "seg_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vpt_blob;
        break;
      }

      // optional string vpt_blob = 2 [default = "fc_out"];
      case 2: {
        if (tag == 18) {
         parse_vpt_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vpt_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vpt_blob().data(), this->vpt_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vpt_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input_blob;
        break;
      }

      // optional string input_blob = 3 [default = "data"];
      case 3: {
        if (tag == 26) {
         parse_input_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_blob().data(), this->input_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input_blob");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.darkSCNN.NetworkParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.darkSCNN.NetworkParam)
  return false;
#undef DO_
}

void NetworkParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.darkSCNN.NetworkParam)
  // optional string seg_blob = 1 [default = "softmax"];
  if (has_seg_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seg_blob().data(), this->seg_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seg_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->seg_blob(), output);
  }

  // optional string vpt_blob = 2 [default = "fc_out"];
  if (has_vpt_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vpt_blob().data(), this->vpt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vpt_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vpt_blob(), output);
  }

  // optional string input_blob = 3 [default = "data"];
  if (has_input_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_blob().data(), this->input_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->input_blob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.darkSCNN.NetworkParam)
}

::google::protobuf::uint8* NetworkParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.darkSCNN.NetworkParam)
  // optional string seg_blob = 1 [default = "softmax"];
  if (has_seg_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seg_blob().data(), this->seg_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seg_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->seg_blob(), target);
  }

  // optional string vpt_blob = 2 [default = "fc_out"];
  if (has_vpt_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vpt_blob().data(), this->vpt_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vpt_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vpt_blob(), target);
  }

  // optional string input_blob = 3 [default = "data"];
  if (has_input_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_blob().data(), this->input_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->input_blob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.darkSCNN.NetworkParam)
  return target;
}

int NetworkParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string seg_blob = 1 [default = "softmax"];
    if (has_seg_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seg_blob());
    }

    // optional string vpt_blob = 2 [default = "fc_out"];
    if (has_vpt_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vpt_blob());
    }

    // optional string input_blob = 3 [default = "data"];
    if (has_input_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_blob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkParam::MergeFrom(const NetworkParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seg_blob()) {
      set_seg_blob(from.seg_blob());
    }
    if (from.has_vpt_blob()) {
      set_vpt_blob(from.vpt_blob());
    }
    if (from.has_input_blob()) {
      set_input_blob(from.input_blob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParam::CopyFrom(const NetworkParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParam::IsInitialized() const {

  return true;
}

void NetworkParam::Swap(NetworkParam* other) {
  if (other != this) {
    std::swap(seg_blob_, other->seg_blob_);
    std::swap(vpt_blob_, other->vpt_blob_);
    std::swap(input_blob_, other->input_blob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkParam_descriptor_;
  metadata.reflection = NetworkParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace darkSCNN
}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
