// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception.proto

#ifndef PROTOBUF_perception_2eproto__INCLUDED
#define PROTOBUF_perception_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace camera {
namespace app {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_perception_2eproto();
void protobuf_AssignDesc_perception_2eproto();
void protobuf_ShutdownFile_perception_2eproto();

class PluginParam;
class DetectorParam;
class TrackerParam;
class TransformerParam;
class PostprocessorParam;
class FeatureParam;
class DebugParam;
class LanePerceptionParam;
class CalibrationServiceParam;
class ObjectTemplateParam;
class PerceptionParam;
class TrafficLightParam;

// ===================================================================

class PluginParam : public ::google::protobuf::Message {
 public:
  PluginParam();
  virtual ~PluginParam();

  PluginParam(const PluginParam& from);

  inline PluginParam& operator=(const PluginParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PluginParam& default_instance();

  void Swap(PluginParam* other);

  // implements Message ----------------------------------------------

  PluginParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PluginParam& from);
  void MergeFrom(const PluginParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string root_dir = 2;
  inline bool has_root_dir() const;
  inline void clear_root_dir();
  static const int kRootDirFieldNumber = 2;
  inline const ::std::string& root_dir() const;
  inline void set_root_dir(const ::std::string& value);
  inline void set_root_dir(const char* value);
  inline void set_root_dir(const char* value, size_t size);
  inline ::std::string* mutable_root_dir();
  inline ::std::string* release_root_dir();
  inline void set_allocated_root_dir(::std::string* root_dir);

  // optional string config_file = 3;
  inline bool has_config_file() const;
  inline void clear_config_file();
  static const int kConfigFileFieldNumber = 3;
  inline const ::std::string& config_file() const;
  inline void set_config_file(const ::std::string& value);
  inline void set_config_file(const char* value);
  inline void set_config_file(const char* value, size_t size);
  inline ::std::string* mutable_config_file();
  inline ::std::string* release_config_file();
  inline void set_allocated_config_file(::std::string* config_file);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.PluginParam)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_root_dir();
  inline void clear_has_root_dir();
  inline void set_has_config_file();
  inline void clear_has_config_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* root_dir_;
  ::std::string* config_file_;
  friend void  protobuf_AddDesc_perception_2eproto();
  friend void protobuf_AssignDesc_perception_2eproto();
  friend void protobuf_ShutdownFile_perception_2eproto();

  void InitAsDefaultInstance();
  static PluginParam* default_instance_;
};
// -------------------------------------------------------------------

class DetectorParam : public ::google::protobuf::Message {
 public:
  DetectorParam();
  virtual ~DetectorParam();

  DetectorParam(const DetectorParam& from);

  inline DetectorParam& operator=(const DetectorParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectorParam& default_instance();

  void Swap(DetectorParam* other);

  // implements Message ----------------------------------------------

  DetectorParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectorParam& from);
  void MergeFrom(const DetectorParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  inline bool has_plugin_param() const;
  inline void clear_plugin_param();
  static const int kPluginParamFieldNumber = 1;
  inline const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  inline ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  inline ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  inline void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);

  // optional string camera_name = 2;
  inline bool has_camera_name() const;
  inline void clear_camera_name();
  static const int kCameraNameFieldNumber = 2;
  inline const ::std::string& camera_name() const;
  inline void set_camera_name(const ::std::string& value);
  inline void set_camera_name(const char* value);
  inline void set_camera_name(const char* value, size_t size);
  inline ::std::string* mutable_camera_name();
  inline ::std::string* release_camera_name();
  inline void set_allocated_camera_name(::std::string* camera_name);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.DetectorParam)
 private:
  inline void set_has_plugin_param();
  inline void clear_has_plugin_param();
  inline void set_has_camera_name();
  inline void clear_has_camera_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  ::std::string* camera_name_;
  friend void  protobuf_AddDesc_perception_2eproto();
  friend void protobuf_AssignDesc_perception_2eproto();
  friend void protobuf_ShutdownFile_perception_2eproto();

  void InitAsDefaultInstance();
  static DetectorParam* default_instance_;
};
// -------------------------------------------------------------------

class TrackerParam : public ::google::protobuf::Message {
 public:
  TrackerParam();
  virtual ~TrackerParam();

  TrackerParam(const TrackerParam& from);

  inline TrackerParam& operator=(const TrackerParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerParam& default_instance();

  void Swap(TrackerParam* other);

  // implements Message ----------------------------------------------

  TrackerParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackerParam& from);
  void MergeFrom(const TrackerParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  inline bool has_plugin_param() const;
  inline void clear_plugin_param();
  static const int kPluginParamFieldNumber = 1;
  inline const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  inline ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  inline ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  inline void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.TrackerParam)
 private:
  inline void set_has_plugin_param();
  inline void clear_has_plugin_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  friend void  protobuf_AddDesc_perception_2eproto();
  friend void protobuf_AssignDesc_perception_2eproto();
  friend void protobuf_ShutdownFile_perception_2eproto();

  void InitAsDefaultInstance();
  static TrackerParam* default_instance_;
};
// -------------------------------------------------------------------

class TransformerParam : public ::google::protobuf::Message {
 public:
  TransformerParam();
  virtual ~TransformerParam();

  TransformerParam(const TransformerParam& from);

  inline TransformerParam& operator=(const TransformerParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformerParam& default_instance();

  void Swap(TransformerParam* other);

  // implements Message ----------------------------------------------

  TransformerParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformerParam& from);
  void MergeFrom(const TransformerParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  inline bool has_plugin_param() const;
  inline void clear_plugin_param();
  static const int kPluginParamFieldNumber = 1;
  inline const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  inline ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  inline ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  inline void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.TransformerParam)
 private:
  inline void set_has_plugin_param();
  inline void clear_has_plugin_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  friend void  protobuf_AddDesc_perception_2eproto();
  friend void protobuf_AssignDesc_perception_2eproto();
  friend void protobuf_ShutdownFile_perception_2eproto();

  void InitAsDefaultInstance();
  static TransformerParam* default_instance_;
};
// -------------------------------------------------------------------

class PostprocessorParam : public ::google::protobuf::Message {
 public:
  PostprocessorParam();
  virtual ~PostprocessorParam();

  PostprocessorParam(const PostprocessorParam& from);

  inline PostprocessorParam& operator=(const PostprocessorParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PostprocessorParam& default_instance();

  void Swap(PostprocessorParam* other);

  // implements Message ----------------------------------------------

  PostprocessorParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PostprocessorParam& from);
  void MergeFrom(const PostprocessorParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  inline bool has_plugin_param() const;
  inline void clear_plugin_param();
  static const int kPluginParamFieldNumber = 1;
  inline const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  inline ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  inline ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  inline void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.PostprocessorParam)
 private:
  inline void set_has_plugin_param();
  inline void clear_has_plugin_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  friend void  protobuf_AddDesc_perception_2eproto();
  friend void protobuf_AssignDesc_perception_2eproto();
  friend void protobuf_ShutdownFile_perception_2eproto();

  void InitAsDefaultInstance();
  static PostprocessorParam* default_instance_;
};
// -------------------------------------------------------------------

class FeatureParam : public ::google::protobuf::Message {
 public:
  FeatureParam();
  virtual ~FeatureParam();

  FeatureParam(const FeatureParam& from);

  inline FeatureParam& operator=(const FeatureParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureParam& default_instance();

  void Swap(FeatureParam* other);

  // implements Message ----------------------------------------------

  FeatureParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureParam& from);
  void MergeFrom(const FeatureParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  inline bool has_plugin_param() const;
  inline void clear_plugin_param();
  static const int kPluginParamFieldNumber = 1;
  inline const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  inline ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  inline ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  inline void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.FeatureParam)
 private:
  inline void set_has_plugin_param();
  inline void clear_has_plugin_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  friend void  protobuf_AddDesc_perception_2eproto();
  friend void protobuf_AssignDesc_perception_2eproto();
  friend void protobuf_ShutdownFile_perception_2eproto();

  void InitAsDefaultInstance();
  static FeatureParam* default_instance_;
};
// -------------------------------------------------------------------

class DebugParam : public ::google::protobuf::Message {
 public:
  DebugParam();
  virtual ~DebugParam();

  DebugParam(const DebugParam& from);

  inline DebugParam& operator=(const DebugParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugParam& default_instance();

  void Swap(DebugParam* other);

  // implements Message ----------------------------------------------

  DebugParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DebugParam& from);
  void MergeFrom(const DebugParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string detection_out_dir = 1;
  inline bool has_detection_out_dir() const;
  inline void clear_detection_out_dir();
  static const int kDetectionOutDirFieldNumber = 1;
  inline const ::std::string& detection_out_dir() const;
  inline void set_detection_out_dir(const ::std::string& value);
  inline void set_detection_out_dir(const char* value);
  inline void set_detection_out_dir(const char* value, size_t size);
  inline ::std::string* mutable_detection_out_dir();
  inline ::std::string* release_detection_out_dir();
  inline void set_allocated_detection_out_dir(::std::string* detection_out_dir);

  // optional string tracked_detection_out_dir = 2;
  inline bool has_tracked_detection_out_dir() const;
  inline void clear_tracked_detection_out_dir();
  static const int kTrackedDetectionOutDirFieldNumber = 2;
  inline const ::std::string& tracked_detection_out_dir() const;
  inline void set_tracked_detection_out_dir(const ::std::string& value);
  inline void set_tracked_detection_out_dir(const char* value);
  inline void set_tracked_detection_out_dir(const char* value, size_t size);
  inline ::std::string* mutable_tracked_detection_out_dir();
  inline ::std::string* release_tracked_detection_out_dir();
  inline void set_allocated_tracked_detection_out_dir(::std::string* tracked_detection_out_dir);

  // optional string track_out_file = 3;
  inline bool has_track_out_file() const;
  inline void clear_track_out_file();
  static const int kTrackOutFileFieldNumber = 3;
  inline const ::std::string& track_out_file() const;
  inline void set_track_out_file(const ::std::string& value);
  inline void set_track_out_file(const char* value);
  inline void set_track_out_file(const char* value, size_t size);
  inline ::std::string* mutable_track_out_file();
  inline ::std::string* release_track_out_file();
  inline void set_allocated_track_out_file(::std::string* track_out_file);

  // optional string detect_feature_dir = 4;
  inline bool has_detect_feature_dir() const;
  inline void clear_detect_feature_dir();
  static const int kDetectFeatureDirFieldNumber = 4;
  inline const ::std::string& detect_feature_dir() const;
  inline void set_detect_feature_dir(const ::std::string& value);
  inline void set_detect_feature_dir(const char* value);
  inline void set_detect_feature_dir(const char* value, size_t size);
  inline ::std::string* mutable_detect_feature_dir();
  inline ::std::string* release_detect_feature_dir();
  inline void set_allocated_detect_feature_dir(::std::string* detect_feature_dir);

  // optional string lane_out_dir = 5;
  inline bool has_lane_out_dir() const;
  inline void clear_lane_out_dir();
  static const int kLaneOutDirFieldNumber = 5;
  inline const ::std::string& lane_out_dir() const;
  inline void set_lane_out_dir(const ::std::string& value);
  inline void set_lane_out_dir(const char* value);
  inline void set_lane_out_dir(const char* value, size_t size);
  inline ::std::string* mutable_lane_out_dir();
  inline ::std::string* release_lane_out_dir();
  inline void set_allocated_lane_out_dir(::std::string* lane_out_dir);

  // optional string camera2world_out_file = 6;
  inline bool has_camera2world_out_file() const;
  inline void clear_camera2world_out_file();
  static const int kCamera2WorldOutFileFieldNumber = 6;
  inline const ::std::string& camera2world_out_file() const;
  inline void set_camera2world_out_file(const ::std::string& value);
  inline void set_camera2world_out_file(const char* value);
  inline void set_camera2world_out_file(const char* value, size_t size);
  inline ::std::string* mutable_camera2world_out_file();
  inline ::std::string* release_camera2world_out_file();
  inline void set_allocated_camera2world_out_file(::std::string* camera2world_out_file);

  // optional string calibration_out_dir = 7;
  inline bool has_calibration_out_dir() const;
  inline void clear_calibration_out_dir();
  static const int kCalibrationOutDirFieldNumber = 7;
  inline const ::std::string& calibration_out_dir() const;
  inline void set_calibration_out_dir(const ::std::string& value);
  inline void set_calibration_out_dir(const char* value);
  inline void set_calibration_out_dir(const char* value, size_t size);
  inline ::std::string* mutable_calibration_out_dir();
  inline ::std::string* release_calibration_out_dir();
  inline void set_allocated_calibration_out_dir(::std::string* calibration_out_dir);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.DebugParam)
 private:
  inline void set_has_detection_out_dir();
  inline void clear_has_detection_out_dir();
  inline void set_has_tracked_detection_out_dir();
  inline void clear_has_tracked_detection_out_dir();
  inline void set_has_track_out_file();
  inline void clear_has_track_out_file();
  inline void set_has_detect_feature_dir();
  inline void clear_has_detect_feature_dir();
  inline void set_has_lane_out_dir();
  inline void clear_has_lane_out_dir();
  inline void set_has_camera2world_out_file();
  inline void clear_has_camera2world_out_file();
  inline void set_has_calibration_out_dir();
  inline void clear_has_calibration_out_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* detection_out_dir_;
  ::std::string* tracked_detection_out_dir_;
  ::std::string* track_out_file_;
  ::std::string* detect_feature_dir_;
  ::std::string* lane_out_dir_;
  ::std::string* camera2world_out_file_;
  ::std::string* calibration_out_dir_;
  friend void  protobuf_AddDesc_perception_2eproto();
  friend void protobuf_AssignDesc_perception_2eproto();
  friend void protobuf_ShutdownFile_perception_2eproto();

  void InitAsDefaultInstance();
  static DebugParam* default_instance_;
};
// -------------------------------------------------------------------

class LanePerceptionParam : public ::google::protobuf::Message {
 public:
  LanePerceptionParam();
  virtual ~LanePerceptionParam();

  LanePerceptionParam(const LanePerceptionParam& from);

  inline LanePerceptionParam& operator=(const LanePerceptionParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LanePerceptionParam& default_instance();

  void Swap(LanePerceptionParam* other);

  // implements Message ----------------------------------------------

  LanePerceptionParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LanePerceptionParam& from);
  void MergeFrom(const LanePerceptionParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
  inline bool has_lane_detector_param() const;
  inline void clear_lane_detector_param();
  static const int kLaneDetectorParamFieldNumber = 1;
  inline const ::apollo::perception::camera::app::DetectorParam& lane_detector_param() const;
  inline ::apollo::perception::camera::app::DetectorParam* mutable_lane_detector_param();
  inline ::apollo::perception::camera::app::DetectorParam* release_lane_detector_param();
  inline void set_allocated_lane_detector_param(::apollo::perception::camera::app::DetectorParam* lane_detector_param);

  // optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
  inline bool has_lane_postprocessor_param() const;
  inline void clear_lane_postprocessor_param();
  static const int kLanePostprocessorParamFieldNumber = 2;
  inline const ::apollo::perception::camera::app::PluginParam& lane_postprocessor_param() const;
  inline ::apollo::perception::camera::app::PluginParam* mutable_lane_postprocessor_param();
  inline ::apollo::perception::camera::app::PluginParam* release_lane_postprocessor_param();
  inline void set_allocated_lane_postprocessor_param(::apollo::perception::camera::app::PluginParam* lane_postprocessor_param);

  // optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
  inline bool has_lane_tracker_param() const;
  inline void clear_lane_tracker_param();
  static const int kLaneTrackerParamFieldNumber = 3;
  inline const ::apollo::perception::camera::app::PluginParam& lane_tracker_param() const;
  inline ::apollo::perception::camera::app::PluginParam* mutable_lane_tracker_param();
  inline ::apollo::perception::camera::app::PluginParam* release_lane_tracker_param();
  inline void set_allocated_lane_tracker_param(::apollo::perception::camera::app::PluginParam* lane_tracker_param);

  // optional int32 gpu_id = 4;
  inline bool has_gpu_id() const;
  inline void clear_gpu_id();
  static const int kGpuIdFieldNumber = 4;
  inline ::google::protobuf::int32 gpu_id() const;
  inline void set_gpu_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.LanePerceptionParam)
 private:
  inline void set_has_lane_detector_param();
  inline void clear_has_lane_detector_param();
  inline void set_has_lane_postprocessor_param();
  inline void clear_has_lane_postprocessor_param();
  inline void set_has_lane_tracker_param();
  inline void clear_has_lane_tracker_param();
  inline void set_has_gpu_id();
  inline void clear_has_gpu_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::camera::app::DetectorParam* lane_detector_param_;
  ::apollo::perception::camera::app::PluginParam* lane_postprocessor_param_;
  ::apollo::perception::camera::app::PluginParam* lane_tracker_param_;
  ::google::protobuf::int32 gpu_id_;
  friend void  protobuf_AddDesc_perception_2eproto();
  friend void protobuf_AssignDesc_perception_2eproto();
  friend void protobuf_ShutdownFile_perception_2eproto();

  void InitAsDefaultInstance();
  static LanePerceptionParam* default_instance_;
};
// -------------------------------------------------------------------

class CalibrationServiceParam : public ::google::protobuf::Message {
 public:
  CalibrationServiceParam();
  virtual ~CalibrationServiceParam();

  CalibrationServiceParam(const CalibrationServiceParam& from);

  inline CalibrationServiceParam& operator=(const CalibrationServiceParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalibrationServiceParam& default_instance();

  void Swap(CalibrationServiceParam* other);

  // implements Message ----------------------------------------------

  CalibrationServiceParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CalibrationServiceParam& from);
  void MergeFrom(const CalibrationServiceParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string calibrator_method = 2;
  inline bool has_calibrator_method() const;
  inline void clear_calibrator_method();
  static const int kCalibratorMethodFieldNumber = 2;
  inline const ::std::string& calibrator_method() const;
  inline void set_calibrator_method(const ::std::string& value);
  inline void set_calibrator_method(const char* value);
  inline void set_calibrator_method(const char* value, size_t size);
  inline ::std::string* mutable_calibrator_method();
  inline ::std::string* release_calibrator_method();
  inline void set_allocated_calibrator_method(::std::string* calibrator_method);

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
  inline bool has_plugin_param() const;
  inline void clear_plugin_param();
  static const int kPluginParamFieldNumber = 3;
  inline const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  inline ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  inline ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  inline void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.CalibrationServiceParam)
 private:
  inline void set_has_calibrator_method();
  inline void clear_has_calibrator_method();
  inline void set_has_plugin_param();
  inline void clear_has_plugin_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* calibrator_method_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  friend void  protobuf_AddDesc_perception_2eproto();
  friend void protobuf_AssignDesc_perception_2eproto();
  friend void protobuf_ShutdownFile_perception_2eproto();

  void InitAsDefaultInstance();
  static CalibrationServiceParam* default_instance_;
};
// -------------------------------------------------------------------

class ObjectTemplateParam : public ::google::protobuf::Message {
 public:
  ObjectTemplateParam();
  virtual ~ObjectTemplateParam();

  ObjectTemplateParam(const ObjectTemplateParam& from);

  inline ObjectTemplateParam& operator=(const ObjectTemplateParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectTemplateParam& default_instance();

  void Swap(ObjectTemplateParam* other);

  // implements Message ----------------------------------------------

  ObjectTemplateParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectTemplateParam& from);
  void MergeFrom(const ObjectTemplateParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  inline bool has_plugin_param() const;
  inline void clear_plugin_param();
  static const int kPluginParamFieldNumber = 1;
  inline const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  inline ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  inline ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  inline void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.ObjectTemplateParam)
 private:
  inline void set_has_plugin_param();
  inline void clear_has_plugin_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  friend void  protobuf_AddDesc_perception_2eproto();
  friend void protobuf_AssignDesc_perception_2eproto();
  friend void protobuf_ShutdownFile_perception_2eproto();

  void InitAsDefaultInstance();
  static ObjectTemplateParam* default_instance_;
};
// -------------------------------------------------------------------

class PerceptionParam : public ::google::protobuf::Message {
 public:
  PerceptionParam();
  virtual ~PerceptionParam();

  PerceptionParam(const PerceptionParam& from);

  inline PerceptionParam& operator=(const PerceptionParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptionParam& default_instance();

  void Swap(PerceptionParam* other);

  // implements Message ----------------------------------------------

  PerceptionParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerceptionParam& from);
  void MergeFrom(const PerceptionParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  inline int detector_param_size() const;
  inline void clear_detector_param();
  static const int kDetectorParamFieldNumber = 1;
  inline const ::apollo::perception::camera::app::DetectorParam& detector_param(int index) const;
  inline ::apollo::perception::camera::app::DetectorParam* mutable_detector_param(int index);
  inline ::apollo::perception::camera::app::DetectorParam* add_detector_param();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >&
      detector_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >*
      mutable_detector_param();

  // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
  inline bool has_tracker_param() const;
  inline void clear_tracker_param();
  static const int kTrackerParamFieldNumber = 2;
  inline const ::apollo::perception::camera::app::TrackerParam& tracker_param() const;
  inline ::apollo::perception::camera::app::TrackerParam* mutable_tracker_param();
  inline ::apollo::perception::camera::app::TrackerParam* release_tracker_param();
  inline void set_allocated_tracker_param(::apollo::perception::camera::app::TrackerParam* tracker_param);

  // optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
  inline bool has_transformer_param() const;
  inline void clear_transformer_param();
  static const int kTransformerParamFieldNumber = 3;
  inline const ::apollo::perception::camera::app::TransformerParam& transformer_param() const;
  inline ::apollo::perception::camera::app::TransformerParam* mutable_transformer_param();
  inline ::apollo::perception::camera::app::TransformerParam* release_transformer_param();
  inline void set_allocated_transformer_param(::apollo::perception::camera::app::TransformerParam* transformer_param);

  // optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
  inline bool has_postprocessor_param() const;
  inline void clear_postprocessor_param();
  static const int kPostprocessorParamFieldNumber = 4;
  inline const ::apollo::perception::camera::app::PostprocessorParam& postprocessor_param() const;
  inline ::apollo::perception::camera::app::PostprocessorParam* mutable_postprocessor_param();
  inline ::apollo::perception::camera::app::PostprocessorParam* release_postprocessor_param();
  inline void set_allocated_postprocessor_param(::apollo::perception::camera::app::PostprocessorParam* postprocessor_param);

  // optional int32 gpu_id = 5;
  inline bool has_gpu_id() const;
  inline void clear_gpu_id();
  static const int kGpuIdFieldNumber = 5;
  inline ::google::protobuf::int32 gpu_id() const;
  inline void set_gpu_id(::google::protobuf::int32 value);

  // optional string camera_intrinsics = 6;
  inline bool has_camera_intrinsics() const;
  inline void clear_camera_intrinsics();
  static const int kCameraIntrinsicsFieldNumber = 6;
  inline const ::std::string& camera_intrinsics() const;
  inline void set_camera_intrinsics(const ::std::string& value);
  inline void set_camera_intrinsics(const char* value);
  inline void set_camera_intrinsics(const char* value, size_t size);
  inline ::std::string* mutable_camera_intrinsics();
  inline ::std::string* release_camera_intrinsics();
  inline void set_allocated_camera_intrinsics(::std::string* camera_intrinsics);

  // optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
  inline bool has_feature_param() const;
  inline void clear_feature_param();
  static const int kFeatureParamFieldNumber = 7;
  inline const ::apollo::perception::camera::app::FeatureParam& feature_param() const;
  inline ::apollo::perception::camera::app::FeatureParam* mutable_feature_param();
  inline ::apollo::perception::camera::app::FeatureParam* release_feature_param();
  inline void set_allocated_feature_param(::apollo::perception::camera::app::FeatureParam* feature_param);

  // optional .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
  inline bool has_lane_param() const;
  inline void clear_lane_param();
  static const int kLaneParamFieldNumber = 8;
  inline const ::apollo::perception::camera::app::LanePerceptionParam& lane_param() const;
  inline ::apollo::perception::camera::app::LanePerceptionParam* mutable_lane_param();
  inline ::apollo::perception::camera::app::LanePerceptionParam* release_lane_param();
  inline void set_allocated_lane_param(::apollo::perception::camera::app::LanePerceptionParam* lane_param);

  // optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
  inline bool has_calibration_service_param() const;
  inline void clear_calibration_service_param();
  static const int kCalibrationServiceParamFieldNumber = 9;
  inline const ::apollo::perception::camera::app::CalibrationServiceParam& calibration_service_param() const;
  inline ::apollo::perception::camera::app::CalibrationServiceParam* mutable_calibration_service_param();
  inline ::apollo::perception::camera::app::CalibrationServiceParam* release_calibration_service_param();
  inline void set_allocated_calibration_service_param(::apollo::perception::camera::app::CalibrationServiceParam* calibration_service_param);

  // optional .apollo.perception.camera.app.DebugParam debug_param = 10;
  inline bool has_debug_param() const;
  inline void clear_debug_param();
  static const int kDebugParamFieldNumber = 10;
  inline const ::apollo::perception::camera::app::DebugParam& debug_param() const;
  inline ::apollo::perception::camera::app::DebugParam* mutable_debug_param();
  inline ::apollo::perception::camera::app::DebugParam* release_debug_param();
  inline void set_allocated_debug_param(::apollo::perception::camera::app::DebugParam* debug_param);

  // optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
  inline bool has_object_template_param() const;
  inline void clear_object_template_param();
  static const int kObjectTemplateParamFieldNumber = 11;
  inline const ::apollo::perception::camera::app::ObjectTemplateParam& object_template_param() const;
  inline ::apollo::perception::camera::app::ObjectTemplateParam* mutable_object_template_param();
  inline ::apollo::perception::camera::app::ObjectTemplateParam* release_object_template_param();
  inline void set_allocated_object_template_param(::apollo::perception::camera::app::ObjectTemplateParam* object_template_param);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.PerceptionParam)
 private:
  inline void set_has_tracker_param();
  inline void clear_has_tracker_param();
  inline void set_has_transformer_param();
  inline void clear_has_transformer_param();
  inline void set_has_postprocessor_param();
  inline void clear_has_postprocessor_param();
  inline void set_has_gpu_id();
  inline void clear_has_gpu_id();
  inline void set_has_camera_intrinsics();
  inline void clear_has_camera_intrinsics();
  inline void set_has_feature_param();
  inline void clear_has_feature_param();
  inline void set_has_lane_param();
  inline void clear_has_lane_param();
  inline void set_has_calibration_service_param();
  inline void clear_has_calibration_service_param();
  inline void set_has_debug_param();
  inline void clear_has_debug_param();
  inline void set_has_object_template_param();
  inline void clear_has_object_template_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam > detector_param_;
  ::apollo::perception::camera::app::TrackerParam* tracker_param_;
  ::apollo::perception::camera::app::TransformerParam* transformer_param_;
  ::apollo::perception::camera::app::PostprocessorParam* postprocessor_param_;
  ::std::string* camera_intrinsics_;
  ::apollo::perception::camera::app::FeatureParam* feature_param_;
  ::apollo::perception::camera::app::LanePerceptionParam* lane_param_;
  ::apollo::perception::camera::app::CalibrationServiceParam* calibration_service_param_;
  ::apollo::perception::camera::app::DebugParam* debug_param_;
  ::apollo::perception::camera::app::ObjectTemplateParam* object_template_param_;
  ::google::protobuf::int32 gpu_id_;
  friend void  protobuf_AddDesc_perception_2eproto();
  friend void protobuf_AssignDesc_perception_2eproto();
  friend void protobuf_ShutdownFile_perception_2eproto();

  void InitAsDefaultInstance();
  static PerceptionParam* default_instance_;
};
// -------------------------------------------------------------------

class TrafficLightParam : public ::google::protobuf::Message {
 public:
  TrafficLightParam();
  virtual ~TrafficLightParam();

  TrafficLightParam(const TrafficLightParam& from);

  inline TrafficLightParam& operator=(const TrafficLightParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLightParam& default_instance();

  void Swap(TrafficLightParam* other);

  // implements Message ----------------------------------------------

  TrafficLightParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficLightParam& from);
  void MergeFrom(const TrafficLightParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  inline int detector_param_size() const;
  inline void clear_detector_param();
  static const int kDetectorParamFieldNumber = 1;
  inline const ::apollo::perception::camera::app::DetectorParam& detector_param(int index) const;
  inline ::apollo::perception::camera::app::DetectorParam* mutable_detector_param(int index);
  inline ::apollo::perception::camera::app::DetectorParam* add_detector_param();
  inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >&
      detector_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >*
      mutable_detector_param();

  // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
  inline bool has_tracker_param() const;
  inline void clear_tracker_param();
  static const int kTrackerParamFieldNumber = 2;
  inline const ::apollo::perception::camera::app::TrackerParam& tracker_param() const;
  inline ::apollo::perception::camera::app::TrackerParam* mutable_tracker_param();
  inline ::apollo::perception::camera::app::TrackerParam* release_tracker_param();
  inline void set_allocated_tracker_param(::apollo::perception::camera::app::TrackerParam* tracker_param);

  // optional int32 gpu_id = 3;
  inline bool has_gpu_id() const;
  inline void clear_gpu_id();
  static const int kGpuIdFieldNumber = 3;
  inline ::google::protobuf::int32 gpu_id() const;
  inline void set_gpu_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.TrafficLightParam)
 private:
  inline void set_has_tracker_param();
  inline void clear_has_tracker_param();
  inline void set_has_gpu_id();
  inline void clear_has_gpu_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam > detector_param_;
  ::apollo::perception::camera::app::TrackerParam* tracker_param_;
  ::google::protobuf::int32 gpu_id_;
  friend void  protobuf_AddDesc_perception_2eproto();
  friend void protobuf_AssignDesc_perception_2eproto();
  friend void protobuf_ShutdownFile_perception_2eproto();

  void InitAsDefaultInstance();
  static TrafficLightParam* default_instance_;
};
// ===================================================================


// ===================================================================

// PluginParam

// optional string name = 1;
inline bool PluginParam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PluginParam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PluginParam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PluginParam::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PluginParam::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PluginParam.name)
  return *name_;
}
inline void PluginParam::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.PluginParam.name)
}
inline void PluginParam::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.PluginParam.name)
}
inline void PluginParam::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.PluginParam.name)
}
inline ::std::string* PluginParam::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PluginParam.name)
  return name_;
}
inline ::std::string* PluginParam::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PluginParam::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PluginParam.name)
}

// optional string root_dir = 2;
inline bool PluginParam::has_root_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PluginParam::set_has_root_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PluginParam::clear_has_root_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PluginParam::clear_root_dir() {
  if (root_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_dir_->clear();
  }
  clear_has_root_dir();
}
inline const ::std::string& PluginParam::root_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PluginParam.root_dir)
  return *root_dir_;
}
inline void PluginParam::set_root_dir(const ::std::string& value) {
  set_has_root_dir();
  if (root_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_dir_ = new ::std::string;
  }
  root_dir_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.PluginParam.root_dir)
}
inline void PluginParam::set_root_dir(const char* value) {
  set_has_root_dir();
  if (root_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_dir_ = new ::std::string;
  }
  root_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.PluginParam.root_dir)
}
inline void PluginParam::set_root_dir(const char* value, size_t size) {
  set_has_root_dir();
  if (root_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_dir_ = new ::std::string;
  }
  root_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.PluginParam.root_dir)
}
inline ::std::string* PluginParam::mutable_root_dir() {
  set_has_root_dir();
  if (root_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PluginParam.root_dir)
  return root_dir_;
}
inline ::std::string* PluginParam::release_root_dir() {
  clear_has_root_dir();
  if (root_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = root_dir_;
    root_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PluginParam::set_allocated_root_dir(::std::string* root_dir) {
  if (root_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete root_dir_;
  }
  if (root_dir) {
    set_has_root_dir();
    root_dir_ = root_dir;
  } else {
    clear_has_root_dir();
    root_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PluginParam.root_dir)
}

// optional string config_file = 3;
inline bool PluginParam::has_config_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PluginParam::set_has_config_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PluginParam::clear_has_config_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PluginParam::clear_config_file() {
  if (config_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_file_->clear();
  }
  clear_has_config_file();
}
inline const ::std::string& PluginParam::config_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PluginParam.config_file)
  return *config_file_;
}
inline void PluginParam::set_config_file(const ::std::string& value) {
  set_has_config_file();
  if (config_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_file_ = new ::std::string;
  }
  config_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.PluginParam.config_file)
}
inline void PluginParam::set_config_file(const char* value) {
  set_has_config_file();
  if (config_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_file_ = new ::std::string;
  }
  config_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.PluginParam.config_file)
}
inline void PluginParam::set_config_file(const char* value, size_t size) {
  set_has_config_file();
  if (config_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_file_ = new ::std::string;
  }
  config_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.PluginParam.config_file)
}
inline ::std::string* PluginParam::mutable_config_file() {
  set_has_config_file();
  if (config_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PluginParam.config_file)
  return config_file_;
}
inline ::std::string* PluginParam::release_config_file() {
  clear_has_config_file();
  if (config_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = config_file_;
    config_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PluginParam::set_allocated_config_file(::std::string* config_file) {
  if (config_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_file_;
  }
  if (config_file) {
    set_has_config_file();
    config_file_ = config_file;
  } else {
    clear_has_config_file();
    config_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PluginParam.config_file)
}

// -------------------------------------------------------------------

// DetectorParam

// optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
inline bool DetectorParam::has_plugin_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectorParam::set_has_plugin_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectorParam::clear_has_plugin_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectorParam::clear_plugin_param() {
  if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
  clear_has_plugin_param();
}
inline const ::apollo::perception::camera::app::PluginParam& DetectorParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DetectorParam.plugin_param)
  return plugin_param_ != NULL ? *plugin_param_ : *default_instance_->plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* DetectorParam::mutable_plugin_param() {
  set_has_plugin_param();
  if (plugin_param_ == NULL) plugin_param_ = new ::apollo::perception::camera::app::PluginParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DetectorParam.plugin_param)
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* DetectorParam::release_plugin_param() {
  clear_has_plugin_param();
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = NULL;
  return temp;
}
inline void DetectorParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  delete plugin_param_;
  plugin_param_ = plugin_param;
  if (plugin_param) {
    set_has_plugin_param();
  } else {
    clear_has_plugin_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DetectorParam.plugin_param)
}

// optional string camera_name = 2;
inline bool DetectorParam::has_camera_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectorParam::set_has_camera_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectorParam::clear_has_camera_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectorParam::clear_camera_name() {
  if (camera_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_name_->clear();
  }
  clear_has_camera_name();
}
inline const ::std::string& DetectorParam::camera_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DetectorParam.camera_name)
  return *camera_name_;
}
inline void DetectorParam::set_camera_name(const ::std::string& value) {
  set_has_camera_name();
  if (camera_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_name_ = new ::std::string;
  }
  camera_name_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DetectorParam.camera_name)
}
inline void DetectorParam::set_camera_name(const char* value) {
  set_has_camera_name();
  if (camera_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_name_ = new ::std::string;
  }
  camera_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DetectorParam.camera_name)
}
inline void DetectorParam::set_camera_name(const char* value, size_t size) {
  set_has_camera_name();
  if (camera_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_name_ = new ::std::string;
  }
  camera_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DetectorParam.camera_name)
}
inline ::std::string* DetectorParam::mutable_camera_name() {
  set_has_camera_name();
  if (camera_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DetectorParam.camera_name)
  return camera_name_;
}
inline ::std::string* DetectorParam::release_camera_name() {
  clear_has_camera_name();
  if (camera_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = camera_name_;
    camera_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DetectorParam::set_allocated_camera_name(::std::string* camera_name) {
  if (camera_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_name_;
  }
  if (camera_name) {
    set_has_camera_name();
    camera_name_ = camera_name;
  } else {
    clear_has_camera_name();
    camera_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DetectorParam.camera_name)
}

// -------------------------------------------------------------------

// TrackerParam

// optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
inline bool TrackerParam::has_plugin_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackerParam::set_has_plugin_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackerParam::clear_has_plugin_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackerParam::clear_plugin_param() {
  if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
  clear_has_plugin_param();
}
inline const ::apollo::perception::camera::app::PluginParam& TrackerParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.TrackerParam.plugin_param)
  return plugin_param_ != NULL ? *plugin_param_ : *default_instance_->plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* TrackerParam::mutable_plugin_param() {
  set_has_plugin_param();
  if (plugin_param_ == NULL) plugin_param_ = new ::apollo::perception::camera::app::PluginParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.TrackerParam.plugin_param)
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* TrackerParam::release_plugin_param() {
  clear_has_plugin_param();
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = NULL;
  return temp;
}
inline void TrackerParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  delete plugin_param_;
  plugin_param_ = plugin_param;
  if (plugin_param) {
    set_has_plugin_param();
  } else {
    clear_has_plugin_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.TrackerParam.plugin_param)
}

// -------------------------------------------------------------------

// TransformerParam

// optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
inline bool TransformerParam::has_plugin_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformerParam::set_has_plugin_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformerParam::clear_has_plugin_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformerParam::clear_plugin_param() {
  if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
  clear_has_plugin_param();
}
inline const ::apollo::perception::camera::app::PluginParam& TransformerParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.TransformerParam.plugin_param)
  return plugin_param_ != NULL ? *plugin_param_ : *default_instance_->plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* TransformerParam::mutable_plugin_param() {
  set_has_plugin_param();
  if (plugin_param_ == NULL) plugin_param_ = new ::apollo::perception::camera::app::PluginParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.TransformerParam.plugin_param)
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* TransformerParam::release_plugin_param() {
  clear_has_plugin_param();
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = NULL;
  return temp;
}
inline void TransformerParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  delete plugin_param_;
  plugin_param_ = plugin_param;
  if (plugin_param) {
    set_has_plugin_param();
  } else {
    clear_has_plugin_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.TransformerParam.plugin_param)
}

// -------------------------------------------------------------------

// PostprocessorParam

// optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
inline bool PostprocessorParam::has_plugin_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PostprocessorParam::set_has_plugin_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PostprocessorParam::clear_has_plugin_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PostprocessorParam::clear_plugin_param() {
  if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
  clear_has_plugin_param();
}
inline const ::apollo::perception::camera::app::PluginParam& PostprocessorParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PostprocessorParam.plugin_param)
  return plugin_param_ != NULL ? *plugin_param_ : *default_instance_->plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* PostprocessorParam::mutable_plugin_param() {
  set_has_plugin_param();
  if (plugin_param_ == NULL) plugin_param_ = new ::apollo::perception::camera::app::PluginParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PostprocessorParam.plugin_param)
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* PostprocessorParam::release_plugin_param() {
  clear_has_plugin_param();
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = NULL;
  return temp;
}
inline void PostprocessorParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  delete plugin_param_;
  plugin_param_ = plugin_param;
  if (plugin_param) {
    set_has_plugin_param();
  } else {
    clear_has_plugin_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PostprocessorParam.plugin_param)
}

// -------------------------------------------------------------------

// FeatureParam

// optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
inline bool FeatureParam::has_plugin_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureParam::set_has_plugin_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureParam::clear_has_plugin_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureParam::clear_plugin_param() {
  if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
  clear_has_plugin_param();
}
inline const ::apollo::perception::camera::app::PluginParam& FeatureParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.FeatureParam.plugin_param)
  return plugin_param_ != NULL ? *plugin_param_ : *default_instance_->plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* FeatureParam::mutable_plugin_param() {
  set_has_plugin_param();
  if (plugin_param_ == NULL) plugin_param_ = new ::apollo::perception::camera::app::PluginParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.FeatureParam.plugin_param)
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* FeatureParam::release_plugin_param() {
  clear_has_plugin_param();
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = NULL;
  return temp;
}
inline void FeatureParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  delete plugin_param_;
  plugin_param_ = plugin_param;
  if (plugin_param) {
    set_has_plugin_param();
  } else {
    clear_has_plugin_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.FeatureParam.plugin_param)
}

// -------------------------------------------------------------------

// DebugParam

// optional string detection_out_dir = 1;
inline bool DebugParam::has_detection_out_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DebugParam::set_has_detection_out_dir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DebugParam::clear_has_detection_out_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DebugParam::clear_detection_out_dir() {
  if (detection_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detection_out_dir_->clear();
  }
  clear_has_detection_out_dir();
}
inline const ::std::string& DebugParam::detection_out_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.detection_out_dir)
  return *detection_out_dir_;
}
inline void DebugParam::set_detection_out_dir(const ::std::string& value) {
  set_has_detection_out_dir();
  if (detection_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detection_out_dir_ = new ::std::string;
  }
  detection_out_dir_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.detection_out_dir)
}
inline void DebugParam::set_detection_out_dir(const char* value) {
  set_has_detection_out_dir();
  if (detection_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detection_out_dir_ = new ::std::string;
  }
  detection_out_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.detection_out_dir)
}
inline void DebugParam::set_detection_out_dir(const char* value, size_t size) {
  set_has_detection_out_dir();
  if (detection_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detection_out_dir_ = new ::std::string;
  }
  detection_out_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.detection_out_dir)
}
inline ::std::string* DebugParam::mutable_detection_out_dir() {
  set_has_detection_out_dir();
  if (detection_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detection_out_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.detection_out_dir)
  return detection_out_dir_;
}
inline ::std::string* DebugParam::release_detection_out_dir() {
  clear_has_detection_out_dir();
  if (detection_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = detection_out_dir_;
    detection_out_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DebugParam::set_allocated_detection_out_dir(::std::string* detection_out_dir) {
  if (detection_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detection_out_dir_;
  }
  if (detection_out_dir) {
    set_has_detection_out_dir();
    detection_out_dir_ = detection_out_dir;
  } else {
    clear_has_detection_out_dir();
    detection_out_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.detection_out_dir)
}

// optional string tracked_detection_out_dir = 2;
inline bool DebugParam::has_tracked_detection_out_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DebugParam::set_has_tracked_detection_out_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DebugParam::clear_has_tracked_detection_out_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DebugParam::clear_tracked_detection_out_dir() {
  if (tracked_detection_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tracked_detection_out_dir_->clear();
  }
  clear_has_tracked_detection_out_dir();
}
inline const ::std::string& DebugParam::tracked_detection_out_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
  return *tracked_detection_out_dir_;
}
inline void DebugParam::set_tracked_detection_out_dir(const ::std::string& value) {
  set_has_tracked_detection_out_dir();
  if (tracked_detection_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tracked_detection_out_dir_ = new ::std::string;
  }
  tracked_detection_out_dir_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
}
inline void DebugParam::set_tracked_detection_out_dir(const char* value) {
  set_has_tracked_detection_out_dir();
  if (tracked_detection_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tracked_detection_out_dir_ = new ::std::string;
  }
  tracked_detection_out_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
}
inline void DebugParam::set_tracked_detection_out_dir(const char* value, size_t size) {
  set_has_tracked_detection_out_dir();
  if (tracked_detection_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tracked_detection_out_dir_ = new ::std::string;
  }
  tracked_detection_out_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
}
inline ::std::string* DebugParam::mutable_tracked_detection_out_dir() {
  set_has_tracked_detection_out_dir();
  if (tracked_detection_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tracked_detection_out_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
  return tracked_detection_out_dir_;
}
inline ::std::string* DebugParam::release_tracked_detection_out_dir() {
  clear_has_tracked_detection_out_dir();
  if (tracked_detection_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tracked_detection_out_dir_;
    tracked_detection_out_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DebugParam::set_allocated_tracked_detection_out_dir(::std::string* tracked_detection_out_dir) {
  if (tracked_detection_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tracked_detection_out_dir_;
  }
  if (tracked_detection_out_dir) {
    set_has_tracked_detection_out_dir();
    tracked_detection_out_dir_ = tracked_detection_out_dir;
  } else {
    clear_has_tracked_detection_out_dir();
    tracked_detection_out_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
}

// optional string track_out_file = 3;
inline bool DebugParam::has_track_out_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DebugParam::set_has_track_out_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DebugParam::clear_has_track_out_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DebugParam::clear_track_out_file() {
  if (track_out_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    track_out_file_->clear();
  }
  clear_has_track_out_file();
}
inline const ::std::string& DebugParam::track_out_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.track_out_file)
  return *track_out_file_;
}
inline void DebugParam::set_track_out_file(const ::std::string& value) {
  set_has_track_out_file();
  if (track_out_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    track_out_file_ = new ::std::string;
  }
  track_out_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.track_out_file)
}
inline void DebugParam::set_track_out_file(const char* value) {
  set_has_track_out_file();
  if (track_out_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    track_out_file_ = new ::std::string;
  }
  track_out_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.track_out_file)
}
inline void DebugParam::set_track_out_file(const char* value, size_t size) {
  set_has_track_out_file();
  if (track_out_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    track_out_file_ = new ::std::string;
  }
  track_out_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.track_out_file)
}
inline ::std::string* DebugParam::mutable_track_out_file() {
  set_has_track_out_file();
  if (track_out_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    track_out_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.track_out_file)
  return track_out_file_;
}
inline ::std::string* DebugParam::release_track_out_file() {
  clear_has_track_out_file();
  if (track_out_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = track_out_file_;
    track_out_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DebugParam::set_allocated_track_out_file(::std::string* track_out_file) {
  if (track_out_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete track_out_file_;
  }
  if (track_out_file) {
    set_has_track_out_file();
    track_out_file_ = track_out_file;
  } else {
    clear_has_track_out_file();
    track_out_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.track_out_file)
}

// optional string detect_feature_dir = 4;
inline bool DebugParam::has_detect_feature_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DebugParam::set_has_detect_feature_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DebugParam::clear_has_detect_feature_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DebugParam::clear_detect_feature_dir() {
  if (detect_feature_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detect_feature_dir_->clear();
  }
  clear_has_detect_feature_dir();
}
inline const ::std::string& DebugParam::detect_feature_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.detect_feature_dir)
  return *detect_feature_dir_;
}
inline void DebugParam::set_detect_feature_dir(const ::std::string& value) {
  set_has_detect_feature_dir();
  if (detect_feature_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detect_feature_dir_ = new ::std::string;
  }
  detect_feature_dir_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.detect_feature_dir)
}
inline void DebugParam::set_detect_feature_dir(const char* value) {
  set_has_detect_feature_dir();
  if (detect_feature_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detect_feature_dir_ = new ::std::string;
  }
  detect_feature_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.detect_feature_dir)
}
inline void DebugParam::set_detect_feature_dir(const char* value, size_t size) {
  set_has_detect_feature_dir();
  if (detect_feature_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detect_feature_dir_ = new ::std::string;
  }
  detect_feature_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.detect_feature_dir)
}
inline ::std::string* DebugParam::mutable_detect_feature_dir() {
  set_has_detect_feature_dir();
  if (detect_feature_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detect_feature_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.detect_feature_dir)
  return detect_feature_dir_;
}
inline ::std::string* DebugParam::release_detect_feature_dir() {
  clear_has_detect_feature_dir();
  if (detect_feature_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = detect_feature_dir_;
    detect_feature_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DebugParam::set_allocated_detect_feature_dir(::std::string* detect_feature_dir) {
  if (detect_feature_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detect_feature_dir_;
  }
  if (detect_feature_dir) {
    set_has_detect_feature_dir();
    detect_feature_dir_ = detect_feature_dir;
  } else {
    clear_has_detect_feature_dir();
    detect_feature_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.detect_feature_dir)
}

// optional string lane_out_dir = 5;
inline bool DebugParam::has_lane_out_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DebugParam::set_has_lane_out_dir() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DebugParam::clear_has_lane_out_dir() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DebugParam::clear_lane_out_dir() {
  if (lane_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lane_out_dir_->clear();
  }
  clear_has_lane_out_dir();
}
inline const ::std::string& DebugParam::lane_out_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.lane_out_dir)
  return *lane_out_dir_;
}
inline void DebugParam::set_lane_out_dir(const ::std::string& value) {
  set_has_lane_out_dir();
  if (lane_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lane_out_dir_ = new ::std::string;
  }
  lane_out_dir_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.lane_out_dir)
}
inline void DebugParam::set_lane_out_dir(const char* value) {
  set_has_lane_out_dir();
  if (lane_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lane_out_dir_ = new ::std::string;
  }
  lane_out_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.lane_out_dir)
}
inline void DebugParam::set_lane_out_dir(const char* value, size_t size) {
  set_has_lane_out_dir();
  if (lane_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lane_out_dir_ = new ::std::string;
  }
  lane_out_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.lane_out_dir)
}
inline ::std::string* DebugParam::mutable_lane_out_dir() {
  set_has_lane_out_dir();
  if (lane_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lane_out_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.lane_out_dir)
  return lane_out_dir_;
}
inline ::std::string* DebugParam::release_lane_out_dir() {
  clear_has_lane_out_dir();
  if (lane_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lane_out_dir_;
    lane_out_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DebugParam::set_allocated_lane_out_dir(::std::string* lane_out_dir) {
  if (lane_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lane_out_dir_;
  }
  if (lane_out_dir) {
    set_has_lane_out_dir();
    lane_out_dir_ = lane_out_dir;
  } else {
    clear_has_lane_out_dir();
    lane_out_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.lane_out_dir)
}

// optional string camera2world_out_file = 6;
inline bool DebugParam::has_camera2world_out_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DebugParam::set_has_camera2world_out_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DebugParam::clear_has_camera2world_out_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DebugParam::clear_camera2world_out_file() {
  if (camera2world_out_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera2world_out_file_->clear();
  }
  clear_has_camera2world_out_file();
}
inline const ::std::string& DebugParam::camera2world_out_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.camera2world_out_file)
  return *camera2world_out_file_;
}
inline void DebugParam::set_camera2world_out_file(const ::std::string& value) {
  set_has_camera2world_out_file();
  if (camera2world_out_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera2world_out_file_ = new ::std::string;
  }
  camera2world_out_file_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.camera2world_out_file)
}
inline void DebugParam::set_camera2world_out_file(const char* value) {
  set_has_camera2world_out_file();
  if (camera2world_out_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera2world_out_file_ = new ::std::string;
  }
  camera2world_out_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.camera2world_out_file)
}
inline void DebugParam::set_camera2world_out_file(const char* value, size_t size) {
  set_has_camera2world_out_file();
  if (camera2world_out_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera2world_out_file_ = new ::std::string;
  }
  camera2world_out_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.camera2world_out_file)
}
inline ::std::string* DebugParam::mutable_camera2world_out_file() {
  set_has_camera2world_out_file();
  if (camera2world_out_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera2world_out_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.camera2world_out_file)
  return camera2world_out_file_;
}
inline ::std::string* DebugParam::release_camera2world_out_file() {
  clear_has_camera2world_out_file();
  if (camera2world_out_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = camera2world_out_file_;
    camera2world_out_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DebugParam::set_allocated_camera2world_out_file(::std::string* camera2world_out_file) {
  if (camera2world_out_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera2world_out_file_;
  }
  if (camera2world_out_file) {
    set_has_camera2world_out_file();
    camera2world_out_file_ = camera2world_out_file;
  } else {
    clear_has_camera2world_out_file();
    camera2world_out_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.camera2world_out_file)
}

// optional string calibration_out_dir = 7;
inline bool DebugParam::has_calibration_out_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DebugParam::set_has_calibration_out_dir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DebugParam::clear_has_calibration_out_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DebugParam::clear_calibration_out_dir() {
  if (calibration_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibration_out_dir_->clear();
  }
  clear_has_calibration_out_dir();
}
inline const ::std::string& DebugParam::calibration_out_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.calibration_out_dir)
  return *calibration_out_dir_;
}
inline void DebugParam::set_calibration_out_dir(const ::std::string& value) {
  set_has_calibration_out_dir();
  if (calibration_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibration_out_dir_ = new ::std::string;
  }
  calibration_out_dir_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.calibration_out_dir)
}
inline void DebugParam::set_calibration_out_dir(const char* value) {
  set_has_calibration_out_dir();
  if (calibration_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibration_out_dir_ = new ::std::string;
  }
  calibration_out_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.calibration_out_dir)
}
inline void DebugParam::set_calibration_out_dir(const char* value, size_t size) {
  set_has_calibration_out_dir();
  if (calibration_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibration_out_dir_ = new ::std::string;
  }
  calibration_out_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.calibration_out_dir)
}
inline ::std::string* DebugParam::mutable_calibration_out_dir() {
  set_has_calibration_out_dir();
  if (calibration_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibration_out_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.calibration_out_dir)
  return calibration_out_dir_;
}
inline ::std::string* DebugParam::release_calibration_out_dir() {
  clear_has_calibration_out_dir();
  if (calibration_out_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = calibration_out_dir_;
    calibration_out_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DebugParam::set_allocated_calibration_out_dir(::std::string* calibration_out_dir) {
  if (calibration_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete calibration_out_dir_;
  }
  if (calibration_out_dir) {
    set_has_calibration_out_dir();
    calibration_out_dir_ = calibration_out_dir;
  } else {
    clear_has_calibration_out_dir();
    calibration_out_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.calibration_out_dir)
}

// -------------------------------------------------------------------

// LanePerceptionParam

// optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
inline bool LanePerceptionParam::has_lane_detector_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LanePerceptionParam::set_has_lane_detector_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LanePerceptionParam::clear_has_lane_detector_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LanePerceptionParam::clear_lane_detector_param() {
  if (lane_detector_param_ != NULL) lane_detector_param_->::apollo::perception::camera::app::DetectorParam::Clear();
  clear_has_lane_detector_param();
}
inline const ::apollo::perception::camera::app::DetectorParam& LanePerceptionParam::lane_detector_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.LanePerceptionParam.lane_detector_param)
  return lane_detector_param_ != NULL ? *lane_detector_param_ : *default_instance_->lane_detector_param_;
}
inline ::apollo::perception::camera::app::DetectorParam* LanePerceptionParam::mutable_lane_detector_param() {
  set_has_lane_detector_param();
  if (lane_detector_param_ == NULL) lane_detector_param_ = new ::apollo::perception::camera::app::DetectorParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.LanePerceptionParam.lane_detector_param)
  return lane_detector_param_;
}
inline ::apollo::perception::camera::app::DetectorParam* LanePerceptionParam::release_lane_detector_param() {
  clear_has_lane_detector_param();
  ::apollo::perception::camera::app::DetectorParam* temp = lane_detector_param_;
  lane_detector_param_ = NULL;
  return temp;
}
inline void LanePerceptionParam::set_allocated_lane_detector_param(::apollo::perception::camera::app::DetectorParam* lane_detector_param) {
  delete lane_detector_param_;
  lane_detector_param_ = lane_detector_param;
  if (lane_detector_param) {
    set_has_lane_detector_param();
  } else {
    clear_has_lane_detector_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.LanePerceptionParam.lane_detector_param)
}

// optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
inline bool LanePerceptionParam::has_lane_postprocessor_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LanePerceptionParam::set_has_lane_postprocessor_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LanePerceptionParam::clear_has_lane_postprocessor_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LanePerceptionParam::clear_lane_postprocessor_param() {
  if (lane_postprocessor_param_ != NULL) lane_postprocessor_param_->::apollo::perception::camera::app::PluginParam::Clear();
  clear_has_lane_postprocessor_param();
}
inline const ::apollo::perception::camera::app::PluginParam& LanePerceptionParam::lane_postprocessor_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.LanePerceptionParam.lane_postprocessor_param)
  return lane_postprocessor_param_ != NULL ? *lane_postprocessor_param_ : *default_instance_->lane_postprocessor_param_;
}
inline ::apollo::perception::camera::app::PluginParam* LanePerceptionParam::mutable_lane_postprocessor_param() {
  set_has_lane_postprocessor_param();
  if (lane_postprocessor_param_ == NULL) lane_postprocessor_param_ = new ::apollo::perception::camera::app::PluginParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.LanePerceptionParam.lane_postprocessor_param)
  return lane_postprocessor_param_;
}
inline ::apollo::perception::camera::app::PluginParam* LanePerceptionParam::release_lane_postprocessor_param() {
  clear_has_lane_postprocessor_param();
  ::apollo::perception::camera::app::PluginParam* temp = lane_postprocessor_param_;
  lane_postprocessor_param_ = NULL;
  return temp;
}
inline void LanePerceptionParam::set_allocated_lane_postprocessor_param(::apollo::perception::camera::app::PluginParam* lane_postprocessor_param) {
  delete lane_postprocessor_param_;
  lane_postprocessor_param_ = lane_postprocessor_param;
  if (lane_postprocessor_param) {
    set_has_lane_postprocessor_param();
  } else {
    clear_has_lane_postprocessor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.LanePerceptionParam.lane_postprocessor_param)
}

// optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
inline bool LanePerceptionParam::has_lane_tracker_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LanePerceptionParam::set_has_lane_tracker_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LanePerceptionParam::clear_has_lane_tracker_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LanePerceptionParam::clear_lane_tracker_param() {
  if (lane_tracker_param_ != NULL) lane_tracker_param_->::apollo::perception::camera::app::PluginParam::Clear();
  clear_has_lane_tracker_param();
}
inline const ::apollo::perception::camera::app::PluginParam& LanePerceptionParam::lane_tracker_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.LanePerceptionParam.lane_tracker_param)
  return lane_tracker_param_ != NULL ? *lane_tracker_param_ : *default_instance_->lane_tracker_param_;
}
inline ::apollo::perception::camera::app::PluginParam* LanePerceptionParam::mutable_lane_tracker_param() {
  set_has_lane_tracker_param();
  if (lane_tracker_param_ == NULL) lane_tracker_param_ = new ::apollo::perception::camera::app::PluginParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.LanePerceptionParam.lane_tracker_param)
  return lane_tracker_param_;
}
inline ::apollo::perception::camera::app::PluginParam* LanePerceptionParam::release_lane_tracker_param() {
  clear_has_lane_tracker_param();
  ::apollo::perception::camera::app::PluginParam* temp = lane_tracker_param_;
  lane_tracker_param_ = NULL;
  return temp;
}
inline void LanePerceptionParam::set_allocated_lane_tracker_param(::apollo::perception::camera::app::PluginParam* lane_tracker_param) {
  delete lane_tracker_param_;
  lane_tracker_param_ = lane_tracker_param;
  if (lane_tracker_param) {
    set_has_lane_tracker_param();
  } else {
    clear_has_lane_tracker_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.LanePerceptionParam.lane_tracker_param)
}

// optional int32 gpu_id = 4;
inline bool LanePerceptionParam::has_gpu_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LanePerceptionParam::set_has_gpu_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LanePerceptionParam::clear_has_gpu_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LanePerceptionParam::clear_gpu_id() {
  gpu_id_ = 0;
  clear_has_gpu_id();
}
inline ::google::protobuf::int32 LanePerceptionParam::gpu_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.LanePerceptionParam.gpu_id)
  return gpu_id_;
}
inline void LanePerceptionParam::set_gpu_id(::google::protobuf::int32 value) {
  set_has_gpu_id();
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.LanePerceptionParam.gpu_id)
}

// -------------------------------------------------------------------

// CalibrationServiceParam

// optional string calibrator_method = 2;
inline bool CalibrationServiceParam::has_calibrator_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CalibrationServiceParam::set_has_calibrator_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CalibrationServiceParam::clear_has_calibrator_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CalibrationServiceParam::clear_calibrator_method() {
  if (calibrator_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibrator_method_->clear();
  }
  clear_has_calibrator_method();
}
inline const ::std::string& CalibrationServiceParam::calibrator_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
  return *calibrator_method_;
}
inline void CalibrationServiceParam::set_calibrator_method(const ::std::string& value) {
  set_has_calibrator_method();
  if (calibrator_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibrator_method_ = new ::std::string;
  }
  calibrator_method_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
}
inline void CalibrationServiceParam::set_calibrator_method(const char* value) {
  set_has_calibrator_method();
  if (calibrator_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibrator_method_ = new ::std::string;
  }
  calibrator_method_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
}
inline void CalibrationServiceParam::set_calibrator_method(const char* value, size_t size) {
  set_has_calibrator_method();
  if (calibrator_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibrator_method_ = new ::std::string;
  }
  calibrator_method_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
}
inline ::std::string* CalibrationServiceParam::mutable_calibrator_method() {
  set_has_calibrator_method();
  if (calibrator_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibrator_method_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
  return calibrator_method_;
}
inline ::std::string* CalibrationServiceParam::release_calibrator_method() {
  clear_has_calibrator_method();
  if (calibrator_method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = calibrator_method_;
    calibrator_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CalibrationServiceParam::set_allocated_calibrator_method(::std::string* calibrator_method) {
  if (calibrator_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete calibrator_method_;
  }
  if (calibrator_method) {
    set_has_calibrator_method();
    calibrator_method_ = calibrator_method;
  } else {
    clear_has_calibrator_method();
    calibrator_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
}

// optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
inline bool CalibrationServiceParam::has_plugin_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CalibrationServiceParam::set_has_plugin_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CalibrationServiceParam::clear_has_plugin_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CalibrationServiceParam::clear_plugin_param() {
  if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
  clear_has_plugin_param();
}
inline const ::apollo::perception::camera::app::PluginParam& CalibrationServiceParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.CalibrationServiceParam.plugin_param)
  return plugin_param_ != NULL ? *plugin_param_ : *default_instance_->plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* CalibrationServiceParam::mutable_plugin_param() {
  set_has_plugin_param();
  if (plugin_param_ == NULL) plugin_param_ = new ::apollo::perception::camera::app::PluginParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.CalibrationServiceParam.plugin_param)
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* CalibrationServiceParam::release_plugin_param() {
  clear_has_plugin_param();
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = NULL;
  return temp;
}
inline void CalibrationServiceParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  delete plugin_param_;
  plugin_param_ = plugin_param;
  if (plugin_param) {
    set_has_plugin_param();
  } else {
    clear_has_plugin_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.CalibrationServiceParam.plugin_param)
}

// -------------------------------------------------------------------

// ObjectTemplateParam

// optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
inline bool ObjectTemplateParam::has_plugin_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectTemplateParam::set_has_plugin_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectTemplateParam::clear_has_plugin_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectTemplateParam::clear_plugin_param() {
  if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
  clear_has_plugin_param();
}
inline const ::apollo::perception::camera::app::PluginParam& ObjectTemplateParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.ObjectTemplateParam.plugin_param)
  return plugin_param_ != NULL ? *plugin_param_ : *default_instance_->plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* ObjectTemplateParam::mutable_plugin_param() {
  set_has_plugin_param();
  if (plugin_param_ == NULL) plugin_param_ = new ::apollo::perception::camera::app::PluginParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.ObjectTemplateParam.plugin_param)
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* ObjectTemplateParam::release_plugin_param() {
  clear_has_plugin_param();
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = NULL;
  return temp;
}
inline void ObjectTemplateParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  delete plugin_param_;
  plugin_param_ = plugin_param;
  if (plugin_param) {
    set_has_plugin_param();
  } else {
    clear_has_plugin_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.ObjectTemplateParam.plugin_param)
}

// -------------------------------------------------------------------

// PerceptionParam

// repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
inline int PerceptionParam::detector_param_size() const {
  return detector_param_.size();
}
inline void PerceptionParam::clear_detector_param() {
  detector_param_.Clear();
}
inline const ::apollo::perception::camera::app::DetectorParam& PerceptionParam::detector_param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.detector_param)
  return detector_param_.Get(index);
}
inline ::apollo::perception::camera::app::DetectorParam* PerceptionParam::mutable_detector_param(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.detector_param)
  return detector_param_.Mutable(index);
}
inline ::apollo::perception::camera::app::DetectorParam* PerceptionParam::add_detector_param() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.app.PerceptionParam.detector_param)
  return detector_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >&
PerceptionParam::detector_param() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.app.PerceptionParam.detector_param)
  return detector_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >*
PerceptionParam::mutable_detector_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.app.PerceptionParam.detector_param)
  return &detector_param_;
}

// optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
inline bool PerceptionParam::has_tracker_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerceptionParam::set_has_tracker_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerceptionParam::clear_has_tracker_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerceptionParam::clear_tracker_param() {
  if (tracker_param_ != NULL) tracker_param_->::apollo::perception::camera::app::TrackerParam::Clear();
  clear_has_tracker_param();
}
inline const ::apollo::perception::camera::app::TrackerParam& PerceptionParam::tracker_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.tracker_param)
  return tracker_param_ != NULL ? *tracker_param_ : *default_instance_->tracker_param_;
}
inline ::apollo::perception::camera::app::TrackerParam* PerceptionParam::mutable_tracker_param() {
  set_has_tracker_param();
  if (tracker_param_ == NULL) tracker_param_ = new ::apollo::perception::camera::app::TrackerParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.tracker_param)
  return tracker_param_;
}
inline ::apollo::perception::camera::app::TrackerParam* PerceptionParam::release_tracker_param() {
  clear_has_tracker_param();
  ::apollo::perception::camera::app::TrackerParam* temp = tracker_param_;
  tracker_param_ = NULL;
  return temp;
}
inline void PerceptionParam::set_allocated_tracker_param(::apollo::perception::camera::app::TrackerParam* tracker_param) {
  delete tracker_param_;
  tracker_param_ = tracker_param;
  if (tracker_param) {
    set_has_tracker_param();
  } else {
    clear_has_tracker_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.tracker_param)
}

// optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
inline bool PerceptionParam::has_transformer_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerceptionParam::set_has_transformer_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerceptionParam::clear_has_transformer_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerceptionParam::clear_transformer_param() {
  if (transformer_param_ != NULL) transformer_param_->::apollo::perception::camera::app::TransformerParam::Clear();
  clear_has_transformer_param();
}
inline const ::apollo::perception::camera::app::TransformerParam& PerceptionParam::transformer_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.transformer_param)
  return transformer_param_ != NULL ? *transformer_param_ : *default_instance_->transformer_param_;
}
inline ::apollo::perception::camera::app::TransformerParam* PerceptionParam::mutable_transformer_param() {
  set_has_transformer_param();
  if (transformer_param_ == NULL) transformer_param_ = new ::apollo::perception::camera::app::TransformerParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.transformer_param)
  return transformer_param_;
}
inline ::apollo::perception::camera::app::TransformerParam* PerceptionParam::release_transformer_param() {
  clear_has_transformer_param();
  ::apollo::perception::camera::app::TransformerParam* temp = transformer_param_;
  transformer_param_ = NULL;
  return temp;
}
inline void PerceptionParam::set_allocated_transformer_param(::apollo::perception::camera::app::TransformerParam* transformer_param) {
  delete transformer_param_;
  transformer_param_ = transformer_param;
  if (transformer_param) {
    set_has_transformer_param();
  } else {
    clear_has_transformer_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.transformer_param)
}

// optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
inline bool PerceptionParam::has_postprocessor_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerceptionParam::set_has_postprocessor_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PerceptionParam::clear_has_postprocessor_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PerceptionParam::clear_postprocessor_param() {
  if (postprocessor_param_ != NULL) postprocessor_param_->::apollo::perception::camera::app::PostprocessorParam::Clear();
  clear_has_postprocessor_param();
}
inline const ::apollo::perception::camera::app::PostprocessorParam& PerceptionParam::postprocessor_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.postprocessor_param)
  return postprocessor_param_ != NULL ? *postprocessor_param_ : *default_instance_->postprocessor_param_;
}
inline ::apollo::perception::camera::app::PostprocessorParam* PerceptionParam::mutable_postprocessor_param() {
  set_has_postprocessor_param();
  if (postprocessor_param_ == NULL) postprocessor_param_ = new ::apollo::perception::camera::app::PostprocessorParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.postprocessor_param)
  return postprocessor_param_;
}
inline ::apollo::perception::camera::app::PostprocessorParam* PerceptionParam::release_postprocessor_param() {
  clear_has_postprocessor_param();
  ::apollo::perception::camera::app::PostprocessorParam* temp = postprocessor_param_;
  postprocessor_param_ = NULL;
  return temp;
}
inline void PerceptionParam::set_allocated_postprocessor_param(::apollo::perception::camera::app::PostprocessorParam* postprocessor_param) {
  delete postprocessor_param_;
  postprocessor_param_ = postprocessor_param;
  if (postprocessor_param) {
    set_has_postprocessor_param();
  } else {
    clear_has_postprocessor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.postprocessor_param)
}

// optional int32 gpu_id = 5;
inline bool PerceptionParam::has_gpu_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerceptionParam::set_has_gpu_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PerceptionParam::clear_has_gpu_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PerceptionParam::clear_gpu_id() {
  gpu_id_ = 0;
  clear_has_gpu_id();
}
inline ::google::protobuf::int32 PerceptionParam::gpu_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.gpu_id)
  return gpu_id_;
}
inline void PerceptionParam::set_gpu_id(::google::protobuf::int32 value) {
  set_has_gpu_id();
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.PerceptionParam.gpu_id)
}

// optional string camera_intrinsics = 6;
inline bool PerceptionParam::has_camera_intrinsics() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerceptionParam::set_has_camera_intrinsics() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PerceptionParam::clear_has_camera_intrinsics() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PerceptionParam::clear_camera_intrinsics() {
  if (camera_intrinsics_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_intrinsics_->clear();
  }
  clear_has_camera_intrinsics();
}
inline const ::std::string& PerceptionParam::camera_intrinsics() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
  return *camera_intrinsics_;
}
inline void PerceptionParam::set_camera_intrinsics(const ::std::string& value) {
  set_has_camera_intrinsics();
  if (camera_intrinsics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_intrinsics_ = new ::std::string;
  }
  camera_intrinsics_->assign(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
}
inline void PerceptionParam::set_camera_intrinsics(const char* value) {
  set_has_camera_intrinsics();
  if (camera_intrinsics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_intrinsics_ = new ::std::string;
  }
  camera_intrinsics_->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
}
inline void PerceptionParam::set_camera_intrinsics(const char* value, size_t size) {
  set_has_camera_intrinsics();
  if (camera_intrinsics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_intrinsics_ = new ::std::string;
  }
  camera_intrinsics_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
}
inline ::std::string* PerceptionParam::mutable_camera_intrinsics() {
  set_has_camera_intrinsics();
  if (camera_intrinsics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_intrinsics_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
  return camera_intrinsics_;
}
inline ::std::string* PerceptionParam::release_camera_intrinsics() {
  clear_has_camera_intrinsics();
  if (camera_intrinsics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = camera_intrinsics_;
    camera_intrinsics_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PerceptionParam::set_allocated_camera_intrinsics(::std::string* camera_intrinsics) {
  if (camera_intrinsics_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_intrinsics_;
  }
  if (camera_intrinsics) {
    set_has_camera_intrinsics();
    camera_intrinsics_ = camera_intrinsics;
  } else {
    clear_has_camera_intrinsics();
    camera_intrinsics_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
}

// optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
inline bool PerceptionParam::has_feature_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerceptionParam::set_has_feature_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PerceptionParam::clear_has_feature_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PerceptionParam::clear_feature_param() {
  if (feature_param_ != NULL) feature_param_->::apollo::perception::camera::app::FeatureParam::Clear();
  clear_has_feature_param();
}
inline const ::apollo::perception::camera::app::FeatureParam& PerceptionParam::feature_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.feature_param)
  return feature_param_ != NULL ? *feature_param_ : *default_instance_->feature_param_;
}
inline ::apollo::perception::camera::app::FeatureParam* PerceptionParam::mutable_feature_param() {
  set_has_feature_param();
  if (feature_param_ == NULL) feature_param_ = new ::apollo::perception::camera::app::FeatureParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.feature_param)
  return feature_param_;
}
inline ::apollo::perception::camera::app::FeatureParam* PerceptionParam::release_feature_param() {
  clear_has_feature_param();
  ::apollo::perception::camera::app::FeatureParam* temp = feature_param_;
  feature_param_ = NULL;
  return temp;
}
inline void PerceptionParam::set_allocated_feature_param(::apollo::perception::camera::app::FeatureParam* feature_param) {
  delete feature_param_;
  feature_param_ = feature_param;
  if (feature_param) {
    set_has_feature_param();
  } else {
    clear_has_feature_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.feature_param)
}

// optional .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
inline bool PerceptionParam::has_lane_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PerceptionParam::set_has_lane_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PerceptionParam::clear_has_lane_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PerceptionParam::clear_lane_param() {
  if (lane_param_ != NULL) lane_param_->::apollo::perception::camera::app::LanePerceptionParam::Clear();
  clear_has_lane_param();
}
inline const ::apollo::perception::camera::app::LanePerceptionParam& PerceptionParam::lane_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.lane_param)
  return lane_param_ != NULL ? *lane_param_ : *default_instance_->lane_param_;
}
inline ::apollo::perception::camera::app::LanePerceptionParam* PerceptionParam::mutable_lane_param() {
  set_has_lane_param();
  if (lane_param_ == NULL) lane_param_ = new ::apollo::perception::camera::app::LanePerceptionParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.lane_param)
  return lane_param_;
}
inline ::apollo::perception::camera::app::LanePerceptionParam* PerceptionParam::release_lane_param() {
  clear_has_lane_param();
  ::apollo::perception::camera::app::LanePerceptionParam* temp = lane_param_;
  lane_param_ = NULL;
  return temp;
}
inline void PerceptionParam::set_allocated_lane_param(::apollo::perception::camera::app::LanePerceptionParam* lane_param) {
  delete lane_param_;
  lane_param_ = lane_param;
  if (lane_param) {
    set_has_lane_param();
  } else {
    clear_has_lane_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.lane_param)
}

// optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
inline bool PerceptionParam::has_calibration_service_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PerceptionParam::set_has_calibration_service_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PerceptionParam::clear_has_calibration_service_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PerceptionParam::clear_calibration_service_param() {
  if (calibration_service_param_ != NULL) calibration_service_param_->::apollo::perception::camera::app::CalibrationServiceParam::Clear();
  clear_has_calibration_service_param();
}
inline const ::apollo::perception::camera::app::CalibrationServiceParam& PerceptionParam::calibration_service_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.calibration_service_param)
  return calibration_service_param_ != NULL ? *calibration_service_param_ : *default_instance_->calibration_service_param_;
}
inline ::apollo::perception::camera::app::CalibrationServiceParam* PerceptionParam::mutable_calibration_service_param() {
  set_has_calibration_service_param();
  if (calibration_service_param_ == NULL) calibration_service_param_ = new ::apollo::perception::camera::app::CalibrationServiceParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.calibration_service_param)
  return calibration_service_param_;
}
inline ::apollo::perception::camera::app::CalibrationServiceParam* PerceptionParam::release_calibration_service_param() {
  clear_has_calibration_service_param();
  ::apollo::perception::camera::app::CalibrationServiceParam* temp = calibration_service_param_;
  calibration_service_param_ = NULL;
  return temp;
}
inline void PerceptionParam::set_allocated_calibration_service_param(::apollo::perception::camera::app::CalibrationServiceParam* calibration_service_param) {
  delete calibration_service_param_;
  calibration_service_param_ = calibration_service_param;
  if (calibration_service_param) {
    set_has_calibration_service_param();
  } else {
    clear_has_calibration_service_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.calibration_service_param)
}

// optional .apollo.perception.camera.app.DebugParam debug_param = 10;
inline bool PerceptionParam::has_debug_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PerceptionParam::set_has_debug_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PerceptionParam::clear_has_debug_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PerceptionParam::clear_debug_param() {
  if (debug_param_ != NULL) debug_param_->::apollo::perception::camera::app::DebugParam::Clear();
  clear_has_debug_param();
}
inline const ::apollo::perception::camera::app::DebugParam& PerceptionParam::debug_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.debug_param)
  return debug_param_ != NULL ? *debug_param_ : *default_instance_->debug_param_;
}
inline ::apollo::perception::camera::app::DebugParam* PerceptionParam::mutable_debug_param() {
  set_has_debug_param();
  if (debug_param_ == NULL) debug_param_ = new ::apollo::perception::camera::app::DebugParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.debug_param)
  return debug_param_;
}
inline ::apollo::perception::camera::app::DebugParam* PerceptionParam::release_debug_param() {
  clear_has_debug_param();
  ::apollo::perception::camera::app::DebugParam* temp = debug_param_;
  debug_param_ = NULL;
  return temp;
}
inline void PerceptionParam::set_allocated_debug_param(::apollo::perception::camera::app::DebugParam* debug_param) {
  delete debug_param_;
  debug_param_ = debug_param;
  if (debug_param) {
    set_has_debug_param();
  } else {
    clear_has_debug_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.debug_param)
}

// optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
inline bool PerceptionParam::has_object_template_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PerceptionParam::set_has_object_template_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PerceptionParam::clear_has_object_template_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PerceptionParam::clear_object_template_param() {
  if (object_template_param_ != NULL) object_template_param_->::apollo::perception::camera::app::ObjectTemplateParam::Clear();
  clear_has_object_template_param();
}
inline const ::apollo::perception::camera::app::ObjectTemplateParam& PerceptionParam::object_template_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.object_template_param)
  return object_template_param_ != NULL ? *object_template_param_ : *default_instance_->object_template_param_;
}
inline ::apollo::perception::camera::app::ObjectTemplateParam* PerceptionParam::mutable_object_template_param() {
  set_has_object_template_param();
  if (object_template_param_ == NULL) object_template_param_ = new ::apollo::perception::camera::app::ObjectTemplateParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.object_template_param)
  return object_template_param_;
}
inline ::apollo::perception::camera::app::ObjectTemplateParam* PerceptionParam::release_object_template_param() {
  clear_has_object_template_param();
  ::apollo::perception::camera::app::ObjectTemplateParam* temp = object_template_param_;
  object_template_param_ = NULL;
  return temp;
}
inline void PerceptionParam::set_allocated_object_template_param(::apollo::perception::camera::app::ObjectTemplateParam* object_template_param) {
  delete object_template_param_;
  object_template_param_ = object_template_param;
  if (object_template_param) {
    set_has_object_template_param();
  } else {
    clear_has_object_template_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.object_template_param)
}

// -------------------------------------------------------------------

// TrafficLightParam

// repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
inline int TrafficLightParam::detector_param_size() const {
  return detector_param_.size();
}
inline void TrafficLightParam::clear_detector_param() {
  detector_param_.Clear();
}
inline const ::apollo::perception::camera::app::DetectorParam& TrafficLightParam::detector_param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.TrafficLightParam.detector_param)
  return detector_param_.Get(index);
}
inline ::apollo::perception::camera::app::DetectorParam* TrafficLightParam::mutable_detector_param(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.TrafficLightParam.detector_param)
  return detector_param_.Mutable(index);
}
inline ::apollo::perception::camera::app::DetectorParam* TrafficLightParam::add_detector_param() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.app.TrafficLightParam.detector_param)
  return detector_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >&
TrafficLightParam::detector_param() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.app.TrafficLightParam.detector_param)
  return detector_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >*
TrafficLightParam::mutable_detector_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.app.TrafficLightParam.detector_param)
  return &detector_param_;
}

// optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
inline bool TrafficLightParam::has_tracker_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficLightParam::set_has_tracker_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficLightParam::clear_has_tracker_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficLightParam::clear_tracker_param() {
  if (tracker_param_ != NULL) tracker_param_->::apollo::perception::camera::app::TrackerParam::Clear();
  clear_has_tracker_param();
}
inline const ::apollo::perception::camera::app::TrackerParam& TrafficLightParam::tracker_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.TrafficLightParam.tracker_param)
  return tracker_param_ != NULL ? *tracker_param_ : *default_instance_->tracker_param_;
}
inline ::apollo::perception::camera::app::TrackerParam* TrafficLightParam::mutable_tracker_param() {
  set_has_tracker_param();
  if (tracker_param_ == NULL) tracker_param_ = new ::apollo::perception::camera::app::TrackerParam;
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.TrafficLightParam.tracker_param)
  return tracker_param_;
}
inline ::apollo::perception::camera::app::TrackerParam* TrafficLightParam::release_tracker_param() {
  clear_has_tracker_param();
  ::apollo::perception::camera::app::TrackerParam* temp = tracker_param_;
  tracker_param_ = NULL;
  return temp;
}
inline void TrafficLightParam::set_allocated_tracker_param(::apollo::perception::camera::app::TrackerParam* tracker_param) {
  delete tracker_param_;
  tracker_param_ = tracker_param;
  if (tracker_param) {
    set_has_tracker_param();
  } else {
    clear_has_tracker_param();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.TrafficLightParam.tracker_param)
}

// optional int32 gpu_id = 3;
inline bool TrafficLightParam::has_gpu_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficLightParam::set_has_gpu_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficLightParam::clear_has_gpu_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficLightParam::clear_gpu_id() {
  gpu_id_ = 0;
  clear_has_gpu_id();
}
inline ::google::protobuf::int32 TrafficLightParam::gpu_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.TrafficLightParam.gpu_id)
  return gpu_id_;
}
inline void TrafficLightParam::set_gpu_id(::google::protobuf::int32 value) {
  set_has_gpu_id();
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.TrafficLightParam.gpu_id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace app
}  // namespace camera
}  // namespace perception
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_2eproto__INCLUDED
