// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace camera {
namespace app {

namespace {

const ::google::protobuf::Descriptor* PluginParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PluginParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectorParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectorParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackerParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackerParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformerParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformerParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostprocessorParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostprocessorParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* LanePerceptionParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LanePerceptionParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationServiceParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationServiceParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectTemplateParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectTemplateParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PerceptionParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerceptionParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficLightParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLightParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_2eproto() {
  protobuf_AddDesc_perception_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception.proto");
  GOOGLE_CHECK(file != NULL);
  PluginParam_descriptor_ = file->message_type(0);
  static const int PluginParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginParam, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginParam, root_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginParam, config_file_),
  };
  PluginParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PluginParam_descriptor_,
      PluginParam::default_instance_,
      PluginParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PluginParam));
  DetectorParam_descriptor_ = file->message_type(1);
  static const int DetectorParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParam, plugin_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParam, camera_name_),
  };
  DetectorParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectorParam_descriptor_,
      DetectorParam::default_instance_,
      DetectorParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectorParam));
  TrackerParam_descriptor_ = file->message_type(2);
  static const int TrackerParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerParam, plugin_param_),
  };
  TrackerParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackerParam_descriptor_,
      TrackerParam::default_instance_,
      TrackerParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackerParam));
  TransformerParam_descriptor_ = file->message_type(3);
  static const int TransformerParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformerParam, plugin_param_),
  };
  TransformerParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransformerParam_descriptor_,
      TransformerParam::default_instance_,
      TransformerParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformerParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformerParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransformerParam));
  PostprocessorParam_descriptor_ = file->message_type(4);
  static const int PostprocessorParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostprocessorParam, plugin_param_),
  };
  PostprocessorParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostprocessorParam_descriptor_,
      PostprocessorParam::default_instance_,
      PostprocessorParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostprocessorParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostprocessorParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostprocessorParam));
  FeatureParam_descriptor_ = file->message_type(5);
  static const int FeatureParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureParam, plugin_param_),
  };
  FeatureParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureParam_descriptor_,
      FeatureParam::default_instance_,
      FeatureParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureParam));
  DebugParam_descriptor_ = file->message_type(6);
  static const int DebugParam_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugParam, detection_out_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugParam, tracked_detection_out_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugParam, track_out_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugParam, detect_feature_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugParam, lane_out_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugParam, camera2world_out_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugParam, calibration_out_dir_),
  };
  DebugParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugParam_descriptor_,
      DebugParam::default_instance_,
      DebugParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugParam));
  LanePerceptionParam_descriptor_ = file->message_type(7);
  static const int LanePerceptionParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePerceptionParam, lane_detector_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePerceptionParam, lane_postprocessor_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePerceptionParam, lane_tracker_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePerceptionParam, gpu_id_),
  };
  LanePerceptionParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LanePerceptionParam_descriptor_,
      LanePerceptionParam::default_instance_,
      LanePerceptionParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePerceptionParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanePerceptionParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LanePerceptionParam));
  CalibrationServiceParam_descriptor_ = file->message_type(8);
  static const int CalibrationServiceParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationServiceParam, calibrator_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationServiceParam, plugin_param_),
  };
  CalibrationServiceParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalibrationServiceParam_descriptor_,
      CalibrationServiceParam::default_instance_,
      CalibrationServiceParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationServiceParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationServiceParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalibrationServiceParam));
  ObjectTemplateParam_descriptor_ = file->message_type(9);
  static const int ObjectTemplateParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateParam, plugin_param_),
  };
  ObjectTemplateParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectTemplateParam_descriptor_,
      ObjectTemplateParam::default_instance_,
      ObjectTemplateParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectTemplateParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectTemplateParam));
  PerceptionParam_descriptor_ = file->message_type(10);
  static const int PerceptionParam_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionParam, detector_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionParam, tracker_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionParam, transformer_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionParam, postprocessor_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionParam, gpu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionParam, camera_intrinsics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionParam, feature_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionParam, lane_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionParam, calibration_service_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionParam, debug_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionParam, object_template_param_),
  };
  PerceptionParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PerceptionParam_descriptor_,
      PerceptionParam::default_instance_,
      PerceptionParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PerceptionParam));
  TrafficLightParam_descriptor_ = file->message_type(11);
  static const int TrafficLightParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightParam, detector_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightParam, tracker_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightParam, gpu_id_),
  };
  TrafficLightParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrafficLightParam_descriptor_,
      TrafficLightParam::default_instance_,
      TrafficLightParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrafficLightParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PluginParam_descriptor_, &PluginParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectorParam_descriptor_, &DetectorParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackerParam_descriptor_, &TrackerParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransformerParam_descriptor_, &TransformerParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostprocessorParam_descriptor_, &PostprocessorParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureParam_descriptor_, &FeatureParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugParam_descriptor_, &DebugParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LanePerceptionParam_descriptor_, &LanePerceptionParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalibrationServiceParam_descriptor_, &CalibrationServiceParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectTemplateParam_descriptor_, &ObjectTemplateParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PerceptionParam_descriptor_, &PerceptionParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrafficLightParam_descriptor_, &TrafficLightParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_2eproto() {
  delete PluginParam::default_instance_;
  delete PluginParam_reflection_;
  delete DetectorParam::default_instance_;
  delete DetectorParam_reflection_;
  delete TrackerParam::default_instance_;
  delete TrackerParam_reflection_;
  delete TransformerParam::default_instance_;
  delete TransformerParam_reflection_;
  delete PostprocessorParam::default_instance_;
  delete PostprocessorParam_reflection_;
  delete FeatureParam::default_instance_;
  delete FeatureParam_reflection_;
  delete DebugParam::default_instance_;
  delete DebugParam_reflection_;
  delete LanePerceptionParam::default_instance_;
  delete LanePerceptionParam_reflection_;
  delete CalibrationServiceParam::default_instance_;
  delete CalibrationServiceParam_reflection_;
  delete ObjectTemplateParam::default_instance_;
  delete ObjectTemplateParam_reflection_;
  delete PerceptionParam::default_instance_;
  delete PerceptionParam_reflection_;
  delete TrafficLightParam::default_instance_;
  delete TrafficLightParam_reflection_;
}

void protobuf_AddDesc_perception_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020perception.proto\022\034apollo.perception.ca"
    "mera.app\"B\n\013PluginParam\022\014\n\004name\030\001 \001(\t\022\020\n"
    "\010root_dir\030\002 \001(\t\022\023\n\013config_file\030\003 \001(\t\"e\n\r"
    "DetectorParam\022\?\n\014plugin_param\030\001 \001(\0132).ap"
    "ollo.perception.camera.app.PluginParam\022\023"
    "\n\013camera_name\030\002 \001(\t\"O\n\014TrackerParam\022\?\n\014p"
    "lugin_param\030\001 \001(\0132).apollo.perception.ca"
    "mera.app.PluginParam\"S\n\020TransformerParam"
    "\022\?\n\014plugin_param\030\001 \001(\0132).apollo.percepti"
    "on.camera.app.PluginParam\"U\n\022Postprocess"
    "orParam\022\?\n\014plugin_param\030\001 \001(\0132).apollo.p"
    "erception.camera.app.PluginParam\"O\n\014Feat"
    "ureParam\022\?\n\014plugin_param\030\001 \001(\0132).apollo."
    "perception.camera.app.PluginParam\"\320\001\n\nDe"
    "bugParam\022\031\n\021detection_out_dir\030\001 \001(\t\022!\n\031t"
    "racked_detection_out_dir\030\002 \001(\t\022\026\n\016track_"
    "out_file\030\003 \001(\t\022\032\n\022detect_feature_dir\030\004 \001"
    "(\t\022\024\n\014lane_out_dir\030\005 \001(\t\022\035\n\025camera2world"
    "_out_file\030\006 \001(\t\022\033\n\023calibration_out_dir\030\007"
    " \001(\t\"\203\002\n\023LanePerceptionParam\022H\n\023lane_det"
    "ector_param\030\001 \001(\0132+.apollo.perception.ca"
    "mera.app.DetectorParam\022K\n\030lane_postproce"
    "ssor_param\030\002 \001(\0132).apollo.perception.cam"
    "era.app.PluginParam\022E\n\022lane_tracker_para"
    "m\030\003 \001(\0132).apollo.perception.camera.app.P"
    "luginParam\022\016\n\006gpu_id\030\004 \001(\005\"u\n\027Calibratio"
    "nServiceParam\022\031\n\021calibrator_method\030\002 \001(\t"
    "\022\?\n\014plugin_param\030\003 \001(\0132).apollo.percepti"
    "on.camera.app.PluginParam\"V\n\023ObjectTempl"
    "ateParam\022\?\n\014plugin_param\030\001 \001(\0132).apollo."
    "perception.camera.app.PluginParam\"\323\005\n\017Pe"
    "rceptionParam\022C\n\016detector_param\030\001 \003(\0132+."
    "apollo.perception.camera.app.DetectorPar"
    "am\022A\n\rtracker_param\030\002 \001(\0132*.apollo.perce"
    "ption.camera.app.TrackerParam\022I\n\021transfo"
    "rmer_param\030\003 \001(\0132..apollo.perception.cam"
    "era.app.TransformerParam\022M\n\023postprocesso"
    "r_param\030\004 \001(\01320.apollo.perception.camera"
    ".app.PostprocessorParam\022\016\n\006gpu_id\030\005 \001(\005\022"
    "\031\n\021camera_intrinsics\030\006 \001(\t\022A\n\rfeature_pa"
    "ram\030\007 \001(\0132*.apollo.perception.camera.app"
    ".FeatureParam\022E\n\nlane_param\030\010 \001(\01321.apol"
    "lo.perception.camera.app.LanePerceptionP"
    "aram\022X\n\031calibration_service_param\030\t \001(\0132"
    "5.apollo.perception.camera.app.Calibrati"
    "onServiceParam\022=\n\013debug_param\030\n \001(\0132(.ap"
    "ollo.perception.camera.app.DebugParam\022P\n"
    "\025object_template_param\030\013 \001(\01321.apollo.pe"
    "rception.camera.app.ObjectTemplateParam\""
    "\253\001\n\021TrafficLightParam\022C\n\016detector_param\030"
    "\001 \003(\0132+.apollo.perception.camera.app.Det"
    "ectorParam\022A\n\rtracker_param\030\002 \001(\0132*.apol"
    "lo.perception.camera.app.TrackerParam\022\016\n"
    "\006gpu_id\030\003 \001(\005", 2133);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception.proto", &protobuf_RegisterTypes);
  PluginParam::default_instance_ = new PluginParam();
  DetectorParam::default_instance_ = new DetectorParam();
  TrackerParam::default_instance_ = new TrackerParam();
  TransformerParam::default_instance_ = new TransformerParam();
  PostprocessorParam::default_instance_ = new PostprocessorParam();
  FeatureParam::default_instance_ = new FeatureParam();
  DebugParam::default_instance_ = new DebugParam();
  LanePerceptionParam::default_instance_ = new LanePerceptionParam();
  CalibrationServiceParam::default_instance_ = new CalibrationServiceParam();
  ObjectTemplateParam::default_instance_ = new ObjectTemplateParam();
  PerceptionParam::default_instance_ = new PerceptionParam();
  TrafficLightParam::default_instance_ = new TrafficLightParam();
  PluginParam::default_instance_->InitAsDefaultInstance();
  DetectorParam::default_instance_->InitAsDefaultInstance();
  TrackerParam::default_instance_->InitAsDefaultInstance();
  TransformerParam::default_instance_->InitAsDefaultInstance();
  PostprocessorParam::default_instance_->InitAsDefaultInstance();
  FeatureParam::default_instance_->InitAsDefaultInstance();
  DebugParam::default_instance_->InitAsDefaultInstance();
  LanePerceptionParam::default_instance_->InitAsDefaultInstance();
  CalibrationServiceParam::default_instance_->InitAsDefaultInstance();
  ObjectTemplateParam::default_instance_->InitAsDefaultInstance();
  PerceptionParam::default_instance_->InitAsDefaultInstance();
  TrafficLightParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_2eproto {
  StaticDescriptorInitializer_perception_2eproto() {
    protobuf_AddDesc_perception_2eproto();
  }
} static_descriptor_initializer_perception_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PluginParam::kNameFieldNumber;
const int PluginParam::kRootDirFieldNumber;
const int PluginParam::kConfigFileFieldNumber;
#endif  // !_MSC_VER

PluginParam::PluginParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.app.PluginParam)
}

void PluginParam::InitAsDefaultInstance() {
}

PluginParam::PluginParam(const PluginParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.PluginParam)
}

void PluginParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PluginParam::~PluginParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.PluginParam)
  SharedDtor();
}

void PluginParam::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (root_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete root_dir_;
  }
  if (config_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_file_;
  }
  if (this != default_instance_) {
  }
}

void PluginParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PluginParam_descriptor_;
}

const PluginParam& PluginParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2eproto();
  return *default_instance_;
}

PluginParam* PluginParam::default_instance_ = NULL;

PluginParam* PluginParam::New() const {
  return new PluginParam;
}

void PluginParam::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_root_dir()) {
      if (root_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        root_dir_->clear();
      }
    }
    if (has_config_file()) {
      if (config_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        config_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PluginParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.app.PluginParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_root_dir;
        break;
      }

      // optional string root_dir = 2;
      case 2: {
        if (tag == 18) {
         parse_root_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_dir().data(), this->root_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "root_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_config_file;
        break;
      }

      // optional string config_file = 3;
      case 3: {
        if (tag == 26) {
         parse_config_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_file().data(), this->config_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.app.PluginParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.app.PluginParam)
  return false;
#undef DO_
}

void PluginParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.app.PluginParam)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string root_dir = 2;
  if (has_root_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_dir().data(), this->root_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "root_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->root_dir(), output);
  }

  // optional string config_file = 3;
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->config_file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.app.PluginParam)
}

::google::protobuf::uint8* PluginParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.PluginParam)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string root_dir = 2;
  if (has_root_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_dir().data(), this->root_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "root_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->root_dir(), target);
  }

  // optional string config_file = 3;
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->config_file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.PluginParam)
  return target;
}

int PluginParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string root_dir = 2;
    if (has_root_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_dir());
    }

    // optional string config_file = 3;
    if (has_config_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PluginParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PluginParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PluginParam::MergeFrom(const PluginParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_root_dir()) {
      set_root_dir(from.root_dir());
    }
    if (from.has_config_file()) {
      set_config_file(from.config_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PluginParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginParam::CopyFrom(const PluginParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginParam::IsInitialized() const {

  return true;
}

void PluginParam::Swap(PluginParam* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(root_dir_, other->root_dir_);
    std::swap(config_file_, other->config_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PluginParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PluginParam_descriptor_;
  metadata.reflection = PluginParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetectorParam::kPluginParamFieldNumber;
const int DetectorParam::kCameraNameFieldNumber;
#endif  // !_MSC_VER

DetectorParam::DetectorParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.app.DetectorParam)
}

void DetectorParam::InitAsDefaultInstance() {
  plugin_param_ = const_cast< ::apollo::perception::camera::app::PluginParam*>(&::apollo::perception::camera::app::PluginParam::default_instance());
}

DetectorParam::DetectorParam(const DetectorParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.DetectorParam)
}

void DetectorParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  plugin_param_ = NULL;
  camera_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectorParam::~DetectorParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.DetectorParam)
  SharedDtor();
}

void DetectorParam::SharedDtor() {
  if (camera_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_name_;
  }
  if (this != default_instance_) {
    delete plugin_param_;
  }
}

void DetectorParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectorParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectorParam_descriptor_;
}

const DetectorParam& DetectorParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2eproto();
  return *default_instance_;
}

DetectorParam* DetectorParam::default_instance_ = NULL;

DetectorParam* DetectorParam::New() const {
  return new DetectorParam;
}

void DetectorParam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_plugin_param()) {
      if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
    }
    if (has_camera_name()) {
      if (camera_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camera_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.app.DetectorParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plugin_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_camera_name;
        break;
      }

      // optional string camera_name = 2;
      case 2: {
        if (tag == 18) {
         parse_camera_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_name().data(), this->camera_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "camera_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.app.DetectorParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.app.DetectorParam)
  return false;
#undef DO_
}

void DetectorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.app.DetectorParam)
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (has_plugin_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plugin_param(), output);
  }

  // optional string camera_name = 2;
  if (has_camera_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_name().data(), this->camera_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->camera_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.app.DetectorParam)
}

::google::protobuf::uint8* DetectorParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.DetectorParam)
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (has_plugin_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plugin_param(), target);
  }

  // optional string camera_name = 2;
  if (has_camera_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_name().data(), this->camera_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->camera_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.DetectorParam)
  return target;
}

int DetectorParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
    if (has_plugin_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_param());
    }

    // optional string camera_name = 2;
    if (has_camera_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectorParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectorParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectorParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectorParam::MergeFrom(const DetectorParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin_param()) {
      mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from.plugin_param());
    }
    if (from.has_camera_name()) {
      set_camera_name(from.camera_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectorParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectorParam::CopyFrom(const DetectorParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorParam::IsInitialized() const {

  return true;
}

void DetectorParam::Swap(DetectorParam* other) {
  if (other != this) {
    std::swap(plugin_param_, other->plugin_param_);
    std::swap(camera_name_, other->camera_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectorParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectorParam_descriptor_;
  metadata.reflection = DetectorParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackerParam::kPluginParamFieldNumber;
#endif  // !_MSC_VER

TrackerParam::TrackerParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.app.TrackerParam)
}

void TrackerParam::InitAsDefaultInstance() {
  plugin_param_ = const_cast< ::apollo::perception::camera::app::PluginParam*>(&::apollo::perception::camera::app::PluginParam::default_instance());
}

TrackerParam::TrackerParam(const TrackerParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.TrackerParam)
}

void TrackerParam::SharedCtor() {
  _cached_size_ = 0;
  plugin_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackerParam::~TrackerParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.TrackerParam)
  SharedDtor();
}

void TrackerParam::SharedDtor() {
  if (this != default_instance_) {
    delete plugin_param_;
  }
}

void TrackerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackerParam_descriptor_;
}

const TrackerParam& TrackerParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2eproto();
  return *default_instance_;
}

TrackerParam* TrackerParam::default_instance_ = NULL;

TrackerParam* TrackerParam::New() const {
  return new TrackerParam;
}

void TrackerParam::Clear() {
  if (has_plugin_param()) {
    if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.app.TrackerParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plugin_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.app.TrackerParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.app.TrackerParam)
  return false;
#undef DO_
}

void TrackerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.app.TrackerParam)
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (has_plugin_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plugin_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.app.TrackerParam)
}

::google::protobuf::uint8* TrackerParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.TrackerParam)
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (has_plugin_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plugin_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.TrackerParam)
  return target;
}

int TrackerParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
    if (has_plugin_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackerParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackerParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackerParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackerParam::MergeFrom(const TrackerParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin_param()) {
      mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from.plugin_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackerParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerParam::CopyFrom(const TrackerParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerParam::IsInitialized() const {

  return true;
}

void TrackerParam::Swap(TrackerParam* other) {
  if (other != this) {
    std::swap(plugin_param_, other->plugin_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackerParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackerParam_descriptor_;
  metadata.reflection = TrackerParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransformerParam::kPluginParamFieldNumber;
#endif  // !_MSC_VER

TransformerParam::TransformerParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.app.TransformerParam)
}

void TransformerParam::InitAsDefaultInstance() {
  plugin_param_ = const_cast< ::apollo::perception::camera::app::PluginParam*>(&::apollo::perception::camera::app::PluginParam::default_instance());
}

TransformerParam::TransformerParam(const TransformerParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.TransformerParam)
}

void TransformerParam::SharedCtor() {
  _cached_size_ = 0;
  plugin_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformerParam::~TransformerParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.TransformerParam)
  SharedDtor();
}

void TransformerParam::SharedDtor() {
  if (this != default_instance_) {
    delete plugin_param_;
  }
}

void TransformerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformerParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformerParam_descriptor_;
}

const TransformerParam& TransformerParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2eproto();
  return *default_instance_;
}

TransformerParam* TransformerParam::default_instance_ = NULL;

TransformerParam* TransformerParam::New() const {
  return new TransformerParam;
}

void TransformerParam::Clear() {
  if (has_plugin_param()) {
    if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransformerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.app.TransformerParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plugin_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.app.TransformerParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.app.TransformerParam)
  return false;
#undef DO_
}

void TransformerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.app.TransformerParam)
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (has_plugin_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plugin_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.app.TransformerParam)
}

::google::protobuf::uint8* TransformerParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.TransformerParam)
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (has_plugin_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plugin_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.TransformerParam)
  return target;
}

int TransformerParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
    if (has_plugin_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformerParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransformerParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransformerParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformerParam::MergeFrom(const TransformerParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin_param()) {
      mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from.plugin_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransformerParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformerParam::CopyFrom(const TransformerParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformerParam::IsInitialized() const {

  return true;
}

void TransformerParam::Swap(TransformerParam* other) {
  if (other != this) {
    std::swap(plugin_param_, other->plugin_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransformerParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformerParam_descriptor_;
  metadata.reflection = TransformerParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostprocessorParam::kPluginParamFieldNumber;
#endif  // !_MSC_VER

PostprocessorParam::PostprocessorParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.app.PostprocessorParam)
}

void PostprocessorParam::InitAsDefaultInstance() {
  plugin_param_ = const_cast< ::apollo::perception::camera::app::PluginParam*>(&::apollo::perception::camera::app::PluginParam::default_instance());
}

PostprocessorParam::PostprocessorParam(const PostprocessorParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.PostprocessorParam)
}

void PostprocessorParam::SharedCtor() {
  _cached_size_ = 0;
  plugin_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostprocessorParam::~PostprocessorParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.PostprocessorParam)
  SharedDtor();
}

void PostprocessorParam::SharedDtor() {
  if (this != default_instance_) {
    delete plugin_param_;
  }
}

void PostprocessorParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostprocessorParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostprocessorParam_descriptor_;
}

const PostprocessorParam& PostprocessorParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2eproto();
  return *default_instance_;
}

PostprocessorParam* PostprocessorParam::default_instance_ = NULL;

PostprocessorParam* PostprocessorParam::New() const {
  return new PostprocessorParam;
}

void PostprocessorParam::Clear() {
  if (has_plugin_param()) {
    if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostprocessorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.app.PostprocessorParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plugin_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.app.PostprocessorParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.app.PostprocessorParam)
  return false;
#undef DO_
}

void PostprocessorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.app.PostprocessorParam)
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (has_plugin_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plugin_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.app.PostprocessorParam)
}

::google::protobuf::uint8* PostprocessorParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.PostprocessorParam)
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (has_plugin_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plugin_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.PostprocessorParam)
  return target;
}

int PostprocessorParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
    if (has_plugin_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostprocessorParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostprocessorParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostprocessorParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostprocessorParam::MergeFrom(const PostprocessorParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin_param()) {
      mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from.plugin_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostprocessorParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostprocessorParam::CopyFrom(const PostprocessorParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostprocessorParam::IsInitialized() const {

  return true;
}

void PostprocessorParam::Swap(PostprocessorParam* other) {
  if (other != this) {
    std::swap(plugin_param_, other->plugin_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostprocessorParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostprocessorParam_descriptor_;
  metadata.reflection = PostprocessorParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureParam::kPluginParamFieldNumber;
#endif  // !_MSC_VER

FeatureParam::FeatureParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.app.FeatureParam)
}

void FeatureParam::InitAsDefaultInstance() {
  plugin_param_ = const_cast< ::apollo::perception::camera::app::PluginParam*>(&::apollo::perception::camera::app::PluginParam::default_instance());
}

FeatureParam::FeatureParam(const FeatureParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.FeatureParam)
}

void FeatureParam::SharedCtor() {
  _cached_size_ = 0;
  plugin_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureParam::~FeatureParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.FeatureParam)
  SharedDtor();
}

void FeatureParam::SharedDtor() {
  if (this != default_instance_) {
    delete plugin_param_;
  }
}

void FeatureParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureParam_descriptor_;
}

const FeatureParam& FeatureParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2eproto();
  return *default_instance_;
}

FeatureParam* FeatureParam::default_instance_ = NULL;

FeatureParam* FeatureParam::New() const {
  return new FeatureParam;
}

void FeatureParam::Clear() {
  if (has_plugin_param()) {
    if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.app.FeatureParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plugin_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.app.FeatureParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.app.FeatureParam)
  return false;
#undef DO_
}

void FeatureParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.app.FeatureParam)
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (has_plugin_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plugin_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.app.FeatureParam)
}

::google::protobuf::uint8* FeatureParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.FeatureParam)
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (has_plugin_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plugin_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.FeatureParam)
  return target;
}

int FeatureParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
    if (has_plugin_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureParam::MergeFrom(const FeatureParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin_param()) {
      mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from.plugin_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureParam::CopyFrom(const FeatureParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureParam::IsInitialized() const {

  return true;
}

void FeatureParam::Swap(FeatureParam* other) {
  if (other != this) {
    std::swap(plugin_param_, other->plugin_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureParam_descriptor_;
  metadata.reflection = FeatureParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugParam::kDetectionOutDirFieldNumber;
const int DebugParam::kTrackedDetectionOutDirFieldNumber;
const int DebugParam::kTrackOutFileFieldNumber;
const int DebugParam::kDetectFeatureDirFieldNumber;
const int DebugParam::kLaneOutDirFieldNumber;
const int DebugParam::kCamera2WorldOutFileFieldNumber;
const int DebugParam::kCalibrationOutDirFieldNumber;
#endif  // !_MSC_VER

DebugParam::DebugParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.app.DebugParam)
}

void DebugParam::InitAsDefaultInstance() {
}

DebugParam::DebugParam(const DebugParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.DebugParam)
}

void DebugParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  detection_out_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracked_detection_out_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_out_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detect_feature_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_out_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera2world_out_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  calibration_out_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugParam::~DebugParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.DebugParam)
  SharedDtor();
}

void DebugParam::SharedDtor() {
  if (detection_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detection_out_dir_;
  }
  if (tracked_detection_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tracked_detection_out_dir_;
  }
  if (track_out_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete track_out_file_;
  }
  if (detect_feature_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detect_feature_dir_;
  }
  if (lane_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lane_out_dir_;
  }
  if (camera2world_out_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera2world_out_file_;
  }
  if (calibration_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete calibration_out_dir_;
  }
  if (this != default_instance_) {
  }
}

void DebugParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugParam_descriptor_;
}

const DebugParam& DebugParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2eproto();
  return *default_instance_;
}

DebugParam* DebugParam::default_instance_ = NULL;

DebugParam* DebugParam::New() const {
  return new DebugParam;
}

void DebugParam::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_detection_out_dir()) {
      if (detection_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        detection_out_dir_->clear();
      }
    }
    if (has_tracked_detection_out_dir()) {
      if (tracked_detection_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tracked_detection_out_dir_->clear();
      }
    }
    if (has_track_out_file()) {
      if (track_out_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        track_out_file_->clear();
      }
    }
    if (has_detect_feature_dir()) {
      if (detect_feature_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        detect_feature_dir_->clear();
      }
    }
    if (has_lane_out_dir()) {
      if (lane_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lane_out_dir_->clear();
      }
    }
    if (has_camera2world_out_file()) {
      if (camera2world_out_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camera2world_out_file_->clear();
      }
    }
    if (has_calibration_out_dir()) {
      if (calibration_out_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        calibration_out_dir_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.app.DebugParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string detection_out_dir = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detection_out_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detection_out_dir().data(), this->detection_out_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "detection_out_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tracked_detection_out_dir;
        break;
      }

      // optional string tracked_detection_out_dir = 2;
      case 2: {
        if (tag == 18) {
         parse_tracked_detection_out_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracked_detection_out_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tracked_detection_out_dir().data(), this->tracked_detection_out_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tracked_detection_out_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_track_out_file;
        break;
      }

      // optional string track_out_file = 3;
      case 3: {
        if (tag == 26) {
         parse_track_out_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_out_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track_out_file().data(), this->track_out_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "track_out_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_detect_feature_dir;
        break;
      }

      // optional string detect_feature_dir = 4;
      case 4: {
        if (tag == 34) {
         parse_detect_feature_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detect_feature_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detect_feature_dir().data(), this->detect_feature_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "detect_feature_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lane_out_dir;
        break;
      }

      // optional string lane_out_dir = 5;
      case 5: {
        if (tag == 42) {
         parse_lane_out_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_out_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_out_dir().data(), this->lane_out_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lane_out_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_camera2world_out_file;
        break;
      }

      // optional string camera2world_out_file = 6;
      case 6: {
        if (tag == 50) {
         parse_camera2world_out_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera2world_out_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera2world_out_file().data(), this->camera2world_out_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "camera2world_out_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_calibration_out_dir;
        break;
      }

      // optional string calibration_out_dir = 7;
      case 7: {
        if (tag == 58) {
         parse_calibration_out_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_calibration_out_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->calibration_out_dir().data(), this->calibration_out_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "calibration_out_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.app.DebugParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.app.DebugParam)
  return false;
#undef DO_
}

void DebugParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.app.DebugParam)
  // optional string detection_out_dir = 1;
  if (has_detection_out_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detection_out_dir().data(), this->detection_out_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "detection_out_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->detection_out_dir(), output);
  }

  // optional string tracked_detection_out_dir = 2;
  if (has_tracked_detection_out_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tracked_detection_out_dir().data(), this->tracked_detection_out_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tracked_detection_out_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tracked_detection_out_dir(), output);
  }

  // optional string track_out_file = 3;
  if (has_track_out_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_out_file().data(), this->track_out_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "track_out_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->track_out_file(), output);
  }

  // optional string detect_feature_dir = 4;
  if (has_detect_feature_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detect_feature_dir().data(), this->detect_feature_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "detect_feature_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->detect_feature_dir(), output);
  }

  // optional string lane_out_dir = 5;
  if (has_lane_out_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_out_dir().data(), this->lane_out_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lane_out_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lane_out_dir(), output);
  }

  // optional string camera2world_out_file = 6;
  if (has_camera2world_out_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera2world_out_file().data(), this->camera2world_out_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera2world_out_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->camera2world_out_file(), output);
  }

  // optional string calibration_out_dir = 7;
  if (has_calibration_out_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calibration_out_dir().data(), this->calibration_out_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "calibration_out_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->calibration_out_dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.app.DebugParam)
}

::google::protobuf::uint8* DebugParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.DebugParam)
  // optional string detection_out_dir = 1;
  if (has_detection_out_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detection_out_dir().data(), this->detection_out_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "detection_out_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->detection_out_dir(), target);
  }

  // optional string tracked_detection_out_dir = 2;
  if (has_tracked_detection_out_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tracked_detection_out_dir().data(), this->tracked_detection_out_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tracked_detection_out_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tracked_detection_out_dir(), target);
  }

  // optional string track_out_file = 3;
  if (has_track_out_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_out_file().data(), this->track_out_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "track_out_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->track_out_file(), target);
  }

  // optional string detect_feature_dir = 4;
  if (has_detect_feature_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detect_feature_dir().data(), this->detect_feature_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "detect_feature_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->detect_feature_dir(), target);
  }

  // optional string lane_out_dir = 5;
  if (has_lane_out_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_out_dir().data(), this->lane_out_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lane_out_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lane_out_dir(), target);
  }

  // optional string camera2world_out_file = 6;
  if (has_camera2world_out_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera2world_out_file().data(), this->camera2world_out_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera2world_out_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->camera2world_out_file(), target);
  }

  // optional string calibration_out_dir = 7;
  if (has_calibration_out_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calibration_out_dir().data(), this->calibration_out_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "calibration_out_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->calibration_out_dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.DebugParam)
  return target;
}

int DebugParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string detection_out_dir = 1;
    if (has_detection_out_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detection_out_dir());
    }

    // optional string tracked_detection_out_dir = 2;
    if (has_tracked_detection_out_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tracked_detection_out_dir());
    }

    // optional string track_out_file = 3;
    if (has_track_out_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_out_file());
    }

    // optional string detect_feature_dir = 4;
    if (has_detect_feature_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detect_feature_dir());
    }

    // optional string lane_out_dir = 5;
    if (has_lane_out_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_out_dir());
    }

    // optional string camera2world_out_file = 6;
    if (has_camera2world_out_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera2world_out_file());
    }

    // optional string calibration_out_dir = 7;
    if (has_calibration_out_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->calibration_out_dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugParam::MergeFrom(const DebugParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_detection_out_dir()) {
      set_detection_out_dir(from.detection_out_dir());
    }
    if (from.has_tracked_detection_out_dir()) {
      set_tracked_detection_out_dir(from.tracked_detection_out_dir());
    }
    if (from.has_track_out_file()) {
      set_track_out_file(from.track_out_file());
    }
    if (from.has_detect_feature_dir()) {
      set_detect_feature_dir(from.detect_feature_dir());
    }
    if (from.has_lane_out_dir()) {
      set_lane_out_dir(from.lane_out_dir());
    }
    if (from.has_camera2world_out_file()) {
      set_camera2world_out_file(from.camera2world_out_file());
    }
    if (from.has_calibration_out_dir()) {
      set_calibration_out_dir(from.calibration_out_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugParam::CopyFrom(const DebugParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugParam::IsInitialized() const {

  return true;
}

void DebugParam::Swap(DebugParam* other) {
  if (other != this) {
    std::swap(detection_out_dir_, other->detection_out_dir_);
    std::swap(tracked_detection_out_dir_, other->tracked_detection_out_dir_);
    std::swap(track_out_file_, other->track_out_file_);
    std::swap(detect_feature_dir_, other->detect_feature_dir_);
    std::swap(lane_out_dir_, other->lane_out_dir_);
    std::swap(camera2world_out_file_, other->camera2world_out_file_);
    std::swap(calibration_out_dir_, other->calibration_out_dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugParam_descriptor_;
  metadata.reflection = DebugParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LanePerceptionParam::kLaneDetectorParamFieldNumber;
const int LanePerceptionParam::kLanePostprocessorParamFieldNumber;
const int LanePerceptionParam::kLaneTrackerParamFieldNumber;
const int LanePerceptionParam::kGpuIdFieldNumber;
#endif  // !_MSC_VER

LanePerceptionParam::LanePerceptionParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.app.LanePerceptionParam)
}

void LanePerceptionParam::InitAsDefaultInstance() {
  lane_detector_param_ = const_cast< ::apollo::perception::camera::app::DetectorParam*>(&::apollo::perception::camera::app::DetectorParam::default_instance());
  lane_postprocessor_param_ = const_cast< ::apollo::perception::camera::app::PluginParam*>(&::apollo::perception::camera::app::PluginParam::default_instance());
  lane_tracker_param_ = const_cast< ::apollo::perception::camera::app::PluginParam*>(&::apollo::perception::camera::app::PluginParam::default_instance());
}

LanePerceptionParam::LanePerceptionParam(const LanePerceptionParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.LanePerceptionParam)
}

void LanePerceptionParam::SharedCtor() {
  _cached_size_ = 0;
  lane_detector_param_ = NULL;
  lane_postprocessor_param_ = NULL;
  lane_tracker_param_ = NULL;
  gpu_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanePerceptionParam::~LanePerceptionParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.LanePerceptionParam)
  SharedDtor();
}

void LanePerceptionParam::SharedDtor() {
  if (this != default_instance_) {
    delete lane_detector_param_;
    delete lane_postprocessor_param_;
    delete lane_tracker_param_;
  }
}

void LanePerceptionParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LanePerceptionParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LanePerceptionParam_descriptor_;
}

const LanePerceptionParam& LanePerceptionParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2eproto();
  return *default_instance_;
}

LanePerceptionParam* LanePerceptionParam::default_instance_ = NULL;

LanePerceptionParam* LanePerceptionParam::New() const {
  return new LanePerceptionParam;
}

void LanePerceptionParam::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_lane_detector_param()) {
      if (lane_detector_param_ != NULL) lane_detector_param_->::apollo::perception::camera::app::DetectorParam::Clear();
    }
    if (has_lane_postprocessor_param()) {
      if (lane_postprocessor_param_ != NULL) lane_postprocessor_param_->::apollo::perception::camera::app::PluginParam::Clear();
    }
    if (has_lane_tracker_param()) {
      if (lane_tracker_param_ != NULL) lane_tracker_param_->::apollo::perception::camera::app::PluginParam::Clear();
    }
    gpu_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LanePerceptionParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.app.LanePerceptionParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_detector_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lane_postprocessor_param;
        break;
      }

      // optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
      case 2: {
        if (tag == 18) {
         parse_lane_postprocessor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_postprocessor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lane_tracker_param;
        break;
      }

      // optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
      case 3: {
        if (tag == 26) {
         parse_lane_tracker_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_tracker_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gpu_id;
        break;
      }

      // optional int32 gpu_id = 4;
      case 4: {
        if (tag == 32) {
         parse_gpu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_id_)));
          set_has_gpu_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.app.LanePerceptionParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.app.LanePerceptionParam)
  return false;
#undef DO_
}

void LanePerceptionParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.app.LanePerceptionParam)
  // optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
  if (has_lane_detector_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lane_detector_param(), output);
  }

  // optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
  if (has_lane_postprocessor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lane_postprocessor_param(), output);
  }

  // optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
  if (has_lane_tracker_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lane_tracker_param(), output);
  }

  // optional int32 gpu_id = 4;
  if (has_gpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gpu_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.app.LanePerceptionParam)
}

::google::protobuf::uint8* LanePerceptionParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.LanePerceptionParam)
  // optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
  if (has_lane_detector_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lane_detector_param(), target);
  }

  // optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
  if (has_lane_postprocessor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lane_postprocessor_param(), target);
  }

  // optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
  if (has_lane_tracker_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lane_tracker_param(), target);
  }

  // optional int32 gpu_id = 4;
  if (has_gpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gpu_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.LanePerceptionParam)
  return target;
}

int LanePerceptionParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
    if (has_lane_detector_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_detector_param());
    }

    // optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
    if (has_lane_postprocessor_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_postprocessor_param());
    }

    // optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
    if (has_lane_tracker_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_tracker_param());
    }

    // optional int32 gpu_id = 4;
    if (has_gpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanePerceptionParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LanePerceptionParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LanePerceptionParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LanePerceptionParam::MergeFrom(const LanePerceptionParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lane_detector_param()) {
      mutable_lane_detector_param()->::apollo::perception::camera::app::DetectorParam::MergeFrom(from.lane_detector_param());
    }
    if (from.has_lane_postprocessor_param()) {
      mutable_lane_postprocessor_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from.lane_postprocessor_param());
    }
    if (from.has_lane_tracker_param()) {
      mutable_lane_tracker_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from.lane_tracker_param());
    }
    if (from.has_gpu_id()) {
      set_gpu_id(from.gpu_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LanePerceptionParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanePerceptionParam::CopyFrom(const LanePerceptionParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanePerceptionParam::IsInitialized() const {

  return true;
}

void LanePerceptionParam::Swap(LanePerceptionParam* other) {
  if (other != this) {
    std::swap(lane_detector_param_, other->lane_detector_param_);
    std::swap(lane_postprocessor_param_, other->lane_postprocessor_param_);
    std::swap(lane_tracker_param_, other->lane_tracker_param_);
    std::swap(gpu_id_, other->gpu_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LanePerceptionParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LanePerceptionParam_descriptor_;
  metadata.reflection = LanePerceptionParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalibrationServiceParam::kCalibratorMethodFieldNumber;
const int CalibrationServiceParam::kPluginParamFieldNumber;
#endif  // !_MSC_VER

CalibrationServiceParam::CalibrationServiceParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.app.CalibrationServiceParam)
}

void CalibrationServiceParam::InitAsDefaultInstance() {
  plugin_param_ = const_cast< ::apollo::perception::camera::app::PluginParam*>(&::apollo::perception::camera::app::PluginParam::default_instance());
}

CalibrationServiceParam::CalibrationServiceParam(const CalibrationServiceParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.CalibrationServiceParam)
}

void CalibrationServiceParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  calibrator_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrationServiceParam::~CalibrationServiceParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.CalibrationServiceParam)
  SharedDtor();
}

void CalibrationServiceParam::SharedDtor() {
  if (calibrator_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete calibrator_method_;
  }
  if (this != default_instance_) {
    delete plugin_param_;
  }
}

void CalibrationServiceParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationServiceParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationServiceParam_descriptor_;
}

const CalibrationServiceParam& CalibrationServiceParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2eproto();
  return *default_instance_;
}

CalibrationServiceParam* CalibrationServiceParam::default_instance_ = NULL;

CalibrationServiceParam* CalibrationServiceParam::New() const {
  return new CalibrationServiceParam;
}

void CalibrationServiceParam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_calibrator_method()) {
      if (calibrator_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        calibrator_method_->clear();
      }
    }
    if (has_plugin_param()) {
      if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalibrationServiceParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.app.CalibrationServiceParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string calibrator_method = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_calibrator_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->calibrator_method().data(), this->calibrator_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "calibrator_method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_plugin_param;
        break;
      }

      // optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
      case 3: {
        if (tag == 26) {
         parse_plugin_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plugin_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.app.CalibrationServiceParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.app.CalibrationServiceParam)
  return false;
#undef DO_
}

void CalibrationServiceParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.app.CalibrationServiceParam)
  // optional string calibrator_method = 2;
  if (has_calibrator_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calibrator_method().data(), this->calibrator_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "calibrator_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->calibrator_method(), output);
  }

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
  if (has_plugin_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->plugin_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.app.CalibrationServiceParam)
}

::google::protobuf::uint8* CalibrationServiceParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.CalibrationServiceParam)
  // optional string calibrator_method = 2;
  if (has_calibrator_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calibrator_method().data(), this->calibrator_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "calibrator_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->calibrator_method(), target);
  }

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
  if (has_plugin_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->plugin_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.CalibrationServiceParam)
  return target;
}

int CalibrationServiceParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string calibrator_method = 2;
    if (has_calibrator_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->calibrator_method());
    }

    // optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
    if (has_plugin_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationServiceParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalibrationServiceParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalibrationServiceParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalibrationServiceParam::MergeFrom(const CalibrationServiceParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_calibrator_method()) {
      set_calibrator_method(from.calibrator_method());
    }
    if (from.has_plugin_param()) {
      mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from.plugin_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalibrationServiceParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationServiceParam::CopyFrom(const CalibrationServiceParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationServiceParam::IsInitialized() const {

  return true;
}

void CalibrationServiceParam::Swap(CalibrationServiceParam* other) {
  if (other != this) {
    std::swap(calibrator_method_, other->calibrator_method_);
    std::swap(plugin_param_, other->plugin_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalibrationServiceParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationServiceParam_descriptor_;
  metadata.reflection = CalibrationServiceParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectTemplateParam::kPluginParamFieldNumber;
#endif  // !_MSC_VER

ObjectTemplateParam::ObjectTemplateParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.app.ObjectTemplateParam)
}

void ObjectTemplateParam::InitAsDefaultInstance() {
  plugin_param_ = const_cast< ::apollo::perception::camera::app::PluginParam*>(&::apollo::perception::camera::app::PluginParam::default_instance());
}

ObjectTemplateParam::ObjectTemplateParam(const ObjectTemplateParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.ObjectTemplateParam)
}

void ObjectTemplateParam::SharedCtor() {
  _cached_size_ = 0;
  plugin_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectTemplateParam::~ObjectTemplateParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.ObjectTemplateParam)
  SharedDtor();
}

void ObjectTemplateParam::SharedDtor() {
  if (this != default_instance_) {
    delete plugin_param_;
  }
}

void ObjectTemplateParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectTemplateParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectTemplateParam_descriptor_;
}

const ObjectTemplateParam& ObjectTemplateParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2eproto();
  return *default_instance_;
}

ObjectTemplateParam* ObjectTemplateParam::default_instance_ = NULL;

ObjectTemplateParam* ObjectTemplateParam::New() const {
  return new ObjectTemplateParam;
}

void ObjectTemplateParam::Clear() {
  if (has_plugin_param()) {
    if (plugin_param_ != NULL) plugin_param_->::apollo::perception::camera::app::PluginParam::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectTemplateParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.app.ObjectTemplateParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plugin_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.app.ObjectTemplateParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.app.ObjectTemplateParam)
  return false;
#undef DO_
}

void ObjectTemplateParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.app.ObjectTemplateParam)
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (has_plugin_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plugin_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.app.ObjectTemplateParam)
}

::google::protobuf::uint8* ObjectTemplateParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.ObjectTemplateParam)
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  if (has_plugin_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plugin_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.ObjectTemplateParam)
  return target;
}

int ObjectTemplateParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
    if (has_plugin_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectTemplateParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectTemplateParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectTemplateParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectTemplateParam::MergeFrom(const ObjectTemplateParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugin_param()) {
      mutable_plugin_param()->::apollo::perception::camera::app::PluginParam::MergeFrom(from.plugin_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectTemplateParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectTemplateParam::CopyFrom(const ObjectTemplateParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTemplateParam::IsInitialized() const {

  return true;
}

void ObjectTemplateParam::Swap(ObjectTemplateParam* other) {
  if (other != this) {
    std::swap(plugin_param_, other->plugin_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectTemplateParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectTemplateParam_descriptor_;
  metadata.reflection = ObjectTemplateParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PerceptionParam::kDetectorParamFieldNumber;
const int PerceptionParam::kTrackerParamFieldNumber;
const int PerceptionParam::kTransformerParamFieldNumber;
const int PerceptionParam::kPostprocessorParamFieldNumber;
const int PerceptionParam::kGpuIdFieldNumber;
const int PerceptionParam::kCameraIntrinsicsFieldNumber;
const int PerceptionParam::kFeatureParamFieldNumber;
const int PerceptionParam::kLaneParamFieldNumber;
const int PerceptionParam::kCalibrationServiceParamFieldNumber;
const int PerceptionParam::kDebugParamFieldNumber;
const int PerceptionParam::kObjectTemplateParamFieldNumber;
#endif  // !_MSC_VER

PerceptionParam::PerceptionParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.app.PerceptionParam)
}

void PerceptionParam::InitAsDefaultInstance() {
  tracker_param_ = const_cast< ::apollo::perception::camera::app::TrackerParam*>(&::apollo::perception::camera::app::TrackerParam::default_instance());
  transformer_param_ = const_cast< ::apollo::perception::camera::app::TransformerParam*>(&::apollo::perception::camera::app::TransformerParam::default_instance());
  postprocessor_param_ = const_cast< ::apollo::perception::camera::app::PostprocessorParam*>(&::apollo::perception::camera::app::PostprocessorParam::default_instance());
  feature_param_ = const_cast< ::apollo::perception::camera::app::FeatureParam*>(&::apollo::perception::camera::app::FeatureParam::default_instance());
  lane_param_ = const_cast< ::apollo::perception::camera::app::LanePerceptionParam*>(&::apollo::perception::camera::app::LanePerceptionParam::default_instance());
  calibration_service_param_ = const_cast< ::apollo::perception::camera::app::CalibrationServiceParam*>(&::apollo::perception::camera::app::CalibrationServiceParam::default_instance());
  debug_param_ = const_cast< ::apollo::perception::camera::app::DebugParam*>(&::apollo::perception::camera::app::DebugParam::default_instance());
  object_template_param_ = const_cast< ::apollo::perception::camera::app::ObjectTemplateParam*>(&::apollo::perception::camera::app::ObjectTemplateParam::default_instance());
}

PerceptionParam::PerceptionParam(const PerceptionParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.PerceptionParam)
}

void PerceptionParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tracker_param_ = NULL;
  transformer_param_ = NULL;
  postprocessor_param_ = NULL;
  gpu_id_ = 0;
  camera_intrinsics_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feature_param_ = NULL;
  lane_param_ = NULL;
  calibration_service_param_ = NULL;
  debug_param_ = NULL;
  object_template_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerceptionParam::~PerceptionParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.PerceptionParam)
  SharedDtor();
}

void PerceptionParam::SharedDtor() {
  if (camera_intrinsics_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_intrinsics_;
  }
  if (this != default_instance_) {
    delete tracker_param_;
    delete transformer_param_;
    delete postprocessor_param_;
    delete feature_param_;
    delete lane_param_;
    delete calibration_service_param_;
    delete debug_param_;
    delete object_template_param_;
  }
}

void PerceptionParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerceptionParam_descriptor_;
}

const PerceptionParam& PerceptionParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2eproto();
  return *default_instance_;
}

PerceptionParam* PerceptionParam::default_instance_ = NULL;

PerceptionParam* PerceptionParam::New() const {
  return new PerceptionParam;
}

void PerceptionParam::Clear() {
  if (_has_bits_[0 / 32] & 254) {
    if (has_tracker_param()) {
      if (tracker_param_ != NULL) tracker_param_->::apollo::perception::camera::app::TrackerParam::Clear();
    }
    if (has_transformer_param()) {
      if (transformer_param_ != NULL) transformer_param_->::apollo::perception::camera::app::TransformerParam::Clear();
    }
    if (has_postprocessor_param()) {
      if (postprocessor_param_ != NULL) postprocessor_param_->::apollo::perception::camera::app::PostprocessorParam::Clear();
    }
    gpu_id_ = 0;
    if (has_camera_intrinsics()) {
      if (camera_intrinsics_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camera_intrinsics_->clear();
      }
    }
    if (has_feature_param()) {
      if (feature_param_ != NULL) feature_param_->::apollo::perception::camera::app::FeatureParam::Clear();
    }
    if (has_lane_param()) {
      if (lane_param_ != NULL) lane_param_->::apollo::perception::camera::app::LanePerceptionParam::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_calibration_service_param()) {
      if (calibration_service_param_ != NULL) calibration_service_param_->::apollo::perception::camera::app::CalibrationServiceParam::Clear();
    }
    if (has_debug_param()) {
      if (debug_param_ != NULL) debug_param_->::apollo::perception::camera::app::DebugParam::Clear();
    }
    if (has_object_template_param()) {
      if (object_template_param_ != NULL) object_template_param_->::apollo::perception::camera::app::ObjectTemplateParam::Clear();
    }
  }
  detector_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PerceptionParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.app.PerceptionParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
      case 1: {
        if (tag == 10) {
         parse_detector_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detector_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_detector_param;
        if (input->ExpectTag(18)) goto parse_tracker_param;
        break;
      }

      // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
      case 2: {
        if (tag == 18) {
         parse_tracker_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tracker_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transformer_param;
        break;
      }

      // optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
      case 3: {
        if (tag == 26) {
         parse_transformer_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transformer_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_postprocessor_param;
        break;
      }

      // optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
      case 4: {
        if (tag == 34) {
         parse_postprocessor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_postprocessor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gpu_id;
        break;
      }

      // optional int32 gpu_id = 5;
      case 5: {
        if (tag == 40) {
         parse_gpu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_id_)));
          set_has_gpu_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_camera_intrinsics;
        break;
      }

      // optional string camera_intrinsics = 6;
      case 6: {
        if (tag == 50) {
         parse_camera_intrinsics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_intrinsics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_intrinsics().data(), this->camera_intrinsics().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "camera_intrinsics");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_feature_param;
        break;
      }

      // optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
      case 7: {
        if (tag == 58) {
         parse_feature_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feature_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_lane_param;
        break;
      }

      // optional .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
      case 8: {
        if (tag == 66) {
         parse_lane_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_calibration_service_param;
        break;
      }

      // optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
      case 9: {
        if (tag == 74) {
         parse_calibration_service_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibration_service_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_debug_param;
        break;
      }

      // optional .apollo.perception.camera.app.DebugParam debug_param = 10;
      case 10: {
        if (tag == 82) {
         parse_debug_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_object_template_param;
        break;
      }

      // optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
      case 11: {
        if (tag == 90) {
         parse_object_template_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object_template_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.app.PerceptionParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.app.PerceptionParam)
  return false;
#undef DO_
}

void PerceptionParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.app.PerceptionParam)
  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  for (int i = 0; i < this->detector_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->detector_param(i), output);
  }

  // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
  if (has_tracker_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tracker_param(), output);
  }

  // optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
  if (has_transformer_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transformer_param(), output);
  }

  // optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
  if (has_postprocessor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->postprocessor_param(), output);
  }

  // optional int32 gpu_id = 5;
  if (has_gpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gpu_id(), output);
  }

  // optional string camera_intrinsics = 6;
  if (has_camera_intrinsics()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_intrinsics().data(), this->camera_intrinsics().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_intrinsics");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->camera_intrinsics(), output);
  }

  // optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
  if (has_feature_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->feature_param(), output);
  }

  // optional .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
  if (has_lane_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->lane_param(), output);
  }

  // optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
  if (has_calibration_service_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->calibration_service_param(), output);
  }

  // optional .apollo.perception.camera.app.DebugParam debug_param = 10;
  if (has_debug_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->debug_param(), output);
  }

  // optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
  if (has_object_template_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->object_template_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.app.PerceptionParam)
}

::google::protobuf::uint8* PerceptionParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.PerceptionParam)
  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  for (int i = 0; i < this->detector_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->detector_param(i), target);
  }

  // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
  if (has_tracker_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tracker_param(), target);
  }

  // optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
  if (has_transformer_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transformer_param(), target);
  }

  // optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
  if (has_postprocessor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->postprocessor_param(), target);
  }

  // optional int32 gpu_id = 5;
  if (has_gpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gpu_id(), target);
  }

  // optional string camera_intrinsics = 6;
  if (has_camera_intrinsics()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_intrinsics().data(), this->camera_intrinsics().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_intrinsics");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->camera_intrinsics(), target);
  }

  // optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
  if (has_feature_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->feature_param(), target);
  }

  // optional .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
  if (has_lane_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->lane_param(), target);
  }

  // optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
  if (has_calibration_service_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->calibration_service_param(), target);
  }

  // optional .apollo.perception.camera.app.DebugParam debug_param = 10;
  if (has_debug_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->debug_param(), target);
  }

  // optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
  if (has_object_template_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->object_template_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.PerceptionParam)
  return target;
}

int PerceptionParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
    if (has_tracker_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tracker_param());
    }

    // optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
    if (has_transformer_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transformer_param());
    }

    // optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
    if (has_postprocessor_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->postprocessor_param());
    }

    // optional int32 gpu_id = 5;
    if (has_gpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_id());
    }

    // optional string camera_intrinsics = 6;
    if (has_camera_intrinsics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_intrinsics());
    }

    // optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
    if (has_feature_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feature_param());
    }

    // optional .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
    if (has_lane_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_param());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
    if (has_calibration_service_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calibration_service_param());
    }

    // optional .apollo.perception.camera.app.DebugParam debug_param = 10;
    if (has_debug_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debug_param());
    }

    // optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
    if (has_object_template_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_template_param());
    }

  }
  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  total_size += 1 * this->detector_param_size();
  for (int i = 0; i < this->detector_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detector_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PerceptionParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PerceptionParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PerceptionParam::MergeFrom(const PerceptionParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  detector_param_.MergeFrom(from.detector_param_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tracker_param()) {
      mutable_tracker_param()->::apollo::perception::camera::app::TrackerParam::MergeFrom(from.tracker_param());
    }
    if (from.has_transformer_param()) {
      mutable_transformer_param()->::apollo::perception::camera::app::TransformerParam::MergeFrom(from.transformer_param());
    }
    if (from.has_postprocessor_param()) {
      mutable_postprocessor_param()->::apollo::perception::camera::app::PostprocessorParam::MergeFrom(from.postprocessor_param());
    }
    if (from.has_gpu_id()) {
      set_gpu_id(from.gpu_id());
    }
    if (from.has_camera_intrinsics()) {
      set_camera_intrinsics(from.camera_intrinsics());
    }
    if (from.has_feature_param()) {
      mutable_feature_param()->::apollo::perception::camera::app::FeatureParam::MergeFrom(from.feature_param());
    }
    if (from.has_lane_param()) {
      mutable_lane_param()->::apollo::perception::camera::app::LanePerceptionParam::MergeFrom(from.lane_param());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_calibration_service_param()) {
      mutable_calibration_service_param()->::apollo::perception::camera::app::CalibrationServiceParam::MergeFrom(from.calibration_service_param());
    }
    if (from.has_debug_param()) {
      mutable_debug_param()->::apollo::perception::camera::app::DebugParam::MergeFrom(from.debug_param());
    }
    if (from.has_object_template_param()) {
      mutable_object_template_param()->::apollo::perception::camera::app::ObjectTemplateParam::MergeFrom(from.object_template_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PerceptionParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionParam::CopyFrom(const PerceptionParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionParam::IsInitialized() const {

  return true;
}

void PerceptionParam::Swap(PerceptionParam* other) {
  if (other != this) {
    detector_param_.Swap(&other->detector_param_);
    std::swap(tracker_param_, other->tracker_param_);
    std::swap(transformer_param_, other->transformer_param_);
    std::swap(postprocessor_param_, other->postprocessor_param_);
    std::swap(gpu_id_, other->gpu_id_);
    std::swap(camera_intrinsics_, other->camera_intrinsics_);
    std::swap(feature_param_, other->feature_param_);
    std::swap(lane_param_, other->lane_param_);
    std::swap(calibration_service_param_, other->calibration_service_param_);
    std::swap(debug_param_, other->debug_param_);
    std::swap(object_template_param_, other->object_template_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PerceptionParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerceptionParam_descriptor_;
  metadata.reflection = PerceptionParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficLightParam::kDetectorParamFieldNumber;
const int TrafficLightParam::kTrackerParamFieldNumber;
const int TrafficLightParam::kGpuIdFieldNumber;
#endif  // !_MSC_VER

TrafficLightParam::TrafficLightParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.app.TrafficLightParam)
}

void TrafficLightParam::InitAsDefaultInstance() {
  tracker_param_ = const_cast< ::apollo::perception::camera::app::TrackerParam*>(&::apollo::perception::camera::app::TrackerParam::default_instance());
}

TrafficLightParam::TrafficLightParam(const TrafficLightParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.app.TrafficLightParam)
}

void TrafficLightParam::SharedCtor() {
  _cached_size_ = 0;
  tracker_param_ = NULL;
  gpu_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficLightParam::~TrafficLightParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.app.TrafficLightParam)
  SharedDtor();
}

void TrafficLightParam::SharedDtor() {
  if (this != default_instance_) {
    delete tracker_param_;
  }
}

void TrafficLightParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLightParam_descriptor_;
}

const TrafficLightParam& TrafficLightParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_2eproto();
  return *default_instance_;
}

TrafficLightParam* TrafficLightParam::default_instance_ = NULL;

TrafficLightParam* TrafficLightParam::New() const {
  return new TrafficLightParam;
}

void TrafficLightParam::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_tracker_param()) {
      if (tracker_param_ != NULL) tracker_param_->::apollo::perception::camera::app::TrackerParam::Clear();
    }
    gpu_id_ = 0;
  }
  detector_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrafficLightParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.app.TrafficLightParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
      case 1: {
        if (tag == 10) {
         parse_detector_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detector_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_detector_param;
        if (input->ExpectTag(18)) goto parse_tracker_param;
        break;
      }

      // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
      case 2: {
        if (tag == 18) {
         parse_tracker_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tracker_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gpu_id;
        break;
      }

      // optional int32 gpu_id = 3;
      case 3: {
        if (tag == 24) {
         parse_gpu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_id_)));
          set_has_gpu_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.app.TrafficLightParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.app.TrafficLightParam)
  return false;
#undef DO_
}

void TrafficLightParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.app.TrafficLightParam)
  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  for (int i = 0; i < this->detector_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->detector_param(i), output);
  }

  // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
  if (has_tracker_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tracker_param(), output);
  }

  // optional int32 gpu_id = 3;
  if (has_gpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gpu_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.app.TrafficLightParam)
}

::google::protobuf::uint8* TrafficLightParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.app.TrafficLightParam)
  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  for (int i = 0; i < this->detector_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->detector_param(i), target);
  }

  // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
  if (has_tracker_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tracker_param(), target);
  }

  // optional int32 gpu_id = 3;
  if (has_gpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gpu_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.app.TrafficLightParam)
  return target;
}

int TrafficLightParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
    if (has_tracker_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tracker_param());
    }

    // optional int32 gpu_id = 3;
    if (has_gpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_id());
    }

  }
  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  total_size += 1 * this->detector_param_size();
  for (int i = 0; i < this->detector_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detector_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrafficLightParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrafficLightParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrafficLightParam::MergeFrom(const TrafficLightParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  detector_param_.MergeFrom(from.detector_param_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tracker_param()) {
      mutable_tracker_param()->::apollo::perception::camera::app::TrackerParam::MergeFrom(from.tracker_param());
    }
    if (from.has_gpu_id()) {
      set_gpu_id(from.gpu_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrafficLightParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightParam::CopyFrom(const TrafficLightParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightParam::IsInitialized() const {

  return true;
}

void TrafficLightParam::Swap(TrafficLightParam* other) {
  if (other != this) {
    detector_param_.Swap(&other->detector_param_);
    std::swap(tracker_param_, other->tracker_param_);
    std::swap(gpu_id_, other->gpu_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrafficLightParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLightParam_descriptor_;
  metadata.reflection = TrafficLightParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace app
}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
