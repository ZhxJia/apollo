// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization_status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "localization_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {

namespace {

const ::google::protobuf::Descriptor* MsfSensorMsgStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsfSensorMsgStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsfStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsfStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LocalLidarStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LocalLidarQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LocalLidarConsistency_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GnssConsistency_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GnssPositionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ImuMsgDelayStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ImuMsgMissingStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ImuMsgDataStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsfRunningStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_localization_5fstatus_2eproto() {
  protobuf_AddDesc_localization_5fstatus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "localization_status.proto");
  GOOGLE_CHECK(file != NULL);
  MsfSensorMsgStatus_descriptor_ = file->message_type(0);
  static const int MsfSensorMsgStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsfSensorMsgStatus, imu_delay_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsfSensorMsgStatus, imu_missing_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsfSensorMsgStatus, imu_data_status_),
  };
  MsfSensorMsgStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsfSensorMsgStatus_descriptor_,
      MsfSensorMsgStatus::default_instance_,
      MsfSensorMsgStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsfSensorMsgStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsfSensorMsgStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsfSensorMsgStatus));
  MsfStatus_descriptor_ = file->message_type(1);
  static const int MsfStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsfStatus, local_lidar_consistency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsfStatus, gnss_consistency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsfStatus, local_lidar_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsfStatus, local_lidar_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsfStatus, gnsspos_position_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsfStatus, msf_running_status_),
  };
  MsfStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsfStatus_descriptor_,
      MsfStatus::default_instance_,
      MsfStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsfStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsfStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsfStatus));
  LocalLidarStatus_descriptor_ = file->enum_type(0);
  LocalLidarQuality_descriptor_ = file->enum_type(1);
  LocalLidarConsistency_descriptor_ = file->enum_type(2);
  GnssConsistency_descriptor_ = file->enum_type(3);
  GnssPositionType_descriptor_ = file->enum_type(4);
  ImuMsgDelayStatus_descriptor_ = file->enum_type(5);
  ImuMsgMissingStatus_descriptor_ = file->enum_type(6);
  ImuMsgDataStatus_descriptor_ = file->enum_type(7);
  MsfRunningStatus_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_localization_5fstatus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsfSensorMsgStatus_descriptor_, &MsfSensorMsgStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsfStatus_descriptor_, &MsfStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_localization_5fstatus_2eproto() {
  delete MsfSensorMsgStatus::default_instance_;
  delete MsfSensorMsgStatus_reflection_;
  delete MsfStatus::default_instance_;
  delete MsfStatus_reflection_;
}

void protobuf_AddDesc_localization_5fstatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031localization_status.proto\022\023apollo.loca"
    "lization\"\334\001\n\022MsfSensorMsgStatus\022@\n\020imu_d"
    "elay_status\030\001 \001(\0162&.apollo.localization."
    "ImuMsgDelayStatus\022D\n\022imu_missing_status\030"
    "\002 \001(\0162(.apollo.localization.ImuMsgMissin"
    "gStatus\022>\n\017imu_data_status\030\003 \001(\0162%.apoll"
    "o.localization.ImuMsgDataStatus\"\251\003\n\tMsfS"
    "tatus\022K\n\027local_lidar_consistency\030\001 \001(\0162*"
    ".apollo.localization.LocalLidarConsisten"
    "cy\022>\n\020gnss_consistency\030\002 \001(\0162$.apollo.lo"
    "calization.GnssConsistency\022A\n\022local_lida"
    "r_status\030\003 \001(\0162%.apollo.localization.Loc"
    "alLidarStatus\022C\n\023local_lidar_quality\030\004 \001"
    "(\0162&.apollo.localization.LocalLidarQuali"
    "ty\022D\n\025gnsspos_position_type\030\005 \001(\0162%.apol"
    "lo.localization.GnssPositionType\022A\n\022msf_"
    "running_status\030\006 \001(\0162%.apollo.localizati"
    "on.MsfRunningStatus*\242\002\n\020LocalLidarStatus"
    "\022\032\n\026MSF_LOCAL_LIDAR_NORMAL\020\000\022\037\n\033MSF_LOCA"
    "L_LIDAR_MAP_MISSING\020\001\022&\n\"MSF_LOCAL_LIDAR"
    "_EXTRINSICS_MISSING\020\002\022&\n\"MSF_LOCAL_LIDAR"
    "_MAP_LOADING_FAILED\020\003\022\035\n\031MSF_LOCAL_LIDAR"
    "_NO_OUTPUT\020\004\022\036\n\032MSF_LOCAL_LIDAR_OUT_OF_M"
    "AP\020\005\022\034\n\030MSF_LOCAL_LIDAR_NOT_GOOD\020\006\022$\n MS"
    "F_LOCAL_LIDAR_UNDEFINED_STATUS\020\007*\202\001\n\021Loc"
    "alLidarQuality\022\035\n\031MSF_LOCAL_LIDAR_VERY_G"
    "OOD\020\000\022\030\n\024MSF_LOCAL_LIDAR_GOOD\020\001\022\033\n\027MSF_L"
    "OCAL_LIDAR_NOT_BAD\020\002\022\027\n\023MSF_LOCAL_LIDAR_"
    "BAD\020\003*\247\001\n\025LocalLidarConsistency\022\"\n\036MSF_L"
    "OCAL_LIDAR_CONSISTENCY_00\020\000\022\"\n\036MSF_LOCAL"
    "_LIDAR_CONSISTENCY_01\020\001\022\"\n\036MSF_LOCAL_LID"
    "AR_CONSISTENCY_02\020\002\022\"\n\036MSF_LOCAL_LIDAR_C"
    "ONSISTENCY_03\020\003*\205\001\n\017GnssConsistency\022\033\n\027M"
    "SF_GNSS_CONSISTENCY_00\020\000\022\033\n\027MSF_GNSS_CON"
    "SISTENCY_01\020\001\022\033\n\027MSF_GNSS_CONSISTENCY_02"
    "\020\002\022\033\n\027MSF_GNSS_CONSISTENCY_03\020\003*\261\004\n\020Gnss"
    "PositionType\022\010\n\004NONE\020\000\022\014\n\010FIXEDPOS\020\001\022\017\n\013"
    "FIXEDHEIGHT\020\002\022\r\n\tFLOATCONV\020\004\022\014\n\010WIDELANE"
    "\020\005\022\016\n\nNARROWLANE\020\006\022\024\n\020DOPPLER_VELOCITY\020\010"
    "\022\n\n\006SINGLE\020\020\022\013\n\007PSRDIFF\020\021\022\010\n\004WAAS\020\022\022\016\n\nP"
    "ROPOGATED\020\023\022\014\n\010OMNISTAR\020\024\022\014\n\010L1_FLOAT\020 \022"
    "\022\n\016IONOFREE_FLOAT\020!\022\020\n\014NARROW_FLOAT\020\"\022\n\n"
    "\006L1_INT\0200\022\014\n\010WIDE_INT\0201\022\016\n\nNARROW_INT\0202\022"
    "\022\n\016RTK_DIRECT_INS\0203\022\014\n\010INS_SBAS\0204\022\r\n\tINS"
    "_PSRSP\0205\022\017\n\013INS_PSRDIFF\0206\022\020\n\014INS_RTKFLOA"
    "T\0207\022\020\n\014INS_RTKFIXED\0208\022\020\n\014INS_OMNISTAR\0209\022"
    "\023\n\017INS_OMNISTAR_HP\020:\022\023\n\017INS_OMNISTAR_XP\020"
    ";\022\017\n\013OMNISTAR_HP\020@\022\017\n\013OMNISTAR_XP\020A\022\022\n\016P"
    "PP_CONVERGING\020D\022\007\n\003PPP\020E\022\026\n\022INS_PPP_Conv"
    "erging\020I\022\013\n\007INS_PPP\020J\022\014\n\010MSG_LOSS\020[*t\n\021I"
    "muMsgDelayStatus\022\024\n\020IMU_DELAY_NORMAL\020\000\022\017"
    "\n\013IMU_DELAY_1\020\001\022\017\n\013IMU_DELAY_2\020\002\022\017\n\013IMU_"
    "DELAY_3\020\003\022\026\n\022IMU_DELAY_ABNORMAL\020\004*\246\001\n\023Im"
    "uMsgMissingStatus\022\026\n\022IMU_MISSING_NORMAL\020"
    "\000\022\021\n\rIMU_MISSING_1\020\001\022\021\n\rIMU_MISSING_2\020\002\022"
    "\021\n\rIMU_MISSING_3\020\003\022\021\n\rIMU_MISSING_4\020\004\022\021\n"
    "\rIMU_MISSING_5\020\005\022\030\n\024IMU_MISSING_ABNORMAL"
    "\020\006*R\n\020ImuMsgDataStatus\022\023\n\017IMU_DATA_NORMA"
    "L\020\000\022\025\n\021IMU_DATA_ABNORMAL\020\001\022\022\n\016IMU_DATA_O"
    "THER\020\002*\254\004\n\020MsfRunningStatus\022\026\n\022MSF_SOL_L"
    "IDAR_GNSS\020\000\022\022\n\016MSF_SOL_X_GNSS\020\001\022\023\n\017MSF_S"
    "OL_LIDAR_X\020\002\022\024\n\020MSF_SOL_LIDAR_XX\020\003\022\025\n\021MS"
    "F_SOL_LIDAR_XXX\020\004\022\017\n\013MSF_SOL_X_X\020\005\022\020\n\014MS"
    "F_SOL_X_XX\020\006\022\021\n\rMSF_SOL_X_XXX\020\007\022\027\n\023MSF_S"
    "SOL_LIDAR_GNSS\020\010\022\023\n\017MSF_SSOL_X_GNSS\020\t\022\024\n"
    "\020MSF_SSOL_LIDAR_X\020\n\022\025\n\021MSF_SSOL_LIDAR_XX"
    "\020\013\022\026\n\022MSF_SSOL_LIDAR_XXX\020\014\022\020\n\014MSF_SSOL_X"
    "_X\020\r\022\021\n\rMSF_SSOL_X_XX\020\016\022\022\n\016MSF_SSOL_X_XX"
    "X\020\017\022\030\n\024MSF_NOSOL_LIDAR_GNSS\020\020\022\024\n\020MSF_NOS"
    "OL_X_GNSS\020\021\022\025\n\021MSF_NOSOL_LIDAR_X\020\022\022\026\n\022MS"
    "F_NOSOL_LIDAR_XX\020\023\022\027\n\023MSF_NOSOL_LIDAR_XX"
    "X\020\024\022\021\n\rMSF_NOSOL_X_X\020\025\022\022\n\016MSF_NOSOL_X_XX"
    "\020\026\022\023\n\017MSF_NOSOL_X_XXX\020\027\022\024\n\020MSF_RUNNING_I"
    "NIT\020\030", 2925);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "localization_status.proto", &protobuf_RegisterTypes);
  MsfSensorMsgStatus::default_instance_ = new MsfSensorMsgStatus();
  MsfStatus::default_instance_ = new MsfStatus();
  MsfSensorMsgStatus::default_instance_->InitAsDefaultInstance();
  MsfStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_localization_5fstatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_localization_5fstatus_2eproto {
  StaticDescriptorInitializer_localization_5fstatus_2eproto() {
    protobuf_AddDesc_localization_5fstatus_2eproto();
  }
} static_descriptor_initializer_localization_5fstatus_2eproto_;
const ::google::protobuf::EnumDescriptor* LocalLidarStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalLidarStatus_descriptor_;
}
bool LocalLidarStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocalLidarQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalLidarQuality_descriptor_;
}
bool LocalLidarQuality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocalLidarConsistency_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalLidarConsistency_descriptor_;
}
bool LocalLidarConsistency_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GnssConsistency_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GnssConsistency_descriptor_;
}
bool GnssConsistency_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GnssPositionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GnssPositionType_descriptor_;
}
bool GnssPositionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 8:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 32:
    case 33:
    case 34:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 64:
    case 65:
    case 68:
    case 69:
    case 73:
    case 74:
    case 91:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImuMsgDelayStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImuMsgDelayStatus_descriptor_;
}
bool ImuMsgDelayStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImuMsgMissingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImuMsgMissingStatus_descriptor_;
}
bool ImuMsgMissingStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImuMsgDataStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImuMsgDataStatus_descriptor_;
}
bool ImuMsgDataStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsfRunningStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsfRunningStatus_descriptor_;
}
bool MsfRunningStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsfSensorMsgStatus::kImuDelayStatusFieldNumber;
const int MsfSensorMsgStatus::kImuMissingStatusFieldNumber;
const int MsfSensorMsgStatus::kImuDataStatusFieldNumber;
#endif  // !_MSC_VER

MsfSensorMsgStatus::MsfSensorMsgStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.MsfSensorMsgStatus)
}

void MsfSensorMsgStatus::InitAsDefaultInstance() {
}

MsfSensorMsgStatus::MsfSensorMsgStatus(const MsfSensorMsgStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.MsfSensorMsgStatus)
}

void MsfSensorMsgStatus::SharedCtor() {
  _cached_size_ = 0;
  imu_delay_status_ = 0;
  imu_missing_status_ = 0;
  imu_data_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsfSensorMsgStatus::~MsfSensorMsgStatus() {
  // @@protoc_insertion_point(destructor:apollo.localization.MsfSensorMsgStatus)
  SharedDtor();
}

void MsfSensorMsgStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsfSensorMsgStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsfSensorMsgStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsfSensorMsgStatus_descriptor_;
}

const MsfSensorMsgStatus& MsfSensorMsgStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localization_5fstatus_2eproto();
  return *default_instance_;
}

MsfSensorMsgStatus* MsfSensorMsgStatus::default_instance_ = NULL;

MsfSensorMsgStatus* MsfSensorMsgStatus::New() const {
  return new MsfSensorMsgStatus;
}

void MsfSensorMsgStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsfSensorMsgStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(imu_delay_status_, imu_data_status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsfSensorMsgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.MsfSensorMsgStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.localization.ImuMsgDelayStatus imu_delay_status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::ImuMsgDelayStatus_IsValid(value)) {
            set_imu_delay_status(static_cast< ::apollo::localization::ImuMsgDelayStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_imu_missing_status;
        break;
      }

      // optional .apollo.localization.ImuMsgMissingStatus imu_missing_status = 2;
      case 2: {
        if (tag == 16) {
         parse_imu_missing_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::ImuMsgMissingStatus_IsValid(value)) {
            set_imu_missing_status(static_cast< ::apollo::localization::ImuMsgMissingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_imu_data_status;
        break;
      }

      // optional .apollo.localization.ImuMsgDataStatus imu_data_status = 3;
      case 3: {
        if (tag == 24) {
         parse_imu_data_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::ImuMsgDataStatus_IsValid(value)) {
            set_imu_data_status(static_cast< ::apollo::localization::ImuMsgDataStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.MsfSensorMsgStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.MsfSensorMsgStatus)
  return false;
#undef DO_
}

void MsfSensorMsgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.MsfSensorMsgStatus)
  // optional .apollo.localization.ImuMsgDelayStatus imu_delay_status = 1;
  if (has_imu_delay_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->imu_delay_status(), output);
  }

  // optional .apollo.localization.ImuMsgMissingStatus imu_missing_status = 2;
  if (has_imu_missing_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->imu_missing_status(), output);
  }

  // optional .apollo.localization.ImuMsgDataStatus imu_data_status = 3;
  if (has_imu_data_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->imu_data_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.MsfSensorMsgStatus)
}

::google::protobuf::uint8* MsfSensorMsgStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.MsfSensorMsgStatus)
  // optional .apollo.localization.ImuMsgDelayStatus imu_delay_status = 1;
  if (has_imu_delay_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->imu_delay_status(), target);
  }

  // optional .apollo.localization.ImuMsgMissingStatus imu_missing_status = 2;
  if (has_imu_missing_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->imu_missing_status(), target);
  }

  // optional .apollo.localization.ImuMsgDataStatus imu_data_status = 3;
  if (has_imu_data_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->imu_data_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.MsfSensorMsgStatus)
  return target;
}

int MsfSensorMsgStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.localization.ImuMsgDelayStatus imu_delay_status = 1;
    if (has_imu_delay_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imu_delay_status());
    }

    // optional .apollo.localization.ImuMsgMissingStatus imu_missing_status = 2;
    if (has_imu_missing_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imu_missing_status());
    }

    // optional .apollo.localization.ImuMsgDataStatus imu_data_status = 3;
    if (has_imu_data_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imu_data_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsfSensorMsgStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsfSensorMsgStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsfSensorMsgStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsfSensorMsgStatus::MergeFrom(const MsfSensorMsgStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imu_delay_status()) {
      set_imu_delay_status(from.imu_delay_status());
    }
    if (from.has_imu_missing_status()) {
      set_imu_missing_status(from.imu_missing_status());
    }
    if (from.has_imu_data_status()) {
      set_imu_data_status(from.imu_data_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsfSensorMsgStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsfSensorMsgStatus::CopyFrom(const MsfSensorMsgStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsfSensorMsgStatus::IsInitialized() const {

  return true;
}

void MsfSensorMsgStatus::Swap(MsfSensorMsgStatus* other) {
  if (other != this) {
    std::swap(imu_delay_status_, other->imu_delay_status_);
    std::swap(imu_missing_status_, other->imu_missing_status_);
    std::swap(imu_data_status_, other->imu_data_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsfSensorMsgStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsfSensorMsgStatus_descriptor_;
  metadata.reflection = MsfSensorMsgStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsfStatus::kLocalLidarConsistencyFieldNumber;
const int MsfStatus::kGnssConsistencyFieldNumber;
const int MsfStatus::kLocalLidarStatusFieldNumber;
const int MsfStatus::kLocalLidarQualityFieldNumber;
const int MsfStatus::kGnssposPositionTypeFieldNumber;
const int MsfStatus::kMsfRunningStatusFieldNumber;
#endif  // !_MSC_VER

MsfStatus::MsfStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.MsfStatus)
}

void MsfStatus::InitAsDefaultInstance() {
}

MsfStatus::MsfStatus(const MsfStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.MsfStatus)
}

void MsfStatus::SharedCtor() {
  _cached_size_ = 0;
  local_lidar_consistency_ = 0;
  gnss_consistency_ = 0;
  local_lidar_status_ = 0;
  local_lidar_quality_ = 0;
  gnsspos_position_type_ = 0;
  msf_running_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsfStatus::~MsfStatus() {
  // @@protoc_insertion_point(destructor:apollo.localization.MsfStatus)
  SharedDtor();
}

void MsfStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsfStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsfStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsfStatus_descriptor_;
}

const MsfStatus& MsfStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localization_5fstatus_2eproto();
  return *default_instance_;
}

MsfStatus* MsfStatus::default_instance_ = NULL;

MsfStatus* MsfStatus::New() const {
  return new MsfStatus;
}

void MsfStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsfStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(local_lidar_consistency_, msf_running_status_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsfStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.MsfStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.localization.LocalLidarConsistency local_lidar_consistency = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::LocalLidarConsistency_IsValid(value)) {
            set_local_lidar_consistency(static_cast< ::apollo::localization::LocalLidarConsistency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gnss_consistency;
        break;
      }

      // optional .apollo.localization.GnssConsistency gnss_consistency = 2;
      case 2: {
        if (tag == 16) {
         parse_gnss_consistency:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::GnssConsistency_IsValid(value)) {
            set_gnss_consistency(static_cast< ::apollo::localization::GnssConsistency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_local_lidar_status;
        break;
      }

      // optional .apollo.localization.LocalLidarStatus local_lidar_status = 3;
      case 3: {
        if (tag == 24) {
         parse_local_lidar_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::LocalLidarStatus_IsValid(value)) {
            set_local_lidar_status(static_cast< ::apollo::localization::LocalLidarStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_local_lidar_quality;
        break;
      }

      // optional .apollo.localization.LocalLidarQuality local_lidar_quality = 4;
      case 4: {
        if (tag == 32) {
         parse_local_lidar_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::LocalLidarQuality_IsValid(value)) {
            set_local_lidar_quality(static_cast< ::apollo::localization::LocalLidarQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gnsspos_position_type;
        break;
      }

      // optional .apollo.localization.GnssPositionType gnsspos_position_type = 5;
      case 5: {
        if (tag == 40) {
         parse_gnsspos_position_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::GnssPositionType_IsValid(value)) {
            set_gnsspos_position_type(static_cast< ::apollo::localization::GnssPositionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_msf_running_status;
        break;
      }

      // optional .apollo.localization.MsfRunningStatus msf_running_status = 6;
      case 6: {
        if (tag == 48) {
         parse_msf_running_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::MsfRunningStatus_IsValid(value)) {
            set_msf_running_status(static_cast< ::apollo::localization::MsfRunningStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.MsfStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.MsfStatus)
  return false;
#undef DO_
}

void MsfStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.MsfStatus)
  // optional .apollo.localization.LocalLidarConsistency local_lidar_consistency = 1;
  if (has_local_lidar_consistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->local_lidar_consistency(), output);
  }

  // optional .apollo.localization.GnssConsistency gnss_consistency = 2;
  if (has_gnss_consistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gnss_consistency(), output);
  }

  // optional .apollo.localization.LocalLidarStatus local_lidar_status = 3;
  if (has_local_lidar_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->local_lidar_status(), output);
  }

  // optional .apollo.localization.LocalLidarQuality local_lidar_quality = 4;
  if (has_local_lidar_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->local_lidar_quality(), output);
  }

  // optional .apollo.localization.GnssPositionType gnsspos_position_type = 5;
  if (has_gnsspos_position_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gnsspos_position_type(), output);
  }

  // optional .apollo.localization.MsfRunningStatus msf_running_status = 6;
  if (has_msf_running_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->msf_running_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.MsfStatus)
}

::google::protobuf::uint8* MsfStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.MsfStatus)
  // optional .apollo.localization.LocalLidarConsistency local_lidar_consistency = 1;
  if (has_local_lidar_consistency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->local_lidar_consistency(), target);
  }

  // optional .apollo.localization.GnssConsistency gnss_consistency = 2;
  if (has_gnss_consistency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gnss_consistency(), target);
  }

  // optional .apollo.localization.LocalLidarStatus local_lidar_status = 3;
  if (has_local_lidar_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->local_lidar_status(), target);
  }

  // optional .apollo.localization.LocalLidarQuality local_lidar_quality = 4;
  if (has_local_lidar_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->local_lidar_quality(), target);
  }

  // optional .apollo.localization.GnssPositionType gnsspos_position_type = 5;
  if (has_gnsspos_position_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->gnsspos_position_type(), target);
  }

  // optional .apollo.localization.MsfRunningStatus msf_running_status = 6;
  if (has_msf_running_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->msf_running_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.MsfStatus)
  return target;
}

int MsfStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.localization.LocalLidarConsistency local_lidar_consistency = 1;
    if (has_local_lidar_consistency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_lidar_consistency());
    }

    // optional .apollo.localization.GnssConsistency gnss_consistency = 2;
    if (has_gnss_consistency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_consistency());
    }

    // optional .apollo.localization.LocalLidarStatus local_lidar_status = 3;
    if (has_local_lidar_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_lidar_status());
    }

    // optional .apollo.localization.LocalLidarQuality local_lidar_quality = 4;
    if (has_local_lidar_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_lidar_quality());
    }

    // optional .apollo.localization.GnssPositionType gnsspos_position_type = 5;
    if (has_gnsspos_position_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnsspos_position_type());
    }

    // optional .apollo.localization.MsfRunningStatus msf_running_status = 6;
    if (has_msf_running_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msf_running_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsfStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsfStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsfStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsfStatus::MergeFrom(const MsfStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_lidar_consistency()) {
      set_local_lidar_consistency(from.local_lidar_consistency());
    }
    if (from.has_gnss_consistency()) {
      set_gnss_consistency(from.gnss_consistency());
    }
    if (from.has_local_lidar_status()) {
      set_local_lidar_status(from.local_lidar_status());
    }
    if (from.has_local_lidar_quality()) {
      set_local_lidar_quality(from.local_lidar_quality());
    }
    if (from.has_gnsspos_position_type()) {
      set_gnsspos_position_type(from.gnsspos_position_type());
    }
    if (from.has_msf_running_status()) {
      set_msf_running_status(from.msf_running_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsfStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsfStatus::CopyFrom(const MsfStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsfStatus::IsInitialized() const {

  return true;
}

void MsfStatus::Swap(MsfStatus* other) {
  if (other != this) {
    std::swap(local_lidar_consistency_, other->local_lidar_consistency_);
    std::swap(gnss_consistency_, other->gnss_consistency_);
    std::swap(local_lidar_status_, other->local_lidar_status_);
    std::swap(local_lidar_quality_, other->local_lidar_quality_);
    std::swap(gnsspos_position_type_, other->gnsspos_position_type_);
    std::swap(msf_running_status_, other->msf_running_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsfStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsfStatus_descriptor_;
  metadata.reflection = MsfStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
