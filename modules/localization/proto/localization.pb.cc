// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "localization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {

namespace {

const ::google::protobuf::Descriptor* Uncertainty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uncertainty_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalizationEstimate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalizationEstimate_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalizationStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalizationStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MeasureState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_localization_2eproto() {
  protobuf_AddDesc_localization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "localization.proto");
  GOOGLE_CHECK(file != NULL);
  Uncertainty_descriptor_ = file->message_type(0);
  static const int Uncertainty_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, position_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, orientation_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, linear_velocity_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, linear_acceleration_std_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, angular_velocity_std_dev_),
  };
  Uncertainty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Uncertainty_descriptor_,
      Uncertainty::default_instance_,
      Uncertainty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uncertainty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Uncertainty));
  LocalizationEstimate_descriptor_ = file->message_type(1);
  static const int LocalizationEstimate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, uncertainty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, measurement_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, trajectory_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, msf_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, sensor_status_),
  };
  LocalizationEstimate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalizationEstimate_descriptor_,
      LocalizationEstimate::default_instance_,
      LocalizationEstimate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationEstimate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalizationEstimate));
  LocalizationStatus_descriptor_ = file->message_type(2);
  static const int LocalizationStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, fusion_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, gnss_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, lidar_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, measurement_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, state_message_),
  };
  LocalizationStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalizationStatus_descriptor_,
      LocalizationStatus::default_instance_,
      LocalizationStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalizationStatus));
  MeasureState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_localization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Uncertainty_descriptor_, &Uncertainty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalizationEstimate_descriptor_, &LocalizationEstimate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalizationStatus_descriptor_, &LocalizationStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_localization_2eproto() {
  delete Uncertainty::default_instance_;
  delete Uncertainty_reflection_;
  delete LocalizationEstimate::default_instance_;
  delete LocalizationEstimate_reflection_;
  delete LocalizationStatus::default_instance_;
  delete LocalizationStatus_reflection_;
}

void protobuf_AddDesc_localization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::common::protobuf_AddDesc_modules_2fcommon_2fproto_2fheader_2eproto();
  ::apollo::localization::protobuf_AddDesc_modules_2flocalization_2fproto_2fpose_2eproto();
  ::apollo::common::protobuf_AddDesc_modules_2fcommon_2fproto_2fgeometry_2eproto();
  ::apollo::common::protobuf_AddDesc_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto();
  ::apollo::localization::protobuf_AddDesc_modules_2flocalization_2fproto_2flocalization_5fstatus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022localization.proto\022\023apollo.localizatio"
    "n\032!modules/common/proto/header.proto\032%mo"
    "dules/localization/proto/pose.proto\032#mod"
    "ules/common/proto/geometry.proto\032$module"
    "s/common/proto/pnc_point.proto\0324modules/"
    "localization/proto/localization_status.p"
    "roto\"\244\002\n\013Uncertainty\0220\n\020position_std_dev"
    "\030\001 \001(\0132\026.apollo.common.Point3D\0223\n\023orient"
    "ation_std_dev\030\002 \001(\0132\026.apollo.common.Poin"
    "t3D\0227\n\027linear_velocity_std_dev\030\003 \001(\0132\026.a"
    "pollo.common.Point3D\022;\n\033linear_accelerat"
    "ion_std_dev\030\004 \001(\0132\026.apollo.common.Point3"
    "D\0228\n\030angular_velocity_std_dev\030\005 \001(\0132\026.ap"
    "ollo.common.Point3D\"\345\002\n\024LocalizationEsti"
    "mate\022%\n\006header\030\001 \001(\0132\025.apollo.common.Hea"
    "der\022\'\n\004pose\030\002 \001(\0132\031.apollo.localization."
    "Pose\0225\n\013uncertainty\030\003 \001(\0132 .apollo.local"
    "ization.Uncertainty\022\030\n\020measurement_time\030"
    "\004 \001(\001\0228\n\020trajectory_point\030\005 \003(\0132\036.apollo"
    ".common.TrajectoryPoint\0222\n\nmsf_status\030\006 "
    "\001(\0132\036.apollo.localization.MsfStatus\022>\n\rs"
    "ensor_status\030\007 \001(\0132\'.apollo.localization"
    ".MsfSensorMsgStatus\"\237\002\n\022LocalizationStat"
    "us\022%\n\006header\030\001 \001(\0132\025.apollo.common.Heade"
    "r\0228\n\rfusion_status\030\002 \001(\0162!.apollo.locali"
    "zation.MeasureState\022:\n\013gnss_status\030\003 \001(\016"
    "2!.apollo.localization.MeasureStateB\002\030\001\022"
    ";\n\014lidar_status\030\004 \001(\0162!.apollo.localizat"
    "ion.MeasureStateB\002\030\001\022\030\n\020measurement_time"
    "\030\005 \001(\001\022\025\n\rstate_message\030\006 \001(\t*T\n\014Measure"
    "State\022\006\n\002OK\020\000\022\014\n\010WARNNING\020\001\022\t\n\005ERROR\020\002\022\022"
    "\n\016CRITICAL_ERROR\020\003\022\017\n\013FATAL_ERROR\020\004", 1275);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "localization.proto", &protobuf_RegisterTypes);
  Uncertainty::default_instance_ = new Uncertainty();
  LocalizationEstimate::default_instance_ = new LocalizationEstimate();
  LocalizationStatus::default_instance_ = new LocalizationStatus();
  Uncertainty::default_instance_->InitAsDefaultInstance();
  LocalizationEstimate::default_instance_->InitAsDefaultInstance();
  LocalizationStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_localization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_localization_2eproto {
  StaticDescriptorInitializer_localization_2eproto() {
    protobuf_AddDesc_localization_2eproto();
  }
} static_descriptor_initializer_localization_2eproto_;
const ::google::protobuf::EnumDescriptor* MeasureState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeasureState_descriptor_;
}
bool MeasureState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Uncertainty::kPositionStdDevFieldNumber;
const int Uncertainty::kOrientationStdDevFieldNumber;
const int Uncertainty::kLinearVelocityStdDevFieldNumber;
const int Uncertainty::kLinearAccelerationStdDevFieldNumber;
const int Uncertainty::kAngularVelocityStdDevFieldNumber;
#endif  // !_MSC_VER

Uncertainty::Uncertainty()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.Uncertainty)
}

void Uncertainty::InitAsDefaultInstance() {
  position_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  orientation_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  linear_velocity_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  linear_acceleration_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
  angular_velocity_std_dev_ = const_cast< ::apollo::common::Point3D*>(&::apollo::common::Point3D::default_instance());
}

Uncertainty::Uncertainty(const Uncertainty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.Uncertainty)
}

void Uncertainty::SharedCtor() {
  _cached_size_ = 0;
  position_std_dev_ = NULL;
  orientation_std_dev_ = NULL;
  linear_velocity_std_dev_ = NULL;
  linear_acceleration_std_dev_ = NULL;
  angular_velocity_std_dev_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Uncertainty::~Uncertainty() {
  // @@protoc_insertion_point(destructor:apollo.localization.Uncertainty)
  SharedDtor();
}

void Uncertainty::SharedDtor() {
  if (this != default_instance_) {
    delete position_std_dev_;
    delete orientation_std_dev_;
    delete linear_velocity_std_dev_;
    delete linear_acceleration_std_dev_;
    delete angular_velocity_std_dev_;
  }
}

void Uncertainty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uncertainty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uncertainty_descriptor_;
}

const Uncertainty& Uncertainty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localization_2eproto();
  return *default_instance_;
}

Uncertainty* Uncertainty::default_instance_ = NULL;

Uncertainty* Uncertainty::New() const {
  return new Uncertainty;
}

void Uncertainty::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_position_std_dev()) {
      if (position_std_dev_ != NULL) position_std_dev_->::apollo::common::Point3D::Clear();
    }
    if (has_orientation_std_dev()) {
      if (orientation_std_dev_ != NULL) orientation_std_dev_->::apollo::common::Point3D::Clear();
    }
    if (has_linear_velocity_std_dev()) {
      if (linear_velocity_std_dev_ != NULL) linear_velocity_std_dev_->::apollo::common::Point3D::Clear();
    }
    if (has_linear_acceleration_std_dev()) {
      if (linear_acceleration_std_dev_ != NULL) linear_acceleration_std_dev_->::apollo::common::Point3D::Clear();
    }
    if (has_angular_velocity_std_dev()) {
      if (angular_velocity_std_dev_ != NULL) angular_velocity_std_dev_->::apollo::common::Point3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Uncertainty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.Uncertainty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Point3D position_std_dev = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orientation_std_dev;
        break;
      }

      // optional .apollo.common.Point3D orientation_std_dev = 2;
      case 2: {
        if (tag == 18) {
         parse_orientation_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_linear_velocity_std_dev;
        break;
      }

      // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
      case 3: {
        if (tag == 26) {
         parse_linear_velocity_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_linear_acceleration_std_dev;
        break;
      }

      // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
      case 4: {
        if (tag == 34) {
         parse_linear_acceleration_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_angular_velocity_std_dev;
        break;
      }

      // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
      case 5: {
        if (tag == 42) {
         parse_angular_velocity_std_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.Uncertainty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.Uncertainty)
  return false;
#undef DO_
}

void Uncertainty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.Uncertainty)
  // optional .apollo.common.Point3D position_std_dev = 1;
  if (has_position_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position_std_dev(), output);
  }

  // optional .apollo.common.Point3D orientation_std_dev = 2;
  if (has_orientation_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->orientation_std_dev(), output);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
  if (has_linear_velocity_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->linear_velocity_std_dev(), output);
  }

  // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
  if (has_linear_acceleration_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->linear_acceleration_std_dev(), output);
  }

  // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
  if (has_angular_velocity_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->angular_velocity_std_dev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.Uncertainty)
}

::google::protobuf::uint8* Uncertainty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.Uncertainty)
  // optional .apollo.common.Point3D position_std_dev = 1;
  if (has_position_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position_std_dev(), target);
  }

  // optional .apollo.common.Point3D orientation_std_dev = 2;
  if (has_orientation_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->orientation_std_dev(), target);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
  if (has_linear_velocity_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->linear_velocity_std_dev(), target);
  }

  // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
  if (has_linear_acceleration_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->linear_acceleration_std_dev(), target);
  }

  // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
  if (has_angular_velocity_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->angular_velocity_std_dev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.Uncertainty)
  return target;
}

int Uncertainty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.common.Point3D position_std_dev = 1;
    if (has_position_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position_std_dev());
    }

    // optional .apollo.common.Point3D orientation_std_dev = 2;
    if (has_orientation_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orientation_std_dev());
    }

    // optional .apollo.common.Point3D linear_velocity_std_dev = 3;
    if (has_linear_velocity_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_velocity_std_dev());
    }

    // optional .apollo.common.Point3D linear_acceleration_std_dev = 4;
    if (has_linear_acceleration_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_acceleration_std_dev());
    }

    // optional .apollo.common.Point3D angular_velocity_std_dev = 5;
    if (has_angular_velocity_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angular_velocity_std_dev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uncertainty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Uncertainty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Uncertainty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Uncertainty::MergeFrom(const Uncertainty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position_std_dev()) {
      mutable_position_std_dev()->::apollo::common::Point3D::MergeFrom(from.position_std_dev());
    }
    if (from.has_orientation_std_dev()) {
      mutable_orientation_std_dev()->::apollo::common::Point3D::MergeFrom(from.orientation_std_dev());
    }
    if (from.has_linear_velocity_std_dev()) {
      mutable_linear_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from.linear_velocity_std_dev());
    }
    if (from.has_linear_acceleration_std_dev()) {
      mutable_linear_acceleration_std_dev()->::apollo::common::Point3D::MergeFrom(from.linear_acceleration_std_dev());
    }
    if (from.has_angular_velocity_std_dev()) {
      mutable_angular_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from.angular_velocity_std_dev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Uncertainty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uncertainty::CopyFrom(const Uncertainty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uncertainty::IsInitialized() const {

  return true;
}

void Uncertainty::Swap(Uncertainty* other) {
  if (other != this) {
    std::swap(position_std_dev_, other->position_std_dev_);
    std::swap(orientation_std_dev_, other->orientation_std_dev_);
    std::swap(linear_velocity_std_dev_, other->linear_velocity_std_dev_);
    std::swap(linear_acceleration_std_dev_, other->linear_acceleration_std_dev_);
    std::swap(angular_velocity_std_dev_, other->angular_velocity_std_dev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Uncertainty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uncertainty_descriptor_;
  metadata.reflection = Uncertainty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalizationEstimate::kHeaderFieldNumber;
const int LocalizationEstimate::kPoseFieldNumber;
const int LocalizationEstimate::kUncertaintyFieldNumber;
const int LocalizationEstimate::kMeasurementTimeFieldNumber;
const int LocalizationEstimate::kTrajectoryPointFieldNumber;
const int LocalizationEstimate::kMsfStatusFieldNumber;
const int LocalizationEstimate::kSensorStatusFieldNumber;
#endif  // !_MSC_VER

LocalizationEstimate::LocalizationEstimate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.LocalizationEstimate)
}

void LocalizationEstimate::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
  pose_ = const_cast< ::apollo::localization::Pose*>(&::apollo::localization::Pose::default_instance());
  uncertainty_ = const_cast< ::apollo::localization::Uncertainty*>(&::apollo::localization::Uncertainty::default_instance());
  msf_status_ = const_cast< ::apollo::localization::MsfStatus*>(&::apollo::localization::MsfStatus::default_instance());
  sensor_status_ = const_cast< ::apollo::localization::MsfSensorMsgStatus*>(&::apollo::localization::MsfSensorMsgStatus::default_instance());
}

LocalizationEstimate::LocalizationEstimate(const LocalizationEstimate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.LocalizationEstimate)
}

void LocalizationEstimate::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  pose_ = NULL;
  uncertainty_ = NULL;
  measurement_time_ = 0;
  msf_status_ = NULL;
  sensor_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalizationEstimate::~LocalizationEstimate() {
  // @@protoc_insertion_point(destructor:apollo.localization.LocalizationEstimate)
  SharedDtor();
}

void LocalizationEstimate::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete pose_;
    delete uncertainty_;
    delete msf_status_;
    delete sensor_status_;
  }
}

void LocalizationEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationEstimate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationEstimate_descriptor_;
}

const LocalizationEstimate& LocalizationEstimate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localization_2eproto();
  return *default_instance_;
}

LocalizationEstimate* LocalizationEstimate::default_instance_ = NULL;

LocalizationEstimate* LocalizationEstimate::New() const {
  return new LocalizationEstimate;
}

void LocalizationEstimate::Clear() {
  if (_has_bits_[0 / 32] & 111) {
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::apollo::localization::Pose::Clear();
    }
    if (has_uncertainty()) {
      if (uncertainty_ != NULL) uncertainty_->::apollo::localization::Uncertainty::Clear();
    }
    measurement_time_ = 0;
    if (has_msf_status()) {
      if (msf_status_ != NULL) msf_status_->::apollo::localization::MsfStatus::Clear();
    }
    if (has_sensor_status()) {
      if (sensor_status_ != NULL) sensor_status_->::apollo::localization::MsfSensorMsgStatus::Clear();
    }
  }
  trajectory_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalizationEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.LocalizationEstimate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pose;
        break;
      }

      // optional .apollo.localization.Pose pose = 2;
      case 2: {
        if (tag == 18) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uncertainty;
        break;
      }

      // optional .apollo.localization.Uncertainty uncertainty = 3;
      case 3: {
        if (tag == 26) {
         parse_uncertainty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uncertainty()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_measurement_time;
        break;
      }

      // optional double measurement_time = 4;
      case 4: {
        if (tag == 33) {
         parse_measurement_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
          set_has_measurement_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_trajectory_point;
        break;
      }

      // repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
      case 5: {
        if (tag == 42) {
         parse_trajectory_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_trajectory_point;
        if (input->ExpectTag(50)) goto parse_msf_status;
        break;
      }

      // optional .apollo.localization.MsfStatus msf_status = 6;
      case 6: {
        if (tag == 50) {
         parse_msf_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msf_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sensor_status;
        break;
      }

      // optional .apollo.localization.MsfSensorMsgStatus sensor_status = 7;
      case 7: {
        if (tag == 58) {
         parse_sensor_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.LocalizationEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.LocalizationEstimate)
  return false;
#undef DO_
}

void LocalizationEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.LocalizationEstimate)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .apollo.localization.Pose pose = 2;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pose(), output);
  }

  // optional .apollo.localization.Uncertainty uncertainty = 3;
  if (has_uncertainty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->uncertainty(), output);
  }

  // optional double measurement_time = 4;
  if (has_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->measurement_time(), output);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
  for (int i = 0; i < this->trajectory_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->trajectory_point(i), output);
  }

  // optional .apollo.localization.MsfStatus msf_status = 6;
  if (has_msf_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->msf_status(), output);
  }

  // optional .apollo.localization.MsfSensorMsgStatus sensor_status = 7;
  if (has_sensor_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sensor_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.LocalizationEstimate)
}

::google::protobuf::uint8* LocalizationEstimate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.LocalizationEstimate)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .apollo.localization.Pose pose = 2;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pose(), target);
  }

  // optional .apollo.localization.Uncertainty uncertainty = 3;
  if (has_uncertainty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->uncertainty(), target);
  }

  // optional double measurement_time = 4;
  if (has_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->measurement_time(), target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
  for (int i = 0; i < this->trajectory_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->trajectory_point(i), target);
  }

  // optional .apollo.localization.MsfStatus msf_status = 6;
  if (has_msf_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->msf_status(), target);
  }

  // optional .apollo.localization.MsfSensorMsgStatus sensor_status = 7;
  if (has_sensor_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->sensor_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.LocalizationEstimate)
  return target;
}

int LocalizationEstimate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .apollo.localization.Pose pose = 2;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional .apollo.localization.Uncertainty uncertainty = 3;
    if (has_uncertainty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uncertainty());
    }

    // optional double measurement_time = 4;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional .apollo.localization.MsfStatus msf_status = 6;
    if (has_msf_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msf_status());
    }

    // optional .apollo.localization.MsfSensorMsgStatus sensor_status = 7;
    if (has_sensor_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_status());
    }

  }
  // repeated .apollo.common.TrajectoryPoint trajectory_point = 5;
  total_size += 1 * this->trajectory_point_size();
  for (int i = 0; i < this->trajectory_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trajectory_point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationEstimate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalizationEstimate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalizationEstimate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalizationEstimate::MergeFrom(const LocalizationEstimate& from) {
  GOOGLE_CHECK_NE(&from, this);
  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_pose()) {
      mutable_pose()->::apollo::localization::Pose::MergeFrom(from.pose());
    }
    if (from.has_uncertainty()) {
      mutable_uncertainty()->::apollo::localization::Uncertainty::MergeFrom(from.uncertainty());
    }
    if (from.has_measurement_time()) {
      set_measurement_time(from.measurement_time());
    }
    if (from.has_msf_status()) {
      mutable_msf_status()->::apollo::localization::MsfStatus::MergeFrom(from.msf_status());
    }
    if (from.has_sensor_status()) {
      mutable_sensor_status()->::apollo::localization::MsfSensorMsgStatus::MergeFrom(from.sensor_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalizationEstimate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationEstimate::CopyFrom(const LocalizationEstimate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationEstimate::IsInitialized() const {

  return true;
}

void LocalizationEstimate::Swap(LocalizationEstimate* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(pose_, other->pose_);
    std::swap(uncertainty_, other->uncertainty_);
    std::swap(measurement_time_, other->measurement_time_);
    trajectory_point_.Swap(&other->trajectory_point_);
    std::swap(msf_status_, other->msf_status_);
    std::swap(sensor_status_, other->sensor_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalizationEstimate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalizationEstimate_descriptor_;
  metadata.reflection = LocalizationEstimate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalizationStatus::kHeaderFieldNumber;
const int LocalizationStatus::kFusionStatusFieldNumber;
const int LocalizationStatus::kGnssStatusFieldNumber;
const int LocalizationStatus::kLidarStatusFieldNumber;
const int LocalizationStatus::kMeasurementTimeFieldNumber;
const int LocalizationStatus::kStateMessageFieldNumber;
#endif  // !_MSC_VER

LocalizationStatus::LocalizationStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.LocalizationStatus)
}

void LocalizationStatus::InitAsDefaultInstance() {
  header_ = const_cast< ::apollo::common::Header*>(&::apollo::common::Header::default_instance());
}

LocalizationStatus::LocalizationStatus(const LocalizationStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:apollo.localization.LocalizationStatus)
}

void LocalizationStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  fusion_status_ = 0;
  gnss_status_ = 0;
  lidar_status_ = 0;
  measurement_time_ = 0;
  state_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalizationStatus::~LocalizationStatus() {
  // @@protoc_insertion_point(destructor:apollo.localization.LocalizationStatus)
  SharedDtor();
}

void LocalizationStatus::SharedDtor() {
  if (state_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_message_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void LocalizationStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalizationStatus_descriptor_;
}

const LocalizationStatus& LocalizationStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_localization_2eproto();
  return *default_instance_;
}

LocalizationStatus* LocalizationStatus::default_instance_ = NULL;

LocalizationStatus* LocalizationStatus::New() const {
  return new LocalizationStatus;
}

void LocalizationStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LocalizationStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(fusion_status_, measurement_time_);
    if (has_header()) {
      if (header_ != NULL) header_->::apollo::common::Header::Clear();
    }
    lidar_status_ = 0;
    if (has_state_message()) {
      if (state_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalizationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.localization.LocalizationStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fusion_status;
        break;
      }

      // optional .apollo.localization.MeasureState fusion_status = 2;
      case 2: {
        if (tag == 16) {
         parse_fusion_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::MeasureState_IsValid(value)) {
            set_fusion_status(static_cast< ::apollo::localization::MeasureState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gnss_status;
        break;
      }

      // optional .apollo.localization.MeasureState gnss_status = 3 [deprecated = true];
      case 3: {
        if (tag == 24) {
         parse_gnss_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::MeasureState_IsValid(value)) {
            set_gnss_status(static_cast< ::apollo::localization::MeasureState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lidar_status;
        break;
      }

      // optional .apollo.localization.MeasureState lidar_status = 4 [deprecated = true];
      case 4: {
        if (tag == 32) {
         parse_lidar_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::localization::MeasureState_IsValid(value)) {
            set_lidar_status(static_cast< ::apollo::localization::MeasureState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_measurement_time;
        break;
      }

      // optional double measurement_time = 5;
      case 5: {
        if (tag == 41) {
         parse_measurement_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
          set_has_measurement_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_state_message;
        break;
      }

      // optional string state_message = 6;
      case 6: {
        if (tag == 50) {
         parse_state_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state_message().data(), this->state_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "state_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.localization.LocalizationStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.localization.LocalizationStatus)
  return false;
#undef DO_
}

void LocalizationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.localization.LocalizationStatus)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .apollo.localization.MeasureState fusion_status = 2;
  if (has_fusion_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->fusion_status(), output);
  }

  // optional .apollo.localization.MeasureState gnss_status = 3 [deprecated = true];
  if (has_gnss_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gnss_status(), output);
  }

  // optional .apollo.localization.MeasureState lidar_status = 4 [deprecated = true];
  if (has_lidar_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->lidar_status(), output);
  }

  // optional double measurement_time = 5;
  if (has_measurement_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->measurement_time(), output);
  }

  // optional string state_message = 6;
  if (has_state_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state_message().data(), this->state_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->state_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.localization.LocalizationStatus)
}

::google::protobuf::uint8* LocalizationStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.LocalizationStatus)
  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .apollo.localization.MeasureState fusion_status = 2;
  if (has_fusion_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->fusion_status(), target);
  }

  // optional .apollo.localization.MeasureState gnss_status = 3 [deprecated = true];
  if (has_gnss_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gnss_status(), target);
  }

  // optional .apollo.localization.MeasureState lidar_status = 4 [deprecated = true];
  if (has_lidar_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->lidar_status(), target);
  }

  // optional double measurement_time = 5;
  if (has_measurement_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->measurement_time(), target);
  }

  // optional string state_message = 6;
  if (has_state_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state_message().data(), this->state_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->state_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.LocalizationStatus)
  return target;
}

int LocalizationStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .apollo.localization.MeasureState fusion_status = 2;
    if (has_fusion_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fusion_status());
    }

    // optional .apollo.localization.MeasureState gnss_status = 3 [deprecated = true];
    if (has_gnss_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_status());
    }

    // optional .apollo.localization.MeasureState lidar_status = 4 [deprecated = true];
    if (has_lidar_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lidar_status());
    }

    // optional double measurement_time = 5;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional string state_message = 6;
    if (has_state_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalizationStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalizationStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalizationStatus::MergeFrom(const LocalizationStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (from.has_fusion_status()) {
      set_fusion_status(from.fusion_status());
    }
    if (from.has_gnss_status()) {
      set_gnss_status(from.gnss_status());
    }
    if (from.has_lidar_status()) {
      set_lidar_status(from.lidar_status());
    }
    if (from.has_measurement_time()) {
      set_measurement_time(from.measurement_time());
    }
    if (from.has_state_message()) {
      set_state_message(from.state_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalizationStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationStatus::CopyFrom(const LocalizationStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationStatus::IsInitialized() const {

  return true;
}

void LocalizationStatus::Swap(LocalizationStatus* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(fusion_status_, other->fusion_status_);
    std::swap(gnss_status_, other->gnss_status_);
    std::swap(lidar_status_, other->lidar_status_);
    std::swap(measurement_time_, other->measurement_time_);
    std::swap(state_message_, other->state_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalizationStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalizationStatus_descriptor_;
  metadata.reflection = LocalizationStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
